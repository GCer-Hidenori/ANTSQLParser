//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Hidenori\source\repos\ANTSQLParser\LibTSQL\TSqlParser.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LibTSQL {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class TSqlParser : Parser {
	public const int
		ABSENT=1, ADD=2, AES=3, ALL=4, ALLOW_CONNECTIONS=5, ALLOW_MULTIPLE_EVENT_LOSS=6, 
		ALLOW_SINGLE_EVENT_LOSS=7, ALTER=8, AND=9, ANONYMOUS=10, ANY=11, APPEND=12, 
		APPLICATION=13, AS=14, ASC=15, ASYMMETRIC=16, ASYNCHRONOUS_COMMIT=17, 
		ATOMIC=18, AUTHORIZATION=19, AUTHENTICATION=20, AUTOMATED_BACKUP_PREFERENCE=21, 
		AUTOMATIC=22, AVAILABILITY_MODE=23, BACKSLASH=24, BACKUP=25, BEFORE=26, 
		BEGIN=27, BETWEEN=28, BLOCK=29, BLOCKSIZE=30, BLOCKING_HIERARCHY=31, BREAK=32, 
		BROWSE=33, BUFFER=34, BUFFERCOUNT=35, BULK=36, BY=37, CACHE=38, CALLED=39, 
		CASCADE=40, CASE=41, CERTIFICATE=42, CHANGETABLE=43, CHANGES=44, CHECK=45, 
		CHECKPOINT=46, CHECK_POLICY=47, CHECK_EXPIRATION=48, CLASSIFIER_FUNCTION=49, 
		CLOSE=50, CLUSTER=51, CLUSTERED=52, COALESCE=53, COLLATE=54, COLUMN=55, 
		COMPRESSION=56, COMMIT=57, COMPUTE=58, CONNECTION_OPTIONS=59, CONFIGURATION=60, 
		CONSTRAINT=61, CONTAINMENT=62, CONTAINS=63, CONTAINSTABLE=64, CONTEXT=65, 
		CONTINUE=66, CONTINUE_AFTER_ERROR=67, CONTRACT=68, CONTRACT_NAME=69, CONVERSATION=70, 
		CONVERT=71, COPY_ONLY=72, CREATE=73, CROSS=74, CURRENT=75, CURRENT_DATE=76, 
		CURRENT_TIME=77, CURRENT_TIMESTAMP=78, CURRENT_USER=79, CURSOR=80, CYCLE=81, 
		DATA_COMPRESSION=82, DATA_SOURCE=83, DATABASE=84, DATABASE_MIRRORING=85, 
		DBCC=86, DEALLOCATE=87, DECLARE=88, DEFAULT=89, DEFAULT_DATABASE=90, DEFAULT_SCHEMA=91, 
		DELETE=92, DENY=93, DESC=94, DIAGNOSTICS=95, DIFFERENTIAL=96, DISK=97, 
		DISTINCT=98, DISTRIBUTED=99, DOUBLE=100, DOUBLE_BACK_SLASH=101, DOUBLE_FORWARD_SLASH=102, 
		DROP=103, DTC_SUPPORT=104, DUMP=105, ELSE=106, ENABLED=107, END=108, ENDPOINT=109, 
		ERRLVL=110, ESCAPE=111, ERROR=112, EVENT=113, EVENTDATA=114, EVENT_RETENTION_MODE=115, 
		EXCEPT=116, EXECUTABLE_FILE=117, EXECUTE=118, EXISTS=119, EXPIREDATE=120, 
		EXIT=121, EXTENSION=122, EXTERNAL=123, EXTERNAL_ACCESS=124, FAILOVER=125, 
		FAILURECONDITIONLEVEL=126, FAN_IN=127, FETCH=128, FILE=129, FILENAME=130, 
		FILLFACTOR=131, FILE_SNAPSHOT=132, FOR=133, FORCESEEK=134, FORCE_SERVICE_ALLOW_DATA_LOSS=135, 
		FOREIGN=136, FREETEXT=137, FREETEXTTABLE=138, FROM=139, FULL=140, FUNCTION=141, 
		GET=142, GOTO=143, GOVERNOR=144, GRANT=145, GROUP=146, HAVING=147, HASHED=148, 
		HEALTHCHECKTIMEOUT=149, IDENTITY=150, IDENTITYCOL=151, IDENTITY_INSERT=152, 
		IF=153, IIF=154, IN=155, INCLUDE=156, INCREMENT=157, INDEX=158, INFINITE=159, 
		INIT=160, INNER=161, INSERT=162, INSTEAD=163, INTERSECT=164, INTO=165, 
		IPV4_ADDR=166, IPV6_ADDR=167, IS=168, ISNULL=169, JOIN=170, KERBEROS=171, 
		KEY=172, KEY_PATH=173, KEY_STORE_PROVIDER_NAME=174, KILL=175, LANGUAGE=176, 
		LEFT=177, LIBRARY=178, LIFETIME=179, LIKE=180, LINENO=181, LINUX=182, 
		LISTENER_IP=183, LISTENER_PORT=184, LOAD=185, LOCAL_SERVICE_NAME=186, 
		LOG=187, MATCHED=188, MASTER=189, MAX_MEMORY=190, MAXTRANSFER=191, MAXVALUE=192, 
		MAX_DISPATCH_LATENCY=193, MAX_EVENT_SIZE=194, MAX_SIZE=195, MAX_OUTSTANDING_IO_PER_VOLUME=196, 
		MEDIADESCRIPTION=197, MEDIANAME=198, MEMBER=199, MEMORY_PARTITION_MODE=200, 
		MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT=201, MERGE=202, MESSAGE_FORWARDING=203, 
		MESSAGE_FORWARD_SIZE=204, MINVALUE=205, MIRROR=206, MUST_CHANGE=207, NATIONAL=208, 
		NATIVE_COMPILATION=209, NEGOTIATE=210, NOCHECK=211, NOFORMAT=212, NOINIT=213, 
		NONCLUSTERED=214, NONE=215, NOREWIND=216, NOSKIP=217, NOUNLOAD=218, NO_CHECKSUM=219, 
		NO_COMPRESSION=220, NO_EVENT_LOSS=221, NOT=222, NOTIFICATION=223, NTLM=224, 
		NULL=225, NULLIF=226, OF=227, OFF=228, OFFSETS=229, OLD_PASSWORD=230, 
		ON=231, ON_FAILURE=232, OPEN=233, OPENDATASOURCE=234, OPENQUERY=235, OPENROWSET=236, 
		OPENXML=237, OPTION=238, OR=239, ORDER=240, OUTER=241, OVER=242, PAGE=243, 
		PARAM_NODE=244, PARTIAL=245, PASSWORD=246, PERCENT=247, PERMISSION_SET=248, 
		PER_CPU=249, PER_DB=250, PER_NODE=251, PIVOT=252, PLAN=253, PLATFORM=254, 
		POLICY=255, PRECISION=256, PREDICATE=257, PRIMARY=258, PRINT=259, PROC=260, 
		PROCEDURE=261, PROCESS=262, PUBLIC=263, PUSHDOWN=264, PYTHON=265, R=266, 
		RAISERROR=267, RAW=268, READ=269, READTEXT=270, READ_WRITE_FILEGROUPS=271, 
		RECONFIGURE=272, REFERENCES=273, REGENERATE=274, RELATED_CONVERSATION=275, 
		RELATED_CONVERSATION_GROUP=276, REPLICATION=277, REQUIRED=278, RESET=279, 
		RESTART=280, RESTORE=281, RESTRICT=282, RESULT_SETS=283, RESUME=284, RETAINDAYS=285, 
		RETURN=286, RETURNS=287, REVERT=288, REVOKE=289, REWIND=290, RIGHT=291, 
		ROLLBACK=292, ROLE=293, ROWCOUNT=294, ROWGUIDCOL=295, RSA_512=296, RSA_1024=297, 
		RSA_2048=298, RSA_3072=299, RSA_4096=300, SAFETY=301, RULE=302, SAFE=303, 
		SAVE=304, SCHEDULER=305, SCHEMA=306, SCHEME=307, SECURITYAUDIT=308, SELECT=309, 
		SEMANTICKEYPHRASETABLE=310, SEMANTICSIMILARITYDETAILSTABLE=311, SEMANTICSIMILARITYTABLE=312, 
		SERVER=313, SERVICE=314, SERVICE_BROKER=315, SERVICE_NAME=316, SESSION=317, 
		SESSION_USER=318, SET=319, SETUSER=320, SHUTDOWN=321, SID=322, SKIP_KEYWORD=323, 
		SOFTNUMA=324, SOME=325, SOURCE=326, SPECIFICATION=327, SPLIT=328, SQLDUMPERFLAGS=329, 
		SQLDUMPERPATH=330, SQLDUMPERTIMEOUT=331, STATISTICS=332, STATE=333, STATS=334, 
		START=335, STARTED=336, STARTUP_STATE=337, STOP=338, STOPPED=339, STOP_ON_ERROR=340, 
		SUPPORTED=341, SYSTEM_USER=342, TABLE=343, TABLESAMPLE=344, TAPE=345, 
		TARGET=346, TCP=347, TEXTSIZE=348, THEN=349, TO=350, TOP=351, TRACK_CAUSALITY=352, 
		TRAN=353, TRANSACTION=354, TRANSFER=355, TRIGGER=356, TRUNCATE=357, TSEQUAL=358, 
		UNCHECKED=359, UNION=360, UNIQUE=361, UNLOCK=362, UNPIVOT=363, UNSAFE=364, 
		UPDATE=365, UPDATETEXT=366, URL=367, USE=368, USED=369, USER=370, VALUES=371, 
		VARYING=372, VERBOSELOGGING=373, VIEW=374, VISIBILITY=375, WAITFOR=376, 
		WHEN=377, WHERE=378, WHILE=379, WINDOWS=380, WITH=381, WITHIN=382, WITHOUT=383, 
		WITNESS=384, WRITETEXT=385, ABSOLUTE=386, ACCENT_SENSITIVITY=387, ACTION=388, 
		ACTIVATION=389, ACTIVE=390, ADDRESS=391, AES_128=392, AES_192=393, AES_256=394, 
		AFFINITY=395, AFTER=396, AGGREGATE=397, ALGORITHM=398, ALLOW_ENCRYPTED_VALUE_MODIFICATIONS=399, 
		ALLOW_SNAPSHOT_ISOLATION=400, ALLOWED=401, ANSI_NULL_DEFAULT=402, ANSI_NULLS=403, 
		ANSI_PADDING=404, ANSI_WARNINGS=405, APPLICATION_LOG=406, APPLY=407, ARITHABORT=408, 
		ASSEMBLY=409, AUDIT=410, AUDIT_GUID=411, AUTO=412, AUTO_CLEANUP=413, AUTO_CLOSE=414, 
		AUTO_CREATE_STATISTICS=415, AUTO_SHRINK=416, AUTO_UPDATE_STATISTICS=417, 
		AUTO_UPDATE_STATISTICS_ASYNC=418, AVAILABILITY=419, AVG=420, BACKUP_PRIORITY=421, 
		BEGIN_DIALOG=422, BIGINT=423, BINARY_BASE64=424, BINARY_CHECKSUM=425, 
		BINDING=426, BLOB_STORAGE=427, BROKER=428, BROKER_INSTANCE=429, BUCKET_COUNT=430, 
		BULK_LOGGED=431, CALLER=432, CAP_CPU_PERCENT=433, CAST=434, CATALOG=435, 
		CATCH=436, CHANGE_RETENTION=437, CHANGE_TRACKING=438, CHECKSUM=439, CHECKSUM_AGG=440, 
		CLEANUP=441, COLLECTION=442, COLUMN_MASTER_KEY=443, COMMITTED=444, COMPATIBILITY_LEVEL=445, 
		CONCAT=446, CONCAT_NULL_YIELDS_NULL=447, CONTENT=448, CONTROL=449, COOKIE=450, 
		COUNT=451, COUNT_BIG=452, COUNTER=453, CPU=454, CREATE_NEW=455, CREATION_DISPOSITION=456, 
		CREDENTIAL=457, CRYPTOGRAPHIC=458, CURSOR_CLOSE_ON_COMMIT=459, CURSOR_DEFAULT=460, 
		DATA=461, DATE_CORRELATION_OPTIMIZATION=462, DATEADD=463, DATEDIFF=464, 
		DATEFIRST=465, DATEFORMAT=466, DATENAME=467, DATEPART=468, DAYS=469, DB_CHAINING=470, 
		DB_FAILOVER=471, DECRYPTION=472, DEFAULT_DOUBLE_QUOTE=473, DEFAULT_FULLTEXT_LANGUAGE=474, 
		DEFAULT_LANGUAGE=475, DELAY=476, DELAYED_DURABILITY=477, DELETED=478, 
		DENSE_RANK=479, DEPENDENTS=480, DES=481, DESCRIPTION=482, DESX=483, DHCP=484, 
		DIALOG=485, DIRECTORY_NAME=486, DISABLE=487, DISABLE_BROKER=488, DISABLED=489, 
		DISK_DRIVE=490, DOCUMENT=491, DYNAMIC=492, ELEMENTS=493, EMERGENCY=494, 
		EMPTY=495, ENABLE=496, ENABLE_BROKER=497, ENCRYPTED_VALUE=498, ENCRYPTION=499, 
		ENDPOINT_URL=500, ERROR_BROKER_CONVERSATIONS=501, EXCLUSIVE=502, EXECUTABLE=503, 
		EXIST=504, EXPAND=505, EXPIRY_DATE=506, EXPLICIT=507, FAIL_OPERATION=508, 
		FAILOVER_MODE=509, FAILURE=510, FAILURE_CONDITION_LEVEL=511, FAST=512, 
		FAST_FORWARD=513, FILEGROUP=514, FILEGROWTH=515, FILEPATH=516, FILESTREAM=517, 
		FILTER=518, FIRST=519, FIRST_VALUE=520, FOLLOWING=521, FORCE=522, FORCE_FAILOVER_ALLOW_DATA_LOSS=523, 
		FORCED=524, FORMAT=525, FORWARD_ONLY=526, FULLSCAN=527, FULLTEXT=528, 
		GB=529, GETDATE=530, GETUTCDATE=531, GLOBAL=532, GO=533, GROUP_MAX_REQUESTS=534, 
		GROUPING=535, GROUPING_ID=536, HADOOP=537, HADR=538, HASH=539, HEALTH_CHECK_TIMEOUT=540, 
		HIGH=541, HONOR_BROKER_PRIORITY=542, HOURS=543, IDENTITY_VALUE=544, IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX=545, 
		IMMEDIATE=546, IMPERSONATE=547, IMPORTANCE=548, INCLUDE_NULL_VALUES=549, 
		INCREMENTAL=550, INITIATOR=551, INPUT=552, INSENSITIVE=553, INSERTED=554, 
		INT=555, IP=556, ISOLATION=557, JOB=558, JSON=559, KB=560, KEEP=561, KEEPFIXED=562, 
		KEY_SOURCE=563, KEYS=564, KEYSET=565, LAG=566, LAST=567, LAST_VALUE=568, 
		LEAD=569, LEVEL=570, LIST=571, LISTENER=572, LISTENER_URL=573, LOB_COMPACTION=574, 
		LOCAL=575, LOCATION=576, LOCK=577, LOCK_ESCALATION=578, LOGIN=579, LOOP=580, 
		LOW=581, MANUAL=582, MARK=583, MATERIALIZED=584, MAX=585, MAX_CPU_PERCENT=586, 
		MAX_DOP=587, MAX_FILES=588, MAX_IOPS_PER_VOLUME=589, MAX_MEMORY_PERCENT=590, 
		MAX_PROCESSES=591, MAX_QUEUE_READERS=592, MAX_ROLLOVER_FILES=593, MAXDOP=594, 
		MAXRECURSION=595, MAXSIZE=596, MB=597, MEDIUM=598, MEMORY_OPTIMIZED_DATA=599, 
		MESSAGE=600, MIN=601, MIN_ACTIVE_ROWVERSION=602, MIN_CPU_PERCENT=603, 
		MIN_IOPS_PER_VOLUME=604, MIN_MEMORY_PERCENT=605, MINUTES=606, MIRROR_ADDRESS=607, 
		MIXED_PAGE_ALLOCATION=608, MODE=609, MODIFY=610, MOVE=611, MULTI_USER=612, 
		NAME=613, NESTED_TRIGGERS=614, NEW_ACCOUNT=615, NEW_BROKER=616, NEW_PASSWORD=617, 
		NEXT=618, NO=619, NO_TRUNCATE=620, NO_WAIT=621, NOCOUNT=622, NODES=623, 
		NOEXPAND=624, NON_TRANSACTED_ACCESS=625, NORECOMPUTE=626, NORECOVERY=627, 
		NOWAIT=628, NTILE=629, NUMANODE=630, NUMBER=631, NUMERIC_ROUNDABORT=632, 
		OBJECT=633, OFFLINE=634, OFFSET=635, OLD_ACCOUNT=636, ONLINE=637, ONLY=638, 
		OPEN_EXISTING=639, OPTIMISTIC=640, OPTIMIZE=641, OUT=642, OUTPUT=643, 
		OVERRIDE=644, OWNER=645, PAGE_VERIFY=646, PARAMETERIZATION=647, PARTITION=648, 
		PARTITIONS=649, PARTNER=650, PATH=651, POISON_MESSAGE_HANDLING=652, POOL=653, 
		PORT=654, PRECEDING=655, PRIMARY_ROLE=656, PRIOR=657, PRIORITY=658, PRIORITY_LEVEL=659, 
		PRIVATE=660, PRIVATE_KEY=661, PRIVILEGES=662, PROCEDURE_NAME=663, PROPERTY=664, 
		PROVIDER=665, PROVIDER_KEY_NAME=666, QUERY=667, QUEUE=668, QUEUE_DELAY=669, 
		QUOTED_IDENTIFIER=670, RANGE=671, RANK=672, RC2=673, RC4=674, RC4_128=675, 
		READ_COMMITTED_SNAPSHOT=676, READ_ONLY=677, READ_ONLY_ROUTING_LIST=678, 
		READ_WRITE=679, READONLY=680, REBUILD=681, RECEIVE=682, RECOMPILE=683, 
		RECOVERY=684, RECURSIVE_TRIGGERS=685, RELATIVE=686, REMOTE=687, REMOTE_SERVICE_NAME=688, 
		REMOVE=689, REORGANIZE=690, REPEATABLE=691, REPLICA=692, REQUEST_MAX_CPU_TIME_SEC=693, 
		REQUEST_MAX_MEMORY_GRANT_PERCENT=694, REQUEST_MEMORY_GRANT_TIMEOUT_SEC=695, 
		REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT=696, RESERVE_DISK_SPACE=697, 
		RESOURCE=698, RESOURCE_MANAGER_LOCATION=699, RESTRICTED_USER=700, RETENTION=701, 
		ROBUST=702, ROOT=703, ROUTE=704, ROW=705, ROW_NUMBER=706, ROWGUID=707, 
		ROWS=708, SAMPLE=709, SCHEMABINDING=710, SCOPED=711, SCROLL=712, SCROLL_LOCKS=713, 
		SEARCH=714, SECONDARY=715, SECONDARY_ONLY=716, SECONDARY_ROLE=717, SECONDS=718, 
		SECRET=719, SECURITY=720, SECURITY_LOG=721, SEEDING_MODE=722, SELF=723, 
		SEMI_SENSITIVE=724, SEND=725, SENT=726, SEQUENCE=727, SERIALIZABLE=728, 
		SESSION_TIMEOUT=729, SETERROR=730, SHARE=731, SHOWPLAN=732, SIGNATURE=733, 
		SIMPLE=734, SINGLE_USER=735, SIZE=736, SMALLINT=737, SNAPSHOT=738, SPATIAL_WINDOW_MAX_CELLS=739, 
		STANDBY=740, START_DATE=741, STATIC=742, STATS_STREAM=743, STATUS=744, 
		STATUSONLY=745, STDEV=746, STDEVP=747, STOPLIST=748, STRING_AGG=749, STUFF=750, 
		SUBJECT=751, SUBSCRIPTION=752, SUM=753, SUSPEND=754, SYMMETRIC=755, SYNCHRONOUS_COMMIT=756, 
		SYNONYM=757, SYSTEM=758, TAKE=759, TARGET_RECOVERY_TIME=760, TB=761, TEXTIMAGE_ON=762, 
		THROW=763, TIES=764, TIME=765, TIMEOUT=766, TIMER=767, TINYINT=768, TORN_PAGE_DETECTION=769, 
		TRANSFORM_NOISE_WORDS=770, TRIPLE_DES=771, TRIPLE_DES_3KEY=772, TRUSTWORTHY=773, 
		TRY=774, TSQL=775, TWO_DIGIT_YEAR_CUTOFF=776, TYPE=777, TYPE_WARNING=778, 
		UNBOUNDED=779, UNCOMMITTED=780, UNDEFINED=781, UNKNOWN=782, UNLIMITED=783, 
		UOW=784, USING=785, VALID_XML=786, VALIDATION=787, VALUE=788, VAR=789, 
		VARP=790, VIEW_METADATA=791, VIEWS=792, WAIT=793, WELL_FORMED_XML=794, 
		WITHOUT_ARRAY_WRAPPER=795, WORK=796, WORKLOAD=797, XML=798, XMLDATA=799, 
		XMLNAMESPACES=800, XMLSCHEMA=801, XSINIL=802, DOLLAR_ACTION=803, SPACE=804, 
		COMMENT=805, LINE_COMMENT=806, DOUBLE_QUOTE_ID=807, SINGLE_QUOTE=808, 
		SQUARE_BRACKET_ID=809, LOCAL_ID=810, DECIMAL=811, ID=812, QUOTED_URL=813, 
		QUOTED_HOST_AND_PORT=814, STRING=815, BINARY=816, FLOAT=817, REAL=818, 
		EQUAL=819, GREATER=820, LESS=821, EXCLAMATION=822, PLUS_ASSIGN=823, MINUS_ASSIGN=824, 
		MULT_ASSIGN=825, DIV_ASSIGN=826, MOD_ASSIGN=827, AND_ASSIGN=828, XOR_ASSIGN=829, 
		OR_ASSIGN=830, DOUBLE_BAR=831, DOT=832, UNDERLINE=833, AT=834, SHARP=835, 
		DOLLAR=836, LR_BRACKET=837, RR_BRACKET=838, COMMA=839, SEMI=840, COLON=841, 
		STAR=842, DIVIDE=843, MODULE=844, PLUS=845, MINUS=846, BIT_NOT=847, BIT_OR=848, 
		BIT_AND=849, BIT_XOR=850, MDY=851, DMY=852, YMD=853, YDM=854, MYD=855, 
		DYM=856, IPV4_OCTECT=857;
	public const int
		RULE_tsql_file = 0, RULE_batch = 1, RULE_sql_clauses = 2, RULE_sql_clause = 3, 
		RULE_dml_clause = 4, RULE_ddl_clause = 5, RULE_backup_statement = 6, RULE_cfl_statement = 7, 
		RULE_block_statement = 8, RULE_break_statement = 9, RULE_continue_statement = 10, 
		RULE_goto_statement = 11, RULE_return_statement = 12, RULE_if_statement = 13, 
		RULE_throw_statement = 14, RULE_throw_error_number = 15, RULE_throw_message = 16, 
		RULE_throw_state = 17, RULE_try_catch_statement = 18, RULE_waitfor_statement = 19, 
		RULE_while_statement = 20, RULE_print_statement = 21, RULE_raiseerror_statement = 22, 
		RULE_empty_statement = 23, RULE_another_statement = 24, RULE_alter_application_role = 25, 
		RULE_create_application_role = 26, RULE_drop_aggregate = 27, RULE_drop_application_role = 28, 
		RULE_alter_assembly = 29, RULE_alter_assembly_start = 30, RULE_alter_assembly_clause = 31, 
		RULE_alter_assembly_from_clause = 32, RULE_alter_assembly_from_clause_start = 33, 
		RULE_alter_assembly_drop_clause = 34, RULE_alter_assembly_drop_multiple_files = 35, 
		RULE_alter_assembly_drop = 36, RULE_alter_assembly_add_clause = 37, RULE_alter_asssembly_add_clause_start = 38, 
		RULE_alter_assembly_client_file_clause = 39, RULE_alter_assembly_file_name = 40, 
		RULE_alter_assembly_file_bits = 41, RULE_alter_assembly_as = 42, RULE_alter_assembly_with_clause = 43, 
		RULE_alter_assembly_with = 44, RULE_client_assembly_specifier = 45, RULE_assembly_option = 46, 
		RULE_network_file_share = 47, RULE_network_computer = 48, RULE_network_file_start = 49, 
		RULE_file_path = 50, RULE_file_directory_path_separator = 51, RULE_local_file = 52, 
		RULE_local_drive = 53, RULE_multiple_local_files = 54, RULE_multiple_local_file_start = 55, 
		RULE_create_assembly = 56, RULE_drop_assembly = 57, RULE_alter_asymmetric_key = 58, 
		RULE_alter_asymmetric_key_start = 59, RULE_asymmetric_key_option = 60, 
		RULE_asymmetric_key_option_start = 61, RULE_asymmetric_key_password_change_option = 62, 
		RULE_create_asymmetric_key = 63, RULE_drop_asymmetric_key = 64, RULE_alter_authorization = 65, 
		RULE_authorization_grantee = 66, RULE_entity_to = 67, RULE_colon_colon = 68, 
		RULE_alter_authorization_start = 69, RULE_alter_authorization_for_sql_database = 70, 
		RULE_alter_authorization_for_azure_dw = 71, RULE_alter_authorization_for_parallel_dw = 72, 
		RULE_class_type = 73, RULE_class_type_for_sql_database = 74, RULE_class_type_for_azure_dw = 75, 
		RULE_class_type_for_parallel_dw = 76, RULE_drop_availability_group = 77, 
		RULE_alter_availability_group = 78, RULE_alter_availability_group_start = 79, 
		RULE_alter_availability_group_options = 80, RULE_create_or_alter_broker_priority = 81, 
		RULE_drop_broker_priority = 82, RULE_alter_certificate = 83, RULE_alter_column_encryption_key = 84, 
		RULE_create_column_encryption_key = 85, RULE_drop_certificate = 86, RULE_drop_column_encryption_key = 87, 
		RULE_drop_column_master_key = 88, RULE_drop_contract = 89, RULE_drop_credential = 90, 
		RULE_drop_cryptograhic_provider = 91, RULE_drop_database = 92, RULE_drop_database_audit_specification = 93, 
		RULE_drop_database_scoped_credential = 94, RULE_drop_default = 95, RULE_drop_endpoint = 96, 
		RULE_drop_external_data_source = 97, RULE_drop_external_file_format = 98, 
		RULE_drop_external_library = 99, RULE_drop_external_resource_pool = 100, 
		RULE_drop_external_table = 101, RULE_drop_event_notifications = 102, RULE_drop_event_session = 103, 
		RULE_drop_fulltext_catalog = 104, RULE_drop_fulltext_index = 105, RULE_drop_fulltext_stoplist = 106, 
		RULE_drop_login = 107, RULE_drop_master_key = 108, RULE_drop_message_type = 109, 
		RULE_drop_partition_function = 110, RULE_drop_partition_scheme = 111, 
		RULE_drop_queue = 112, RULE_drop_remote_service_binding = 113, RULE_drop_resource_pool = 114, 
		RULE_drop_db_role = 115, RULE_drop_route = 116, RULE_drop_rule = 117, 
		RULE_drop_schema = 118, RULE_drop_search_property_list = 119, RULE_drop_security_policy = 120, 
		RULE_drop_sequence = 121, RULE_drop_server_audit = 122, RULE_drop_server_audit_specification = 123, 
		RULE_drop_server_role = 124, RULE_drop_service = 125, RULE_drop_signature = 126, 
		RULE_drop_statistics_name_azure_dw_and_pdw = 127, RULE_drop_symmetric_key = 128, 
		RULE_drop_synonym = 129, RULE_drop_user = 130, RULE_drop_workload_group = 131, 
		RULE_drop_xml_schema_collection = 132, RULE_disable_trigger = 133, RULE_enable_trigger = 134, 
		RULE_lock_table = 135, RULE_truncate_table = 136, RULE_create_column_master_key = 137, 
		RULE_alter_credential = 138, RULE_create_credential = 139, RULE_create_database_scoped_credential = 140, 
		RULE_alter_cryptographic_provider = 141, RULE_create_cryptographic_provider = 142, 
		RULE_create_event_notification = 143, RULE_create_or_alter_event_session = 144, 
		RULE_event_session_predicate_expression = 145, RULE_event_session_predicate_factor = 146, 
		RULE_event_session_predicate_leaf = 147, RULE_create_external_data_source = 148, 
		RULE_alter_external_data_source = 149, RULE_alter_external_library = 150, 
		RULE_create_external_library = 151, RULE_alter_external_resource_pool = 152, 
		RULE_create_external_resource_pool = 153, RULE_alter_fulltext_catalog = 154, 
		RULE_create_fulltext_catalog = 155, RULE_alter_fulltext_stoplist = 156, 
		RULE_create_fulltext_stoplist = 157, RULE_alter_login_sql_server = 158, 
		RULE_create_login_sql_server = 159, RULE_alter_login_azure_sql = 160, 
		RULE_create_login_azure_sql = 161, RULE_alter_login_azure_sql_dw_and_pdw = 162, 
		RULE_create_login_pdw = 163, RULE_alter_master_key_sql_server = 164, RULE_create_master_key_sql_server = 165, 
		RULE_alter_master_key_azure_sql = 166, RULE_create_master_key_azure_sql = 167, 
		RULE_alter_message_type = 168, RULE_alter_partition_function = 169, RULE_alter_partition_scheme = 170, 
		RULE_alter_remote_service_binding = 171, RULE_create_remote_service_binding = 172, 
		RULE_create_resource_pool = 173, RULE_alter_resource_governor = 174, RULE_alter_db_role = 175, 
		RULE_create_db_role = 176, RULE_create_route = 177, RULE_create_rule = 178, 
		RULE_alter_schema_sql = 179, RULE_create_schema = 180, RULE_create_schema_azure_sql_dw_and_pdw = 181, 
		RULE_alter_schema_azure_sql_dw_and_pdw = 182, RULE_create_search_property_list = 183, 
		RULE_create_security_policy = 184, RULE_alter_sequence = 185, RULE_create_sequence = 186, 
		RULE_alter_server_audit = 187, RULE_create_server_audit = 188, RULE_alter_server_audit_specification = 189, 
		RULE_create_server_audit_specification = 190, RULE_alter_server_configuration = 191, 
		RULE_alter_server_role = 192, RULE_create_server_role = 193, RULE_alter_server_role_pdw = 194, 
		RULE_alter_service = 195, RULE_create_service = 196, RULE_alter_service_master_key = 197, 
		RULE_alter_symmetric_key = 198, RULE_create_symmetric_key = 199, RULE_create_synonym = 200, 
		RULE_alter_user = 201, RULE_create_user = 202, RULE_create_user_azure_sql_dw = 203, 
		RULE_alter_user_azure_sql = 204, RULE_alter_workload_group = 205, RULE_create_workload_group = 206, 
		RULE_create_xml_schema_collection = 207, RULE_create_queue = 208, RULE_queue_settings = 209, 
		RULE_alter_queue = 210, RULE_queue_action = 211, RULE_queue_rebuild_options = 212, 
		RULE_create_contract = 213, RULE_conversation_statement = 214, RULE_message_statement = 215, 
		RULE_merge_statement = 216, RULE_merge_matched = 217, RULE_merge_not_matched = 218, 
		RULE_delete_statement = 219, RULE_delete_statement_from = 220, RULE_insert_statement = 221, 
		RULE_insert_statement_value = 222, RULE_receive_statement = 223, RULE_select_statement = 224, 
		RULE_time = 225, RULE_update_statement = 226, RULE_output_clause = 227, 
		RULE_output_with_into = 228, RULE_output_without_into = 229, RULE_output_dml_list_elem = 230, 
		RULE_output_column_name = 231, RULE_create_database = 232, RULE_create_index = 233, 
		RULE_create_or_alter_procedure = 234, RULE_atomic_block = 235, RULE_atomic_block_option = 236, 
		RULE_create_or_alter_trigger = 237, RULE_create_or_alter_dml_trigger = 238, 
		RULE_dml_trigger_option = 239, RULE_dml_trigger_operation = 240, RULE_create_or_alter_ddl_trigger = 241, 
		RULE_ddl_trigger_operation = 242, RULE_create_or_alter_function = 243, 
		RULE_func_body_returns_select = 244, RULE_func_body_returns_table = 245, 
		RULE_func_body_returns_scalar = 246, RULE_procedure_param = 247, RULE_procedure_option = 248, 
		RULE_function_option = 249, RULE_create_statistics = 250, RULE_update_statistics = 251, 
		RULE_create_table = 252, RULE_table_options = 253, RULE_table_index = 254, 
		RULE_create_view = 255, RULE_view_attribute = 256, RULE_alter_table = 257, 
		RULE_alter_database = 258, RULE_database_optionspec = 259, RULE_auto_option = 260, 
		RULE_change_tracking_option = 261, RULE_change_tracking_option_list = 262, 
		RULE_containment_option = 263, RULE_cursor_option = 264, RULE_alter_endpoint = 265, 
		RULE_database_mirroring_option = 266, RULE_mirroring_set_option = 267, 
		RULE_mirroring_partner = 268, RULE_mirroring_witness = 269, RULE_witness_partner_equal = 270, 
		RULE_partner_option = 271, RULE_witness_option = 272, RULE_witness_server = 273, 
		RULE_partner_server = 274, RULE_mirroring_host_port_seperator = 275, RULE_partner_server_tcp_prefix = 276, 
		RULE_port_number = 277, RULE_host = 278, RULE_date_correlation_optimization_option = 279, 
		RULE_db_encryption_option = 280, RULE_db_state_option = 281, RULE_db_update_option = 282, 
		RULE_db_user_access_option = 283, RULE_delayed_durability_option = 284, 
		RULE_external_access_option = 285, RULE_hadr_options = 286, RULE_mixed_page_allocation_option = 287, 
		RULE_parameterization_option = 288, RULE_recovery_option = 289, RULE_service_broker_option = 290, 
		RULE_snapshot_option = 291, RULE_sql_option = 292, RULE_target_recovery_time_option = 293, 
		RULE_termination = 294, RULE_drop_index = 295, RULE_drop_relational_or_xml_or_spatial_index = 296, 
		RULE_drop_backward_compatible_index = 297, RULE_drop_procedure = 298, 
		RULE_drop_trigger = 299, RULE_drop_dml_trigger = 300, RULE_drop_ddl_trigger = 301, 
		RULE_drop_function = 302, RULE_drop_statistics = 303, RULE_drop_table = 304, 
		RULE_drop_view = 305, RULE_create_type = 306, RULE_drop_type = 307, RULE_rowset_function_limited = 308, 
		RULE_openquery = 309, RULE_opendatasource = 310, RULE_declare_statement = 311, 
		RULE_cursor_statement = 312, RULE_backup_database = 313, RULE_backup_log = 314, 
		RULE_backup_certificate = 315, RULE_backup_master_key = 316, RULE_backup_service_master_key = 317, 
		RULE_kill_statement = 318, RULE_kill_process = 319, RULE_kill_query_notification = 320, 
		RULE_kill_stats_job = 321, RULE_execute_statement = 322, RULE_execute_body = 323, 
		RULE_execute_statement_arg = 324, RULE_execute_var_string = 325, RULE_execute_option = 326, 
		RULE_execute_option_columns_def = 327, RULE_execute_option_column_definition = 328, 
		RULE_security_statement = 329, RULE_create_certificate = 330, RULE_existing_keys = 331, 
		RULE_private_key_options = 332, RULE_generate_new_keys = 333, RULE_date_options = 334, 
		RULE_open_key = 335, RULE_close_key = 336, RULE_create_key = 337, RULE_key_options = 338, 
		RULE_algorithm = 339, RULE_encryption_mechanism = 340, RULE_decryption_mechanism = 341, 
		RULE_grant_permission = 342, RULE_set_statement = 343, RULE_transaction_statement = 344, 
		RULE_go_statement = 345, RULE_use_statement = 346, RULE_setuser_statement = 347, 
		RULE_reconfigure_statement = 348, RULE_shutdown_statement = 349, RULE_dbcc_clause = 350, 
		RULE_dbcc_options = 351, RULE_execute_clause = 352, RULE_declare_local = 353, 
		RULE_table_type_definition = 354, RULE_xml_type_definition = 355, RULE_xml_schema_collection = 356, 
		RULE_column_def_table_constraints = 357, RULE_column_def_table_constraint = 358, 
		RULE_column_def_table_constraints_index = 359, RULE_column_def_table_constraint_index = 360, 
		RULE_column_definition = 361, RULE_materialized_column_definition = 362, 
		RULE_column_constraint = 363, RULE_table_constraint = 364, RULE_on_delete = 365, 
		RULE_on_update = 366, RULE_index_options = 367, RULE_index_option = 368, 
		RULE_declare_cursor = 369, RULE_declare_set_cursor_common = 370, RULE_declare_set_cursor_common_partial = 371, 
		RULE_fetch_cursor = 372, RULE_set_special = 373, RULE_constant_LOCAL_ID = 374, 
		RULE_expression = 375, RULE_primitive_expression = 376, RULE_case_expression = 377, 
		RULE_unary_operator_expression = 378, RULE_bracket_expression = 379, RULE_constant_expression = 380, 
		RULE_subquery = 381, RULE_with_expression = 382, RULE_common_table_expression = 383, 
		RULE_update_elem = 384, RULE_search_condition_list = 385, RULE_search_condition = 386, 
		RULE_search_condition_and = 387, RULE_search_condition_not = 388, RULE_predicate = 389, 
		RULE_query_expression = 390, RULE_sql_union = 391, RULE_query_specification = 392, 
		RULE_top_clause = 393, RULE_top_percent = 394, RULE_top_count = 395, RULE_order_by_clause = 396, 
		RULE_for_clause = 397, RULE_xml_common_directives = 398, RULE_order_by_expression = 399, 
		RULE_group_by_item = 400, RULE_option_clause = 401, RULE_option = 402, 
		RULE_optimize_for_arg = 403, RULE_select_list = 404, RULE_udt_method_arguments = 405, 
		RULE_asterisk = 406, RULE_column_elem = 407, RULE_udt_elem = 408, RULE_expression_elem = 409, 
		RULE_select_list_elem = 410, RULE_table_sources = 411, RULE_table_source = 412, 
		RULE_table_source_item_joined = 413, RULE_table_source_item = 414, RULE_tablesample_clause = 415, 
		RULE_open_xml = 416, RULE_schema_declaration = 417, RULE_column_declaration = 418, 
		RULE_change_table = 419, RULE_join_part = 420, RULE_pivot_clause = 421, 
		RULE_unpivot_clause = 422, RULE_full_column_name_list = 423, RULE_table_name_with_hint = 424, 
		RULE_rowset_function = 425, RULE_bulk_option = 426, RULE_derived_table = 427, 
		RULE_function_call = 428, RULE_xml_data_type_methods = 429, RULE_value_method = 430, 
		RULE_query_method = 431, RULE_exist_method = 432, RULE_modify_method = 433, 
		RULE_nodes_method = 434, RULE_switch_section = 435, RULE_switch_search_condition_section = 436, 
		RULE_as_column_alias = 437, RULE_as_table_alias = 438, RULE_table_alias = 439, 
		RULE_with_table_hints = 440, RULE_insert_with_table_hints = 441, RULE_table_hint = 442, 
		RULE_index_value = 443, RULE_column_alias_list = 444, RULE_column_alias = 445, 
		RULE_table_value_constructor = 446, RULE_expression_list = 447, RULE_ranking_windowed_function = 448, 
		RULE_aggregate_windowed_function = 449, RULE_analytic_windowed_function = 450, 
		RULE_all_distinct_expression = 451, RULE_over_clause = 452, RULE_row_or_range_clause = 453, 
		RULE_window_frame_extent = 454, RULE_window_frame_bound = 455, RULE_window_frame_preceding = 456, 
		RULE_window_frame_following = 457, RULE_create_database_option = 458, 
		RULE_database_filestream_option = 459, RULE_database_file_spec = 460, 
		RULE_file_group = 461, RULE_file_spec = 462, RULE_entity_name = 463, RULE_entity_name_for_azure_dw = 464, 
		RULE_entity_name_for_parallel_dw = 465, RULE_schema_object_name = 466, 
		RULE_server_name = 467, RULE_table_name = 468, RULE_database_name = 469, 
		RULE_schema_name = 470, RULE_simple_name = 471, RULE_func_proc_name_schema = 472, 
		RULE_func_proc_name_database_schema = 473, RULE_func_proc_name_server_database_schema = 474, 
		RULE_ddl_object = 475, RULE_full_column_name = 476, RULE_column_name_list_with_order = 477, 
		RULE_column_name_list = 478, RULE_cursor_name = 479, RULE_on_off = 480, 
		RULE_clustered = 481, RULE_null_notnull = 482, RULE_null_or_default = 483, 
		RULE_scalar_function_name = 484, RULE_begin_conversation_timer = 485, 
		RULE_begin_conversation_dialog = 486, RULE_contract_name = 487, RULE_service_name = 488, 
		RULE_end_conversation = 489, RULE_get_conversation = 490, RULE_queue_id = 491, 
		RULE_send_conversation = 492, RULE_data_type = 493, RULE_default_value = 494, 
		RULE_constant = 495, RULE_sign = 496, RULE_id = 497, RULE_simple_id = 498, 
		RULE_comparison_operator = 499, RULE_assignment_operator = 500, RULE_file_size = 501;
	public static readonly string[] ruleNames = {
		"tsql_file", "batch", "sql_clauses", "sql_clause", "dml_clause", "ddl_clause", 
		"backup_statement", "cfl_statement", "block_statement", "break_statement", 
		"continue_statement", "goto_statement", "return_statement", "if_statement", 
		"throw_statement", "throw_error_number", "throw_message", "throw_state", 
		"try_catch_statement", "waitfor_statement", "while_statement", "print_statement", 
		"raiseerror_statement", "empty_statement", "another_statement", "alter_application_role", 
		"create_application_role", "drop_aggregate", "drop_application_role", 
		"alter_assembly", "alter_assembly_start", "alter_assembly_clause", "alter_assembly_from_clause", 
		"alter_assembly_from_clause_start", "alter_assembly_drop_clause", "alter_assembly_drop_multiple_files", 
		"alter_assembly_drop", "alter_assembly_add_clause", "alter_asssembly_add_clause_start", 
		"alter_assembly_client_file_clause", "alter_assembly_file_name", "alter_assembly_file_bits", 
		"alter_assembly_as", "alter_assembly_with_clause", "alter_assembly_with", 
		"client_assembly_specifier", "assembly_option", "network_file_share", 
		"network_computer", "network_file_start", "file_path", "file_directory_path_separator", 
		"local_file", "local_drive", "multiple_local_files", "multiple_local_file_start", 
		"create_assembly", "drop_assembly", "alter_asymmetric_key", "alter_asymmetric_key_start", 
		"asymmetric_key_option", "asymmetric_key_option_start", "asymmetric_key_password_change_option", 
		"create_asymmetric_key", "drop_asymmetric_key", "alter_authorization", 
		"authorization_grantee", "entity_to", "colon_colon", "alter_authorization_start", 
		"alter_authorization_for_sql_database", "alter_authorization_for_azure_dw", 
		"alter_authorization_for_parallel_dw", "class_type", "class_type_for_sql_database", 
		"class_type_for_azure_dw", "class_type_for_parallel_dw", "drop_availability_group", 
		"alter_availability_group", "alter_availability_group_start", "alter_availability_group_options", 
		"create_or_alter_broker_priority", "drop_broker_priority", "alter_certificate", 
		"alter_column_encryption_key", "create_column_encryption_key", "drop_certificate", 
		"drop_column_encryption_key", "drop_column_master_key", "drop_contract", 
		"drop_credential", "drop_cryptograhic_provider", "drop_database", "drop_database_audit_specification", 
		"drop_database_scoped_credential", "drop_default", "drop_endpoint", "drop_external_data_source", 
		"drop_external_file_format", "drop_external_library", "drop_external_resource_pool", 
		"drop_external_table", "drop_event_notifications", "drop_event_session", 
		"drop_fulltext_catalog", "drop_fulltext_index", "drop_fulltext_stoplist", 
		"drop_login", "drop_master_key", "drop_message_type", "drop_partition_function", 
		"drop_partition_scheme", "drop_queue", "drop_remote_service_binding", 
		"drop_resource_pool", "drop_db_role", "drop_route", "drop_rule", "drop_schema", 
		"drop_search_property_list", "drop_security_policy", "drop_sequence", 
		"drop_server_audit", "drop_server_audit_specification", "drop_server_role", 
		"drop_service", "drop_signature", "drop_statistics_name_azure_dw_and_pdw", 
		"drop_symmetric_key", "drop_synonym", "drop_user", "drop_workload_group", 
		"drop_xml_schema_collection", "disable_trigger", "enable_trigger", "lock_table", 
		"truncate_table", "create_column_master_key", "alter_credential", "create_credential", 
		"create_database_scoped_credential", "alter_cryptographic_provider", "create_cryptographic_provider", 
		"create_event_notification", "create_or_alter_event_session", "event_session_predicate_expression", 
		"event_session_predicate_factor", "event_session_predicate_leaf", "create_external_data_source", 
		"alter_external_data_source", "alter_external_library", "create_external_library", 
		"alter_external_resource_pool", "create_external_resource_pool", "alter_fulltext_catalog", 
		"create_fulltext_catalog", "alter_fulltext_stoplist", "create_fulltext_stoplist", 
		"alter_login_sql_server", "create_login_sql_server", "alter_login_azure_sql", 
		"create_login_azure_sql", "alter_login_azure_sql_dw_and_pdw", "create_login_pdw", 
		"alter_master_key_sql_server", "create_master_key_sql_server", "alter_master_key_azure_sql", 
		"create_master_key_azure_sql", "alter_message_type", "alter_partition_function", 
		"alter_partition_scheme", "alter_remote_service_binding", "create_remote_service_binding", 
		"create_resource_pool", "alter_resource_governor", "alter_db_role", "create_db_role", 
		"create_route", "create_rule", "alter_schema_sql", "create_schema", "create_schema_azure_sql_dw_and_pdw", 
		"alter_schema_azure_sql_dw_and_pdw", "create_search_property_list", "create_security_policy", 
		"alter_sequence", "create_sequence", "alter_server_audit", "create_server_audit", 
		"alter_server_audit_specification", "create_server_audit_specification", 
		"alter_server_configuration", "alter_server_role", "create_server_role", 
		"alter_server_role_pdw", "alter_service", "create_service", "alter_service_master_key", 
		"alter_symmetric_key", "create_symmetric_key", "create_synonym", "alter_user", 
		"create_user", "create_user_azure_sql_dw", "alter_user_azure_sql", "alter_workload_group", 
		"create_workload_group", "create_xml_schema_collection", "create_queue", 
		"queue_settings", "alter_queue", "queue_action", "queue_rebuild_options", 
		"create_contract", "conversation_statement", "message_statement", "merge_statement", 
		"merge_matched", "merge_not_matched", "delete_statement", "delete_statement_from", 
		"insert_statement", "insert_statement_value", "receive_statement", "select_statement", 
		"time", "update_statement", "output_clause", "output_with_into", "output_without_into", 
		"output_dml_list_elem", "output_column_name", "create_database", "create_index", 
		"create_or_alter_procedure", "atomic_block", "atomic_block_option", "create_or_alter_trigger", 
		"create_or_alter_dml_trigger", "dml_trigger_option", "dml_trigger_operation", 
		"create_or_alter_ddl_trigger", "ddl_trigger_operation", "create_or_alter_function", 
		"func_body_returns_select", "func_body_returns_table", "func_body_returns_scalar", 
		"procedure_param", "procedure_option", "function_option", "create_statistics", 
		"update_statistics", "create_table", "table_options", "table_index", "create_view", 
		"view_attribute", "alter_table", "alter_database", "database_optionspec", 
		"auto_option", "change_tracking_option", "change_tracking_option_list", 
		"containment_option", "cursor_option", "alter_endpoint", "database_mirroring_option", 
		"mirroring_set_option", "mirroring_partner", "mirroring_witness", "witness_partner_equal", 
		"partner_option", "witness_option", "witness_server", "partner_server", 
		"mirroring_host_port_seperator", "partner_server_tcp_prefix", "port_number", 
		"host", "date_correlation_optimization_option", "db_encryption_option", 
		"db_state_option", "db_update_option", "db_user_access_option", "delayed_durability_option", 
		"external_access_option", "hadr_options", "mixed_page_allocation_option", 
		"parameterization_option", "recovery_option", "service_broker_option", 
		"snapshot_option", "sql_option", "target_recovery_time_option", "termination", 
		"drop_index", "drop_relational_or_xml_or_spatial_index", "drop_backward_compatible_index", 
		"drop_procedure", "drop_trigger", "drop_dml_trigger", "drop_ddl_trigger", 
		"drop_function", "drop_statistics", "drop_table", "drop_view", "create_type", 
		"drop_type", "rowset_function_limited", "openquery", "opendatasource", 
		"declare_statement", "cursor_statement", "backup_database", "backup_log", 
		"backup_certificate", "backup_master_key", "backup_service_master_key", 
		"kill_statement", "kill_process", "kill_query_notification", "kill_stats_job", 
		"execute_statement", "execute_body", "execute_statement_arg", "execute_var_string", 
		"execute_option", "execute_option_columns_def", "execute_option_column_definition", 
		"security_statement", "create_certificate", "existing_keys", "private_key_options", 
		"generate_new_keys", "date_options", "open_key", "close_key", "create_key", 
		"key_options", "algorithm", "encryption_mechanism", "decryption_mechanism", 
		"grant_permission", "set_statement", "transaction_statement", "go_statement", 
		"use_statement", "setuser_statement", "reconfigure_statement", "shutdown_statement", 
		"dbcc_clause", "dbcc_options", "execute_clause", "declare_local", "table_type_definition", 
		"xml_type_definition", "xml_schema_collection", "column_def_table_constraints", 
		"column_def_table_constraint", "column_def_table_constraints_index", "column_def_table_constraint_index", 
		"column_definition", "materialized_column_definition", "column_constraint", 
		"table_constraint", "on_delete", "on_update", "index_options", "index_option", 
		"declare_cursor", "declare_set_cursor_common", "declare_set_cursor_common_partial", 
		"fetch_cursor", "set_special", "constant_LOCAL_ID", "expression", "primitive_expression", 
		"case_expression", "unary_operator_expression", "bracket_expression", 
		"constant_expression", "subquery", "with_expression", "common_table_expression", 
		"update_elem", "search_condition_list", "search_condition", "search_condition_and", 
		"search_condition_not", "predicate", "query_expression", "sql_union", 
		"query_specification", "top_clause", "top_percent", "top_count", "order_by_clause", 
		"for_clause", "xml_common_directives", "order_by_expression", "group_by_item", 
		"option_clause", "option", "optimize_for_arg", "select_list", "udt_method_arguments", 
		"asterisk", "column_elem", "udt_elem", "expression_elem", "select_list_elem", 
		"table_sources", "table_source", "table_source_item_joined", "table_source_item", 
		"tablesample_clause", "open_xml", "schema_declaration", "column_declaration", 
		"change_table", "join_part", "pivot_clause", "unpivot_clause", "full_column_name_list", 
		"table_name_with_hint", "rowset_function", "bulk_option", "derived_table", 
		"function_call", "xml_data_type_methods", "value_method", "query_method", 
		"exist_method", "modify_method", "nodes_method", "switch_section", "switch_search_condition_section", 
		"as_column_alias", "as_table_alias", "table_alias", "with_table_hints", 
		"insert_with_table_hints", "table_hint", "index_value", "column_alias_list", 
		"column_alias", "table_value_constructor", "expression_list", "ranking_windowed_function", 
		"aggregate_windowed_function", "analytic_windowed_function", "all_distinct_expression", 
		"over_clause", "row_or_range_clause", "window_frame_extent", "window_frame_bound", 
		"window_frame_preceding", "window_frame_following", "create_database_option", 
		"database_filestream_option", "database_file_spec", "file_group", "file_spec", 
		"entity_name", "entity_name_for_azure_dw", "entity_name_for_parallel_dw", 
		"schema_object_name", "server_name", "table_name", "database_name", "schema_name", 
		"simple_name", "func_proc_name_schema", "func_proc_name_database_schema", 
		"func_proc_name_server_database_schema", "ddl_object", "full_column_name", 
		"column_name_list_with_order", "column_name_list", "cursor_name", "on_off", 
		"clustered", "null_notnull", "null_or_default", "scalar_function_name", 
		"begin_conversation_timer", "begin_conversation_dialog", "contract_name", 
		"service_name", "end_conversation", "get_conversation", "queue_id", "send_conversation", 
		"data_type", "default_value", "constant", "sign", "id", "simple_id", "comparison_operator", 
		"assignment_operator", "file_size"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"'\\'", null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "'\\\\'", "'//'", null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "'''", null, null, null, null, null, null, 
		null, null, null, null, "'='", "'>'", "'<'", "'!'", "'+='", "'-='", "'*='", 
		"'/='", "'%='", "'&='", "'^='", "'|='", "'||'", "'.'", "'_'", "'@'", "'#'", 
		"'$'", "'('", "')'", "','", "';'", "':'", "'*'", "'/'", "'%'", "'+'", 
		"'-'", "'~'", "'|'", "'&'", "'^'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ABSENT", "ADD", "AES", "ALL", "ALLOW_CONNECTIONS", "ALLOW_MULTIPLE_EVENT_LOSS", 
		"ALLOW_SINGLE_EVENT_LOSS", "ALTER", "AND", "ANONYMOUS", "ANY", "APPEND", 
		"APPLICATION", "AS", "ASC", "ASYMMETRIC", "ASYNCHRONOUS_COMMIT", "ATOMIC", 
		"AUTHORIZATION", "AUTHENTICATION", "AUTOMATED_BACKUP_PREFERENCE", "AUTOMATIC", 
		"AVAILABILITY_MODE", "BACKSLASH", "BACKUP", "BEFORE", "BEGIN", "BETWEEN", 
		"BLOCK", "BLOCKSIZE", "BLOCKING_HIERARCHY", "BREAK", "BROWSE", "BUFFER", 
		"BUFFERCOUNT", "BULK", "BY", "CACHE", "CALLED", "CASCADE", "CASE", "CERTIFICATE", 
		"CHANGETABLE", "CHANGES", "CHECK", "CHECKPOINT", "CHECK_POLICY", "CHECK_EXPIRATION", 
		"CLASSIFIER_FUNCTION", "CLOSE", "CLUSTER", "CLUSTERED", "COALESCE", "COLLATE", 
		"COLUMN", "COMPRESSION", "COMMIT", "COMPUTE", "CONNECTION_OPTIONS", "CONFIGURATION", 
		"CONSTRAINT", "CONTAINMENT", "CONTAINS", "CONTAINSTABLE", "CONTEXT", "CONTINUE", 
		"CONTINUE_AFTER_ERROR", "CONTRACT", "CONTRACT_NAME", "CONVERSATION", "CONVERT", 
		"COPY_ONLY", "CREATE", "CROSS", "CURRENT", "CURRENT_DATE", "CURRENT_TIME", 
		"CURRENT_TIMESTAMP", "CURRENT_USER", "CURSOR", "CYCLE", "DATA_COMPRESSION", 
		"DATA_SOURCE", "DATABASE", "DATABASE_MIRRORING", "DBCC", "DEALLOCATE", 
		"DECLARE", "DEFAULT", "DEFAULT_DATABASE", "DEFAULT_SCHEMA", "DELETE", 
		"DENY", "DESC", "DIAGNOSTICS", "DIFFERENTIAL", "DISK", "DISTINCT", "DISTRIBUTED", 
		"DOUBLE", "DOUBLE_BACK_SLASH", "DOUBLE_FORWARD_SLASH", "DROP", "DTC_SUPPORT", 
		"DUMP", "ELSE", "ENABLED", "END", "ENDPOINT", "ERRLVL", "ESCAPE", "ERROR", 
		"EVENT", "EVENTDATA", "EVENT_RETENTION_MODE", "EXCEPT", "EXECUTABLE_FILE", 
		"EXECUTE", "EXISTS", "EXPIREDATE", "EXIT", "EXTENSION", "EXTERNAL", "EXTERNAL_ACCESS", 
		"FAILOVER", "FAILURECONDITIONLEVEL", "FAN_IN", "FETCH", "FILE", "FILENAME", 
		"FILLFACTOR", "FILE_SNAPSHOT", "FOR", "FORCESEEK", "FORCE_SERVICE_ALLOW_DATA_LOSS", 
		"FOREIGN", "FREETEXT", "FREETEXTTABLE", "FROM", "FULL", "FUNCTION", "GET", 
		"GOTO", "GOVERNOR", "GRANT", "GROUP", "HAVING", "HASHED", "HEALTHCHECKTIMEOUT", 
		"IDENTITY", "IDENTITYCOL", "IDENTITY_INSERT", "IF", "IIF", "IN", "INCLUDE", 
		"INCREMENT", "INDEX", "INFINITE", "INIT", "INNER", "INSERT", "INSTEAD", 
		"INTERSECT", "INTO", "IPV4_ADDR", "IPV6_ADDR", "IS", "ISNULL", "JOIN", 
		"KERBEROS", "KEY", "KEY_PATH", "KEY_STORE_PROVIDER_NAME", "KILL", "LANGUAGE", 
		"LEFT", "LIBRARY", "LIFETIME", "LIKE", "LINENO", "LINUX", "LISTENER_IP", 
		"LISTENER_PORT", "LOAD", "LOCAL_SERVICE_NAME", "LOG", "MATCHED", "MASTER", 
		"MAX_MEMORY", "MAXTRANSFER", "MAXVALUE", "MAX_DISPATCH_LATENCY", "MAX_EVENT_SIZE", 
		"MAX_SIZE", "MAX_OUTSTANDING_IO_PER_VOLUME", "MEDIADESCRIPTION", "MEDIANAME", 
		"MEMBER", "MEMORY_PARTITION_MODE", "MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT", 
		"MERGE", "MESSAGE_FORWARDING", "MESSAGE_FORWARD_SIZE", "MINVALUE", "MIRROR", 
		"MUST_CHANGE", "NATIONAL", "NATIVE_COMPILATION", "NEGOTIATE", "NOCHECK", 
		"NOFORMAT", "NOINIT", "NONCLUSTERED", "NONE", "NOREWIND", "NOSKIP", "NOUNLOAD", 
		"NO_CHECKSUM", "NO_COMPRESSION", "NO_EVENT_LOSS", "NOT", "NOTIFICATION", 
		"NTLM", "NULL", "NULLIF", "OF", "OFF", "OFFSETS", "OLD_PASSWORD", "ON", 
		"ON_FAILURE", "OPEN", "OPENDATASOURCE", "OPENQUERY", "OPENROWSET", "OPENXML", 
		"OPTION", "OR", "ORDER", "OUTER", "OVER", "PAGE", "PARAM_NODE", "PARTIAL", 
		"PASSWORD", "PERCENT", "PERMISSION_SET", "PER_CPU", "PER_DB", "PER_NODE", 
		"PIVOT", "PLAN", "PLATFORM", "POLICY", "PRECISION", "PREDICATE", "PRIMARY", 
		"PRINT", "PROC", "PROCEDURE", "PROCESS", "PUBLIC", "PUSHDOWN", "PYTHON", 
		"R", "RAISERROR", "RAW", "READ", "READTEXT", "READ_WRITE_FILEGROUPS", 
		"RECONFIGURE", "REFERENCES", "REGENERATE", "RELATED_CONVERSATION", "RELATED_CONVERSATION_GROUP", 
		"REPLICATION", "REQUIRED", "RESET", "RESTART", "RESTORE", "RESTRICT", 
		"RESULT_SETS", "RESUME", "RETAINDAYS", "RETURN", "RETURNS", "REVERT", 
		"REVOKE", "REWIND", "RIGHT", "ROLLBACK", "ROLE", "ROWCOUNT", "ROWGUIDCOL", 
		"RSA_512", "RSA_1024", "RSA_2048", "RSA_3072", "RSA_4096", "SAFETY", "RULE", 
		"SAFE", "SAVE", "SCHEDULER", "SCHEMA", "SCHEME", "SECURITYAUDIT", "SELECT", 
		"SEMANTICKEYPHRASETABLE", "SEMANTICSIMILARITYDETAILSTABLE", "SEMANTICSIMILARITYTABLE", 
		"SERVER", "SERVICE", "SERVICE_BROKER", "SERVICE_NAME", "SESSION", "SESSION_USER", 
		"SET", "SETUSER", "SHUTDOWN", "SID", "SKIP_KEYWORD", "SOFTNUMA", "SOME", 
		"SOURCE", "SPECIFICATION", "SPLIT", "SQLDUMPERFLAGS", "SQLDUMPERPATH", 
		"SQLDUMPERTIMEOUT", "STATISTICS", "STATE", "STATS", "START", "STARTED", 
		"STARTUP_STATE", "STOP", "STOPPED", "STOP_ON_ERROR", "SUPPORTED", "SYSTEM_USER", 
		"TABLE", "TABLESAMPLE", "TAPE", "TARGET", "TCP", "TEXTSIZE", "THEN", "TO", 
		"TOP", "TRACK_CAUSALITY", "TRAN", "TRANSACTION", "TRANSFER", "TRIGGER", 
		"TRUNCATE", "TSEQUAL", "UNCHECKED", "UNION", "UNIQUE", "UNLOCK", "UNPIVOT", 
		"UNSAFE", "UPDATE", "UPDATETEXT", "URL", "USE", "USED", "USER", "VALUES", 
		"VARYING", "VERBOSELOGGING", "VIEW", "VISIBILITY", "WAITFOR", "WHEN", 
		"WHERE", "WHILE", "WINDOWS", "WITH", "WITHIN", "WITHOUT", "WITNESS", "WRITETEXT", 
		"ABSOLUTE", "ACCENT_SENSITIVITY", "ACTION", "ACTIVATION", "ACTIVE", "ADDRESS", 
		"AES_128", "AES_192", "AES_256", "AFFINITY", "AFTER", "AGGREGATE", "ALGORITHM", 
		"ALLOW_ENCRYPTED_VALUE_MODIFICATIONS", "ALLOW_SNAPSHOT_ISOLATION", "ALLOWED", 
		"ANSI_NULL_DEFAULT", "ANSI_NULLS", "ANSI_PADDING", "ANSI_WARNINGS", "APPLICATION_LOG", 
		"APPLY", "ARITHABORT", "ASSEMBLY", "AUDIT", "AUDIT_GUID", "AUTO", "AUTO_CLEANUP", 
		"AUTO_CLOSE", "AUTO_CREATE_STATISTICS", "AUTO_SHRINK", "AUTO_UPDATE_STATISTICS", 
		"AUTO_UPDATE_STATISTICS_ASYNC", "AVAILABILITY", "AVG", "BACKUP_PRIORITY", 
		"BEGIN_DIALOG", "BIGINT", "BINARY_BASE64", "BINARY_CHECKSUM", "BINDING", 
		"BLOB_STORAGE", "BROKER", "BROKER_INSTANCE", "BUCKET_COUNT", "BULK_LOGGED", 
		"CALLER", "CAP_CPU_PERCENT", "CAST", "CATALOG", "CATCH", "CHANGE_RETENTION", 
		"CHANGE_TRACKING", "CHECKSUM", "CHECKSUM_AGG", "CLEANUP", "COLLECTION", 
		"COLUMN_MASTER_KEY", "COMMITTED", "COMPATIBILITY_LEVEL", "CONCAT", "CONCAT_NULL_YIELDS_NULL", 
		"CONTENT", "CONTROL", "COOKIE", "COUNT", "COUNT_BIG", "COUNTER", "CPU", 
		"CREATE_NEW", "CREATION_DISPOSITION", "CREDENTIAL", "CRYPTOGRAPHIC", "CURSOR_CLOSE_ON_COMMIT", 
		"CURSOR_DEFAULT", "DATA", "DATE_CORRELATION_OPTIMIZATION", "DATEADD", 
		"DATEDIFF", "DATEFIRST", "DATEFORMAT", "DATENAME", "DATEPART", "DAYS", 
		"DB_CHAINING", "DB_FAILOVER", "DECRYPTION", "DEFAULT_DOUBLE_QUOTE", "DEFAULT_FULLTEXT_LANGUAGE", 
		"DEFAULT_LANGUAGE", "DELAY", "DELAYED_DURABILITY", "DELETED", "DENSE_RANK", 
		"DEPENDENTS", "DES", "DESCRIPTION", "DESX", "DHCP", "DIALOG", "DIRECTORY_NAME", 
		"DISABLE", "DISABLE_BROKER", "DISABLED", "DISK_DRIVE", "DOCUMENT", "DYNAMIC", 
		"ELEMENTS", "EMERGENCY", "EMPTY", "ENABLE", "ENABLE_BROKER", "ENCRYPTED_VALUE", 
		"ENCRYPTION", "ENDPOINT_URL", "ERROR_BROKER_CONVERSATIONS", "EXCLUSIVE", 
		"EXECUTABLE", "EXIST", "EXPAND", "EXPIRY_DATE", "EXPLICIT", "FAIL_OPERATION", 
		"FAILOVER_MODE", "FAILURE", "FAILURE_CONDITION_LEVEL", "FAST", "FAST_FORWARD", 
		"FILEGROUP", "FILEGROWTH", "FILEPATH", "FILESTREAM", "FILTER", "FIRST", 
		"FIRST_VALUE", "FOLLOWING", "FORCE", "FORCE_FAILOVER_ALLOW_DATA_LOSS", 
		"FORCED", "FORMAT", "FORWARD_ONLY", "FULLSCAN", "FULLTEXT", "GB", "GETDATE", 
		"GETUTCDATE", "GLOBAL", "GO", "GROUP_MAX_REQUESTS", "GROUPING", "GROUPING_ID", 
		"HADOOP", "HADR", "HASH", "HEALTH_CHECK_TIMEOUT", "HIGH", "HONOR_BROKER_PRIORITY", 
		"HOURS", "IDENTITY_VALUE", "IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX", "IMMEDIATE", 
		"IMPERSONATE", "IMPORTANCE", "INCLUDE_NULL_VALUES", "INCREMENTAL", "INITIATOR", 
		"INPUT", "INSENSITIVE", "INSERTED", "INT", "IP", "ISOLATION", "JOB", "JSON", 
		"KB", "KEEP", "KEEPFIXED", "KEY_SOURCE", "KEYS", "KEYSET", "LAG", "LAST", 
		"LAST_VALUE", "LEAD", "LEVEL", "LIST", "LISTENER", "LISTENER_URL", "LOB_COMPACTION", 
		"LOCAL", "LOCATION", "LOCK", "LOCK_ESCALATION", "LOGIN", "LOOP", "LOW", 
		"MANUAL", "MARK", "MATERIALIZED", "MAX", "MAX_CPU_PERCENT", "MAX_DOP", 
		"MAX_FILES", "MAX_IOPS_PER_VOLUME", "MAX_MEMORY_PERCENT", "MAX_PROCESSES", 
		"MAX_QUEUE_READERS", "MAX_ROLLOVER_FILES", "MAXDOP", "MAXRECURSION", "MAXSIZE", 
		"MB", "MEDIUM", "MEMORY_OPTIMIZED_DATA", "MESSAGE", "MIN", "MIN_ACTIVE_ROWVERSION", 
		"MIN_CPU_PERCENT", "MIN_IOPS_PER_VOLUME", "MIN_MEMORY_PERCENT", "MINUTES", 
		"MIRROR_ADDRESS", "MIXED_PAGE_ALLOCATION", "MODE", "MODIFY", "MOVE", "MULTI_USER", 
		"NAME", "NESTED_TRIGGERS", "NEW_ACCOUNT", "NEW_BROKER", "NEW_PASSWORD", 
		"NEXT", "NO", "NO_TRUNCATE", "NO_WAIT", "NOCOUNT", "NODES", "NOEXPAND", 
		"NON_TRANSACTED_ACCESS", "NORECOMPUTE", "NORECOVERY", "NOWAIT", "NTILE", 
		"NUMANODE", "NUMBER", "NUMERIC_ROUNDABORT", "OBJECT", "OFFLINE", "OFFSET", 
		"OLD_ACCOUNT", "ONLINE", "ONLY", "OPEN_EXISTING", "OPTIMISTIC", "OPTIMIZE", 
		"OUT", "OUTPUT", "OVERRIDE", "OWNER", "PAGE_VERIFY", "PARAMETERIZATION", 
		"PARTITION", "PARTITIONS", "PARTNER", "PATH", "POISON_MESSAGE_HANDLING", 
		"POOL", "PORT", "PRECEDING", "PRIMARY_ROLE", "PRIOR", "PRIORITY", "PRIORITY_LEVEL", 
		"PRIVATE", "PRIVATE_KEY", "PRIVILEGES", "PROCEDURE_NAME", "PROPERTY", 
		"PROVIDER", "PROVIDER_KEY_NAME", "QUERY", "QUEUE", "QUEUE_DELAY", "QUOTED_IDENTIFIER", 
		"RANGE", "RANK", "RC2", "RC4", "RC4_128", "READ_COMMITTED_SNAPSHOT", "READ_ONLY", 
		"READ_ONLY_ROUTING_LIST", "READ_WRITE", "READONLY", "REBUILD", "RECEIVE", 
		"RECOMPILE", "RECOVERY", "RECURSIVE_TRIGGERS", "RELATIVE", "REMOTE", "REMOTE_SERVICE_NAME", 
		"REMOVE", "REORGANIZE", "REPEATABLE", "REPLICA", "REQUEST_MAX_CPU_TIME_SEC", 
		"REQUEST_MAX_MEMORY_GRANT_PERCENT", "REQUEST_MEMORY_GRANT_TIMEOUT_SEC", 
		"REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT", "RESERVE_DISK_SPACE", "RESOURCE", 
		"RESOURCE_MANAGER_LOCATION", "RESTRICTED_USER", "RETENTION", "ROBUST", 
		"ROOT", "ROUTE", "ROW", "ROW_NUMBER", "ROWGUID", "ROWS", "SAMPLE", "SCHEMABINDING", 
		"SCOPED", "SCROLL", "SCROLL_LOCKS", "SEARCH", "SECONDARY", "SECONDARY_ONLY", 
		"SECONDARY_ROLE", "SECONDS", "SECRET", "SECURITY", "SECURITY_LOG", "SEEDING_MODE", 
		"SELF", "SEMI_SENSITIVE", "SEND", "SENT", "SEQUENCE", "SERIALIZABLE", 
		"SESSION_TIMEOUT", "SETERROR", "SHARE", "SHOWPLAN", "SIGNATURE", "SIMPLE", 
		"SINGLE_USER", "SIZE", "SMALLINT", "SNAPSHOT", "SPATIAL_WINDOW_MAX_CELLS", 
		"STANDBY", "START_DATE", "STATIC", "STATS_STREAM", "STATUS", "STATUSONLY", 
		"STDEV", "STDEVP", "STOPLIST", "STRING_AGG", "STUFF", "SUBJECT", "SUBSCRIPTION", 
		"SUM", "SUSPEND", "SYMMETRIC", "SYNCHRONOUS_COMMIT", "SYNONYM", "SYSTEM", 
		"TAKE", "TARGET_RECOVERY_TIME", "TB", "TEXTIMAGE_ON", "THROW", "TIES", 
		"TIME", "TIMEOUT", "TIMER", "TINYINT", "TORN_PAGE_DETECTION", "TRANSFORM_NOISE_WORDS", 
		"TRIPLE_DES", "TRIPLE_DES_3KEY", "TRUSTWORTHY", "TRY", "TSQL", "TWO_DIGIT_YEAR_CUTOFF", 
		"TYPE", "TYPE_WARNING", "UNBOUNDED", "UNCOMMITTED", "UNDEFINED", "UNKNOWN", 
		"UNLIMITED", "UOW", "USING", "VALID_XML", "VALIDATION", "VALUE", "VAR", 
		"VARP", "VIEW_METADATA", "VIEWS", "WAIT", "WELL_FORMED_XML", "WITHOUT_ARRAY_WRAPPER", 
		"WORK", "WORKLOAD", "XML", "XMLDATA", "XMLNAMESPACES", "XMLSCHEMA", "XSINIL", 
		"DOLLAR_ACTION", "SPACE", "COMMENT", "LINE_COMMENT", "DOUBLE_QUOTE_ID", 
		"SINGLE_QUOTE", "SQUARE_BRACKET_ID", "LOCAL_ID", "DECIMAL", "ID", "QUOTED_URL", 
		"QUOTED_HOST_AND_PORT", "STRING", "BINARY", "FLOAT", "REAL", "EQUAL", 
		"GREATER", "LESS", "EXCLAMATION", "PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", 
		"DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", "DOUBLE_BAR", 
		"DOT", "UNDERLINE", "AT", "SHARP", "DOLLAR", "LR_BRACKET", "RR_BRACKET", 
		"COMMA", "SEMI", "COLON", "STAR", "DIVIDE", "MODULE", "PLUS", "MINUS", 
		"BIT_NOT", "BIT_OR", "BIT_AND", "BIT_XOR", "MDY", "DMY", "YMD", "YDM", 
		"MYD", "DYM", "IPV4_OCTECT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TSqlParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public TSqlParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class Tsql_fileContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(TSqlParser.Eof, 0); }
		public BatchContext[] batch() {
			return GetRuleContexts<BatchContext>();
		}
		public BatchContext batch(int i) {
			return GetRuleContext<BatchContext>(i);
		}
		public Tsql_fileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsql_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTsql_file(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTsql_file(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTsql_file(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tsql_fileContext tsql_file() {
		Tsql_fileContext _localctx = new Tsql_fileContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_tsql_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1007;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSENT) | (1L << AES) | (1L << ALLOW_CONNECTIONS) | (1L << ALLOW_MULTIPLE_EVENT_LOSS) | (1L << ALLOW_SINGLE_EVENT_LOSS) | (1L << ALTER) | (1L << ANONYMOUS) | (1L << APPEND) | (1L << APPLICATION) | (1L << ASYMMETRIC) | (1L << ASYNCHRONOUS_COMMIT) | (1L << AUTHENTICATION) | (1L << AUTOMATED_BACKUP_PREFERENCE) | (1L << AUTOMATIC) | (1L << AVAILABILITY_MODE) | (1L << BACKSLASH) | (1L << BACKUP) | (1L << BEFORE) | (1L << BEGIN) | (1L << BLOCK) | (1L << BLOCKSIZE) | (1L << BLOCKING_HIERARCHY) | (1L << BREAK) | (1L << BUFFER) | (1L << BUFFERCOUNT) | (1L << CACHE) | (1L << CALLED) | (1L << CASE) | (1L << CERTIFICATE) | (1L << CHANGETABLE) | (1L << CHANGES) | (1L << CHECK_POLICY) | (1L << CHECK_EXPIRATION) | (1L << CLASSIFIER_FUNCTION) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COALESCE) | (1L << COMPRESSION) | (1L << COMMIT) | (1L << CONNECTION_OPTIONS) | (1L << CONFIGURATION) | (1L << CONTAINMENT))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONTINUE_AFTER_ERROR - 65)) | (1L << (CONTRACT - 65)) | (1L << (CONTRACT_NAME - 65)) | (1L << (CONVERSATION - 65)) | (1L << (CONVERT - 65)) | (1L << (COPY_ONLY - 65)) | (1L << (CREATE - 65)) | (1L << (CURRENT_TIMESTAMP - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA_COMPRESSION - 65)) | (1L << (DATA_SOURCE - 65)) | (1L << (DATABASE_MIRRORING - 65)) | (1L << (DBCC - 65)) | (1L << (DEALLOCATE - 65)) | (1L << (DECLARE - 65)) | (1L << (DEFAULT - 65)) | (1L << (DEFAULT_DATABASE - 65)) | (1L << (DEFAULT_SCHEMA - 65)) | (1L << (DELETE - 65)) | (1L << (DIAGNOSTICS - 65)) | (1L << (DIFFERENTIAL - 65)) | (1L << (DISK - 65)) | (1L << (DOUBLE_BACK_SLASH - 65)) | (1L << (DOUBLE_FORWARD_SLASH - 65)) | (1L << (DROP - 65)) | (1L << (DTC_SUPPORT - 65)) | (1L << (DUMP - 65)) | (1L << (ENABLED - 65)) | (1L << (END - 65)) | (1L << (ENDPOINT - 65)) | (1L << (ERROR - 65)) | (1L << (EVENT - 65)) | (1L << (EVENTDATA - 65)) | (1L << (EVENT_RETENTION_MODE - 65)) | (1L << (EXECUTABLE_FILE - 65)) | (1L << (EXECUTE - 65)) | (1L << (EXPIREDATE - 65)) | (1L << (EXTENSION - 65)) | (1L << (EXTERNAL_ACCESS - 65)) | (1L << (FAILOVER - 65)) | (1L << (FAILURECONDITIONLEVEL - 65)) | (1L << (FAN_IN - 65)) | (1L << (FETCH - 65)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (FILENAME - 130)) | (1L << (FILLFACTOR - 130)) | (1L << (FILE_SNAPSHOT - 130)) | (1L << (FORCESEEK - 130)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 130)) | (1L << (GET - 130)) | (1L << (GOTO - 130)) | (1L << (GOVERNOR - 130)) | (1L << (GRANT - 130)) | (1L << (HASHED - 130)) | (1L << (HEALTHCHECKTIMEOUT - 130)) | (1L << (IDENTITY - 130)) | (1L << (IDENTITYCOL - 130)) | (1L << (IF - 130)) | (1L << (IIF - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCREMENT - 130)) | (1L << (INFINITE - 130)) | (1L << (INIT - 130)) | (1L << (INSERT - 130)) | (1L << (INSTEAD - 130)) | (1L << (IPV4_ADDR - 130)) | (1L << (IPV6_ADDR - 130)) | (1L << (ISNULL - 130)) | (1L << (KERBEROS - 130)) | (1L << (KEY - 130)) | (1L << (KEY_PATH - 130)) | (1L << (KEY_STORE_PROVIDER_NAME - 130)) | (1L << (KILL - 130)) | (1L << (LANGUAGE - 130)) | (1L << (LEFT - 130)) | (1L << (LIBRARY - 130)) | (1L << (LIFETIME - 130)) | (1L << (LINUX - 130)) | (1L << (LISTENER_IP - 130)) | (1L << (LISTENER_PORT - 130)) | (1L << (LOAD - 130)) | (1L << (LOCAL_SERVICE_NAME - 130)) | (1L << (LOG - 130)) | (1L << (MATCHED - 130)) | (1L << (MASTER - 130)) | (1L << (MAX_MEMORY - 130)) | (1L << (MAXTRANSFER - 130)) | (1L << (MAXVALUE - 130)) | (1L << (MAX_DISPATCH_LATENCY - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (MAX_EVENT_SIZE - 194)) | (1L << (MAX_SIZE - 194)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 194)) | (1L << (MEDIADESCRIPTION - 194)) | (1L << (MEDIANAME - 194)) | (1L << (MEMBER - 194)) | (1L << (MEMORY_PARTITION_MODE - 194)) | (1L << (MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT - 194)) | (1L << (MERGE - 194)) | (1L << (MESSAGE_FORWARDING - 194)) | (1L << (MESSAGE_FORWARD_SIZE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MIRROR - 194)) | (1L << (MUST_CHANGE - 194)) | (1L << (NATIVE_COMPILATION - 194)) | (1L << (NEGOTIATE - 194)) | (1L << (NOFORMAT - 194)) | (1L << (NOINIT - 194)) | (1L << (NONE - 194)) | (1L << (NOREWIND - 194)) | (1L << (NOSKIP - 194)) | (1L << (NOUNLOAD - 194)) | (1L << (NO_CHECKSUM - 194)) | (1L << (NO_COMPRESSION - 194)) | (1L << (NO_EVENT_LOSS - 194)) | (1L << (NOTIFICATION - 194)) | (1L << (NTLM - 194)) | (1L << (NULL - 194)) | (1L << (NULLIF - 194)) | (1L << (OFFSETS - 194)) | (1L << (OLD_PASSWORD - 194)) | (1L << (ON_FAILURE - 194)) | (1L << (OPEN - 194)) | (1L << (OVER - 194)) | (1L << (PAGE - 194)) | (1L << (PARAM_NODE - 194)) | (1L << (PARTIAL - 194)) | (1L << (PASSWORD - 194)) | (1L << (PERMISSION_SET - 194)) | (1L << (PER_CPU - 194)) | (1L << (PER_DB - 194)) | (1L << (PER_NODE - 194)) | (1L << (PLATFORM - 194)) | (1L << (POLICY - 194)) | (1L << (PRECISION - 194)) | (1L << (PREDICATE - 194)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (PRINT - 259)) | (1L << (PROCESS - 259)) | (1L << (PUBLIC - 259)) | (1L << (PUSHDOWN - 259)) | (1L << (PYTHON - 259)) | (1L << (R - 259)) | (1L << (RAISERROR - 259)) | (1L << (RAW - 259)) | (1L << (READ_WRITE_FILEGROUPS - 259)) | (1L << (RECONFIGURE - 259)) | (1L << (REGENERATE - 259)) | (1L << (RELATED_CONVERSATION - 259)) | (1L << (RELATED_CONVERSATION_GROUP - 259)) | (1L << (REQUIRED - 259)) | (1L << (RESET - 259)) | (1L << (RESTART - 259)) | (1L << (RESULT_SETS - 259)) | (1L << (RESUME - 259)) | (1L << (RETAINDAYS - 259)) | (1L << (RETURN - 259)) | (1L << (RETURNS - 259)) | (1L << (REVERT - 259)) | (1L << (REWIND - 259)) | (1L << (RIGHT - 259)) | (1L << (ROLLBACK - 259)) | (1L << (ROLE - 259)) | (1L << (ROWCOUNT - 259)) | (1L << (ROWGUIDCOL - 259)) | (1L << (RSA_512 - 259)) | (1L << (RSA_1024 - 259)) | (1L << (RSA_2048 - 259)) | (1L << (RSA_3072 - 259)) | (1L << (RSA_4096 - 259)) | (1L << (SAFETY - 259)) | (1L << (SAFE - 259)) | (1L << (SAVE - 259)) | (1L << (SCHEDULER - 259)) | (1L << (SCHEME - 259)) | (1L << (SECURITYAUDIT - 259)) | (1L << (SELECT - 259)) | (1L << (SERVER - 259)) | (1L << (SERVICE - 259)) | (1L << (SERVICE_BROKER - 259)) | (1L << (SERVICE_NAME - 259)) | (1L << (SESSION - 259)) | (1L << (SESSION_USER - 259)) | (1L << (SET - 259)) | (1L << (SETUSER - 259)) | (1L << (SHUTDOWN - 259)) | (1L << (SID - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (SKIP_KEYWORD - 323)) | (1L << (SOFTNUMA - 323)) | (1L << (SOURCE - 323)) | (1L << (SPECIFICATION - 323)) | (1L << (SPLIT - 323)) | (1L << (SQLDUMPERFLAGS - 323)) | (1L << (SQLDUMPERPATH - 323)) | (1L << (SQLDUMPERTIMEOUT - 323)) | (1L << (STATE - 323)) | (1L << (STATS - 323)) | (1L << (START - 323)) | (1L << (STARTED - 323)) | (1L << (STARTUP_STATE - 323)) | (1L << (STOP - 323)) | (1L << (STOPPED - 323)) | (1L << (STOP_ON_ERROR - 323)) | (1L << (SUPPORTED - 323)) | (1L << (SYSTEM_USER - 323)) | (1L << (TAPE - 323)) | (1L << (TARGET - 323)) | (1L << (TCP - 323)) | (1L << (TRACK_CAUSALITY - 323)) | (1L << (TRANSFER - 323)) | (1L << (TRUNCATE - 323)) | (1L << (UNCHECKED - 323)) | (1L << (UNLOCK - 323)) | (1L << (UNSAFE - 323)) | (1L << (UPDATE - 323)) | (1L << (URL - 323)) | (1L << (USE - 323)) | (1L << (USED - 323)) | (1L << (USER - 323)) | (1L << (VERBOSELOGGING - 323)) | (1L << (VISIBILITY - 323)) | (1L << (WAITFOR - 323)) | (1L << (WHILE - 323)) | (1L << (WINDOWS - 323)) | (1L << (WITH - 323)) | (1L << (WITHIN - 323)) | (1L << (WITHOUT - 323)) | (1L << (WITNESS - 323)) | (1L << (ABSOLUTE - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (ACCENT_SENSITIVITY - 387)) | (1L << (ACTION - 387)) | (1L << (ACTIVATION - 387)) | (1L << (ACTIVE - 387)) | (1L << (ADDRESS - 387)) | (1L << (AES_128 - 387)) | (1L << (AES_192 - 387)) | (1L << (AES_256 - 387)) | (1L << (AFFINITY - 387)) | (1L << (AFTER - 387)) | (1L << (AGGREGATE - 387)) | (1L << (ALGORITHM - 387)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 387)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 387)) | (1L << (ALLOWED - 387)) | (1L << (ANSI_NULL_DEFAULT - 387)) | (1L << (ANSI_NULLS - 387)) | (1L << (ANSI_PADDING - 387)) | (1L << (ANSI_WARNINGS - 387)) | (1L << (APPLICATION_LOG - 387)) | (1L << (APPLY - 387)) | (1L << (ARITHABORT - 387)) | (1L << (ASSEMBLY - 387)) | (1L << (AUDIT - 387)) | (1L << (AUDIT_GUID - 387)) | (1L << (AUTO - 387)) | (1L << (AUTO_CLEANUP - 387)) | (1L << (AUTO_CLOSE - 387)) | (1L << (AUTO_CREATE_STATISTICS - 387)) | (1L << (AUTO_SHRINK - 387)) | (1L << (AUTO_UPDATE_STATISTICS - 387)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 387)) | (1L << (AVAILABILITY - 387)) | (1L << (AVG - 387)) | (1L << (BACKUP_PRIORITY - 387)) | (1L << (BEGIN_DIALOG - 387)) | (1L << (BIGINT - 387)) | (1L << (BINARY_BASE64 - 387)) | (1L << (BINARY_CHECKSUM - 387)) | (1L << (BINDING - 387)) | (1L << (BLOB_STORAGE - 387)) | (1L << (BROKER - 387)) | (1L << (BROKER_INSTANCE - 387)) | (1L << (BUCKET_COUNT - 387)) | (1L << (BULK_LOGGED - 387)) | (1L << (CALLER - 387)) | (1L << (CAP_CPU_PERCENT - 387)) | (1L << (CAST - 387)) | (1L << (CATALOG - 387)) | (1L << (CATCH - 387)) | (1L << (CHANGE_RETENTION - 387)) | (1L << (CHANGE_TRACKING - 387)) | (1L << (CHECKSUM - 387)) | (1L << (CHECKSUM_AGG - 387)) | (1L << (CLEANUP - 387)) | (1L << (COLLECTION - 387)) | (1L << (COLUMN_MASTER_KEY - 387)) | (1L << (COMMITTED - 387)) | (1L << (COMPATIBILITY_LEVEL - 387)) | (1L << (CONCAT - 387)) | (1L << (CONCAT_NULL_YIELDS_NULL - 387)) | (1L << (CONTENT - 387)) | (1L << (CONTROL - 387)) | (1L << (COOKIE - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (COUNT - 451)) | (1L << (COUNT_BIG - 451)) | (1L << (COUNTER - 451)) | (1L << (CPU - 451)) | (1L << (CREATE_NEW - 451)) | (1L << (CREATION_DISPOSITION - 451)) | (1L << (CREDENTIAL - 451)) | (1L << (CRYPTOGRAPHIC - 451)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 451)) | (1L << (CURSOR_DEFAULT - 451)) | (1L << (DATA - 451)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 451)) | (1L << (DATEADD - 451)) | (1L << (DATEDIFF - 451)) | (1L << (DATEFIRST - 451)) | (1L << (DATEFORMAT - 451)) | (1L << (DATENAME - 451)) | (1L << (DATEPART - 451)) | (1L << (DAYS - 451)) | (1L << (DB_CHAINING - 451)) | (1L << (DB_FAILOVER - 451)) | (1L << (DECRYPTION - 451)) | (1L << (DEFAULT_DOUBLE_QUOTE - 451)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 451)) | (1L << (DEFAULT_LANGUAGE - 451)) | (1L << (DELAY - 451)) | (1L << (DELAYED_DURABILITY - 451)) | (1L << (DELETED - 451)) | (1L << (DENSE_RANK - 451)) | (1L << (DEPENDENTS - 451)) | (1L << (DES - 451)) | (1L << (DESCRIPTION - 451)) | (1L << (DESX - 451)) | (1L << (DHCP - 451)) | (1L << (DIALOG - 451)) | (1L << (DIRECTORY_NAME - 451)) | (1L << (DISABLE - 451)) | (1L << (DISABLE_BROKER - 451)) | (1L << (DISABLED - 451)) | (1L << (DISK_DRIVE - 451)) | (1L << (DOCUMENT - 451)) | (1L << (DYNAMIC - 451)) | (1L << (ELEMENTS - 451)) | (1L << (EMERGENCY - 451)) | (1L << (EMPTY - 451)) | (1L << (ENABLE - 451)) | (1L << (ENABLE_BROKER - 451)) | (1L << (ENCRYPTED_VALUE - 451)) | (1L << (ENCRYPTION - 451)) | (1L << (ENDPOINT_URL - 451)) | (1L << (ERROR_BROKER_CONVERSATIONS - 451)) | (1L << (EXCLUSIVE - 451)) | (1L << (EXECUTABLE - 451)) | (1L << (EXIST - 451)) | (1L << (EXPAND - 451)) | (1L << (EXPIRY_DATE - 451)) | (1L << (EXPLICIT - 451)) | (1L << (FAIL_OPERATION - 451)) | (1L << (FAILOVER_MODE - 451)) | (1L << (FAILURE - 451)) | (1L << (FAILURE_CONDITION_LEVEL - 451)) | (1L << (FAST - 451)) | (1L << (FAST_FORWARD - 451)) | (1L << (FILEGROUP - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (FILEGROWTH - 515)) | (1L << (FILEPATH - 515)) | (1L << (FILESTREAM - 515)) | (1L << (FILTER - 515)) | (1L << (FIRST - 515)) | (1L << (FIRST_VALUE - 515)) | (1L << (FOLLOWING - 515)) | (1L << (FORCE - 515)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 515)) | (1L << (FORCED - 515)) | (1L << (FORMAT - 515)) | (1L << (FORWARD_ONLY - 515)) | (1L << (FULLSCAN - 515)) | (1L << (FULLTEXT - 515)) | (1L << (GB - 515)) | (1L << (GETDATE - 515)) | (1L << (GETUTCDATE - 515)) | (1L << (GLOBAL - 515)) | (1L << (GO - 515)) | (1L << (GROUP_MAX_REQUESTS - 515)) | (1L << (GROUPING - 515)) | (1L << (GROUPING_ID - 515)) | (1L << (HADOOP - 515)) | (1L << (HADR - 515)) | (1L << (HASH - 515)) | (1L << (HEALTH_CHECK_TIMEOUT - 515)) | (1L << (HIGH - 515)) | (1L << (HONOR_BROKER_PRIORITY - 515)) | (1L << (HOURS - 515)) | (1L << (IDENTITY_VALUE - 515)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 515)) | (1L << (IMMEDIATE - 515)) | (1L << (IMPERSONATE - 515)) | (1L << (IMPORTANCE - 515)) | (1L << (INCLUDE_NULL_VALUES - 515)) | (1L << (INCREMENTAL - 515)) | (1L << (INITIATOR - 515)) | (1L << (INPUT - 515)) | (1L << (INSENSITIVE - 515)) | (1L << (INSERTED - 515)) | (1L << (INT - 515)) | (1L << (IP - 515)) | (1L << (ISOLATION - 515)) | (1L << (JOB - 515)) | (1L << (JSON - 515)) | (1L << (KB - 515)) | (1L << (KEEP - 515)) | (1L << (KEEPFIXED - 515)) | (1L << (KEY_SOURCE - 515)) | (1L << (KEYS - 515)) | (1L << (KEYSET - 515)) | (1L << (LAG - 515)) | (1L << (LAST - 515)) | (1L << (LAST_VALUE - 515)) | (1L << (LEAD - 515)) | (1L << (LEVEL - 515)) | (1L << (LIST - 515)) | (1L << (LISTENER - 515)) | (1L << (LISTENER_URL - 515)) | (1L << (LOB_COMPACTION - 515)) | (1L << (LOCAL - 515)) | (1L << (LOCATION - 515)) | (1L << (LOCK - 515)) | (1L << (LOCK_ESCALATION - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (LOGIN - 579)) | (1L << (LOOP - 579)) | (1L << (LOW - 579)) | (1L << (MANUAL - 579)) | (1L << (MARK - 579)) | (1L << (MATERIALIZED - 579)) | (1L << (MAX - 579)) | (1L << (MAX_CPU_PERCENT - 579)) | (1L << (MAX_DOP - 579)) | (1L << (MAX_FILES - 579)) | (1L << (MAX_IOPS_PER_VOLUME - 579)) | (1L << (MAX_MEMORY_PERCENT - 579)) | (1L << (MAX_PROCESSES - 579)) | (1L << (MAX_QUEUE_READERS - 579)) | (1L << (MAX_ROLLOVER_FILES - 579)) | (1L << (MAXDOP - 579)) | (1L << (MAXRECURSION - 579)) | (1L << (MAXSIZE - 579)) | (1L << (MB - 579)) | (1L << (MEDIUM - 579)) | (1L << (MEMORY_OPTIMIZED_DATA - 579)) | (1L << (MESSAGE - 579)) | (1L << (MIN - 579)) | (1L << (MIN_ACTIVE_ROWVERSION - 579)) | (1L << (MIN_CPU_PERCENT - 579)) | (1L << (MIN_IOPS_PER_VOLUME - 579)) | (1L << (MIN_MEMORY_PERCENT - 579)) | (1L << (MINUTES - 579)) | (1L << (MIRROR_ADDRESS - 579)) | (1L << (MIXED_PAGE_ALLOCATION - 579)) | (1L << (MODE - 579)) | (1L << (MODIFY - 579)) | (1L << (MOVE - 579)) | (1L << (MULTI_USER - 579)) | (1L << (NAME - 579)) | (1L << (NESTED_TRIGGERS - 579)) | (1L << (NEW_ACCOUNT - 579)) | (1L << (NEW_BROKER - 579)) | (1L << (NEW_PASSWORD - 579)) | (1L << (NEXT - 579)) | (1L << (NO - 579)) | (1L << (NO_TRUNCATE - 579)) | (1L << (NO_WAIT - 579)) | (1L << (NOCOUNT - 579)) | (1L << (NODES - 579)) | (1L << (NOEXPAND - 579)) | (1L << (NON_TRANSACTED_ACCESS - 579)) | (1L << (NORECOMPUTE - 579)) | (1L << (NORECOVERY - 579)) | (1L << (NOWAIT - 579)) | (1L << (NTILE - 579)) | (1L << (NUMANODE - 579)) | (1L << (NUMBER - 579)) | (1L << (NUMERIC_ROUNDABORT - 579)) | (1L << (OBJECT - 579)) | (1L << (OFFLINE - 579)) | (1L << (OFFSET - 579)) | (1L << (OLD_ACCOUNT - 579)) | (1L << (ONLINE - 579)) | (1L << (ONLY - 579)) | (1L << (OPEN_EXISTING - 579)) | (1L << (OPTIMISTIC - 579)) | (1L << (OPTIMIZE - 579)) | (1L << (OUT - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (OUTPUT - 643)) | (1L << (OVERRIDE - 643)) | (1L << (OWNER - 643)) | (1L << (PAGE_VERIFY - 643)) | (1L << (PARAMETERIZATION - 643)) | (1L << (PARTITION - 643)) | (1L << (PARTITIONS - 643)) | (1L << (PARTNER - 643)) | (1L << (PATH - 643)) | (1L << (POISON_MESSAGE_HANDLING - 643)) | (1L << (POOL - 643)) | (1L << (PORT - 643)) | (1L << (PRECEDING - 643)) | (1L << (PRIMARY_ROLE - 643)) | (1L << (PRIOR - 643)) | (1L << (PRIORITY - 643)) | (1L << (PRIORITY_LEVEL - 643)) | (1L << (PRIVATE - 643)) | (1L << (PRIVATE_KEY - 643)) | (1L << (PRIVILEGES - 643)) | (1L << (PROCEDURE_NAME - 643)) | (1L << (PROPERTY - 643)) | (1L << (PROVIDER - 643)) | (1L << (PROVIDER_KEY_NAME - 643)) | (1L << (QUERY - 643)) | (1L << (QUEUE - 643)) | (1L << (QUEUE_DELAY - 643)) | (1L << (QUOTED_IDENTIFIER - 643)) | (1L << (RANGE - 643)) | (1L << (RANK - 643)) | (1L << (RC2 - 643)) | (1L << (RC4 - 643)) | (1L << (RC4_128 - 643)) | (1L << (READ_COMMITTED_SNAPSHOT - 643)) | (1L << (READ_ONLY - 643)) | (1L << (READ_ONLY_ROUTING_LIST - 643)) | (1L << (READ_WRITE - 643)) | (1L << (READONLY - 643)) | (1L << (REBUILD - 643)) | (1L << (RECEIVE - 643)) | (1L << (RECOMPILE - 643)) | (1L << (RECOVERY - 643)) | (1L << (RECURSIVE_TRIGGERS - 643)) | (1L << (RELATIVE - 643)) | (1L << (REMOTE - 643)) | (1L << (REMOTE_SERVICE_NAME - 643)) | (1L << (REMOVE - 643)) | (1L << (REORGANIZE - 643)) | (1L << (REPEATABLE - 643)) | (1L << (REPLICA - 643)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 643)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 643)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 643)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 643)) | (1L << (RESERVE_DISK_SPACE - 643)) | (1L << (RESOURCE - 643)) | (1L << (RESOURCE_MANAGER_LOCATION - 643)) | (1L << (RESTRICTED_USER - 643)) | (1L << (RETENTION - 643)) | (1L << (ROBUST - 643)) | (1L << (ROOT - 643)) | (1L << (ROUTE - 643)) | (1L << (ROW - 643)) | (1L << (ROW_NUMBER - 643)))) != 0) || ((((_la - 707)) & ~0x3f) == 0 && ((1L << (_la - 707)) & ((1L << (ROWGUID - 707)) | (1L << (ROWS - 707)) | (1L << (SAMPLE - 707)) | (1L << (SCHEMABINDING - 707)) | (1L << (SCOPED - 707)) | (1L << (SCROLL - 707)) | (1L << (SCROLL_LOCKS - 707)) | (1L << (SEARCH - 707)) | (1L << (SECONDARY - 707)) | (1L << (SECONDARY_ONLY - 707)) | (1L << (SECONDARY_ROLE - 707)) | (1L << (SECONDS - 707)) | (1L << (SECRET - 707)) | (1L << (SECURITY - 707)) | (1L << (SECURITY_LOG - 707)) | (1L << (SEEDING_MODE - 707)) | (1L << (SELF - 707)) | (1L << (SEMI_SENSITIVE - 707)) | (1L << (SEND - 707)) | (1L << (SENT - 707)) | (1L << (SEQUENCE - 707)) | (1L << (SERIALIZABLE - 707)) | (1L << (SESSION_TIMEOUT - 707)) | (1L << (SETERROR - 707)) | (1L << (SHARE - 707)) | (1L << (SHOWPLAN - 707)) | (1L << (SIGNATURE - 707)) | (1L << (SIMPLE - 707)) | (1L << (SINGLE_USER - 707)) | (1L << (SIZE - 707)) | (1L << (SMALLINT - 707)) | (1L << (SNAPSHOT - 707)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 707)) | (1L << (STANDBY - 707)) | (1L << (START_DATE - 707)) | (1L << (STATIC - 707)) | (1L << (STATS_STREAM - 707)) | (1L << (STATUS - 707)) | (1L << (STATUSONLY - 707)) | (1L << (STDEV - 707)) | (1L << (STDEVP - 707)) | (1L << (STOPLIST - 707)) | (1L << (STRING_AGG - 707)) | (1L << (STUFF - 707)) | (1L << (SUBJECT - 707)) | (1L << (SUBSCRIPTION - 707)) | (1L << (SUM - 707)) | (1L << (SUSPEND - 707)) | (1L << (SYMMETRIC - 707)) | (1L << (SYNCHRONOUS_COMMIT - 707)) | (1L << (SYNONYM - 707)) | (1L << (SYSTEM - 707)) | (1L << (TAKE - 707)) | (1L << (TARGET_RECOVERY_TIME - 707)) | (1L << (TB - 707)) | (1L << (TEXTIMAGE_ON - 707)) | (1L << (THROW - 707)) | (1L << (TIES - 707)) | (1L << (TIME - 707)) | (1L << (TIMEOUT - 707)) | (1L << (TIMER - 707)) | (1L << (TINYINT - 707)) | (1L << (TORN_PAGE_DETECTION - 707)) | (1L << (TRANSFORM_NOISE_WORDS - 707)))) != 0) || ((((_la - 771)) & ~0x3f) == 0 && ((1L << (_la - 771)) & ((1L << (TRIPLE_DES - 771)) | (1L << (TRIPLE_DES_3KEY - 771)) | (1L << (TRUSTWORTHY - 771)) | (1L << (TRY - 771)) | (1L << (TSQL - 771)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 771)) | (1L << (TYPE - 771)) | (1L << (TYPE_WARNING - 771)) | (1L << (UNBOUNDED - 771)) | (1L << (UNCOMMITTED - 771)) | (1L << (UNDEFINED - 771)) | (1L << (UNKNOWN - 771)) | (1L << (UNLIMITED - 771)) | (1L << (UOW - 771)) | (1L << (USING - 771)) | (1L << (VALID_XML - 771)) | (1L << (VALIDATION - 771)) | (1L << (VALUE - 771)) | (1L << (VAR - 771)) | (1L << (VARP - 771)) | (1L << (VIEW_METADATA - 771)) | (1L << (VIEWS - 771)) | (1L << (WAIT - 771)) | (1L << (WELL_FORMED_XML - 771)) | (1L << (WITHOUT_ARRAY_WRAPPER - 771)) | (1L << (WORK - 771)) | (1L << (WORKLOAD - 771)) | (1L << (XML - 771)) | (1L << (XMLDATA - 771)) | (1L << (XMLNAMESPACES - 771)) | (1L << (XMLSCHEMA - 771)) | (1L << (XSINIL - 771)) | (1L << (DOLLAR_ACTION - 771)) | (1L << (SPACE - 771)) | (1L << (COMMENT - 771)) | (1L << (LINE_COMMENT - 771)) | (1L << (DOUBLE_QUOTE_ID - 771)) | (1L << (SINGLE_QUOTE - 771)) | (1L << (SQUARE_BRACKET_ID - 771)) | (1L << (LOCAL_ID - 771)) | (1L << (DECIMAL - 771)) | (1L << (ID - 771)) | (1L << (QUOTED_URL - 771)) | (1L << (QUOTED_HOST_AND_PORT - 771)) | (1L << (STRING - 771)) | (1L << (BINARY - 771)) | (1L << (FLOAT - 771)) | (1L << (REAL - 771)) | (1L << (EQUAL - 771)) | (1L << (GREATER - 771)) | (1L << (LESS - 771)) | (1L << (EXCLAMATION - 771)) | (1L << (PLUS_ASSIGN - 771)) | (1L << (MINUS_ASSIGN - 771)) | (1L << (MULT_ASSIGN - 771)) | (1L << (DIV_ASSIGN - 771)) | (1L << (MOD_ASSIGN - 771)) | (1L << (AND_ASSIGN - 771)) | (1L << (XOR_ASSIGN - 771)) | (1L << (OR_ASSIGN - 771)) | (1L << (DOUBLE_BAR - 771)) | (1L << (DOT - 771)) | (1L << (UNDERLINE - 771)) | (1L << (AT - 771)))) != 0) || ((((_la - 835)) & ~0x3f) == 0 && ((1L << (_la - 835)) & ((1L << (SHARP - 835)) | (1L << (DOLLAR - 835)) | (1L << (LR_BRACKET - 835)) | (1L << (RR_BRACKET - 835)) | (1L << (COMMA - 835)) | (1L << (SEMI - 835)) | (1L << (COLON - 835)) | (1L << (STAR - 835)) | (1L << (DIVIDE - 835)) | (1L << (MODULE - 835)) | (1L << (PLUS - 835)) | (1L << (MINUS - 835)) | (1L << (BIT_NOT - 835)) | (1L << (BIT_OR - 835)) | (1L << (BIT_AND - 835)) | (1L << (BIT_XOR - 835)) | (1L << (MDY - 835)) | (1L << (DMY - 835)) | (1L << (YMD - 835)) | (1L << (YDM - 835)) | (1L << (MYD - 835)) | (1L << (DYM - 835)) | (1L << (IPV4_OCTECT - 835)))) != 0)) {
				{
				{
				State = 1004; batch();
				}
				}
				State = 1009;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1010; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BatchContext : ParserRuleContext {
		public Execute_bodyContext execute_body() {
			return GetRuleContext<Execute_bodyContext>(0);
		}
		public Go_statementContext[] go_statement() {
			return GetRuleContexts<Go_statementContext>();
		}
		public Go_statementContext go_statement(int i) {
			return GetRuleContext<Go_statementContext>(i);
		}
		public Sql_clausesContext sql_clauses() {
			return GetRuleContext<Sql_clausesContext>(0);
		}
		public BatchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_batch; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBatch(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBatch(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBatch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BatchContext batch() {
		BatchContext _localctx = new BatchContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_batch);
		try {
			int _alt;
			State = 1029;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1012; execute_body();
				State = 1016;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1013; go_statement();
						}
						} 
					}
					State = 1018;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1020;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
				case 1:
					{
					State = 1019; execute_body();
					}
					break;
				}
				State = 1022; sql_clauses();
				State = 1026;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1023; go_statement();
						}
						} 
					}
					State = 1028;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_clausesContext : ParserRuleContext {
		public Sql_clauseContext[] sql_clause() {
			return GetRuleContexts<Sql_clauseContext>();
		}
		public Sql_clauseContext sql_clause(int i) {
			return GetRuleContext<Sql_clauseContext>(i);
		}
		public ITerminalNode[] SEMI() { return GetTokens(TSqlParser.SEMI); }
		public ITerminalNode SEMI(int i) {
			return GetToken(TSqlParser.SEMI, i);
		}
		public Sql_clausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_clauses; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSql_clauses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSql_clauses(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSql_clauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sql_clausesContext sql_clauses() {
		Sql_clausesContext _localctx = new Sql_clausesContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_sql_clauses);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1035;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1031; sql_clause();
					State = 1033;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
					case 1:
						{
						State = 1032; Match(SEMI);
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1037;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_clauseContext : ParserRuleContext {
		public Dml_clauseContext dml_clause() {
			return GetRuleContext<Dml_clauseContext>(0);
		}
		public Ddl_clauseContext ddl_clause() {
			return GetRuleContext<Ddl_clauseContext>(0);
		}
		public Cfl_statementContext cfl_statement() {
			return GetRuleContext<Cfl_statementContext>(0);
		}
		public Dbcc_clauseContext dbcc_clause() {
			return GetRuleContext<Dbcc_clauseContext>(0);
		}
		public Empty_statementContext empty_statement() {
			return GetRuleContext<Empty_statementContext>(0);
		}
		public Another_statementContext another_statement() {
			return GetRuleContext<Another_statementContext>(0);
		}
		public Backup_statementContext backup_statement() {
			return GetRuleContext<Backup_statementContext>(0);
		}
		public Sql_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSql_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSql_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSql_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sql_clauseContext sql_clause() {
		Sql_clauseContext _localctx = new Sql_clauseContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_sql_clause);
		try {
			State = 1046;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1039; dml_clause();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1040; ddl_clause();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1041; cfl_statement();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1042; dbcc_clause();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1043; empty_statement();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1044; another_statement();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1045; backup_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dml_clauseContext : ParserRuleContext {
		public Merge_statementContext merge_statement() {
			return GetRuleContext<Merge_statementContext>(0);
		}
		public Delete_statementContext delete_statement() {
			return GetRuleContext<Delete_statementContext>(0);
		}
		public Insert_statementContext insert_statement() {
			return GetRuleContext<Insert_statementContext>(0);
		}
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public Update_statementContext update_statement() {
			return GetRuleContext<Update_statementContext>(0);
		}
		public Dml_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dml_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDml_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDml_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDml_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dml_clauseContext dml_clause() {
		Dml_clauseContext _localctx = new Dml_clauseContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_dml_clause);
		try {
			State = 1053;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1048; merge_statement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1049; delete_statement();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1050; insert_statement();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1051; select_statement();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1052; update_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ddl_clauseContext : ParserRuleContext {
		public Alter_application_roleContext alter_application_role() {
			return GetRuleContext<Alter_application_roleContext>(0);
		}
		public Alter_assemblyContext alter_assembly() {
			return GetRuleContext<Alter_assemblyContext>(0);
		}
		public Alter_asymmetric_keyContext alter_asymmetric_key() {
			return GetRuleContext<Alter_asymmetric_keyContext>(0);
		}
		public Alter_authorizationContext alter_authorization() {
			return GetRuleContext<Alter_authorizationContext>(0);
		}
		public Alter_authorization_for_azure_dwContext alter_authorization_for_azure_dw() {
			return GetRuleContext<Alter_authorization_for_azure_dwContext>(0);
		}
		public Alter_authorization_for_parallel_dwContext alter_authorization_for_parallel_dw() {
			return GetRuleContext<Alter_authorization_for_parallel_dwContext>(0);
		}
		public Alter_authorization_for_sql_databaseContext alter_authorization_for_sql_database() {
			return GetRuleContext<Alter_authorization_for_sql_databaseContext>(0);
		}
		public Alter_availability_groupContext alter_availability_group() {
			return GetRuleContext<Alter_availability_groupContext>(0);
		}
		public Alter_certificateContext alter_certificate() {
			return GetRuleContext<Alter_certificateContext>(0);
		}
		public Alter_column_encryption_keyContext alter_column_encryption_key() {
			return GetRuleContext<Alter_column_encryption_keyContext>(0);
		}
		public Alter_credentialContext alter_credential() {
			return GetRuleContext<Alter_credentialContext>(0);
		}
		public Alter_cryptographic_providerContext alter_cryptographic_provider() {
			return GetRuleContext<Alter_cryptographic_providerContext>(0);
		}
		public Alter_databaseContext alter_database() {
			return GetRuleContext<Alter_databaseContext>(0);
		}
		public Alter_db_roleContext alter_db_role() {
			return GetRuleContext<Alter_db_roleContext>(0);
		}
		public Alter_endpointContext alter_endpoint() {
			return GetRuleContext<Alter_endpointContext>(0);
		}
		public Create_or_alter_event_sessionContext create_or_alter_event_session() {
			return GetRuleContext<Create_or_alter_event_sessionContext>(0);
		}
		public Create_external_data_sourceContext create_external_data_source() {
			return GetRuleContext<Create_external_data_sourceContext>(0);
		}
		public Alter_external_data_sourceContext alter_external_data_source() {
			return GetRuleContext<Alter_external_data_sourceContext>(0);
		}
		public Alter_external_libraryContext alter_external_library() {
			return GetRuleContext<Alter_external_libraryContext>(0);
		}
		public Alter_external_resource_poolContext alter_external_resource_pool() {
			return GetRuleContext<Alter_external_resource_poolContext>(0);
		}
		public Alter_fulltext_catalogContext alter_fulltext_catalog() {
			return GetRuleContext<Alter_fulltext_catalogContext>(0);
		}
		public Alter_fulltext_stoplistContext alter_fulltext_stoplist() {
			return GetRuleContext<Alter_fulltext_stoplistContext>(0);
		}
		public Alter_login_azure_sqlContext alter_login_azure_sql() {
			return GetRuleContext<Alter_login_azure_sqlContext>(0);
		}
		public Alter_login_azure_sql_dw_and_pdwContext alter_login_azure_sql_dw_and_pdw() {
			return GetRuleContext<Alter_login_azure_sql_dw_and_pdwContext>(0);
		}
		public Alter_login_sql_serverContext alter_login_sql_server() {
			return GetRuleContext<Alter_login_sql_serverContext>(0);
		}
		public Alter_master_key_azure_sqlContext alter_master_key_azure_sql() {
			return GetRuleContext<Alter_master_key_azure_sqlContext>(0);
		}
		public Alter_master_key_sql_serverContext alter_master_key_sql_server() {
			return GetRuleContext<Alter_master_key_sql_serverContext>(0);
		}
		public Alter_message_typeContext alter_message_type() {
			return GetRuleContext<Alter_message_typeContext>(0);
		}
		public Alter_partition_functionContext alter_partition_function() {
			return GetRuleContext<Alter_partition_functionContext>(0);
		}
		public Alter_partition_schemeContext alter_partition_scheme() {
			return GetRuleContext<Alter_partition_schemeContext>(0);
		}
		public Alter_remote_service_bindingContext alter_remote_service_binding() {
			return GetRuleContext<Alter_remote_service_bindingContext>(0);
		}
		public Alter_resource_governorContext alter_resource_governor() {
			return GetRuleContext<Alter_resource_governorContext>(0);
		}
		public Alter_schema_azure_sql_dw_and_pdwContext alter_schema_azure_sql_dw_and_pdw() {
			return GetRuleContext<Alter_schema_azure_sql_dw_and_pdwContext>(0);
		}
		public Alter_schema_sqlContext alter_schema_sql() {
			return GetRuleContext<Alter_schema_sqlContext>(0);
		}
		public Alter_sequenceContext alter_sequence() {
			return GetRuleContext<Alter_sequenceContext>(0);
		}
		public Alter_server_auditContext alter_server_audit() {
			return GetRuleContext<Alter_server_auditContext>(0);
		}
		public Alter_server_audit_specificationContext alter_server_audit_specification() {
			return GetRuleContext<Alter_server_audit_specificationContext>(0);
		}
		public Alter_server_configurationContext alter_server_configuration() {
			return GetRuleContext<Alter_server_configurationContext>(0);
		}
		public Alter_server_roleContext alter_server_role() {
			return GetRuleContext<Alter_server_roleContext>(0);
		}
		public Alter_server_role_pdwContext alter_server_role_pdw() {
			return GetRuleContext<Alter_server_role_pdwContext>(0);
		}
		public Alter_serviceContext alter_service() {
			return GetRuleContext<Alter_serviceContext>(0);
		}
		public Alter_service_master_keyContext alter_service_master_key() {
			return GetRuleContext<Alter_service_master_keyContext>(0);
		}
		public Alter_symmetric_keyContext alter_symmetric_key() {
			return GetRuleContext<Alter_symmetric_keyContext>(0);
		}
		public Alter_tableContext alter_table() {
			return GetRuleContext<Alter_tableContext>(0);
		}
		public Alter_userContext alter_user() {
			return GetRuleContext<Alter_userContext>(0);
		}
		public Alter_user_azure_sqlContext alter_user_azure_sql() {
			return GetRuleContext<Alter_user_azure_sqlContext>(0);
		}
		public Alter_workload_groupContext alter_workload_group() {
			return GetRuleContext<Alter_workload_groupContext>(0);
		}
		public Create_application_roleContext create_application_role() {
			return GetRuleContext<Create_application_roleContext>(0);
		}
		public Create_assemblyContext create_assembly() {
			return GetRuleContext<Create_assemblyContext>(0);
		}
		public Create_asymmetric_keyContext create_asymmetric_key() {
			return GetRuleContext<Create_asymmetric_keyContext>(0);
		}
		public Create_column_encryption_keyContext create_column_encryption_key() {
			return GetRuleContext<Create_column_encryption_keyContext>(0);
		}
		public Create_column_master_keyContext create_column_master_key() {
			return GetRuleContext<Create_column_master_keyContext>(0);
		}
		public Create_credentialContext create_credential() {
			return GetRuleContext<Create_credentialContext>(0);
		}
		public Create_database_scoped_credentialContext create_database_scoped_credential() {
			return GetRuleContext<Create_database_scoped_credentialContext>(0);
		}
		public Create_cryptographic_providerContext create_cryptographic_provider() {
			return GetRuleContext<Create_cryptographic_providerContext>(0);
		}
		public Create_databaseContext create_database() {
			return GetRuleContext<Create_databaseContext>(0);
		}
		public Create_db_roleContext create_db_role() {
			return GetRuleContext<Create_db_roleContext>(0);
		}
		public Create_event_notificationContext create_event_notification() {
			return GetRuleContext<Create_event_notificationContext>(0);
		}
		public Create_external_libraryContext create_external_library() {
			return GetRuleContext<Create_external_libraryContext>(0);
		}
		public Create_external_resource_poolContext create_external_resource_pool() {
			return GetRuleContext<Create_external_resource_poolContext>(0);
		}
		public Create_fulltext_catalogContext create_fulltext_catalog() {
			return GetRuleContext<Create_fulltext_catalogContext>(0);
		}
		public Create_fulltext_stoplistContext create_fulltext_stoplist() {
			return GetRuleContext<Create_fulltext_stoplistContext>(0);
		}
		public Create_indexContext create_index() {
			return GetRuleContext<Create_indexContext>(0);
		}
		public Create_login_azure_sqlContext create_login_azure_sql() {
			return GetRuleContext<Create_login_azure_sqlContext>(0);
		}
		public Create_login_pdwContext create_login_pdw() {
			return GetRuleContext<Create_login_pdwContext>(0);
		}
		public Create_login_sql_serverContext create_login_sql_server() {
			return GetRuleContext<Create_login_sql_serverContext>(0);
		}
		public Create_master_key_azure_sqlContext create_master_key_azure_sql() {
			return GetRuleContext<Create_master_key_azure_sqlContext>(0);
		}
		public Create_master_key_sql_serverContext create_master_key_sql_server() {
			return GetRuleContext<Create_master_key_sql_serverContext>(0);
		}
		public Create_or_alter_broker_priorityContext create_or_alter_broker_priority() {
			return GetRuleContext<Create_or_alter_broker_priorityContext>(0);
		}
		public Create_or_alter_functionContext create_or_alter_function() {
			return GetRuleContext<Create_or_alter_functionContext>(0);
		}
		public Create_or_alter_procedureContext create_or_alter_procedure() {
			return GetRuleContext<Create_or_alter_procedureContext>(0);
		}
		public Create_or_alter_triggerContext create_or_alter_trigger() {
			return GetRuleContext<Create_or_alter_triggerContext>(0);
		}
		public Create_remote_service_bindingContext create_remote_service_binding() {
			return GetRuleContext<Create_remote_service_bindingContext>(0);
		}
		public Create_resource_poolContext create_resource_pool() {
			return GetRuleContext<Create_resource_poolContext>(0);
		}
		public Create_routeContext create_route() {
			return GetRuleContext<Create_routeContext>(0);
		}
		public Create_ruleContext create_rule() {
			return GetRuleContext<Create_ruleContext>(0);
		}
		public Create_schemaContext create_schema() {
			return GetRuleContext<Create_schemaContext>(0);
		}
		public Create_schema_azure_sql_dw_and_pdwContext create_schema_azure_sql_dw_and_pdw() {
			return GetRuleContext<Create_schema_azure_sql_dw_and_pdwContext>(0);
		}
		public Create_search_property_listContext create_search_property_list() {
			return GetRuleContext<Create_search_property_listContext>(0);
		}
		public Create_security_policyContext create_security_policy() {
			return GetRuleContext<Create_security_policyContext>(0);
		}
		public Create_sequenceContext create_sequence() {
			return GetRuleContext<Create_sequenceContext>(0);
		}
		public Create_server_auditContext create_server_audit() {
			return GetRuleContext<Create_server_auditContext>(0);
		}
		public Create_server_audit_specificationContext create_server_audit_specification() {
			return GetRuleContext<Create_server_audit_specificationContext>(0);
		}
		public Create_server_roleContext create_server_role() {
			return GetRuleContext<Create_server_roleContext>(0);
		}
		public Create_serviceContext create_service() {
			return GetRuleContext<Create_serviceContext>(0);
		}
		public Create_statisticsContext create_statistics() {
			return GetRuleContext<Create_statisticsContext>(0);
		}
		public Create_symmetric_keyContext create_symmetric_key() {
			return GetRuleContext<Create_symmetric_keyContext>(0);
		}
		public Create_synonymContext create_synonym() {
			return GetRuleContext<Create_synonymContext>(0);
		}
		public Create_tableContext create_table() {
			return GetRuleContext<Create_tableContext>(0);
		}
		public Create_typeContext create_type() {
			return GetRuleContext<Create_typeContext>(0);
		}
		public Create_userContext create_user() {
			return GetRuleContext<Create_userContext>(0);
		}
		public Create_user_azure_sql_dwContext create_user_azure_sql_dw() {
			return GetRuleContext<Create_user_azure_sql_dwContext>(0);
		}
		public Create_viewContext create_view() {
			return GetRuleContext<Create_viewContext>(0);
		}
		public Create_workload_groupContext create_workload_group() {
			return GetRuleContext<Create_workload_groupContext>(0);
		}
		public Create_xml_schema_collectionContext create_xml_schema_collection() {
			return GetRuleContext<Create_xml_schema_collectionContext>(0);
		}
		public Drop_aggregateContext drop_aggregate() {
			return GetRuleContext<Drop_aggregateContext>(0);
		}
		public Drop_application_roleContext drop_application_role() {
			return GetRuleContext<Drop_application_roleContext>(0);
		}
		public Drop_assemblyContext drop_assembly() {
			return GetRuleContext<Drop_assemblyContext>(0);
		}
		public Drop_asymmetric_keyContext drop_asymmetric_key() {
			return GetRuleContext<Drop_asymmetric_keyContext>(0);
		}
		public Drop_availability_groupContext drop_availability_group() {
			return GetRuleContext<Drop_availability_groupContext>(0);
		}
		public Drop_broker_priorityContext drop_broker_priority() {
			return GetRuleContext<Drop_broker_priorityContext>(0);
		}
		public Drop_certificateContext drop_certificate() {
			return GetRuleContext<Drop_certificateContext>(0);
		}
		public Drop_column_encryption_keyContext drop_column_encryption_key() {
			return GetRuleContext<Drop_column_encryption_keyContext>(0);
		}
		public Drop_column_master_keyContext drop_column_master_key() {
			return GetRuleContext<Drop_column_master_keyContext>(0);
		}
		public Drop_contractContext drop_contract() {
			return GetRuleContext<Drop_contractContext>(0);
		}
		public Drop_credentialContext drop_credential() {
			return GetRuleContext<Drop_credentialContext>(0);
		}
		public Drop_cryptograhic_providerContext drop_cryptograhic_provider() {
			return GetRuleContext<Drop_cryptograhic_providerContext>(0);
		}
		public Drop_databaseContext drop_database() {
			return GetRuleContext<Drop_databaseContext>(0);
		}
		public Drop_database_audit_specificationContext drop_database_audit_specification() {
			return GetRuleContext<Drop_database_audit_specificationContext>(0);
		}
		public Drop_database_scoped_credentialContext drop_database_scoped_credential() {
			return GetRuleContext<Drop_database_scoped_credentialContext>(0);
		}
		public Drop_db_roleContext drop_db_role() {
			return GetRuleContext<Drop_db_roleContext>(0);
		}
		public Drop_defaultContext drop_default() {
			return GetRuleContext<Drop_defaultContext>(0);
		}
		public Drop_endpointContext drop_endpoint() {
			return GetRuleContext<Drop_endpointContext>(0);
		}
		public Drop_event_notificationsContext drop_event_notifications() {
			return GetRuleContext<Drop_event_notificationsContext>(0);
		}
		public Drop_event_sessionContext drop_event_session() {
			return GetRuleContext<Drop_event_sessionContext>(0);
		}
		public Drop_external_data_sourceContext drop_external_data_source() {
			return GetRuleContext<Drop_external_data_sourceContext>(0);
		}
		public Drop_external_file_formatContext drop_external_file_format() {
			return GetRuleContext<Drop_external_file_formatContext>(0);
		}
		public Drop_external_libraryContext drop_external_library() {
			return GetRuleContext<Drop_external_libraryContext>(0);
		}
		public Drop_external_resource_poolContext drop_external_resource_pool() {
			return GetRuleContext<Drop_external_resource_poolContext>(0);
		}
		public Drop_external_tableContext drop_external_table() {
			return GetRuleContext<Drop_external_tableContext>(0);
		}
		public Drop_fulltext_catalogContext drop_fulltext_catalog() {
			return GetRuleContext<Drop_fulltext_catalogContext>(0);
		}
		public Drop_fulltext_indexContext drop_fulltext_index() {
			return GetRuleContext<Drop_fulltext_indexContext>(0);
		}
		public Drop_fulltext_stoplistContext drop_fulltext_stoplist() {
			return GetRuleContext<Drop_fulltext_stoplistContext>(0);
		}
		public Drop_functionContext drop_function() {
			return GetRuleContext<Drop_functionContext>(0);
		}
		public Drop_indexContext drop_index() {
			return GetRuleContext<Drop_indexContext>(0);
		}
		public Drop_loginContext drop_login() {
			return GetRuleContext<Drop_loginContext>(0);
		}
		public Drop_master_keyContext drop_master_key() {
			return GetRuleContext<Drop_master_keyContext>(0);
		}
		public Drop_message_typeContext drop_message_type() {
			return GetRuleContext<Drop_message_typeContext>(0);
		}
		public Drop_partition_functionContext drop_partition_function() {
			return GetRuleContext<Drop_partition_functionContext>(0);
		}
		public Drop_partition_schemeContext drop_partition_scheme() {
			return GetRuleContext<Drop_partition_schemeContext>(0);
		}
		public Drop_procedureContext drop_procedure() {
			return GetRuleContext<Drop_procedureContext>(0);
		}
		public Drop_queueContext drop_queue() {
			return GetRuleContext<Drop_queueContext>(0);
		}
		public Drop_remote_service_bindingContext drop_remote_service_binding() {
			return GetRuleContext<Drop_remote_service_bindingContext>(0);
		}
		public Drop_resource_poolContext drop_resource_pool() {
			return GetRuleContext<Drop_resource_poolContext>(0);
		}
		public Drop_routeContext drop_route() {
			return GetRuleContext<Drop_routeContext>(0);
		}
		public Drop_ruleContext drop_rule() {
			return GetRuleContext<Drop_ruleContext>(0);
		}
		public Drop_schemaContext drop_schema() {
			return GetRuleContext<Drop_schemaContext>(0);
		}
		public Drop_search_property_listContext drop_search_property_list() {
			return GetRuleContext<Drop_search_property_listContext>(0);
		}
		public Drop_security_policyContext drop_security_policy() {
			return GetRuleContext<Drop_security_policyContext>(0);
		}
		public Drop_sequenceContext drop_sequence() {
			return GetRuleContext<Drop_sequenceContext>(0);
		}
		public Drop_server_auditContext drop_server_audit() {
			return GetRuleContext<Drop_server_auditContext>(0);
		}
		public Drop_server_audit_specificationContext drop_server_audit_specification() {
			return GetRuleContext<Drop_server_audit_specificationContext>(0);
		}
		public Drop_server_roleContext drop_server_role() {
			return GetRuleContext<Drop_server_roleContext>(0);
		}
		public Drop_serviceContext drop_service() {
			return GetRuleContext<Drop_serviceContext>(0);
		}
		public Drop_signatureContext drop_signature() {
			return GetRuleContext<Drop_signatureContext>(0);
		}
		public Drop_statisticsContext drop_statistics() {
			return GetRuleContext<Drop_statisticsContext>(0);
		}
		public Drop_statistics_name_azure_dw_and_pdwContext drop_statistics_name_azure_dw_and_pdw() {
			return GetRuleContext<Drop_statistics_name_azure_dw_and_pdwContext>(0);
		}
		public Drop_symmetric_keyContext drop_symmetric_key() {
			return GetRuleContext<Drop_symmetric_keyContext>(0);
		}
		public Drop_synonymContext drop_synonym() {
			return GetRuleContext<Drop_synonymContext>(0);
		}
		public Drop_tableContext drop_table() {
			return GetRuleContext<Drop_tableContext>(0);
		}
		public Drop_triggerContext drop_trigger() {
			return GetRuleContext<Drop_triggerContext>(0);
		}
		public Drop_typeContext drop_type() {
			return GetRuleContext<Drop_typeContext>(0);
		}
		public Drop_userContext drop_user() {
			return GetRuleContext<Drop_userContext>(0);
		}
		public Drop_viewContext drop_view() {
			return GetRuleContext<Drop_viewContext>(0);
		}
		public Drop_workload_groupContext drop_workload_group() {
			return GetRuleContext<Drop_workload_groupContext>(0);
		}
		public Drop_xml_schema_collectionContext drop_xml_schema_collection() {
			return GetRuleContext<Drop_xml_schema_collectionContext>(0);
		}
		public Disable_triggerContext disable_trigger() {
			return GetRuleContext<Disable_triggerContext>(0);
		}
		public Enable_triggerContext enable_trigger() {
			return GetRuleContext<Enable_triggerContext>(0);
		}
		public Lock_tableContext lock_table() {
			return GetRuleContext<Lock_tableContext>(0);
		}
		public Truncate_tableContext truncate_table() {
			return GetRuleContext<Truncate_tableContext>(0);
		}
		public Update_statisticsContext update_statistics() {
			return GetRuleContext<Update_statisticsContext>(0);
		}
		public Ddl_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ddl_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDdl_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDdl_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDdl_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ddl_clauseContext ddl_clause() {
		Ddl_clauseContext _localctx = new Ddl_clauseContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_ddl_clause);
		try {
			State = 1216;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1055; alter_application_role();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1056; alter_assembly();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1057; alter_asymmetric_key();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1058; alter_authorization();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1059; alter_authorization_for_azure_dw();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1060; alter_authorization_for_parallel_dw();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1061; alter_authorization_for_sql_database();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1062; alter_availability_group();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1063; alter_certificate();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1064; alter_column_encryption_key();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1065; alter_credential();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1066; alter_cryptographic_provider();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1067; alter_database();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1068; alter_db_role();
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1069; alter_endpoint();
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1070; create_or_alter_event_session();
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1071; create_external_data_source();
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1072; alter_external_data_source();
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1073; alter_external_library();
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1074; alter_external_resource_pool();
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 1075; alter_fulltext_catalog();
				}
				break;

			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 1076; alter_fulltext_stoplist();
				}
				break;

			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 1077; alter_login_azure_sql();
				}
				break;

			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 1078; alter_login_azure_sql_dw_and_pdw();
				}
				break;

			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 1079; alter_login_sql_server();
				}
				break;

			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 1080; alter_master_key_azure_sql();
				}
				break;

			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 1081; alter_master_key_sql_server();
				}
				break;

			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 1082; alter_message_type();
				}
				break;

			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 1083; alter_partition_function();
				}
				break;

			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 1084; alter_partition_scheme();
				}
				break;

			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 1085; alter_remote_service_binding();
				}
				break;

			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 1086; alter_resource_governor();
				}
				break;

			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 1087; alter_schema_azure_sql_dw_and_pdw();
				}
				break;

			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 1088; alter_schema_sql();
				}
				break;

			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 1089; alter_sequence();
				}
				break;

			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 1090; alter_server_audit();
				}
				break;

			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 1091; alter_server_audit_specification();
				}
				break;

			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 1092; alter_server_configuration();
				}
				break;

			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 1093; alter_server_role();
				}
				break;

			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 1094; alter_server_role_pdw();
				}
				break;

			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 1095; alter_service();
				}
				break;

			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 1096; alter_service_master_key();
				}
				break;

			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 1097; alter_symmetric_key();
				}
				break;

			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 1098; alter_table();
				}
				break;

			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 1099; alter_user();
				}
				break;

			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 1100; alter_user_azure_sql();
				}
				break;

			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 1101; alter_workload_group();
				}
				break;

			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 1102; create_application_role();
				}
				break;

			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 1103; create_assembly();
				}
				break;

			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 1104; create_asymmetric_key();
				}
				break;

			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 1105; create_column_encryption_key();
				}
				break;

			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 1106; create_column_master_key();
				}
				break;

			case 53:
				EnterOuterAlt(_localctx, 53);
				{
				State = 1107; create_credential();
				}
				break;

			case 54:
				EnterOuterAlt(_localctx, 54);
				{
				State = 1108; create_database_scoped_credential();
				}
				break;

			case 55:
				EnterOuterAlt(_localctx, 55);
				{
				State = 1109; create_cryptographic_provider();
				}
				break;

			case 56:
				EnterOuterAlt(_localctx, 56);
				{
				State = 1110; create_database();
				}
				break;

			case 57:
				EnterOuterAlt(_localctx, 57);
				{
				State = 1111; create_db_role();
				}
				break;

			case 58:
				EnterOuterAlt(_localctx, 58);
				{
				State = 1112; create_event_notification();
				}
				break;

			case 59:
				EnterOuterAlt(_localctx, 59);
				{
				State = 1113; create_external_library();
				}
				break;

			case 60:
				EnterOuterAlt(_localctx, 60);
				{
				State = 1114; create_external_resource_pool();
				}
				break;

			case 61:
				EnterOuterAlt(_localctx, 61);
				{
				State = 1115; create_fulltext_catalog();
				}
				break;

			case 62:
				EnterOuterAlt(_localctx, 62);
				{
				State = 1116; create_fulltext_stoplist();
				}
				break;

			case 63:
				EnterOuterAlt(_localctx, 63);
				{
				State = 1117; create_index();
				}
				break;

			case 64:
				EnterOuterAlt(_localctx, 64);
				{
				State = 1118; create_login_azure_sql();
				}
				break;

			case 65:
				EnterOuterAlt(_localctx, 65);
				{
				State = 1119; create_login_pdw();
				}
				break;

			case 66:
				EnterOuterAlt(_localctx, 66);
				{
				State = 1120; create_login_sql_server();
				}
				break;

			case 67:
				EnterOuterAlt(_localctx, 67);
				{
				State = 1121; create_master_key_azure_sql();
				}
				break;

			case 68:
				EnterOuterAlt(_localctx, 68);
				{
				State = 1122; create_master_key_sql_server();
				}
				break;

			case 69:
				EnterOuterAlt(_localctx, 69);
				{
				State = 1123; create_or_alter_broker_priority();
				}
				break;

			case 70:
				EnterOuterAlt(_localctx, 70);
				{
				State = 1124; create_or_alter_function();
				}
				break;

			case 71:
				EnterOuterAlt(_localctx, 71);
				{
				State = 1125; create_or_alter_procedure();
				}
				break;

			case 72:
				EnterOuterAlt(_localctx, 72);
				{
				State = 1126; create_or_alter_trigger();
				}
				break;

			case 73:
				EnterOuterAlt(_localctx, 73);
				{
				State = 1127; create_remote_service_binding();
				}
				break;

			case 74:
				EnterOuterAlt(_localctx, 74);
				{
				State = 1128; create_resource_pool();
				}
				break;

			case 75:
				EnterOuterAlt(_localctx, 75);
				{
				State = 1129; create_route();
				}
				break;

			case 76:
				EnterOuterAlt(_localctx, 76);
				{
				State = 1130; create_rule();
				}
				break;

			case 77:
				EnterOuterAlt(_localctx, 77);
				{
				State = 1131; create_schema();
				}
				break;

			case 78:
				EnterOuterAlt(_localctx, 78);
				{
				State = 1132; create_schema_azure_sql_dw_and_pdw();
				}
				break;

			case 79:
				EnterOuterAlt(_localctx, 79);
				{
				State = 1133; create_search_property_list();
				}
				break;

			case 80:
				EnterOuterAlt(_localctx, 80);
				{
				State = 1134; create_security_policy();
				}
				break;

			case 81:
				EnterOuterAlt(_localctx, 81);
				{
				State = 1135; create_sequence();
				}
				break;

			case 82:
				EnterOuterAlt(_localctx, 82);
				{
				State = 1136; create_server_audit();
				}
				break;

			case 83:
				EnterOuterAlt(_localctx, 83);
				{
				State = 1137; create_server_audit_specification();
				}
				break;

			case 84:
				EnterOuterAlt(_localctx, 84);
				{
				State = 1138; create_server_role();
				}
				break;

			case 85:
				EnterOuterAlt(_localctx, 85);
				{
				State = 1139; create_service();
				}
				break;

			case 86:
				EnterOuterAlt(_localctx, 86);
				{
				State = 1140; create_statistics();
				}
				break;

			case 87:
				EnterOuterAlt(_localctx, 87);
				{
				State = 1141; create_symmetric_key();
				}
				break;

			case 88:
				EnterOuterAlt(_localctx, 88);
				{
				State = 1142; create_synonym();
				}
				break;

			case 89:
				EnterOuterAlt(_localctx, 89);
				{
				State = 1143; create_table();
				}
				break;

			case 90:
				EnterOuterAlt(_localctx, 90);
				{
				State = 1144; create_type();
				}
				break;

			case 91:
				EnterOuterAlt(_localctx, 91);
				{
				State = 1145; create_user();
				}
				break;

			case 92:
				EnterOuterAlt(_localctx, 92);
				{
				State = 1146; create_user_azure_sql_dw();
				}
				break;

			case 93:
				EnterOuterAlt(_localctx, 93);
				{
				State = 1147; create_view();
				}
				break;

			case 94:
				EnterOuterAlt(_localctx, 94);
				{
				State = 1148; create_workload_group();
				}
				break;

			case 95:
				EnterOuterAlt(_localctx, 95);
				{
				State = 1149; create_xml_schema_collection();
				}
				break;

			case 96:
				EnterOuterAlt(_localctx, 96);
				{
				State = 1150; drop_aggregate();
				}
				break;

			case 97:
				EnterOuterAlt(_localctx, 97);
				{
				State = 1151; drop_application_role();
				}
				break;

			case 98:
				EnterOuterAlt(_localctx, 98);
				{
				State = 1152; drop_assembly();
				}
				break;

			case 99:
				EnterOuterAlt(_localctx, 99);
				{
				State = 1153; drop_asymmetric_key();
				}
				break;

			case 100:
				EnterOuterAlt(_localctx, 100);
				{
				State = 1154; drop_availability_group();
				}
				break;

			case 101:
				EnterOuterAlt(_localctx, 101);
				{
				State = 1155; drop_broker_priority();
				}
				break;

			case 102:
				EnterOuterAlt(_localctx, 102);
				{
				State = 1156; drop_certificate();
				}
				break;

			case 103:
				EnterOuterAlt(_localctx, 103);
				{
				State = 1157; drop_column_encryption_key();
				}
				break;

			case 104:
				EnterOuterAlt(_localctx, 104);
				{
				State = 1158; drop_column_master_key();
				}
				break;

			case 105:
				EnterOuterAlt(_localctx, 105);
				{
				State = 1159; drop_contract();
				}
				break;

			case 106:
				EnterOuterAlt(_localctx, 106);
				{
				State = 1160; drop_credential();
				}
				break;

			case 107:
				EnterOuterAlt(_localctx, 107);
				{
				State = 1161; drop_cryptograhic_provider();
				}
				break;

			case 108:
				EnterOuterAlt(_localctx, 108);
				{
				State = 1162; drop_database();
				}
				break;

			case 109:
				EnterOuterAlt(_localctx, 109);
				{
				State = 1163; drop_database_audit_specification();
				}
				break;

			case 110:
				EnterOuterAlt(_localctx, 110);
				{
				State = 1164; drop_database_scoped_credential();
				}
				break;

			case 111:
				EnterOuterAlt(_localctx, 111);
				{
				State = 1165; drop_db_role();
				}
				break;

			case 112:
				EnterOuterAlt(_localctx, 112);
				{
				State = 1166; drop_default();
				}
				break;

			case 113:
				EnterOuterAlt(_localctx, 113);
				{
				State = 1167; drop_endpoint();
				}
				break;

			case 114:
				EnterOuterAlt(_localctx, 114);
				{
				State = 1168; drop_event_notifications();
				}
				break;

			case 115:
				EnterOuterAlt(_localctx, 115);
				{
				State = 1169; drop_event_session();
				}
				break;

			case 116:
				EnterOuterAlt(_localctx, 116);
				{
				State = 1170; drop_external_data_source();
				}
				break;

			case 117:
				EnterOuterAlt(_localctx, 117);
				{
				State = 1171; drop_external_file_format();
				}
				break;

			case 118:
				EnterOuterAlt(_localctx, 118);
				{
				State = 1172; drop_external_library();
				}
				break;

			case 119:
				EnterOuterAlt(_localctx, 119);
				{
				State = 1173; drop_external_resource_pool();
				}
				break;

			case 120:
				EnterOuterAlt(_localctx, 120);
				{
				State = 1174; drop_external_table();
				}
				break;

			case 121:
				EnterOuterAlt(_localctx, 121);
				{
				State = 1175; drop_fulltext_catalog();
				}
				break;

			case 122:
				EnterOuterAlt(_localctx, 122);
				{
				State = 1176; drop_fulltext_index();
				}
				break;

			case 123:
				EnterOuterAlt(_localctx, 123);
				{
				State = 1177; drop_fulltext_stoplist();
				}
				break;

			case 124:
				EnterOuterAlt(_localctx, 124);
				{
				State = 1178; drop_function();
				}
				break;

			case 125:
				EnterOuterAlt(_localctx, 125);
				{
				State = 1179; drop_index();
				}
				break;

			case 126:
				EnterOuterAlt(_localctx, 126);
				{
				State = 1180; drop_login();
				}
				break;

			case 127:
				EnterOuterAlt(_localctx, 127);
				{
				State = 1181; drop_master_key();
				}
				break;

			case 128:
				EnterOuterAlt(_localctx, 128);
				{
				State = 1182; drop_message_type();
				}
				break;

			case 129:
				EnterOuterAlt(_localctx, 129);
				{
				State = 1183; drop_partition_function();
				}
				break;

			case 130:
				EnterOuterAlt(_localctx, 130);
				{
				State = 1184; drop_partition_scheme();
				}
				break;

			case 131:
				EnterOuterAlt(_localctx, 131);
				{
				State = 1185; drop_procedure();
				}
				break;

			case 132:
				EnterOuterAlt(_localctx, 132);
				{
				State = 1186; drop_queue();
				}
				break;

			case 133:
				EnterOuterAlt(_localctx, 133);
				{
				State = 1187; drop_remote_service_binding();
				}
				break;

			case 134:
				EnterOuterAlt(_localctx, 134);
				{
				State = 1188; drop_resource_pool();
				}
				break;

			case 135:
				EnterOuterAlt(_localctx, 135);
				{
				State = 1189; drop_route();
				}
				break;

			case 136:
				EnterOuterAlt(_localctx, 136);
				{
				State = 1190; drop_rule();
				}
				break;

			case 137:
				EnterOuterAlt(_localctx, 137);
				{
				State = 1191; drop_schema();
				}
				break;

			case 138:
				EnterOuterAlt(_localctx, 138);
				{
				State = 1192; drop_search_property_list();
				}
				break;

			case 139:
				EnterOuterAlt(_localctx, 139);
				{
				State = 1193; drop_security_policy();
				}
				break;

			case 140:
				EnterOuterAlt(_localctx, 140);
				{
				State = 1194; drop_sequence();
				}
				break;

			case 141:
				EnterOuterAlt(_localctx, 141);
				{
				State = 1195; drop_server_audit();
				}
				break;

			case 142:
				EnterOuterAlt(_localctx, 142);
				{
				State = 1196; drop_server_audit_specification();
				}
				break;

			case 143:
				EnterOuterAlt(_localctx, 143);
				{
				State = 1197; drop_server_role();
				}
				break;

			case 144:
				EnterOuterAlt(_localctx, 144);
				{
				State = 1198; drop_service();
				}
				break;

			case 145:
				EnterOuterAlt(_localctx, 145);
				{
				State = 1199; drop_signature();
				}
				break;

			case 146:
				EnterOuterAlt(_localctx, 146);
				{
				State = 1200; drop_statistics();
				}
				break;

			case 147:
				EnterOuterAlt(_localctx, 147);
				{
				State = 1201; drop_statistics_name_azure_dw_and_pdw();
				}
				break;

			case 148:
				EnterOuterAlt(_localctx, 148);
				{
				State = 1202; drop_symmetric_key();
				}
				break;

			case 149:
				EnterOuterAlt(_localctx, 149);
				{
				State = 1203; drop_synonym();
				}
				break;

			case 150:
				EnterOuterAlt(_localctx, 150);
				{
				State = 1204; drop_table();
				}
				break;

			case 151:
				EnterOuterAlt(_localctx, 151);
				{
				State = 1205; drop_trigger();
				}
				break;

			case 152:
				EnterOuterAlt(_localctx, 152);
				{
				State = 1206; drop_type();
				}
				break;

			case 153:
				EnterOuterAlt(_localctx, 153);
				{
				State = 1207; drop_user();
				}
				break;

			case 154:
				EnterOuterAlt(_localctx, 154);
				{
				State = 1208; drop_view();
				}
				break;

			case 155:
				EnterOuterAlt(_localctx, 155);
				{
				State = 1209; drop_workload_group();
				}
				break;

			case 156:
				EnterOuterAlt(_localctx, 156);
				{
				State = 1210; drop_xml_schema_collection();
				}
				break;

			case 157:
				EnterOuterAlt(_localctx, 157);
				{
				State = 1211; disable_trigger();
				}
				break;

			case 158:
				EnterOuterAlt(_localctx, 158);
				{
				State = 1212; enable_trigger();
				}
				break;

			case 159:
				EnterOuterAlt(_localctx, 159);
				{
				State = 1213; lock_table();
				}
				break;

			case 160:
				EnterOuterAlt(_localctx, 160);
				{
				State = 1214; truncate_table();
				}
				break;

			case 161:
				EnterOuterAlt(_localctx, 161);
				{
				State = 1215; update_statistics();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Backup_statementContext : ParserRuleContext {
		public Backup_databaseContext backup_database() {
			return GetRuleContext<Backup_databaseContext>(0);
		}
		public Backup_logContext backup_log() {
			return GetRuleContext<Backup_logContext>(0);
		}
		public Backup_certificateContext backup_certificate() {
			return GetRuleContext<Backup_certificateContext>(0);
		}
		public Backup_master_keyContext backup_master_key() {
			return GetRuleContext<Backup_master_keyContext>(0);
		}
		public Backup_service_master_keyContext backup_service_master_key() {
			return GetRuleContext<Backup_service_master_keyContext>(0);
		}
		public Backup_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backup_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBackup_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBackup_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBackup_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Backup_statementContext backup_statement() {
		Backup_statementContext _localctx = new Backup_statementContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_backup_statement);
		try {
			State = 1223;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1218; backup_database();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1219; backup_log();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1220; backup_certificate();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1221; backup_master_key();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1222; backup_service_master_key();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cfl_statementContext : ParserRuleContext {
		public Block_statementContext block_statement() {
			return GetRuleContext<Block_statementContext>(0);
		}
		public Break_statementContext break_statement() {
			return GetRuleContext<Break_statementContext>(0);
		}
		public Continue_statementContext continue_statement() {
			return GetRuleContext<Continue_statementContext>(0);
		}
		public Goto_statementContext goto_statement() {
			return GetRuleContext<Goto_statementContext>(0);
		}
		public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		public Throw_statementContext throw_statement() {
			return GetRuleContext<Throw_statementContext>(0);
		}
		public Try_catch_statementContext try_catch_statement() {
			return GetRuleContext<Try_catch_statementContext>(0);
		}
		public Waitfor_statementContext waitfor_statement() {
			return GetRuleContext<Waitfor_statementContext>(0);
		}
		public While_statementContext while_statement() {
			return GetRuleContext<While_statementContext>(0);
		}
		public Print_statementContext print_statement() {
			return GetRuleContext<Print_statementContext>(0);
		}
		public Raiseerror_statementContext raiseerror_statement() {
			return GetRuleContext<Raiseerror_statementContext>(0);
		}
		public Cfl_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cfl_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCfl_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCfl_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCfl_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cfl_statementContext cfl_statement() {
		Cfl_statementContext _localctx = new Cfl_statementContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_cfl_statement);
		try {
			State = 1237;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1225; block_statement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1226; break_statement();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1227; continue_statement();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1228; goto_statement();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1229; if_statement();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1230; return_statement();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1231; throw_statement();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1232; try_catch_statement();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1233; waitfor_statement();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1234; while_statement();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1235; print_statement();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1236; raiseerror_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Block_statementContext : ParserRuleContext {
		public ITerminalNode BEGIN() { return GetToken(TSqlParser.BEGIN, 0); }
		public ITerminalNode END() { return GetToken(TSqlParser.END, 0); }
		public Sql_clausesContext sql_clauses() {
			return GetRuleContext<Sql_clausesContext>(0);
		}
		public Block_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBlock_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBlock_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Block_statementContext block_statement() {
		Block_statementContext _localctx = new Block_statementContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_block_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1239; Match(BEGIN);
			State = 1241;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
			case 1:
				{
				State = 1240; Match(SEMI);
				}
				break;
			}
			State = 1244;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
			case 1:
				{
				State = 1243; sql_clauses();
				}
				break;
			}
			State = 1246; Match(END);
			State = 1248;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
			case 1:
				{
				State = 1247; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Break_statementContext : ParserRuleContext {
		public ITerminalNode BREAK() { return GetToken(TSqlParser.BREAK, 0); }
		public Break_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_break_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBreak_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBreak_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreak_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Break_statementContext break_statement() {
		Break_statementContext _localctx = new Break_statementContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_break_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1250; Match(BREAK);
			State = 1252;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
			case 1:
				{
				State = 1251; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Continue_statementContext : ParserRuleContext {
		public ITerminalNode CONTINUE() { return GetToken(TSqlParser.CONTINUE, 0); }
		public Continue_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continue_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterContinue_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitContinue_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinue_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Continue_statementContext continue_statement() {
		Continue_statementContext _localctx = new Continue_statementContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_continue_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1254; Match(CONTINUE);
			State = 1256;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
			case 1:
				{
				State = 1255; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Goto_statementContext : ParserRuleContext {
		public ITerminalNode GOTO() { return GetToken(TSqlParser.GOTO, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Goto_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goto_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGoto_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGoto_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoto_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Goto_statementContext goto_statement() {
		Goto_statementContext _localctx = new Goto_statementContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_goto_statement);
		try {
			State = 1268;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case GOTO:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1258; Match(GOTO);
				State = 1259; id();
				State = 1261;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,17,_ctx) ) {
				case 1:
					{
					State = 1260; Match(SEMI);
					}
					break;
				}
				}
				break;
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BACKSLASH:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONNECTION_OPTIONS:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DISK:
			case DOUBLE_BACK_SLASH:
			case DOUBLE_FORWARD_SLASH:
			case DTC_SUPPORT:
			case DUMP:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILENAME:
			case FILLFACTOR:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IDENTITYCOL:
			case IIF:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case IPV4_ADDR:
			case IPV6_ADDR:
			case ISNULL:
			case KERBEROS:
			case KEY:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOAD:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NATIVE_COMPILATION:
			case NEGOTIATE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case NULL:
			case OFFSETS:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PLATFORM:
			case POLICY:
			case PRECISION:
			case PREDICATE:
			case PROCESS:
			case PUBLIC:
			case PUSHDOWN:
			case PYTHON:
			case R:
			case RAW:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESULT_SETS:
			case RESUME:
			case RETAINDAYS:
			case RETURN:
			case RETURNS:
			case REWIND:
			case ROLE:
			case ROWCOUNT:
			case ROWGUIDCOL:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SECURITYAUDIT:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SESSION_USER:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case SYSTEM_USER:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case USER:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHIN:
			case WITHOUT:
			case WITNESS:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BUCKET_COUNT:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATEFIRST:
			case DATEFORMAT:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADOOP:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNDEFINED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case DOLLAR_ACTION:
			case SPACE:
			case COMMENT:
			case LINE_COMMENT:
			case DOUBLE_QUOTE_ID:
			case SINGLE_QUOTE:
			case SQUARE_BRACKET_ID:
			case LOCAL_ID:
			case DECIMAL:
			case ID:
			case QUOTED_URL:
			case QUOTED_HOST_AND_PORT:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case EQUAL:
			case GREATER:
			case LESS:
			case EXCLAMATION:
			case PLUS_ASSIGN:
			case MINUS_ASSIGN:
			case MULT_ASSIGN:
			case DIV_ASSIGN:
			case MOD_ASSIGN:
			case AND_ASSIGN:
			case XOR_ASSIGN:
			case OR_ASSIGN:
			case DOUBLE_BAR:
			case DOT:
			case UNDERLINE:
			case AT:
			case SHARP:
			case DOLLAR:
			case LR_BRACKET:
			case RR_BRACKET:
			case COMMA:
			case SEMI:
			case COLON:
			case STAR:
			case DIVIDE:
			case MODULE:
			case PLUS:
			case MINUS:
			case BIT_NOT:
			case BIT_OR:
			case BIT_AND:
			case BIT_XOR:
			case MDY:
			case DMY:
			case YMD:
			case YDM:
			case MYD:
			case DYM:
			case IPV4_OCTECT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1263; id();
				State = 1264; Match(COLON);
				State = 1266;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,18,_ctx) ) {
				case 1:
					{
					State = 1265; Match(SEMI);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(TSqlParser.RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterReturn_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitReturn_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_return_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1270; Match(RETURN);
			State = 1272;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
			case 1:
				{
				State = 1271; expression(0);
				}
				break;
			}
			State = 1275;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
			case 1:
				{
				State = 1274; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public Sql_clauseContext[] sql_clause() {
			return GetRuleContexts<Sql_clauseContext>();
		}
		public Sql_clauseContext sql_clause(int i) {
			return GetRuleContext<Sql_clauseContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(TSqlParser.ELSE, 0); }
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_if_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1277; Match(IF);
			State = 1278; search_condition();
			State = 1279; sql_clause();
			State = 1282;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,22,_ctx) ) {
			case 1:
				{
				State = 1280; Match(ELSE);
				State = 1281; sql_clause();
				}
				break;
			}
			State = 1285;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,23,_ctx) ) {
			case 1:
				{
				State = 1284; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Throw_statementContext : ParserRuleContext {
		public ITerminalNode THROW() { return GetToken(TSqlParser.THROW, 0); }
		public Throw_error_numberContext throw_error_number() {
			return GetRuleContext<Throw_error_numberContext>(0);
		}
		public Throw_messageContext throw_message() {
			return GetRuleContext<Throw_messageContext>(0);
		}
		public Throw_stateContext throw_state() {
			return GetRuleContext<Throw_stateContext>(0);
		}
		public Throw_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throw_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterThrow_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitThrow_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrow_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Throw_statementContext throw_statement() {
		Throw_statementContext _localctx = new Throw_statementContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_throw_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1287; Match(THROW);
			State = 1294;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,24,_ctx) ) {
			case 1:
				{
				State = 1288; throw_error_number();
				State = 1289; Match(COMMA);
				State = 1290; throw_message();
				State = 1291; Match(COMMA);
				State = 1292; throw_state();
				}
				break;
			}
			State = 1297;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,25,_ctx) ) {
			case 1:
				{
				State = 1296; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Throw_error_numberContext : ParserRuleContext {
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Throw_error_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throw_error_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterThrow_error_number(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitThrow_error_number(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrow_error_number(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Throw_error_numberContext throw_error_number() {
		Throw_error_numberContext _localctx = new Throw_error_numberContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_throw_error_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1299;
			_la = _input.La(1);
			if ( !(_la==LOCAL_ID || _la==DECIMAL) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Throw_messageContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Throw_messageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throw_message; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterThrow_message(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitThrow_message(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrow_message(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Throw_messageContext throw_message() {
		Throw_messageContext _localctx = new Throw_messageContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_throw_message);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1301;
			_la = _input.La(1);
			if ( !(_la==LOCAL_ID || _la==STRING) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Throw_stateContext : ParserRuleContext {
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Throw_stateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throw_state; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterThrow_state(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitThrow_state(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrow_state(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Throw_stateContext throw_state() {
		Throw_stateContext _localctx = new Throw_stateContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_throw_state);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1303;
			_la = _input.La(1);
			if ( !(_la==LOCAL_ID || _la==DECIMAL) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Try_catch_statementContext : ParserRuleContext {
		public Sql_clausesContext try_clauses;
		public Sql_clausesContext catch_clauses;
		public ITerminalNode[] BEGIN() { return GetTokens(TSqlParser.BEGIN); }
		public ITerminalNode BEGIN(int i) {
			return GetToken(TSqlParser.BEGIN, i);
		}
		public ITerminalNode[] TRY() { return GetTokens(TSqlParser.TRY); }
		public ITerminalNode TRY(int i) {
			return GetToken(TSqlParser.TRY, i);
		}
		public ITerminalNode[] END() { return GetTokens(TSqlParser.END); }
		public ITerminalNode END(int i) {
			return GetToken(TSqlParser.END, i);
		}
		public ITerminalNode[] CATCH() { return GetTokens(TSqlParser.CATCH); }
		public ITerminalNode CATCH(int i) {
			return GetToken(TSqlParser.CATCH, i);
		}
		public Sql_clausesContext[] sql_clauses() {
			return GetRuleContexts<Sql_clausesContext>();
		}
		public Sql_clausesContext sql_clauses(int i) {
			return GetRuleContext<Sql_clausesContext>(i);
		}
		public Try_catch_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_try_catch_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTry_catch_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTry_catch_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTry_catch_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Try_catch_statementContext try_catch_statement() {
		Try_catch_statementContext _localctx = new Try_catch_statementContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_try_catch_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1305; Match(BEGIN);
			State = 1306; Match(TRY);
			State = 1308;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,26,_ctx) ) {
			case 1:
				{
				State = 1307; Match(SEMI);
				}
				break;
			}
			State = 1311;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,27,_ctx) ) {
			case 1:
				{
				State = 1310; _localctx.try_clauses = sql_clauses();
				}
				break;
			}
			State = 1313; Match(END);
			State = 1314; Match(TRY);
			State = 1316;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==SEMI) {
				{
				State = 1315; Match(SEMI);
				}
			}

			State = 1318; Match(BEGIN);
			State = 1319; Match(CATCH);
			State = 1321;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
			case 1:
				{
				State = 1320; Match(SEMI);
				}
				break;
			}
			State = 1324;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,30,_ctx) ) {
			case 1:
				{
				State = 1323; _localctx.catch_clauses = sql_clauses();
				}
				break;
			}
			State = 1326; Match(END);
			State = 1327; Match(CATCH);
			State = 1329;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,31,_ctx) ) {
			case 1:
				{
				State = 1328; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Waitfor_statementContext : ParserRuleContext {
		public ITerminalNode WAITFOR() { return GetToken(TSqlParser.WAITFOR, 0); }
		public TimeContext time() {
			return GetRuleContext<TimeContext>(0);
		}
		public ITerminalNode DELAY() { return GetToken(TSqlParser.DELAY, 0); }
		public ITerminalNode TIME() { return GetToken(TSqlParser.TIME, 0); }
		public Receive_statementContext receive_statement() {
			return GetRuleContext<Receive_statementContext>(0);
		}
		public Get_conversationContext get_conversation() {
			return GetRuleContext<Get_conversationContext>(0);
		}
		public ITerminalNode TIMEOUT() { return GetToken(TSqlParser.TIMEOUT, 0); }
		public Waitfor_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_waitfor_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWaitfor_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWaitfor_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWaitfor_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Waitfor_statementContext waitfor_statement() {
		Waitfor_statementContext _localctx = new Waitfor_statementContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_waitfor_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1331; Match(WAITFOR);
			State = 1345;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case DELAY:
			case TIME:
				{
				State = 1332;
				_la = _input.La(1);
				if ( !(_la==DELAY || _la==TIME) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1333; time();
				}
				break;
			case LR_BRACKET:
				{
				State = 1334; Match(LR_BRACKET);
				State = 1337;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case RECEIVE:
					{
					State = 1335; receive_statement();
					}
					break;
				case GET:
					{
					State = 1336; get_conversation();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1339; Match(RR_BRACKET);
				State = 1343;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,33,_ctx) ) {
				case 1:
					{
					State = 1340; Match(COMMA);
					State = 1341; Match(TIMEOUT);
					State = 1342; time();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_statementContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(TSqlParser.WHILE, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public Sql_clauseContext sql_clause() {
			return GetRuleContext<Sql_clauseContext>(0);
		}
		public ITerminalNode BREAK() { return GetToken(TSqlParser.BREAK, 0); }
		public ITerminalNode CONTINUE() { return GetToken(TSqlParser.CONTINUE, 0); }
		public While_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWhile_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWhile_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public While_statementContext while_statement() {
		While_statementContext _localctx = new While_statementContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_while_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1347; Match(WHILE);
			State = 1348; search_condition();
			State = 1358;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,37,_ctx) ) {
			case 1:
				{
				State = 1349; sql_clause();
				}
				break;

			case 2:
				{
				State = 1350; Match(BREAK);
				State = 1352;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,35,_ctx) ) {
				case 1:
					{
					State = 1351; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 3:
				{
				State = 1354; Match(CONTINUE);
				State = 1356;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,36,_ctx) ) {
				case 1:
					{
					State = 1355; Match(SEMI);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Print_statementContext : ParserRuleContext {
		public ITerminalNode PRINT() { return GetToken(TSqlParser.PRINT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode DOUBLE_QUOTE_ID() { return GetToken(TSqlParser.DOUBLE_QUOTE_ID, 0); }
		public ITerminalNode[] LOCAL_ID() { return GetTokens(TSqlParser.LOCAL_ID); }
		public ITerminalNode LOCAL_ID(int i) {
			return GetToken(TSqlParser.LOCAL_ID, i);
		}
		public Print_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPrint_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPrint_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Print_statementContext print_statement() {
		Print_statementContext _localctx = new Print_statementContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_print_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1360; Match(PRINT);
			State = 1363;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
			case 1:
				{
				State = 1361; expression(0);
				}
				break;

			case 2:
				{
				State = 1362; Match(DOUBLE_QUOTE_ID);
				}
				break;
			}
			State = 1369;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,39,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1365; Match(COMMA);
					State = 1366; Match(LOCAL_ID);
					}
					} 
				}
				State = 1371;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,39,_ctx);
			}
			State = 1373;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,40,_ctx) ) {
			case 1:
				{
				State = 1372; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Raiseerror_statementContext : ParserRuleContext {
		public IToken msg;
		public Constant_LOCAL_IDContext severity;
		public Constant_LOCAL_IDContext state;
		public IToken formatstring;
		public IToken argument;
		public ITerminalNode RAISERROR() { return GetToken(TSqlParser.RAISERROR, 0); }
		public Constant_LOCAL_IDContext[] constant_LOCAL_ID() {
			return GetRuleContexts<Constant_LOCAL_IDContext>();
		}
		public Constant_LOCAL_IDContext constant_LOCAL_ID(int i) {
			return GetRuleContext<Constant_LOCAL_IDContext>(i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] LOCAL_ID() { return GetTokens(TSqlParser.LOCAL_ID); }
		public ITerminalNode LOCAL_ID(int i) {
			return GetToken(TSqlParser.LOCAL_ID, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LOG() { return GetToken(TSqlParser.LOG, 0); }
		public ITerminalNode SETERROR() { return GetToken(TSqlParser.SETERROR, 0); }
		public ITerminalNode NOWAIT() { return GetToken(TSqlParser.NOWAIT, 0); }
		public ITerminalNode DOUBLE_QUOTE_ID() { return GetToken(TSqlParser.DOUBLE_QUOTE_ID, 0); }
		public Raiseerror_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raiseerror_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRaiseerror_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRaiseerror_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaiseerror_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Raiseerror_statementContext raiseerror_statement() {
		Raiseerror_statementContext _localctx = new Raiseerror_statementContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_raiseerror_statement);
		int _la;
		try {
			int _alt;
			State = 1407;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,45,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1375; Match(RAISERROR);
				State = 1376; Match(LR_BRACKET);
				State = 1377;
				_localctx.msg = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 810)) & ~0x3f) == 0 && ((1L << (_la - 810)) & ((1L << (LOCAL_ID - 810)) | (1L << (DECIMAL - 810)) | (1L << (STRING - 810)))) != 0)) ) {
					_localctx.msg = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1378; Match(COMMA);
				State = 1379; _localctx.severity = constant_LOCAL_ID();
				State = 1380; Match(COMMA);
				State = 1381; _localctx.state = constant_LOCAL_ID();
				State = 1386;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1382; Match(COMMA);
					State = 1383; constant_LOCAL_ID();
					}
					}
					State = 1388;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1389; Match(RR_BRACKET);
				State = 1392;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,42,_ctx) ) {
				case 1:
					{
					State = 1390; Match(WITH);
					State = 1391;
					_la = _input.La(1);
					if ( !(_la==LOG || _la==NOWAIT || _la==SETERROR) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 1395;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,43,_ctx) ) {
				case 1:
					{
					State = 1394; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1397; Match(RAISERROR);
				State = 1398; Match(DECIMAL);
				State = 1399;
				_localctx.formatstring = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 807)) & ~0x3f) == 0 && ((1L << (_la - 807)) & ((1L << (DOUBLE_QUOTE_ID - 807)) | (1L << (LOCAL_ID - 807)) | (1L << (STRING - 807)))) != 0)) ) {
					_localctx.formatstring = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1404;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,44,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1400; Match(COMMA);
						State = 1401;
						_localctx.argument = _input.Lt(1);
						_la = _input.La(1);
						if ( !(((((_la - 810)) & ~0x3f) == 0 && ((1L << (_la - 810)) & ((1L << (LOCAL_ID - 810)) | (1L << (DECIMAL - 810)) | (1L << (STRING - 810)))) != 0)) ) {
							_localctx.argument = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						} 
					}
					State = 1406;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,44,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Empty_statementContext : ParserRuleContext {
		public Empty_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_empty_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEmpty_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEmpty_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmpty_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Empty_statementContext empty_statement() {
		Empty_statementContext _localctx = new Empty_statementContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_empty_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1409; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Another_statementContext : ParserRuleContext {
		public Declare_statementContext declare_statement() {
			return GetRuleContext<Declare_statementContext>(0);
		}
		public Cursor_statementContext cursor_statement() {
			return GetRuleContext<Cursor_statementContext>(0);
		}
		public Conversation_statementContext conversation_statement() {
			return GetRuleContext<Conversation_statementContext>(0);
		}
		public Create_contractContext create_contract() {
			return GetRuleContext<Create_contractContext>(0);
		}
		public Create_queueContext create_queue() {
			return GetRuleContext<Create_queueContext>(0);
		}
		public Alter_queueContext alter_queue() {
			return GetRuleContext<Alter_queueContext>(0);
		}
		public Execute_statementContext execute_statement() {
			return GetRuleContext<Execute_statementContext>(0);
		}
		public Kill_statementContext kill_statement() {
			return GetRuleContext<Kill_statementContext>(0);
		}
		public Message_statementContext message_statement() {
			return GetRuleContext<Message_statementContext>(0);
		}
		public Security_statementContext security_statement() {
			return GetRuleContext<Security_statementContext>(0);
		}
		public Set_statementContext set_statement() {
			return GetRuleContext<Set_statementContext>(0);
		}
		public Transaction_statementContext transaction_statement() {
			return GetRuleContext<Transaction_statementContext>(0);
		}
		public Use_statementContext use_statement() {
			return GetRuleContext<Use_statementContext>(0);
		}
		public Setuser_statementContext setuser_statement() {
			return GetRuleContext<Setuser_statementContext>(0);
		}
		public Reconfigure_statementContext reconfigure_statement() {
			return GetRuleContext<Reconfigure_statementContext>(0);
		}
		public Shutdown_statementContext shutdown_statement() {
			return GetRuleContext<Shutdown_statementContext>(0);
		}
		public Receive_statementContext receive_statement() {
			return GetRuleContext<Receive_statementContext>(0);
		}
		public Another_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_another_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAnother_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAnother_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnother_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Another_statementContext another_statement() {
		Another_statementContext _localctx = new Another_statementContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_another_statement);
		try {
			State = 1428;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,46,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1411; declare_statement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1412; cursor_statement();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1413; conversation_statement();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1414; create_contract();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1415; create_queue();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1416; alter_queue();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1417; execute_statement();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1418; kill_statement();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1419; message_statement();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1420; security_statement();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1421; set_statement();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1422; transaction_statement();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1423; use_statement();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1424; setuser_statement();
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1425; reconfigure_statement();
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1426; shutdown_statement();
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1427; receive_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_application_roleContext : ParserRuleContext {
		public IdContext appliction_role;
		public IdContext new_application_role_name;
		public IToken application_role_password;
		public IdContext app_role_default_schema;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode APPLICATION() { return GetToken(TSqlParser.APPLICATION, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode DEFAULT_SCHEMA() { return GetToken(TSqlParser.DEFAULT_SCHEMA, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Alter_application_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_application_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_application_role(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_application_role(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_application_role(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_application_roleContext alter_application_role() {
		Alter_application_roleContext _localctx = new Alter_application_roleContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_alter_application_role);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1430; Match(ALTER);
			State = 1431; Match(APPLICATION);
			State = 1432; Match(ROLE);
			State = 1433; _localctx.appliction_role = id();
			State = 1434; Match(WITH);
			State = 1441;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,48,_ctx) ) {
			case 1:
				{
				State = 1436;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 1435; Match(COMMA);
					}
				}

				State = 1438; Match(NAME);
				State = 1439; Match(EQUAL);
				State = 1440; _localctx.new_application_role_name = id();
				}
				break;
			}
			State = 1449;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,50,_ctx) ) {
			case 1:
				{
				State = 1444;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 1443; Match(COMMA);
					}
				}

				State = 1446; Match(PASSWORD);
				State = 1447; Match(EQUAL);
				State = 1448; _localctx.application_role_password = Match(STRING);
				}
				break;
			}
			State = 1457;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,52,_ctx) ) {
			case 1:
				{
				State = 1452;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 1451; Match(COMMA);
					}
				}

				State = 1454; Match(DEFAULT_SCHEMA);
				State = 1455; Match(EQUAL);
				State = 1456; _localctx.app_role_default_schema = id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_application_roleContext : ParserRuleContext {
		public IdContext appliction_role;
		public IToken application_role_password;
		public IdContext app_role_default_schema;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode APPLICATION() { return GetToken(TSqlParser.APPLICATION, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode DEFAULT_SCHEMA() { return GetToken(TSqlParser.DEFAULT_SCHEMA, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Create_application_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_application_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_application_role(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_application_role(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_application_role(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_application_roleContext create_application_role() {
		Create_application_roleContext _localctx = new Create_application_roleContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_create_application_role);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1459; Match(CREATE);
			State = 1460; Match(APPLICATION);
			State = 1461; Match(ROLE);
			State = 1462; _localctx.appliction_role = id();
			State = 1463; Match(WITH);
			State = 1470;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,54,_ctx) ) {
			case 1:
				{
				State = 1465;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 1464; Match(COMMA);
					}
				}

				State = 1467; Match(PASSWORD);
				State = 1468; Match(EQUAL);
				State = 1469; _localctx.application_role_password = Match(STRING);
				}
				break;
			}
			State = 1478;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,56,_ctx) ) {
			case 1:
				{
				State = 1473;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 1472; Match(COMMA);
					}
				}

				State = 1475; Match(DEFAULT_SCHEMA);
				State = 1476; Match(EQUAL);
				State = 1477; _localctx.app_role_default_schema = id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_aggregateContext : ParserRuleContext {
		public IdContext aggregate_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode AGGREGATE() { return GetToken(TSqlParser.AGGREGATE, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Drop_aggregateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_aggregate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_aggregate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_aggregate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_aggregate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_aggregateContext drop_aggregate() {
		Drop_aggregateContext _localctx = new Drop_aggregateContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_drop_aggregate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1480; Match(DROP);
			State = 1481; Match(AGGREGATE);
			State = 1484;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IF) {
				{
				State = 1482; Match(IF);
				State = 1483; Match(EXISTS);
				}
			}

			State = 1489;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,58,_ctx) ) {
			case 1:
				{
				State = 1486; schema_name();
				State = 1487; Match(DOT);
				}
				break;
			}
			State = 1491; _localctx.aggregate_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_application_roleContext : ParserRuleContext {
		public IdContext rolename;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode APPLICATION() { return GetToken(TSqlParser.APPLICATION, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_application_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_application_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_application_role(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_application_role(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_application_role(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_application_roleContext drop_application_role() {
		Drop_application_roleContext _localctx = new Drop_application_roleContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_drop_application_role);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1493; Match(DROP);
			State = 1494; Match(APPLICATION);
			State = 1495; Match(ROLE);
			State = 1496; _localctx.rolename = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assemblyContext : ParserRuleContext {
		public IdContext assembly_name;
		public Alter_assembly_startContext alter_assembly_start() {
			return GetRuleContext<Alter_assembly_startContext>(0);
		}
		public Alter_assembly_clauseContext alter_assembly_clause() {
			return GetRuleContext<Alter_assembly_clauseContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Alter_assemblyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assemblyContext alter_assembly() {
		Alter_assemblyContext _localctx = new Alter_assemblyContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_alter_assembly);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1498; alter_assembly_start();
			State = 1499; _localctx.assembly_name = id();
			State = 1500; alter_assembly_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_startContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public Alter_assembly_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_start(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_start(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_startContext alter_assembly_start() {
		Alter_assembly_startContext _localctx = new Alter_assembly_startContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_alter_assembly_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1502; Match(ALTER);
			State = 1503; Match(ASSEMBLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_clauseContext : ParserRuleContext {
		public Alter_assembly_from_clauseContext alter_assembly_from_clause() {
			return GetRuleContext<Alter_assembly_from_clauseContext>(0);
		}
		public Alter_assembly_with_clauseContext alter_assembly_with_clause() {
			return GetRuleContext<Alter_assembly_with_clauseContext>(0);
		}
		public Alter_assembly_drop_clauseContext alter_assembly_drop_clause() {
			return GetRuleContext<Alter_assembly_drop_clauseContext>(0);
		}
		public Alter_assembly_add_clauseContext alter_assembly_add_clause() {
			return GetRuleContext<Alter_assembly_add_clauseContext>(0);
		}
		public Alter_assembly_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_clauseContext alter_assembly_clause() {
		Alter_assembly_clauseContext _localctx = new Alter_assembly_clauseContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_alter_assembly_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1506;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==FROM) {
				{
				State = 1505; alter_assembly_from_clause();
				}
			}

			State = 1509;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,60,_ctx) ) {
			case 1:
				{
				State = 1508; alter_assembly_with_clause();
				}
				break;
			}
			State = 1512;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,61,_ctx) ) {
			case 1:
				{
				State = 1511; alter_assembly_drop_clause();
				}
				break;
			}
			State = 1515;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ADD) {
				{
				State = 1514; alter_assembly_add_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_from_clauseContext : ParserRuleContext {
		public Alter_assembly_from_clause_startContext alter_assembly_from_clause_start() {
			return GetRuleContext<Alter_assembly_from_clause_startContext>(0);
		}
		public Client_assembly_specifierContext client_assembly_specifier() {
			return GetRuleContext<Client_assembly_specifierContext>(0);
		}
		public Alter_assembly_file_bitsContext alter_assembly_file_bits() {
			return GetRuleContext<Alter_assembly_file_bitsContext>(0);
		}
		public Alter_assembly_from_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_from_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_from_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_from_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_from_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_from_clauseContext alter_assembly_from_clause() {
		Alter_assembly_from_clauseContext _localctx = new Alter_assembly_from_clauseContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_alter_assembly_from_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1517; alter_assembly_from_clause_start();
			State = 1520;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case DOUBLE_BACK_SLASH:
			case DISK_DRIVE:
			case STRING:
				{
				State = 1518; client_assembly_specifier();
				}
				break;
			case AS:
				{
				State = 1519; alter_assembly_file_bits();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_from_clause_startContext : ParserRuleContext {
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public Alter_assembly_from_clause_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_from_clause_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_from_clause_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_from_clause_start(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_from_clause_start(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_from_clause_startContext alter_assembly_from_clause_start() {
		Alter_assembly_from_clause_startContext _localctx = new Alter_assembly_from_clause_startContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_alter_assembly_from_clause_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1522; Match(FROM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_drop_clauseContext : ParserRuleContext {
		public Alter_assembly_dropContext alter_assembly_drop() {
			return GetRuleContext<Alter_assembly_dropContext>(0);
		}
		public Alter_assembly_drop_multiple_filesContext alter_assembly_drop_multiple_files() {
			return GetRuleContext<Alter_assembly_drop_multiple_filesContext>(0);
		}
		public Alter_assembly_drop_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_drop_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_drop_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_drop_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_drop_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_drop_clauseContext alter_assembly_drop_clause() {
		Alter_assembly_drop_clauseContext _localctx = new Alter_assembly_drop_clauseContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_alter_assembly_drop_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1524; alter_assembly_drop();
			State = 1525; alter_assembly_drop_multiple_files();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_drop_multiple_filesContext : ParserRuleContext {
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public Multiple_local_filesContext multiple_local_files() {
			return GetRuleContext<Multiple_local_filesContext>(0);
		}
		public Alter_assembly_drop_multiple_filesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_drop_multiple_files; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_drop_multiple_files(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_drop_multiple_files(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_drop_multiple_files(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_drop_multiple_filesContext alter_assembly_drop_multiple_files() {
		Alter_assembly_drop_multiple_filesContext _localctx = new Alter_assembly_drop_multiple_filesContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_alter_assembly_drop_multiple_files);
		try {
			State = 1529;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ALL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1527; Match(ALL);
				}
				break;
			case DISK_DRIVE:
			case SINGLE_QUOTE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1528; multiple_local_files();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_dropContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public Alter_assembly_dropContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_drop; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_drop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_drop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_drop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_dropContext alter_assembly_drop() {
		Alter_assembly_dropContext _localctx = new Alter_assembly_dropContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_alter_assembly_drop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1531; Match(DROP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_add_clauseContext : ParserRuleContext {
		public Alter_asssembly_add_clause_startContext alter_asssembly_add_clause_start() {
			return GetRuleContext<Alter_asssembly_add_clause_startContext>(0);
		}
		public Alter_assembly_client_file_clauseContext alter_assembly_client_file_clause() {
			return GetRuleContext<Alter_assembly_client_file_clauseContext>(0);
		}
		public Alter_assembly_add_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_add_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_add_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_add_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_add_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_add_clauseContext alter_assembly_add_clause() {
		Alter_assembly_add_clauseContext _localctx = new Alter_assembly_add_clauseContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_alter_assembly_add_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1533; alter_asssembly_add_clause_start();
			State = 1534; alter_assembly_client_file_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_asssembly_add_clause_startContext : ParserRuleContext {
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public Alter_asssembly_add_clause_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_asssembly_add_clause_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_asssembly_add_clause_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_asssembly_add_clause_start(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_asssembly_add_clause_start(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_asssembly_add_clause_startContext alter_asssembly_add_clause_start() {
		Alter_asssembly_add_clause_startContext _localctx = new Alter_asssembly_add_clause_startContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_alter_asssembly_add_clause_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1536; Match(ADD);
			State = 1537; Match(FILE);
			State = 1538; Match(FROM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_client_file_clauseContext : ParserRuleContext {
		public Alter_assembly_file_nameContext alter_assembly_file_name() {
			return GetRuleContext<Alter_assembly_file_nameContext>(0);
		}
		public Alter_assembly_asContext alter_assembly_as() {
			return GetRuleContext<Alter_assembly_asContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Alter_assembly_client_file_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_client_file_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_client_file_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_client_file_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_client_file_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_client_file_clauseContext alter_assembly_client_file_clause() {
		Alter_assembly_client_file_clauseContext _localctx = new Alter_assembly_client_file_clauseContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_alter_assembly_client_file_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1540; alter_assembly_file_name();
			State = 1544;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 1541; alter_assembly_as();
				State = 1542; id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_file_nameContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Alter_assembly_file_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_file_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_file_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_file_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_file_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_file_nameContext alter_assembly_file_name() {
		Alter_assembly_file_nameContext _localctx = new Alter_assembly_file_nameContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_alter_assembly_file_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1546; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_file_bitsContext : ParserRuleContext {
		public Alter_assembly_asContext alter_assembly_as() {
			return GetRuleContext<Alter_assembly_asContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Alter_assembly_file_bitsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_file_bits; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_file_bits(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_file_bits(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_file_bits(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_file_bitsContext alter_assembly_file_bits() {
		Alter_assembly_file_bitsContext _localctx = new Alter_assembly_file_bitsContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_alter_assembly_file_bits);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1548; alter_assembly_as();
			State = 1549; id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_asContext : ParserRuleContext {
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Alter_assembly_asContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_as; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_as(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_as(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_as(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_asContext alter_assembly_as() {
		Alter_assembly_asContext _localctx = new Alter_assembly_asContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_alter_assembly_as);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1551; Match(AS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_with_clauseContext : ParserRuleContext {
		public Alter_assembly_withContext alter_assembly_with() {
			return GetRuleContext<Alter_assembly_withContext>(0);
		}
		public Assembly_optionContext assembly_option() {
			return GetRuleContext<Assembly_optionContext>(0);
		}
		public Alter_assembly_with_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_with_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_with_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_with_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_with_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_with_clauseContext alter_assembly_with_clause() {
		Alter_assembly_with_clauseContext _localctx = new Alter_assembly_with_clauseContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_alter_assembly_with_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1553; alter_assembly_with();
			State = 1554; assembly_option(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_withContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Alter_assembly_withContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_with; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_with(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_with(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_with(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_withContext alter_assembly_with() {
		Alter_assembly_withContext _localctx = new Alter_assembly_withContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_alter_assembly_with);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1556; Match(WITH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Client_assembly_specifierContext : ParserRuleContext {
		public Network_file_shareContext network_file_share() {
			return GetRuleContext<Network_file_shareContext>(0);
		}
		public Local_fileContext local_file() {
			return GetRuleContext<Local_fileContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Client_assembly_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_client_assembly_specifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterClient_assembly_specifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitClient_assembly_specifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClient_assembly_specifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Client_assembly_specifierContext client_assembly_specifier() {
		Client_assembly_specifierContext _localctx = new Client_assembly_specifierContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_client_assembly_specifier);
		try {
			State = 1561;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case DOUBLE_BACK_SLASH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1558; network_file_share();
				}
				break;
			case DISK_DRIVE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1559; local_file();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1560; Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assembly_optionContext : ParserRuleContext {
		public ITerminalNode PERMISSION_SET() { return GetToken(TSqlParser.PERMISSION_SET, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode SAFE() { return GetToken(TSqlParser.SAFE, 0); }
		public ITerminalNode EXTERNAL_ACCESS() { return GetToken(TSqlParser.EXTERNAL_ACCESS, 0); }
		public ITerminalNode UNSAFE() { return GetToken(TSqlParser.UNSAFE, 0); }
		public ITerminalNode VISIBILITY() { return GetToken(TSqlParser.VISIBILITY, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode UNCHECKED() { return GetToken(TSqlParser.UNCHECKED, 0); }
		public ITerminalNode DATA() { return GetToken(TSqlParser.DATA, 0); }
		public Assembly_optionContext assembly_option() {
			return GetRuleContext<Assembly_optionContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public Assembly_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assembly_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAssembly_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAssembly_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssembly_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assembly_optionContext assembly_option() {
		return assembly_option(0);
	}

	private Assembly_optionContext assembly_option(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		Assembly_optionContext _localctx = new Assembly_optionContext(_ctx, _parentState);
		Assembly_optionContext _prevctx = _localctx;
		int _startState = 92;
		EnterRecursionRule(_localctx, 92, RULE_assembly_option, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1572;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case PERMISSION_SET:
				{
				State = 1564; Match(PERMISSION_SET);
				State = 1565; Match(EQUAL);
				State = 1566;
				_la = _input.La(1);
				if ( !(_la==EXTERNAL_ACCESS || _la==SAFE || _la==UNSAFE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			case VISIBILITY:
				{
				State = 1567; Match(VISIBILITY);
				State = 1568; Match(EQUAL);
				State = 1569;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			case UNCHECKED:
				{
				State = 1570; Match(UNCHECKED);
				State = 1571; Match(DATA);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 1578;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,68,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Assembly_optionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_assembly_option);
					State = 1574;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 1575; Match(COMMA);
					}
					} 
				}
				State = 1580;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,68,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Network_file_shareContext : ParserRuleContext {
		public Network_file_startContext network_file_start() {
			return GetRuleContext<Network_file_startContext>(0);
		}
		public Network_computerContext network_computer() {
			return GetRuleContext<Network_computerContext>(0);
		}
		public File_pathContext file_path() {
			return GetRuleContext<File_pathContext>(0);
		}
		public Network_file_shareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_network_file_share; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterNetwork_file_share(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitNetwork_file_share(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNetwork_file_share(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Network_file_shareContext network_file_share() {
		Network_file_shareContext _localctx = new Network_file_shareContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_network_file_share);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1581; network_file_start();
			State = 1582; network_computer();
			State = 1583; file_path();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Network_computerContext : ParserRuleContext {
		public IdContext computer_name;
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Network_computerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_network_computer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterNetwork_computer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitNetwork_computer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNetwork_computer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Network_computerContext network_computer() {
		Network_computerContext _localctx = new Network_computerContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_network_computer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1585; _localctx.computer_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Network_file_startContext : ParserRuleContext {
		public ITerminalNode DOUBLE_BACK_SLASH() { return GetToken(TSqlParser.DOUBLE_BACK_SLASH, 0); }
		public Network_file_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_network_file_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterNetwork_file_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitNetwork_file_start(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNetwork_file_start(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Network_file_startContext network_file_start() {
		Network_file_startContext _localctx = new Network_file_startContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_network_file_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1587; Match(DOUBLE_BACK_SLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_pathContext : ParserRuleContext {
		public File_directory_path_separatorContext file_directory_path_separator() {
			return GetRuleContext<File_directory_path_separatorContext>(0);
		}
		public File_pathContext file_path() {
			return GetRuleContext<File_pathContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public File_pathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_path; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFile_path(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFile_path(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile_path(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public File_pathContext file_path() {
		File_pathContext _localctx = new File_pathContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_file_path);
		try {
			State = 1593;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,69,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1589; file_directory_path_separator();
				State = 1590; file_path();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1592; id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_directory_path_separatorContext : ParserRuleContext {
		public File_directory_path_separatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_directory_path_separator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFile_directory_path_separator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFile_directory_path_separator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile_directory_path_separator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public File_directory_path_separatorContext file_directory_path_separator() {
		File_directory_path_separatorContext _localctx = new File_directory_path_separatorContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_file_directory_path_separator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1595; Match(BACKSLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_fileContext : ParserRuleContext {
		public Local_driveContext local_drive() {
			return GetRuleContext<Local_driveContext>(0);
		}
		public File_pathContext file_path() {
			return GetRuleContext<File_pathContext>(0);
		}
		public Local_fileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterLocal_file(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitLocal_file(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_file(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_fileContext local_file() {
		Local_fileContext _localctx = new Local_fileContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_local_file);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1597; local_drive();
			State = 1598; file_path();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_driveContext : ParserRuleContext {
		public ITerminalNode DISK_DRIVE() { return GetToken(TSqlParser.DISK_DRIVE, 0); }
		public Local_driveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_drive; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterLocal_drive(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitLocal_drive(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_drive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_driveContext local_drive() {
		Local_driveContext _localctx = new Local_driveContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_local_drive);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1600; Match(DISK_DRIVE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiple_local_filesContext : ParserRuleContext {
		public Multiple_local_file_startContext multiple_local_file_start() {
			return GetRuleContext<Multiple_local_file_startContext>(0);
		}
		public Local_fileContext local_file() {
			return GetRuleContext<Local_fileContext>(0);
		}
		public ITerminalNode SINGLE_QUOTE() { return GetToken(TSqlParser.SINGLE_QUOTE, 0); }
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public Multiple_local_filesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiple_local_files; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMultiple_local_files(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMultiple_local_files(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiple_local_files(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Multiple_local_filesContext multiple_local_files() {
		Multiple_local_filesContext _localctx = new Multiple_local_filesContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_multiple_local_files);
		try {
			State = 1608;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case SINGLE_QUOTE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1602; multiple_local_file_start();
				State = 1603; local_file();
				State = 1604; Match(SINGLE_QUOTE);
				State = 1605; Match(COMMA);
				}
				break;
			case DISK_DRIVE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1607; local_file();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiple_local_file_startContext : ParserRuleContext {
		public ITerminalNode SINGLE_QUOTE() { return GetToken(TSqlParser.SINGLE_QUOTE, 0); }
		public Multiple_local_file_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiple_local_file_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMultiple_local_file_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMultiple_local_file_start(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiple_local_file_start(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Multiple_local_file_startContext multiple_local_file_start() {
		Multiple_local_file_startContext _localctx = new Multiple_local_file_startContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_multiple_local_file_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1610; Match(SINGLE_QUOTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_assemblyContext : ParserRuleContext {
		public IdContext assembly_name;
		public IdContext owner_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode PERMISSION_SET() { return GetToken(TSqlParser.PERMISSION_SET, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] BINARY() { return GetTokens(TSqlParser.BINARY); }
		public ITerminalNode BINARY(int i) {
			return GetToken(TSqlParser.BINARY, i);
		}
		public ITerminalNode SAFE() { return GetToken(TSqlParser.SAFE, 0); }
		public ITerminalNode EXTERNAL_ACCESS() { return GetToken(TSqlParser.EXTERNAL_ACCESS, 0); }
		public ITerminalNode UNSAFE() { return GetToken(TSqlParser.UNSAFE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Create_assemblyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_assembly; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_assembly(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_assembly(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_assembly(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_assemblyContext create_assembly() {
		Create_assemblyContext _localctx = new Create_assemblyContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_create_assembly);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1612; Match(CREATE);
			State = 1613; Match(ASSEMBLY);
			State = 1614; _localctx.assembly_name = id();
			State = 1617;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AUTHORIZATION) {
				{
				State = 1615; Match(AUTHORIZATION);
				State = 1616; _localctx.owner_name = id();
				}
			}

			State = 1619; Match(FROM);
			State = 1624;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1621;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==COMMA) {
						{
						State = 1620; Match(COMMA);
						}
					}

					State = 1623;
					_la = _input.La(1);
					if ( !(_la==STRING || _la==BINARY) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1626;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,73,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 1632;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,74,_ctx) ) {
			case 1:
				{
				State = 1628; Match(WITH);
				State = 1629; Match(PERMISSION_SET);
				State = 1630; Match(EQUAL);
				State = 1631;
				_la = _input.La(1);
				if ( !(_la==EXTERNAL_ACCESS || _la==SAFE || _la==UNSAFE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_assemblyContext : ParserRuleContext {
		public IdContext assembly_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode NO() { return GetToken(TSqlParser.NO, 0); }
		public ITerminalNode DEPENDENTS() { return GetToken(TSqlParser.DEPENDENTS, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Drop_assemblyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_assembly; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_assembly(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_assembly(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_assembly(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_assemblyContext drop_assembly() {
		Drop_assemblyContext _localctx = new Drop_assemblyContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_drop_assembly);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1634; Match(DROP);
			State = 1635; Match(ASSEMBLY);
			State = 1638;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IF) {
				{
				State = 1636; Match(IF);
				State = 1637; Match(EXISTS);
				}
			}

			State = 1644;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1641;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,76,_ctx) ) {
					case 1:
						{
						State = 1640; Match(COMMA);
						}
						break;
					}
					State = 1643; _localctx.assembly_name = id();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1646;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,77,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 1651;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,78,_ctx) ) {
			case 1:
				{
				State = 1648; Match(WITH);
				State = 1649; Match(NO);
				State = 1650; Match(DEPENDENTS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_asymmetric_keyContext : ParserRuleContext {
		public IdContext Asym_Key_Name;
		public Alter_asymmetric_key_startContext alter_asymmetric_key_start() {
			return GetRuleContext<Alter_asymmetric_key_startContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Asymmetric_key_optionContext asymmetric_key_option() {
			return GetRuleContext<Asymmetric_key_optionContext>(0);
		}
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode PRIVATE() { return GetToken(TSqlParser.PRIVATE, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public Alter_asymmetric_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_asymmetric_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_asymmetric_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_asymmetric_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_asymmetric_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_asymmetric_keyContext alter_asymmetric_key() {
		Alter_asymmetric_keyContext _localctx = new Alter_asymmetric_keyContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_alter_asymmetric_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1653; alter_asymmetric_key_start();
			State = 1654; _localctx.Asym_Key_Name = id();
			State = 1659;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case WITH:
				{
				State = 1655; asymmetric_key_option();
				}
				break;
			case REMOVE:
				{
				State = 1656; Match(REMOVE);
				State = 1657; Match(PRIVATE);
				State = 1658; Match(KEY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_asymmetric_key_startContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public Alter_asymmetric_key_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_asymmetric_key_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_asymmetric_key_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_asymmetric_key_start(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_asymmetric_key_start(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_asymmetric_key_startContext alter_asymmetric_key_start() {
		Alter_asymmetric_key_startContext _localctx = new Alter_asymmetric_key_startContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_alter_asymmetric_key_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1661; Match(ALTER);
			State = 1662; Match(ASYMMETRIC);
			State = 1663; Match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Asymmetric_key_optionContext : ParserRuleContext {
		public Asymmetric_key_option_startContext asymmetric_key_option_start() {
			return GetRuleContext<Asymmetric_key_option_startContext>(0);
		}
		public Asymmetric_key_password_change_optionContext[] asymmetric_key_password_change_option() {
			return GetRuleContexts<Asymmetric_key_password_change_optionContext>();
		}
		public Asymmetric_key_password_change_optionContext asymmetric_key_password_change_option(int i) {
			return GetRuleContext<Asymmetric_key_password_change_optionContext>(i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public Asymmetric_key_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asymmetric_key_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAsymmetric_key_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAsymmetric_key_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsymmetric_key_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Asymmetric_key_optionContext asymmetric_key_option() {
		Asymmetric_key_optionContext _localctx = new Asymmetric_key_optionContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_asymmetric_key_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1665; asymmetric_key_option_start();
			State = 1666; asymmetric_key_password_change_option();
			State = 1669;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 1667; Match(COMMA);
				State = 1668; asymmetric_key_password_change_option();
				}
			}

			State = 1671; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Asymmetric_key_option_startContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode PRIVATE() { return GetToken(TSqlParser.PRIVATE, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Asymmetric_key_option_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asymmetric_key_option_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAsymmetric_key_option_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAsymmetric_key_option_start(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsymmetric_key_option_start(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Asymmetric_key_option_startContext asymmetric_key_option_start() {
		Asymmetric_key_option_startContext _localctx = new Asymmetric_key_option_startContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_asymmetric_key_option_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1673; Match(WITH);
			State = 1674; Match(PRIVATE);
			State = 1675; Match(KEY);
			State = 1676; Match(LR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Asymmetric_key_password_change_optionContext : ParserRuleContext {
		public ITerminalNode DECRYPTION() { return GetToken(TSqlParser.DECRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public Asymmetric_key_password_change_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asymmetric_key_password_change_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAsymmetric_key_password_change_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAsymmetric_key_password_change_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsymmetric_key_password_change_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Asymmetric_key_password_change_optionContext asymmetric_key_password_change_option() {
		Asymmetric_key_password_change_optionContext _localctx = new Asymmetric_key_password_change_optionContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_asymmetric_key_password_change_option);
		try {
			State = 1688;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case DECRYPTION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1678; Match(DECRYPTION);
				State = 1679; Match(BY);
				State = 1680; Match(PASSWORD);
				State = 1681; Match(EQUAL);
				State = 1682; Match(STRING);
				}
				break;
			case ENCRYPTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1683; Match(ENCRYPTION);
				State = 1684; Match(BY);
				State = 1685; Match(PASSWORD);
				State = 1686; Match(EQUAL);
				State = 1687; Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_asymmetric_keyContext : ParserRuleContext {
		public IdContext Asym_Key_Nam;
		public IdContext database_principal_name;
		public IdContext Assembly_Name;
		public IdContext Provider_Name;
		public IToken provider_key_name;
		public IToken asymmetric_key_password;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode EXECUTABLE_FILE() { return GetToken(TSqlParser.EXECUTABLE_FILE, 0); }
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public ITerminalNode ALGORITHM() { return GetToken(TSqlParser.ALGORITHM, 0); }
		public ITerminalNode PROVIDER_KEY_NAME() { return GetToken(TSqlParser.PROVIDER_KEY_NAME, 0); }
		public ITerminalNode CREATION_DISPOSITION() { return GetToken(TSqlParser.CREATION_DISPOSITION, 0); }
		public ITerminalNode RSA_4096() { return GetToken(TSqlParser.RSA_4096, 0); }
		public ITerminalNode RSA_3072() { return GetToken(TSqlParser.RSA_3072, 0); }
		public ITerminalNode RSA_2048() { return GetToken(TSqlParser.RSA_2048, 0); }
		public ITerminalNode RSA_1024() { return GetToken(TSqlParser.RSA_1024, 0); }
		public ITerminalNode RSA_512() { return GetToken(TSqlParser.RSA_512, 0); }
		public ITerminalNode CREATE_NEW() { return GetToken(TSqlParser.CREATE_NEW, 0); }
		public ITerminalNode OPEN_EXISTING() { return GetToken(TSqlParser.OPEN_EXISTING, 0); }
		public Create_asymmetric_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_asymmetric_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_asymmetric_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_asymmetric_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_asymmetric_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_asymmetric_keyContext create_asymmetric_key() {
		Create_asymmetric_keyContext _localctx = new Create_asymmetric_keyContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_create_asymmetric_key);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1690; Match(CREATE);
			State = 1691; Match(ASYMMETRIC);
			State = 1692; Match(KEY);
			State = 1693; _localctx.Asym_Key_Nam = id();
			State = 1696;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AUTHORIZATION) {
				{
				State = 1694; Match(AUTHORIZATION);
				State = 1695; _localctx.database_principal_name = id();
				}
			}

			State = 1711;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==FROM) {
				{
				State = 1698; Match(FROM);
				State = 1709;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case FILE:
					{
					State = 1699; Match(FILE);
					State = 1700; Match(EQUAL);
					State = 1701; Match(STRING);
					}
					break;
				case EXECUTABLE_FILE:
					{
					State = 1702; Match(EXECUTABLE_FILE);
					State = 1703; Match(EQUAL);
					State = 1704; Match(STRING);
					}
					break;
				case ASSEMBLY:
					{
					State = 1705; Match(ASSEMBLY);
					State = 1706; _localctx.Assembly_Name = id();
					}
					break;
				case PROVIDER:
					{
					State = 1707; Match(PROVIDER);
					State = 1708; _localctx.Provider_Name = id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			State = 1725;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,86,_ctx) ) {
			case 1:
				{
				State = 1713; Match(WITH);
				State = 1723;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case ALGORITHM:
					{
					State = 1714; Match(ALGORITHM);
					State = 1715; Match(EQUAL);
					State = 1716;
					_la = _input.La(1);
					if ( !(((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & ((1L << (RSA_512 - 296)) | (1L << (RSA_1024 - 296)) | (1L << (RSA_2048 - 296)) | (1L << (RSA_3072 - 296)) | (1L << (RSA_4096 - 296)))) != 0)) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				case PROVIDER_KEY_NAME:
					{
					State = 1717; Match(PROVIDER_KEY_NAME);
					State = 1718; Match(EQUAL);
					State = 1719; _localctx.provider_key_name = Match(STRING);
					}
					break;
				case CREATION_DISPOSITION:
					{
					State = 1720; Match(CREATION_DISPOSITION);
					State = 1721; Match(EQUAL);
					State = 1722;
					_la = _input.La(1);
					if ( !(_la==CREATE_NEW || _la==OPEN_EXISTING) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			State = 1732;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,87,_ctx) ) {
			case 1:
				{
				State = 1727; Match(ENCRYPTION);
				State = 1728; Match(BY);
				State = 1729; Match(PASSWORD);
				State = 1730; Match(EQUAL);
				State = 1731; _localctx.asymmetric_key_password = Match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_asymmetric_keyContext : ParserRuleContext {
		public IdContext key_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public Drop_asymmetric_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_asymmetric_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_asymmetric_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_asymmetric_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_asymmetric_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_asymmetric_keyContext drop_asymmetric_key() {
		Drop_asymmetric_keyContext _localctx = new Drop_asymmetric_keyContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_drop_asymmetric_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1734; Match(DROP);
			State = 1735; Match(ASYMMETRIC);
			State = 1736; Match(KEY);
			State = 1737; _localctx.key_name = id();
			State = 1741;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,88,_ctx) ) {
			case 1:
				{
				State = 1738; Match(REMOVE);
				State = 1739; Match(PROVIDER);
				State = 1740; Match(KEY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_authorizationContext : ParserRuleContext {
		public Entity_nameContext entity;
		public Alter_authorization_startContext alter_authorization_start() {
			return GetRuleContext<Alter_authorization_startContext>(0);
		}
		public Entity_toContext entity_to() {
			return GetRuleContext<Entity_toContext>(0);
		}
		public Authorization_granteeContext authorization_grantee() {
			return GetRuleContext<Authorization_granteeContext>(0);
		}
		public Entity_nameContext entity_name() {
			return GetRuleContext<Entity_nameContext>(0);
		}
		public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		public Colon_colonContext colon_colon() {
			return GetRuleContext<Colon_colonContext>(0);
		}
		public Alter_authorizationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_authorization; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_authorization(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_authorization(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_authorization(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_authorizationContext alter_authorization() {
		Alter_authorizationContext _localctx = new Alter_authorizationContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_alter_authorization);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1743; alter_authorization_start();
			State = 1747;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,89,_ctx) ) {
			case 1:
				{
				State = 1744; class_type();
				State = 1745; colon_colon();
				}
				break;
			}
			State = 1749; _localctx.entity = entity_name();
			State = 1750; entity_to();
			State = 1751; authorization_grantee();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Authorization_granteeContext : ParserRuleContext {
		public IdContext principal_name;
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode OWNER() { return GetToken(TSqlParser.OWNER, 0); }
		public Authorization_granteeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_authorization_grantee; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAuthorization_grantee(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAuthorization_grantee(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAuthorization_grantee(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Authorization_granteeContext authorization_grantee() {
		Authorization_granteeContext _localctx = new Authorization_granteeContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_authorization_grantee);
		try {
			State = 1756;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BACKSLASH:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONNECTION_OPTIONS:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DISK:
			case DOUBLE_BACK_SLASH:
			case DOUBLE_FORWARD_SLASH:
			case DTC_SUPPORT:
			case DUMP:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILENAME:
			case FILLFACTOR:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IDENTITYCOL:
			case IIF:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case IPV4_ADDR:
			case IPV6_ADDR:
			case ISNULL:
			case KERBEROS:
			case KEY:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOAD:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NATIVE_COMPILATION:
			case NEGOTIATE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case NULL:
			case OFFSETS:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PLATFORM:
			case POLICY:
			case PRECISION:
			case PREDICATE:
			case PROCESS:
			case PUBLIC:
			case PUSHDOWN:
			case PYTHON:
			case R:
			case RAW:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESULT_SETS:
			case RESUME:
			case RETAINDAYS:
			case RETURN:
			case RETURNS:
			case REWIND:
			case ROLE:
			case ROWCOUNT:
			case ROWGUIDCOL:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SECURITYAUDIT:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SESSION_USER:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case SYSTEM_USER:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case USER:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHIN:
			case WITHOUT:
			case WITNESS:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BUCKET_COUNT:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATEFIRST:
			case DATEFORMAT:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADOOP:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNDEFINED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case DOLLAR_ACTION:
			case SPACE:
			case COMMENT:
			case LINE_COMMENT:
			case DOUBLE_QUOTE_ID:
			case SINGLE_QUOTE:
			case SQUARE_BRACKET_ID:
			case LOCAL_ID:
			case DECIMAL:
			case ID:
			case QUOTED_URL:
			case QUOTED_HOST_AND_PORT:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case EQUAL:
			case GREATER:
			case LESS:
			case EXCLAMATION:
			case PLUS_ASSIGN:
			case MINUS_ASSIGN:
			case MULT_ASSIGN:
			case DIV_ASSIGN:
			case MOD_ASSIGN:
			case AND_ASSIGN:
			case XOR_ASSIGN:
			case OR_ASSIGN:
			case DOUBLE_BAR:
			case DOT:
			case UNDERLINE:
			case AT:
			case SHARP:
			case DOLLAR:
			case LR_BRACKET:
			case RR_BRACKET:
			case COMMA:
			case SEMI:
			case COLON:
			case STAR:
			case DIVIDE:
			case MODULE:
			case PLUS:
			case MINUS:
			case BIT_NOT:
			case BIT_OR:
			case BIT_AND:
			case BIT_XOR:
			case MDY:
			case DMY:
			case YMD:
			case YDM:
			case MYD:
			case DYM:
			case IPV4_OCTECT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1753; _localctx.principal_name = id();
				}
				break;
			case SCHEMA:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1754; Match(SCHEMA);
				State = 1755; Match(OWNER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_toContext : ParserRuleContext {
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public Entity_toContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_to; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEntity_to(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEntity_to(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntity_to(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Entity_toContext entity_to() {
		Entity_toContext _localctx = new Entity_toContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_entity_to);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1758; Match(TO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Colon_colonContext : ParserRuleContext {
		public ITerminalNode[] COLON() { return GetTokens(TSqlParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(TSqlParser.COLON, i);
		}
		public Colon_colonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_colon_colon; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColon_colon(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColon_colon(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColon_colon(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Colon_colonContext colon_colon() {
		Colon_colonContext _localctx = new Colon_colonContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_colon_colon);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1760; Match(COLON);
			State = 1761; Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_authorization_startContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Alter_authorization_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_authorization_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_authorization_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_authorization_start(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_authorization_start(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_authorization_startContext alter_authorization_start() {
		Alter_authorization_startContext _localctx = new Alter_authorization_startContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_alter_authorization_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1763; Match(ALTER);
			State = 1764; Match(AUTHORIZATION);
			State = 1765; Match(ON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_authorization_for_sql_databaseContext : ParserRuleContext {
		public Entity_nameContext entity;
		public Alter_authorization_startContext alter_authorization_start() {
			return GetRuleContext<Alter_authorization_startContext>(0);
		}
		public Entity_toContext entity_to() {
			return GetRuleContext<Entity_toContext>(0);
		}
		public Authorization_granteeContext authorization_grantee() {
			return GetRuleContext<Authorization_granteeContext>(0);
		}
		public Entity_nameContext entity_name() {
			return GetRuleContext<Entity_nameContext>(0);
		}
		public Class_type_for_sql_databaseContext class_type_for_sql_database() {
			return GetRuleContext<Class_type_for_sql_databaseContext>(0);
		}
		public Colon_colonContext colon_colon() {
			return GetRuleContext<Colon_colonContext>(0);
		}
		public Alter_authorization_for_sql_databaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_authorization_for_sql_database; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_authorization_for_sql_database(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_authorization_for_sql_database(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_authorization_for_sql_database(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_authorization_for_sql_databaseContext alter_authorization_for_sql_database() {
		Alter_authorization_for_sql_databaseContext _localctx = new Alter_authorization_for_sql_databaseContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_alter_authorization_for_sql_database);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1767; alter_authorization_start();
			State = 1771;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,91,_ctx) ) {
			case 1:
				{
				State = 1768; class_type_for_sql_database();
				State = 1769; colon_colon();
				}
				break;
			}
			State = 1773; _localctx.entity = entity_name();
			State = 1774; entity_to();
			State = 1775; authorization_grantee();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_authorization_for_azure_dwContext : ParserRuleContext {
		public Entity_name_for_azure_dwContext entity;
		public Alter_authorization_startContext alter_authorization_start() {
			return GetRuleContext<Alter_authorization_startContext>(0);
		}
		public Entity_toContext entity_to() {
			return GetRuleContext<Entity_toContext>(0);
		}
		public Authorization_granteeContext authorization_grantee() {
			return GetRuleContext<Authorization_granteeContext>(0);
		}
		public Entity_name_for_azure_dwContext entity_name_for_azure_dw() {
			return GetRuleContext<Entity_name_for_azure_dwContext>(0);
		}
		public Class_type_for_azure_dwContext class_type_for_azure_dw() {
			return GetRuleContext<Class_type_for_azure_dwContext>(0);
		}
		public Colon_colonContext colon_colon() {
			return GetRuleContext<Colon_colonContext>(0);
		}
		public Alter_authorization_for_azure_dwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_authorization_for_azure_dw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_authorization_for_azure_dw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_authorization_for_azure_dw(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_authorization_for_azure_dw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_authorization_for_azure_dwContext alter_authorization_for_azure_dw() {
		Alter_authorization_for_azure_dwContext _localctx = new Alter_authorization_for_azure_dwContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_alter_authorization_for_azure_dw);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1777; alter_authorization_start();
			State = 1781;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,92,_ctx) ) {
			case 1:
				{
				State = 1778; class_type_for_azure_dw();
				State = 1779; colon_colon();
				}
				break;
			}
			State = 1783; _localctx.entity = entity_name_for_azure_dw();
			State = 1784; entity_to();
			State = 1785; authorization_grantee();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_authorization_for_parallel_dwContext : ParserRuleContext {
		public Entity_name_for_parallel_dwContext entity;
		public Alter_authorization_startContext alter_authorization_start() {
			return GetRuleContext<Alter_authorization_startContext>(0);
		}
		public Entity_toContext entity_to() {
			return GetRuleContext<Entity_toContext>(0);
		}
		public Authorization_granteeContext authorization_grantee() {
			return GetRuleContext<Authorization_granteeContext>(0);
		}
		public Entity_name_for_parallel_dwContext entity_name_for_parallel_dw() {
			return GetRuleContext<Entity_name_for_parallel_dwContext>(0);
		}
		public Class_type_for_parallel_dwContext class_type_for_parallel_dw() {
			return GetRuleContext<Class_type_for_parallel_dwContext>(0);
		}
		public Colon_colonContext colon_colon() {
			return GetRuleContext<Colon_colonContext>(0);
		}
		public Alter_authorization_for_parallel_dwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_authorization_for_parallel_dw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_authorization_for_parallel_dw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_authorization_for_parallel_dw(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_authorization_for_parallel_dw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_authorization_for_parallel_dwContext alter_authorization_for_parallel_dw() {
		Alter_authorization_for_parallel_dwContext _localctx = new Alter_authorization_for_parallel_dwContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_alter_authorization_for_parallel_dw);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1787; alter_authorization_start();
			State = 1791;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,93,_ctx) ) {
			case 1:
				{
				State = 1788; class_type_for_parallel_dw();
				State = 1789; colon_colon();
				}
				break;
			}
			State = 1793; _localctx.entity = entity_name_for_parallel_dw();
			State = 1794; entity_to();
			State = 1795; authorization_grantee();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_typeContext : ParserRuleContext {
		public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode AVAILABILITY() { return GetToken(TSqlParser.AVAILABILITY, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode CONTRACT() { return GetToken(TSqlParser.CONTRACT, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode ENDPOINT() { return GetToken(TSqlParser.ENDPOINT, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode CATALOG() { return GetToken(TSqlParser.CATALOG, 0); }
		public ITerminalNode STOPLIST() { return GetToken(TSqlParser.STOPLIST, 0); }
		public ITerminalNode MESSAGE() { return GetToken(TSqlParser.MESSAGE, 0); }
		public ITerminalNode REMOTE() { return GetToken(TSqlParser.REMOTE, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode BINDING() { return GetToken(TSqlParser.BINDING, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public ITerminalNode ROUTE() { return GetToken(TSqlParser.ROUTE, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode SEARCH() { return GetToken(TSqlParser.SEARCH, 0); }
		public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		public ITerminalNode LIST() { return GetToken(TSqlParser.LIST, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public Class_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterClass_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitClass_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_typeContext class_type() {
		Class_typeContext _localctx = new Class_typeContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_class_type);
		try {
			State = 1831;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,94,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1797; Match(OBJECT);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1798; Match(ASSEMBLY);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1799; Match(ASYMMETRIC);
				State = 1800; Match(KEY);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1801; Match(AVAILABILITY);
				State = 1802; Match(GROUP);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1803; Match(CERTIFICATE);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1804; Match(CONTRACT);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1805; Match(TYPE);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1806; Match(DATABASE);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1807; Match(ENDPOINT);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1808; Match(FULLTEXT);
				State = 1809; Match(CATALOG);
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1810; Match(FULLTEXT);
				State = 1811; Match(STOPLIST);
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1812; Match(MESSAGE);
				State = 1813; Match(TYPE);
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1814; Match(REMOTE);
				State = 1815; Match(SERVICE);
				State = 1816; Match(BINDING);
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1817; Match(ROLE);
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1818; Match(ROUTE);
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1819; Match(SCHEMA);
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1820; Match(SEARCH);
				State = 1821; Match(PROPERTY);
				State = 1822; Match(LIST);
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1823; Match(SERVER);
				State = 1824; Match(ROLE);
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1825; Match(SERVICE);
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1826; Match(SYMMETRIC);
				State = 1827; Match(KEY);
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 1828; Match(XML);
				State = 1829; Match(SCHEMA);
				State = 1830; Match(COLLECTION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_type_for_sql_databaseContext : ParserRuleContext {
		public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode CATALOG() { return GetToken(TSqlParser.CATALOG, 0); }
		public ITerminalNode STOPLIST() { return GetToken(TSqlParser.STOPLIST, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode SEARCH() { return GetToken(TSqlParser.SEARCH, 0); }
		public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		public ITerminalNode LIST() { return GetToken(TSqlParser.LIST, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public Class_type_for_sql_databaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_type_for_sql_database; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterClass_type_for_sql_database(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitClass_type_for_sql_database(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_type_for_sql_database(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_type_for_sql_databaseContext class_type_for_sql_database() {
		Class_type_for_sql_databaseContext _localctx = new Class_type_for_sql_databaseContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_class_type_for_sql_database);
		try {
			State = 1854;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,95,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1833; Match(OBJECT);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1834; Match(ASSEMBLY);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1835; Match(ASYMMETRIC);
				State = 1836; Match(KEY);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1837; Match(CERTIFICATE);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1838; Match(TYPE);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1839; Match(DATABASE);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1840; Match(FULLTEXT);
				State = 1841; Match(CATALOG);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1842; Match(FULLTEXT);
				State = 1843; Match(STOPLIST);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1844; Match(ROLE);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1845; Match(SCHEMA);
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1846; Match(SEARCH);
				State = 1847; Match(PROPERTY);
				State = 1848; Match(LIST);
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1849; Match(SYMMETRIC);
				State = 1850; Match(KEY);
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1851; Match(XML);
				State = 1852; Match(SCHEMA);
				State = 1853; Match(COLLECTION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_type_for_azure_dwContext : ParserRuleContext {
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		public Class_type_for_azure_dwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_type_for_azure_dw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterClass_type_for_azure_dw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitClass_type_for_azure_dw(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_type_for_azure_dw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_type_for_azure_dwContext class_type_for_azure_dw() {
		Class_type_for_azure_dwContext _localctx = new Class_type_for_azure_dwContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_class_type_for_azure_dw);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1856;
			_la = _input.La(1);
			if ( !(_la==SCHEMA || _la==OBJECT) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_type_for_parallel_dwContext : ParserRuleContext {
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		public Class_type_for_parallel_dwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_type_for_parallel_dw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterClass_type_for_parallel_dw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitClass_type_for_parallel_dw(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_type_for_parallel_dw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_type_for_parallel_dwContext class_type_for_parallel_dw() {
		Class_type_for_parallel_dwContext _localctx = new Class_type_for_parallel_dwContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_class_type_for_parallel_dw);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1858;
			_la = _input.La(1);
			if ( !(_la==DATABASE || _la==SCHEMA || _la==OBJECT) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_availability_groupContext : ParserRuleContext {
		public IdContext group_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode AVAILABILITY() { return GetToken(TSqlParser.AVAILABILITY, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_availability_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_availability_group; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_availability_group(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_availability_group(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_availability_group(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_availability_groupContext drop_availability_group() {
		Drop_availability_groupContext _localctx = new Drop_availability_groupContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_drop_availability_group);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1860; Match(DROP);
			State = 1861; Match(AVAILABILITY);
			State = 1862; Match(GROUP);
			State = 1863; _localctx.group_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_availability_groupContext : ParserRuleContext {
		public Alter_availability_group_startContext alter_availability_group_start() {
			return GetRuleContext<Alter_availability_group_startContext>(0);
		}
		public Alter_availability_group_optionsContext alter_availability_group_options() {
			return GetRuleContext<Alter_availability_group_optionsContext>(0);
		}
		public Alter_availability_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_availability_group; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_availability_group(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_availability_group(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_availability_group(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_availability_groupContext alter_availability_group() {
		Alter_availability_groupContext _localctx = new Alter_availability_groupContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_alter_availability_group);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1865; alter_availability_group_start();
			State = 1866; alter_availability_group_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_availability_group_startContext : ParserRuleContext {
		public IdContext group_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode AVAILABILITY() { return GetToken(TSqlParser.AVAILABILITY, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Alter_availability_group_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_availability_group_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_availability_group_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_availability_group_start(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_availability_group_start(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_availability_group_startContext alter_availability_group_start() {
		Alter_availability_group_startContext _localctx = new Alter_availability_group_startContext(_ctx, State);
		EnterRule(_localctx, 158, RULE_alter_availability_group_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1868; Match(ALTER);
			State = 1869; Match(AVAILABILITY);
			State = 1870; Match(GROUP);
			State = 1871; _localctx.group_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_availability_group_optionsContext : ParserRuleContext {
		public IToken milliseconds;
		public IToken server_instance;
		public IToken session_timeout;
		public IToken ag_name;
		public IToken ag_name_modified;
		public IToken listener_name;
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode AUTOMATED_BACKUP_PREFERENCE() { return GetToken(TSqlParser.AUTOMATED_BACKUP_PREFERENCE, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode FAILURE_CONDITION_LEVEL() { return GetToken(TSqlParser.FAILURE_CONDITION_LEVEL, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode HEALTH_CHECK_TIMEOUT() { return GetToken(TSqlParser.HEALTH_CHECK_TIMEOUT, 0); }
		public ITerminalNode DB_FAILOVER() { return GetToken(TSqlParser.DB_FAILOVER, 0); }
		public ITerminalNode REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT() { return GetToken(TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, 0); }
		public ITerminalNode PRIMARY() { return GetToken(TSqlParser.PRIMARY, 0); }
		public ITerminalNode SECONDARY_ONLY() { return GetToken(TSqlParser.SECONDARY_ONLY, 0); }
		public ITerminalNode SECONDARY() { return GetToken(TSqlParser.SECONDARY, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode REPLICA() { return GetToken(TSqlParser.REPLICA, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] WITH() { return GetTokens(TSqlParser.WITH); }
		public ITerminalNode WITH(int i) {
			return GetToken(TSqlParser.WITH, i);
		}
		public ITerminalNode ENDPOINT_URL() { return GetToken(TSqlParser.ENDPOINT_URL, 0); }
		public ITerminalNode[] AVAILABILITY_MODE() { return GetTokens(TSqlParser.AVAILABILITY_MODE); }
		public ITerminalNode AVAILABILITY_MODE(int i) {
			return GetToken(TSqlParser.AVAILABILITY_MODE, i);
		}
		public ITerminalNode[] FAILOVER_MODE() { return GetTokens(TSqlParser.FAILOVER_MODE); }
		public ITerminalNode FAILOVER_MODE(int i) {
			return GetToken(TSqlParser.FAILOVER_MODE, i);
		}
		public ITerminalNode[] SEEDING_MODE() { return GetTokens(TSqlParser.SEEDING_MODE); }
		public ITerminalNode SEEDING_MODE(int i) {
			return GetToken(TSqlParser.SEEDING_MODE, i);
		}
		public ITerminalNode BACKUP_PRIORITY() { return GetToken(TSqlParser.BACKUP_PRIORITY, 0); }
		public ITerminalNode PRIMARY_ROLE() { return GetToken(TSqlParser.PRIMARY_ROLE, 0); }
		public ITerminalNode[] ALLOW_CONNECTIONS() { return GetTokens(TSqlParser.ALLOW_CONNECTIONS); }
		public ITerminalNode ALLOW_CONNECTIONS(int i) {
			return GetToken(TSqlParser.ALLOW_CONNECTIONS, i);
		}
		public ITerminalNode SECONDARY_ROLE() { return GetToken(TSqlParser.SECONDARY_ROLE, 0); }
		public ITerminalNode[] SYNCHRONOUS_COMMIT() { return GetTokens(TSqlParser.SYNCHRONOUS_COMMIT); }
		public ITerminalNode SYNCHRONOUS_COMMIT(int i) {
			return GetToken(TSqlParser.SYNCHRONOUS_COMMIT, i);
		}
		public ITerminalNode[] ASYNCHRONOUS_COMMIT() { return GetTokens(TSqlParser.ASYNCHRONOUS_COMMIT); }
		public ITerminalNode ASYNCHRONOUS_COMMIT(int i) {
			return GetToken(TSqlParser.ASYNCHRONOUS_COMMIT, i);
		}
		public ITerminalNode[] AUTOMATIC() { return GetTokens(TSqlParser.AUTOMATIC); }
		public ITerminalNode AUTOMATIC(int i) {
			return GetToken(TSqlParser.AUTOMATIC, i);
		}
		public ITerminalNode[] MANUAL() { return GetTokens(TSqlParser.MANUAL); }
		public ITerminalNode MANUAL(int i) {
			return GetToken(TSqlParser.MANUAL, i);
		}
		public ITerminalNode READ_WRITE() { return GetToken(TSqlParser.READ_WRITE, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode READ_ONLY() { return GetToken(TSqlParser.READ_ONLY, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode READ_ONLY_ROUTING_LIST() { return GetToken(TSqlParser.READ_ONLY_ROUTING_LIST, 0); }
		public ITerminalNode NO() { return GetToken(TSqlParser.NO, 0); }
		public ITerminalNode SESSION_TIMEOUT() { return GetToken(TSqlParser.SESSION_TIMEOUT, 0); }
		public ITerminalNode MODIFY() { return GetToken(TSqlParser.MODIFY, 0); }
		public ITerminalNode JOIN() { return GetToken(TSqlParser.JOIN, 0); }
		public ITerminalNode AVAILABILITY() { return GetToken(TSqlParser.AVAILABILITY, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public ITerminalNode[] LISTENER_URL() { return GetTokens(TSqlParser.LISTENER_URL); }
		public ITerminalNode LISTENER_URL(int i) {
			return GetToken(TSqlParser.LISTENER_URL, i);
		}
		public ITerminalNode GRANT() { return GetToken(TSqlParser.GRANT, 0); }
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode ANY() { return GetToken(TSqlParser.ANY, 0); }
		public ITerminalNode DENY() { return GetToken(TSqlParser.DENY, 0); }
		public ITerminalNode FAILOVER() { return GetToken(TSqlParser.FAILOVER, 0); }
		public ITerminalNode FORCE_FAILOVER_ALLOW_DATA_LOSS() { return GetToken(TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, 0); }
		public ITerminalNode LISTENER() { return GetToken(TSqlParser.LISTENER, 0); }
		public ITerminalNode DHCP() { return GetToken(TSqlParser.DHCP, 0); }
		public ITerminalNode IP() { return GetToken(TSqlParser.IP, 0); }
		public ITerminalNode[] IPV4_ADDR() { return GetTokens(TSqlParser.IPV4_ADDR); }
		public ITerminalNode IPV4_ADDR(int i) {
			return GetToken(TSqlParser.IPV4_ADDR, i);
		}
		public ITerminalNode PORT() { return GetToken(TSqlParser.PORT, 0); }
		public ITerminalNode[] IPV6_ADDR() { return GetTokens(TSqlParser.IPV6_ADDR); }
		public ITerminalNode IPV6_ADDR(int i) {
			return GetToken(TSqlParser.IPV6_ADDR, i);
		}
		public ITerminalNode RESTART() { return GetToken(TSqlParser.RESTART, 0); }
		public ITerminalNode OFFLINE() { return GetToken(TSqlParser.OFFLINE, 0); }
		public ITerminalNode DTC_SUPPORT() { return GetToken(TSqlParser.DTC_SUPPORT, 0); }
		public ITerminalNode PER_DB() { return GetToken(TSqlParser.PER_DB, 0); }
		public Alter_availability_group_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_availability_group_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_availability_group_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_availability_group_options(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_availability_group_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_availability_group_optionsContext alter_availability_group_options() {
		Alter_availability_group_optionsContext _localctx = new Alter_availability_group_optionsContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_alter_availability_group_options);
		int _la;
		try {
			int _alt;
			State = 2223;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,139,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1873; Match(SET);
				State = 1874; Match(LR_BRACKET);
				{
				State = 1890;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case AUTOMATED_BACKUP_PREFERENCE:
					{
					State = 1875; Match(AUTOMATED_BACKUP_PREFERENCE);
					State = 1876; Match(EQUAL);
					State = 1877;
					_la = _input.La(1);
					if ( !(_la==NONE || _la==PRIMARY || _la==SECONDARY || _la==SECONDARY_ONLY) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				case FAILURE_CONDITION_LEVEL:
					{
					State = 1878; Match(FAILURE_CONDITION_LEVEL);
					State = 1879; Match(EQUAL);
					State = 1880; Match(DECIMAL);
					}
					break;
				case HEALTH_CHECK_TIMEOUT:
					{
					State = 1881; Match(HEALTH_CHECK_TIMEOUT);
					State = 1882; Match(EQUAL);
					State = 1883; _localctx.milliseconds = Match(DECIMAL);
					}
					break;
				case DB_FAILOVER:
					{
					State = 1884; Match(DB_FAILOVER);
					State = 1885; Match(EQUAL);
					State = 1886;
					_la = _input.La(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					{
					State = 1887; Match(REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT);
					State = 1888; Match(EQUAL);
					State = 1889; Match(DECIMAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1892; Match(RR_BRACKET);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1893; Match(ADD);
				State = 1894; Match(DATABASE);
				State = 1895; database_name();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1896; Match(REMOVE);
				State = 1897; Match(DATABASE);
				State = 1898; database_name();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1899; Match(ADD);
				State = 1900; Match(REPLICA);
				State = 1901; Match(ON);
				State = 1902; _localctx.server_instance = Match(STRING);
				{
				State = 1903; Match(WITH);
				State = 1904; Match(LR_BRACKET);
				{
				State = 1908;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ENDPOINT_URL) {
					{
					State = 1905; Match(ENDPOINT_URL);
					State = 1906; Match(EQUAL);
					State = 1907; Match(STRING);
					}
				}

				State = 1916;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,99,_ctx) ) {
				case 1:
					{
					State = 1911;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==COMMA) {
						{
						State = 1910; Match(COMMA);
						}
					}

					State = 1913; Match(AVAILABILITY_MODE);
					State = 1914; Match(EQUAL);
					State = 1915;
					_la = _input.La(1);
					if ( !(_la==ASYNCHRONOUS_COMMIT || _la==SYNCHRONOUS_COMMIT) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 1924;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,101,_ctx) ) {
				case 1:
					{
					State = 1919;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==COMMA) {
						{
						State = 1918; Match(COMMA);
						}
					}

					State = 1921; Match(FAILOVER_MODE);
					State = 1922; Match(EQUAL);
					State = 1923;
					_la = _input.La(1);
					if ( !(_la==AUTOMATIC || _la==MANUAL) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 1932;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,103,_ctx) ) {
				case 1:
					{
					State = 1927;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==COMMA) {
						{
						State = 1926; Match(COMMA);
						}
					}

					State = 1929; Match(SEEDING_MODE);
					State = 1930; Match(EQUAL);
					State = 1931;
					_la = _input.La(1);
					if ( !(_la==AUTOMATIC || _la==MANUAL) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 1940;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,105,_ctx) ) {
				case 1:
					{
					State = 1935;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==COMMA) {
						{
						State = 1934; Match(COMMA);
						}
					}

					State = 1937; Match(BACKUP_PRIORITY);
					State = 1938; Match(EQUAL);
					State = 1939; Match(DECIMAL);
					}
					break;
				}
				State = 1951;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,107,_ctx) ) {
				case 1:
					{
					State = 1943;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==COMMA) {
						{
						State = 1942; Match(COMMA);
						}
					}

					State = 1945; Match(PRIMARY_ROLE);
					State = 1946; Match(LR_BRACKET);
					State = 1947; Match(ALLOW_CONNECTIONS);
					State = 1948; Match(EQUAL);
					State = 1949;
					_la = _input.La(1);
					if ( !(_la==ALL || _la==READ_WRITE) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 1950; Match(RR_BRACKET);
					}
					break;
				}
				State = 1962;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==SECONDARY_ROLE || _la==COMMA) {
					{
					State = 1954;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==COMMA) {
						{
						State = 1953; Match(COMMA);
						}
					}

					State = 1956; Match(SECONDARY_ROLE);
					State = 1957; Match(LR_BRACKET);
					State = 1958; Match(ALLOW_CONNECTIONS);
					State = 1959; Match(EQUAL);
					{
					State = 1960; Match(READ_ONLY);
					}
					State = 1961; Match(RR_BRACKET);
					}
				}

				}
				}
				State = 1964; Match(RR_BRACKET);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1965; Match(SECONDARY_ROLE);
				State = 1966; Match(LR_BRACKET);
				State = 1975;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case ALLOW_CONNECTIONS:
					{
					State = 1967; Match(ALLOW_CONNECTIONS);
					State = 1968; Match(EQUAL);
					State = 1969;
					_la = _input.La(1);
					if ( !(_la==ALL || _la==NO || _la==READ_ONLY) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				case READ_ONLY_ROUTING_LIST:
					{
					State = 1970; Match(READ_ONLY_ROUTING_LIST);
					State = 1971; Match(EQUAL);
					{
					State = 1972; Match(LR_BRACKET);
					{
					{
					State = 1973; Match(STRING);
					}
					}
					State = 1974; Match(RR_BRACKET);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1977; Match(PRIMARY_ROLE);
				State = 1978; Match(LR_BRACKET);
				State = 2001;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case ALLOW_CONNECTIONS:
					{
					State = 1979; Match(ALLOW_CONNECTIONS);
					State = 1980; Match(EQUAL);
					State = 1981;
					_la = _input.La(1);
					if ( !(_la==ALL || _la==NO || _la==READ_ONLY) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				case READ_ONLY_ROUTING_LIST:
					{
					State = 1982; Match(READ_ONLY_ROUTING_LIST);
					State = 1983; Match(EQUAL);
					{
					State = 1984; Match(LR_BRACKET);
					State = 1995;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case STRING:
					case RR_BRACKET:
					case COMMA:
						{
						State = 1991;
						_errHandler.Sync(this);
						_la = _input.La(1);
						while (_la==STRING || _la==COMMA) {
							{
							{
							State = 1986;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 1985; Match(COMMA);
								}
							}

							State = 1988; Match(STRING);
							}
							}
							State = 1993;
							_errHandler.Sync(this);
							_la = _input.La(1);
						}
						}
						break;
					case NONE:
						{
						State = 1994; Match(NONE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1997; Match(RR_BRACKET);
					}
					}
					break;
				case SESSION_TIMEOUT:
					{
					State = 1998; Match(SESSION_TIMEOUT);
					State = 1999; Match(EQUAL);
					State = 2000; _localctx.session_timeout = Match(DECIMAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2003; Match(MODIFY);
				State = 2004; Match(REPLICA);
				State = 2005; Match(ON);
				State = 2006; _localctx.server_instance = Match(STRING);
				State = 2064;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case WITH:
					{
					State = 2007; Match(WITH);
					State = 2008; Match(LR_BRACKET);
					State = 2024;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case ENDPOINT_URL:
						{
						State = 2009; Match(ENDPOINT_URL);
						State = 2010; Match(EQUAL);
						State = 2011; Match(STRING);
						}
						break;
					case AVAILABILITY_MODE:
						{
						State = 2012; Match(AVAILABILITY_MODE);
						State = 2013; Match(EQUAL);
						State = 2014;
						_la = _input.La(1);
						if ( !(_la==ASYNCHRONOUS_COMMIT || _la==SYNCHRONOUS_COMMIT) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					case FAILOVER_MODE:
						{
						State = 2015; Match(FAILOVER_MODE);
						State = 2016; Match(EQUAL);
						State = 2017;
						_la = _input.La(1);
						if ( !(_la==AUTOMATIC || _la==MANUAL) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					case SEEDING_MODE:
						{
						State = 2018; Match(SEEDING_MODE);
						State = 2019; Match(EQUAL);
						State = 2020;
						_la = _input.La(1);
						if ( !(_la==AUTOMATIC || _la==MANUAL) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					case BACKUP_PRIORITY:
						{
						State = 2021; Match(BACKUP_PRIORITY);
						State = 2022; Match(EQUAL);
						State = 2023; Match(DECIMAL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case SECONDARY_ROLE:
					{
					State = 2026; Match(SECONDARY_ROLE);
					State = 2027; Match(LR_BRACKET);
					State = 2036;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case ALLOW_CONNECTIONS:
						{
						State = 2028; Match(ALLOW_CONNECTIONS);
						State = 2029; Match(EQUAL);
						State = 2030;
						_la = _input.La(1);
						if ( !(_la==ALL || _la==NO || _la==READ_ONLY) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					case READ_ONLY_ROUTING_LIST:
						{
						State = 2031; Match(READ_ONLY_ROUTING_LIST);
						State = 2032; Match(EQUAL);
						{
						State = 2033; Match(LR_BRACKET);
						{
						{
						State = 2034; Match(STRING);
						}
						}
						State = 2035; Match(RR_BRACKET);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case PRIMARY_ROLE:
					{
					State = 2038; Match(PRIMARY_ROLE);
					State = 2039; Match(LR_BRACKET);
					State = 2062;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case ALLOW_CONNECTIONS:
						{
						State = 2040; Match(ALLOW_CONNECTIONS);
						State = 2041; Match(EQUAL);
						State = 2042;
						_la = _input.La(1);
						if ( !(_la==ALL || _la==NO || _la==READ_ONLY) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					case READ_ONLY_ROUTING_LIST:
						{
						State = 2043; Match(READ_ONLY_ROUTING_LIST);
						State = 2044; Match(EQUAL);
						{
						State = 2045; Match(LR_BRACKET);
						State = 2056;
						_errHandler.Sync(this);
						switch (_input.La(1)) {
						case STRING:
						case RR_BRACKET:
						case COMMA:
							{
							State = 2052;
							_errHandler.Sync(this);
							_la = _input.La(1);
							while (_la==STRING || _la==COMMA) {
								{
								{
								State = 2047;
								_errHandler.Sync(this);
								_la = _input.La(1);
								if (_la==COMMA) {
									{
									State = 2046; Match(COMMA);
									}
								}

								State = 2049; Match(STRING);
								}
								}
								State = 2054;
								_errHandler.Sync(this);
								_la = _input.La(1);
							}
							}
							break;
						case NONE:
							{
							State = 2055; Match(NONE);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 2058; Match(RR_BRACKET);
						}
						}
						break;
					case SESSION_TIMEOUT:
						{
						State = 2059; Match(SESSION_TIMEOUT);
						State = 2060; Match(EQUAL);
						State = 2061; _localctx.session_timeout = Match(DECIMAL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2066; Match(RR_BRACKET);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2067; Match(REMOVE);
				State = 2068; Match(REPLICA);
				State = 2069; Match(ON);
				State = 2070; Match(STRING);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2071; Match(JOIN);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2072; Match(JOIN);
				State = 2073; Match(AVAILABILITY);
				State = 2074; Match(GROUP);
				State = 2075; Match(ON);
				State = 2098;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 2077;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==COMMA) {
							{
							State = 2076; Match(COMMA);
							}
						}

						State = 2079; _localctx.ag_name = Match(STRING);
						State = 2080; Match(WITH);
						State = 2081; Match(LR_BRACKET);
						{
						State = 2082; Match(LISTENER_URL);
						State = 2083; Match(EQUAL);
						State = 2084; Match(STRING);
						State = 2085; Match(COMMA);
						State = 2086; Match(AVAILABILITY_MODE);
						State = 2087; Match(EQUAL);
						State = 2088;
						_la = _input.La(1);
						if ( !(_la==ASYNCHRONOUS_COMMIT || _la==SYNCHRONOUS_COMMIT) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2089; Match(COMMA);
						State = 2090; Match(FAILOVER_MODE);
						State = 2091; Match(EQUAL);
						State = 2092; Match(MANUAL);
						State = 2093; Match(COMMA);
						State = 2094; Match(SEEDING_MODE);
						State = 2095; Match(EQUAL);
						State = 2096;
						_la = _input.La(1);
						if ( !(_la==AUTOMATIC || _la==MANUAL) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2097; Match(RR_BRACKET);
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2100;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,123,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2102; Match(MODIFY);
				State = 2103; Match(AVAILABILITY);
				State = 2104; Match(GROUP);
				State = 2105; Match(ON);
				State = 2140;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 2107;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==COMMA) {
							{
							State = 2106; Match(COMMA);
							}
						}

						State = 2109; _localctx.ag_name_modified = Match(STRING);
						State = 2110; Match(WITH);
						State = 2111; Match(LR_BRACKET);
						{
						State = 2112; Match(LISTENER_URL);
						State = 2113; Match(EQUAL);
						State = 2114; Match(STRING);
						State = 2121;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,126,_ctx) ) {
						case 1:
							{
							State = 2116;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 2115; Match(COMMA);
								}
							}

							State = 2118; Match(AVAILABILITY_MODE);
							State = 2119; Match(EQUAL);
							State = 2120;
							_la = _input.La(1);
							if ( !(_la==ASYNCHRONOUS_COMMIT || _la==SYNCHRONOUS_COMMIT) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;
						}
						State = 2129;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,128,_ctx) ) {
						case 1:
							{
							State = 2124;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 2123; Match(COMMA);
								}
							}

							State = 2126; Match(FAILOVER_MODE);
							State = 2127; Match(EQUAL);
							State = 2128; Match(MANUAL);
							}
							break;
						}
						State = 2137;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==SEEDING_MODE || _la==COMMA) {
							{
							State = 2132;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 2131; Match(COMMA);
								}
							}

							State = 2134; Match(SEEDING_MODE);
							State = 2135; Match(EQUAL);
							State = 2136;
							_la = _input.La(1);
							if ( !(_la==AUTOMATIC || _la==MANUAL) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
						}

						State = 2139; Match(RR_BRACKET);
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2142;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,131,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2144; Match(GRANT);
				State = 2145; Match(CREATE);
				State = 2146; Match(ANY);
				State = 2147; Match(DATABASE);
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2148; Match(DENY);
				State = 2149; Match(CREATE);
				State = 2150; Match(ANY);
				State = 2151; Match(DATABASE);
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 2152; Match(FAILOVER);
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 2153; Match(FORCE_FAILOVER_ALLOW_DATA_LOSS);
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 2154; Match(ADD);
				State = 2155; Match(LISTENER);
				State = 2156; _localctx.listener_name = Match(STRING);
				State = 2157; Match(LR_BRACKET);
				State = 2191;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,136,_ctx) ) {
				case 1:
					{
					State = 2158; Match(WITH);
					State = 2159; Match(DHCP);
					{
					State = 2160; Match(ON);
					State = 2161; Match(LR_BRACKET);
					{
					State = 2162; Match(IPV4_ADDR);
					State = 2163; Match(IPV4_ADDR);
					}
					State = 2165; Match(RR_BRACKET);
					}
					}
					break;

				case 2:
					{
					State = 2166; Match(WITH);
					State = 2167; Match(IP);
					State = 2168; Match(LR_BRACKET);
					{
					State = 2180;
					_errHandler.Sync(this);
					_la = _input.La(1);
					do {
						{
						{
						State = 2170;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==COMMA) {
							{
							State = 2169; Match(COMMA);
							}
						}

						State = 2172; Match(LR_BRACKET);
						State = 2177;
						_errHandler.Sync(this);
						switch (_input.La(1)) {
						case IPV4_ADDR:
							{
							State = 2173; Match(IPV4_ADDR);
							State = 2174; Match(COMMA);
							State = 2175; Match(IPV4_ADDR);
							}
							break;
						case IPV6_ADDR:
							{
							State = 2176; Match(IPV6_ADDR);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 2179; Match(RR_BRACKET);
						}
						}
						State = 2182;
						_errHandler.Sync(this);
						_la = _input.La(1);
					} while ( _la==LR_BRACKET || _la==COMMA );
					State = 2184; Match(RR_BRACKET);
					State = 2189;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==COMMA) {
						{
						State = 2185; Match(COMMA);
						State = 2186; Match(PORT);
						State = 2187; Match(EQUAL);
						State = 2188; Match(DECIMAL);
						}
					}

					}
					}
					break;
				}
				State = 2193; Match(RR_BRACKET);
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 2194; Match(MODIFY);
				State = 2195; Match(LISTENER);
				State = 2208;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case ADD:
					{
					State = 2196; Match(ADD);
					State = 2197; Match(IP);
					State = 2198; Match(LR_BRACKET);
					State = 2202;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case IPV4_ADDR:
						{
						State = 2199; Match(IPV4_ADDR);
						State = 2200; Match(IPV4_ADDR);
						}
						break;
					case IPV6_ADDR:
						{
						State = 2201; Match(IPV6_ADDR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2204; Match(RR_BRACKET);
					}
					break;
				case PORT:
					{
					State = 2205; Match(PORT);
					State = 2206; Match(EQUAL);
					State = 2207; Match(DECIMAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 2210; Match(RESTART);
				State = 2211; Match(LISTENER);
				State = 2212; Match(STRING);
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 2213; Match(REMOVE);
				State = 2214; Match(LISTENER);
				State = 2215; Match(STRING);
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 2216; Match(OFFLINE);
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 2217; Match(WITH);
				State = 2218; Match(LR_BRACKET);
				State = 2219; Match(DTC_SUPPORT);
				State = 2220; Match(EQUAL);
				State = 2221; Match(PER_DB);
				State = 2222; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_or_alter_broker_priorityContext : ParserRuleContext {
		public IdContext ConversationPriorityName;
		public IToken RemoteServiceName;
		public IToken PriorityValue;
		public ITerminalNode BROKER() { return GetToken(TSqlParser.BROKER, 0); }
		public ITerminalNode PRIORITY() { return GetToken(TSqlParser.PRIORITY, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode CONVERSATION() { return GetToken(TSqlParser.CONVERSATION, 0); }
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode CONTRACT_NAME() { return GetToken(TSqlParser.CONTRACT_NAME, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode LOCAL_SERVICE_NAME() { return GetToken(TSqlParser.LOCAL_SERVICE_NAME, 0); }
		public ITerminalNode REMOTE_SERVICE_NAME() { return GetToken(TSqlParser.REMOTE_SERVICE_NAME, 0); }
		public ITerminalNode PRIORITY_LEVEL() { return GetToken(TSqlParser.PRIORITY_LEVEL, 0); }
		public ITerminalNode[] ANY() { return GetTokens(TSqlParser.ANY); }
		public ITerminalNode ANY(int i) {
			return GetToken(TSqlParser.ANY, i);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode DOUBLE_FORWARD_SLASH() { return GetToken(TSqlParser.DOUBLE_FORWARD_SLASH, 0); }
		public Create_or_alter_broker_priorityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_or_alter_broker_priority; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_or_alter_broker_priority(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_or_alter_broker_priority(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_or_alter_broker_priority(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_or_alter_broker_priorityContext create_or_alter_broker_priority() {
		Create_or_alter_broker_priorityContext _localctx = new Create_or_alter_broker_priorityContext(_ctx, State);
		EnterRule(_localctx, 162, RULE_create_or_alter_broker_priority);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2225;
			_la = _input.La(1);
			if ( !(_la==ALTER || _la==CREATE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 2226; Match(BROKER);
			State = 2227; Match(PRIORITY);
			State = 2228; _localctx.ConversationPriorityName = id();
			State = 2229; Match(FOR);
			State = 2230; Match(CONVERSATION);
			State = 2231; Match(SET);
			State = 2232; Match(LR_BRACKET);
			State = 2242;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CONTRACT_NAME) {
				{
				State = 2233; Match(CONTRACT_NAME);
				State = 2234; Match(EQUAL);
				State = 2237;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BACKSLASH:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONNECTION_OPTIONS:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DISK:
				case DOUBLE_BACK_SLASH:
				case DOUBLE_FORWARD_SLASH:
				case DTC_SUPPORT:
				case DUMP:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILENAME:
				case FILLFACTOR:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IDENTITYCOL:
				case IIF:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case IPV4_ADDR:
				case IPV6_ADDR:
				case ISNULL:
				case KERBEROS:
				case KEY:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOAD:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NATIVE_COMPILATION:
				case NEGOTIATE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case NULL:
				case OFFSETS:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PLATFORM:
				case POLICY:
				case PRECISION:
				case PREDICATE:
				case PROCESS:
				case PUBLIC:
				case PUSHDOWN:
				case PYTHON:
				case R:
				case RAW:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESULT_SETS:
				case RESUME:
				case RETAINDAYS:
				case RETURN:
				case RETURNS:
				case REWIND:
				case ROLE:
				case ROWCOUNT:
				case ROWGUIDCOL:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SECURITYAUDIT:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SESSION_USER:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case SYSTEM_USER:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case USER:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHIN:
				case WITHOUT:
				case WITNESS:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BUCKET_COUNT:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATEFIRST:
				case DATEFORMAT:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADOOP:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNDEFINED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case DOLLAR_ACTION:
				case SPACE:
				case COMMENT:
				case LINE_COMMENT:
				case DOUBLE_QUOTE_ID:
				case SINGLE_QUOTE:
				case SQUARE_BRACKET_ID:
				case LOCAL_ID:
				case DECIMAL:
				case ID:
				case QUOTED_URL:
				case QUOTED_HOST_AND_PORT:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case EQUAL:
				case GREATER:
				case LESS:
				case EXCLAMATION:
				case PLUS_ASSIGN:
				case MINUS_ASSIGN:
				case MULT_ASSIGN:
				case DIV_ASSIGN:
				case MOD_ASSIGN:
				case AND_ASSIGN:
				case XOR_ASSIGN:
				case OR_ASSIGN:
				case DOUBLE_BAR:
				case DOT:
				case UNDERLINE:
				case AT:
				case SHARP:
				case DOLLAR:
				case LR_BRACKET:
				case RR_BRACKET:
				case COMMA:
				case SEMI:
				case COLON:
				case STAR:
				case DIVIDE:
				case MODULE:
				case PLUS:
				case MINUS:
				case BIT_NOT:
				case BIT_OR:
				case BIT_AND:
				case BIT_XOR:
				case MDY:
				case DMY:
				case YMD:
				case YDM:
				case MYD:
				case DYM:
				case IPV4_OCTECT:
					{
					{
					State = 2235; id();
					}
					}
					break;
				case ANY:
					{
					State = 2236; Match(ANY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2240;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 2239; Match(COMMA);
					}
				}

				}
			}

			State = 2256;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LOCAL_SERVICE_NAME) {
				{
				State = 2244; Match(LOCAL_SERVICE_NAME);
				State = 2245; Match(EQUAL);
				State = 2251;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BACKSLASH:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONNECTION_OPTIONS:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DISK:
				case DOUBLE_BACK_SLASH:
				case DOUBLE_FORWARD_SLASH:
				case DTC_SUPPORT:
				case DUMP:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILENAME:
				case FILLFACTOR:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IDENTITYCOL:
				case IIF:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case IPV4_ADDR:
				case IPV6_ADDR:
				case ISNULL:
				case KERBEROS:
				case KEY:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOAD:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NATIVE_COMPILATION:
				case NEGOTIATE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case NULL:
				case OFFSETS:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PLATFORM:
				case POLICY:
				case PRECISION:
				case PREDICATE:
				case PROCESS:
				case PUBLIC:
				case PUSHDOWN:
				case PYTHON:
				case R:
				case RAW:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESULT_SETS:
				case RESUME:
				case RETAINDAYS:
				case RETURN:
				case RETURNS:
				case REWIND:
				case ROLE:
				case ROWCOUNT:
				case ROWGUIDCOL:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SECURITYAUDIT:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SESSION_USER:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case SYSTEM_USER:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case USER:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHIN:
				case WITHOUT:
				case WITNESS:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BUCKET_COUNT:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATEFIRST:
				case DATEFORMAT:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADOOP:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNDEFINED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case DOLLAR_ACTION:
				case SPACE:
				case COMMENT:
				case LINE_COMMENT:
				case DOUBLE_QUOTE_ID:
				case SINGLE_QUOTE:
				case SQUARE_BRACKET_ID:
				case LOCAL_ID:
				case DECIMAL:
				case ID:
				case QUOTED_URL:
				case QUOTED_HOST_AND_PORT:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case EQUAL:
				case GREATER:
				case LESS:
				case EXCLAMATION:
				case PLUS_ASSIGN:
				case MINUS_ASSIGN:
				case MULT_ASSIGN:
				case DIV_ASSIGN:
				case MOD_ASSIGN:
				case AND_ASSIGN:
				case XOR_ASSIGN:
				case OR_ASSIGN:
				case DOUBLE_BAR:
				case DOT:
				case UNDERLINE:
				case AT:
				case SHARP:
				case DOLLAR:
				case LR_BRACKET:
				case RR_BRACKET:
				case COMMA:
				case SEMI:
				case COLON:
				case STAR:
				case DIVIDE:
				case MODULE:
				case PLUS:
				case MINUS:
				case BIT_NOT:
				case BIT_OR:
				case BIT_AND:
				case BIT_XOR:
				case MDY:
				case DMY:
				case YMD:
				case YDM:
				case MYD:
				case DYM:
				case IPV4_OCTECT:
					{
					State = 2247;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,143,_ctx) ) {
					case 1:
						{
						State = 2246; Match(DOUBLE_FORWARD_SLASH);
						}
						break;
					}
					State = 2249; id();
					}
					break;
				case ANY:
					{
					State = 2250; Match(ANY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2254;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 2253; Match(COMMA);
					}
				}

				}
			}

			State = 2267;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==REMOTE_SERVICE_NAME) {
				{
				State = 2258; Match(REMOTE_SERVICE_NAME);
				State = 2259; Match(EQUAL);
				State = 2262;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case STRING:
					{
					State = 2260; _localctx.RemoteServiceName = Match(STRING);
					}
					break;
				case ANY:
					{
					State = 2261; Match(ANY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2265;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 2264; Match(COMMA);
					}
				}

				}
			}

			State = 2275;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==PRIORITY_LEVEL) {
				{
				State = 2269; Match(PRIORITY_LEVEL);
				State = 2270; Match(EQUAL);
				State = 2273;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case DECIMAL:
					{
					State = 2271; _localctx.PriorityValue = Match(DECIMAL);
					}
					break;
				case DEFAULT:
					{
					State = 2272; Match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			State = 2277; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_broker_priorityContext : ParserRuleContext {
		public IdContext ConversationPriorityName;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode BROKER() { return GetToken(TSqlParser.BROKER, 0); }
		public ITerminalNode PRIORITY() { return GetToken(TSqlParser.PRIORITY, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_broker_priorityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_broker_priority; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_broker_priority(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_broker_priority(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_broker_priority(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_broker_priorityContext drop_broker_priority() {
		Drop_broker_priorityContext _localctx = new Drop_broker_priorityContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_drop_broker_priority);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2279; Match(DROP);
			State = 2280; Match(BROKER);
			State = 2281; Match(PRIORITY);
			State = 2282; _localctx.ConversationPriorityName = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_certificateContext : ParserRuleContext {
		public IdContext certificate_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode PRIVATE_KEY() { return GetToken(TSqlParser.PRIVATE_KEY, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode PRIVATE() { return GetToken(TSqlParser.PRIVATE, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode ACTIVE() { return GetToken(TSqlParser.ACTIVE, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode BEGIN_DIALOG() { return GetToken(TSqlParser.BEGIN_DIALOG, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode[] FILE() { return GetTokens(TSqlParser.FILE); }
		public ITerminalNode FILE(int i) {
			return GetToken(TSqlParser.FILE, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] DECRYPTION() { return GetTokens(TSqlParser.DECRYPTION); }
		public ITerminalNode DECRYPTION(int i) {
			return GetToken(TSqlParser.DECRYPTION, i);
		}
		public ITerminalNode[] BY() { return GetTokens(TSqlParser.BY); }
		public ITerminalNode BY(int i) {
			return GetToken(TSqlParser.BY, i);
		}
		public ITerminalNode[] PASSWORD() { return GetTokens(TSqlParser.PASSWORD); }
		public ITerminalNode PASSWORD(int i) {
			return GetToken(TSqlParser.PASSWORD, i);
		}
		public ITerminalNode[] ENCRYPTION() { return GetTokens(TSqlParser.ENCRYPTION); }
		public ITerminalNode ENCRYPTION(int i) {
			return GetToken(TSqlParser.ENCRYPTION, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Alter_certificateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_certificate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_certificate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_certificate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_certificate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_certificateContext alter_certificate() {
		Alter_certificateContext _localctx = new Alter_certificateContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_alter_certificate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2284; Match(ALTER);
			State = 2285; Match(CERTIFICATE);
			State = 2286; _localctx.certificate_name = id();
			State = 2326;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,157,_ctx) ) {
			case 1:
				{
				State = 2287; Match(REMOVE);
				State = 2288; Match(PRIVATE_KEY);
				}
				break;

			case 2:
				{
				State = 2289; Match(WITH);
				State = 2290; Match(PRIVATE);
				State = 2291; Match(KEY);
				State = 2292; Match(LR_BRACKET);
				State = 2315;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					State = 2315;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case FILE:
						{
						State = 2293; Match(FILE);
						State = 2294; Match(EQUAL);
						State = 2295; Match(STRING);
						State = 2297;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==COMMA) {
							{
							State = 2296; Match(COMMA);
							}
						}

						}
						break;
					case DECRYPTION:
						{
						State = 2299; Match(DECRYPTION);
						State = 2300; Match(BY);
						State = 2301; Match(PASSWORD);
						State = 2302; Match(EQUAL);
						State = 2303; Match(STRING);
						State = 2305;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==COMMA) {
							{
							State = 2304; Match(COMMA);
							}
						}

						}
						break;
					case ENCRYPTION:
						{
						State = 2307; Match(ENCRYPTION);
						State = 2308; Match(BY);
						State = 2309; Match(PASSWORD);
						State = 2310; Match(EQUAL);
						State = 2311; Match(STRING);
						State = 2313;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==COMMA) {
							{
							State = 2312; Match(COMMA);
							}
						}

						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 2317;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==FILE || _la==DECRYPTION || _la==ENCRYPTION );
				State = 2319; Match(RR_BRACKET);
				}
				break;

			case 3:
				{
				State = 2320; Match(WITH);
				State = 2321; Match(ACTIVE);
				State = 2322; Match(FOR);
				State = 2323; Match(BEGIN_DIALOG);
				State = 2324; Match(EQUAL);
				State = 2325;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_column_encryption_keyContext : ParserRuleContext {
		public IdContext column_encryption_key;
		public IdContext column_master_key_name;
		public IToken algorithm_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode COLUMN() { return GetToken(TSqlParser.COLUMN, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode VALUE() { return GetToken(TSqlParser.VALUE, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode COLUMN_MASTER_KEY() { return GetToken(TSqlParser.COLUMN_MASTER_KEY, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode ALGORITHM() { return GetToken(TSqlParser.ALGORITHM, 0); }
		public ITerminalNode ENCRYPTED_VALUE() { return GetToken(TSqlParser.ENCRYPTED_VALUE, 0); }
		public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Alter_column_encryption_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_column_encryption_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_column_encryption_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_column_encryption_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_column_encryption_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_column_encryption_keyContext alter_column_encryption_key() {
		Alter_column_encryption_keyContext _localctx = new Alter_column_encryption_keyContext(_ctx, State);
		EnterRule(_localctx, 168, RULE_alter_column_encryption_key);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2328; Match(ALTER);
			State = 2329; Match(COLUMN);
			State = 2330; Match(ENCRYPTION);
			State = 2331; Match(KEY);
			State = 2332; _localctx.column_encryption_key = id();
			State = 2333;
			_la = _input.La(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 2334; Match(VALUE);
			State = 2335; Match(LR_BRACKET);
			State = 2336; Match(COLUMN_MASTER_KEY);
			State = 2337; Match(EQUAL);
			State = 2338; _localctx.column_master_key_name = id();
			State = 2347;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 2339; Match(COMMA);
				State = 2340; Match(ALGORITHM);
				State = 2341; Match(EQUAL);
				State = 2342; _localctx.algorithm_name = Match(STRING);
				State = 2343; Match(COMMA);
				State = 2344; Match(ENCRYPTED_VALUE);
				State = 2345; Match(EQUAL);
				State = 2346; Match(BINARY);
				}
			}

			State = 2349; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_column_encryption_keyContext : ParserRuleContext {
		public IdContext column_encryption_key;
		public IdContext column_master_key_name;
		public IToken algorithm_name;
		public IToken encrypted_value;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode COLUMN() { return GetToken(TSqlParser.COLUMN, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode VALUES() { return GetToken(TSqlParser.VALUES, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] COLUMN_MASTER_KEY() { return GetTokens(TSqlParser.COLUMN_MASTER_KEY); }
		public ITerminalNode COLUMN_MASTER_KEY(int i) {
			return GetToken(TSqlParser.COLUMN_MASTER_KEY, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] ALGORITHM() { return GetTokens(TSqlParser.ALGORITHM); }
		public ITerminalNode ALGORITHM(int i) {
			return GetToken(TSqlParser.ALGORITHM, i);
		}
		public ITerminalNode[] ENCRYPTED_VALUE() { return GetTokens(TSqlParser.ENCRYPTED_VALUE); }
		public ITerminalNode ENCRYPTED_VALUE(int i) {
			return GetToken(TSqlParser.ENCRYPTED_VALUE, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] BINARY() { return GetTokens(TSqlParser.BINARY); }
		public ITerminalNode BINARY(int i) {
			return GetToken(TSqlParser.BINARY, i);
		}
		public Create_column_encryption_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_column_encryption_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_column_encryption_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_column_encryption_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_column_encryption_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_column_encryption_keyContext create_column_encryption_key() {
		Create_column_encryption_keyContext _localctx = new Create_column_encryption_keyContext(_ctx, State);
		EnterRule(_localctx, 170, RULE_create_column_encryption_key);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2351; Match(CREATE);
			State = 2352; Match(COLUMN);
			State = 2353; Match(ENCRYPTION);
			State = 2354; Match(KEY);
			State = 2355; _localctx.column_encryption_key = id();
			State = 2356; Match(WITH);
			State = 2357; Match(VALUES);
			State = 2377;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2358; Match(LR_BRACKET);
					State = 2360;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==COMMA) {
						{
						State = 2359; Match(COMMA);
						}
					}

					State = 2362; Match(COLUMN_MASTER_KEY);
					State = 2363; Match(EQUAL);
					State = 2364; _localctx.column_master_key_name = id();
					State = 2365; Match(COMMA);
					State = 2366; Match(ALGORITHM);
					State = 2367; Match(EQUAL);
					State = 2368; _localctx.algorithm_name = Match(STRING);
					State = 2369; Match(COMMA);
					State = 2370; Match(ENCRYPTED_VALUE);
					State = 2371; Match(EQUAL);
					State = 2372; _localctx.encrypted_value = Match(BINARY);
					State = 2373; Match(RR_BRACKET);
					State = 2375;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,160,_ctx) ) {
					case 1:
						{
						State = 2374; Match(COMMA);
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2379;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,161,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_certificateContext : ParserRuleContext {
		public IdContext certificate_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_certificateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_certificate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_certificate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_certificate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_certificate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_certificateContext drop_certificate() {
		Drop_certificateContext _localctx = new Drop_certificateContext(_ctx, State);
		EnterRule(_localctx, 172, RULE_drop_certificate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2381; Match(DROP);
			State = 2382; Match(CERTIFICATE);
			State = 2383; _localctx.certificate_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_column_encryption_keyContext : ParserRuleContext {
		public IdContext key_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode COLUMN() { return GetToken(TSqlParser.COLUMN, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_column_encryption_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_column_encryption_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_column_encryption_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_column_encryption_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_column_encryption_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_column_encryption_keyContext drop_column_encryption_key() {
		Drop_column_encryption_keyContext _localctx = new Drop_column_encryption_keyContext(_ctx, State);
		EnterRule(_localctx, 174, RULE_drop_column_encryption_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2385; Match(DROP);
			State = 2386; Match(COLUMN);
			State = 2387; Match(ENCRYPTION);
			State = 2388; Match(KEY);
			State = 2389; _localctx.key_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_column_master_keyContext : ParserRuleContext {
		public IdContext key_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode COLUMN() { return GetToken(TSqlParser.COLUMN, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_column_master_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_column_master_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_column_master_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_column_master_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_column_master_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_column_master_keyContext drop_column_master_key() {
		Drop_column_master_keyContext _localctx = new Drop_column_master_keyContext(_ctx, State);
		EnterRule(_localctx, 176, RULE_drop_column_master_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2391; Match(DROP);
			State = 2392; Match(COLUMN);
			State = 2393; Match(MASTER);
			State = 2394; Match(KEY);
			State = 2395; _localctx.key_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_contractContext : ParserRuleContext {
		public IdContext dropped_contract_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode CONTRACT() { return GetToken(TSqlParser.CONTRACT, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_contractContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_contract; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_contract(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_contract(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_contract(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_contractContext drop_contract() {
		Drop_contractContext _localctx = new Drop_contractContext(_ctx, State);
		EnterRule(_localctx, 178, RULE_drop_contract);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2397; Match(DROP);
			State = 2398; Match(CONTRACT);
			State = 2399; _localctx.dropped_contract_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_credentialContext : ParserRuleContext {
		public IdContext credential_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode CREDENTIAL() { return GetToken(TSqlParser.CREDENTIAL, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_credentialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_credential; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_credential(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_credential(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_credential(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_credentialContext drop_credential() {
		Drop_credentialContext _localctx = new Drop_credentialContext(_ctx, State);
		EnterRule(_localctx, 180, RULE_drop_credential);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2401; Match(DROP);
			State = 2402; Match(CREDENTIAL);
			State = 2403; _localctx.credential_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_cryptograhic_providerContext : ParserRuleContext {
		public IdContext provider_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode CRYPTOGRAPHIC() { return GetToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_cryptograhic_providerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_cryptograhic_provider; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_cryptograhic_provider(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_cryptograhic_provider(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_cryptograhic_provider(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_cryptograhic_providerContext drop_cryptograhic_provider() {
		Drop_cryptograhic_providerContext _localctx = new Drop_cryptograhic_providerContext(_ctx, State);
		EnterRule(_localctx, 182, RULE_drop_cryptograhic_provider);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2405; Match(DROP);
			State = 2406; Match(CRYPTOGRAPHIC);
			State = 2407; Match(PROVIDER);
			State = 2408; _localctx.provider_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_databaseContext : ParserRuleContext {
		public IdContext database_name_or_database_snapshot_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Drop_databaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_database; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_database(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_database(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_database(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_databaseContext drop_database() {
		Drop_databaseContext _localctx = new Drop_databaseContext(_ctx, State);
		EnterRule(_localctx, 184, RULE_drop_database);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2410; Match(DROP);
			State = 2411; Match(DATABASE);
			State = 2414;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IF) {
				{
				State = 2412; Match(IF);
				State = 2413; Match(EXISTS);
				}
			}

			State = 2420;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2417;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,163,_ctx) ) {
					case 1:
						{
						State = 2416; Match(COMMA);
						}
						break;
					}
					State = 2419; _localctx.database_name_or_database_snapshot_name = id();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2422;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,164,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_database_audit_specificationContext : ParserRuleContext {
		public IdContext audit_specification_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode AUDIT() { return GetToken(TSqlParser.AUDIT, 0); }
		public ITerminalNode SPECIFICATION() { return GetToken(TSqlParser.SPECIFICATION, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_database_audit_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_database_audit_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_database_audit_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_database_audit_specification(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_database_audit_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_database_audit_specificationContext drop_database_audit_specification() {
		Drop_database_audit_specificationContext _localctx = new Drop_database_audit_specificationContext(_ctx, State);
		EnterRule(_localctx, 186, RULE_drop_database_audit_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2424; Match(DROP);
			State = 2425; Match(DATABASE);
			State = 2426; Match(AUDIT);
			State = 2427; Match(SPECIFICATION);
			State = 2428; _localctx.audit_specification_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_database_scoped_credentialContext : ParserRuleContext {
		public IdContext credential_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode SCOPED() { return GetToken(TSqlParser.SCOPED, 0); }
		public ITerminalNode CREDENTIAL() { return GetToken(TSqlParser.CREDENTIAL, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_database_scoped_credentialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_database_scoped_credential; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_database_scoped_credential(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_database_scoped_credential(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_database_scoped_credential(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_database_scoped_credentialContext drop_database_scoped_credential() {
		Drop_database_scoped_credentialContext _localctx = new Drop_database_scoped_credentialContext(_ctx, State);
		EnterRule(_localctx, 188, RULE_drop_database_scoped_credential);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2430; Match(DROP);
			State = 2431; Match(DATABASE);
			State = 2432; Match(SCOPED);
			State = 2433; Match(CREDENTIAL);
			State = 2434; _localctx.credential_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_defaultContext : ParserRuleContext {
		public IdContext default_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Drop_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_default; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_default(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_default(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_default(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_defaultContext drop_default() {
		Drop_defaultContext _localctx = new Drop_defaultContext(_ctx, State);
		EnterRule(_localctx, 190, RULE_drop_default);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2436; Match(DROP);
			State = 2437; Match(DEFAULT);
			State = 2440;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IF) {
				{
				State = 2438; Match(IF);
				State = 2439; Match(EXISTS);
				}
			}

			{
			State = 2443;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,166,_ctx) ) {
			case 1:
				{
				State = 2442; Match(COMMA);
				}
				break;
			}
			State = 2448;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,167,_ctx) ) {
			case 1:
				{
				State = 2445; schema_name();
				State = 2446; Match(DOT);
				}
				break;
			}
			State = 2450; _localctx.default_name = id();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_endpointContext : ParserRuleContext {
		public IdContext endPointName;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode ENDPOINT() { return GetToken(TSqlParser.ENDPOINT, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_endpointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_endpoint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_endpoint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_endpoint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_endpoint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_endpointContext drop_endpoint() {
		Drop_endpointContext _localctx = new Drop_endpointContext(_ctx, State);
		EnterRule(_localctx, 192, RULE_drop_endpoint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2452; Match(DROP);
			State = 2453; Match(ENDPOINT);
			State = 2454; _localctx.endPointName = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_external_data_sourceContext : ParserRuleContext {
		public IdContext external_data_source_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode DATA() { return GetToken(TSqlParser.DATA, 0); }
		public ITerminalNode SOURCE() { return GetToken(TSqlParser.SOURCE, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_external_data_sourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_external_data_source; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_external_data_source(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_external_data_source(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_external_data_source(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_external_data_sourceContext drop_external_data_source() {
		Drop_external_data_sourceContext _localctx = new Drop_external_data_sourceContext(_ctx, State);
		EnterRule(_localctx, 194, RULE_drop_external_data_source);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2456; Match(DROP);
			State = 2457; Match(EXTERNAL);
			State = 2458; Match(DATA);
			State = 2459; Match(SOURCE);
			State = 2460; _localctx.external_data_source_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_external_file_formatContext : ParserRuleContext {
		public IdContext external_file_format_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode FORMAT() { return GetToken(TSqlParser.FORMAT, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_external_file_formatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_external_file_format; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_external_file_format(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_external_file_format(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_external_file_format(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_external_file_formatContext drop_external_file_format() {
		Drop_external_file_formatContext _localctx = new Drop_external_file_formatContext(_ctx, State);
		EnterRule(_localctx, 196, RULE_drop_external_file_format);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2462; Match(DROP);
			State = 2463; Match(EXTERNAL);
			State = 2464; Match(FILE);
			State = 2465; Match(FORMAT);
			State = 2466; _localctx.external_file_format_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_external_libraryContext : ParserRuleContext {
		public IdContext library_name;
		public IdContext owner_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode LIBRARY() { return GetToken(TSqlParser.LIBRARY, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public Drop_external_libraryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_external_library; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_external_library(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_external_library(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_external_library(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_external_libraryContext drop_external_library() {
		Drop_external_libraryContext _localctx = new Drop_external_libraryContext(_ctx, State);
		EnterRule(_localctx, 198, RULE_drop_external_library);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2468; Match(DROP);
			State = 2469; Match(EXTERNAL);
			State = 2470; Match(LIBRARY);
			State = 2471; _localctx.library_name = id();
			State = 2474;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AUTHORIZATION) {
				{
				State = 2472; Match(AUTHORIZATION);
				State = 2473; _localctx.owner_name = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_external_resource_poolContext : ParserRuleContext {
		public IdContext pool_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode RESOURCE() { return GetToken(TSqlParser.RESOURCE, 0); }
		public ITerminalNode POOL() { return GetToken(TSqlParser.POOL, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_external_resource_poolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_external_resource_pool; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_external_resource_pool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_external_resource_pool(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_external_resource_pool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_external_resource_poolContext drop_external_resource_pool() {
		Drop_external_resource_poolContext _localctx = new Drop_external_resource_poolContext(_ctx, State);
		EnterRule(_localctx, 200, RULE_drop_external_resource_pool);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2476; Match(DROP);
			State = 2477; Match(EXTERNAL);
			State = 2478; Match(RESOURCE);
			State = 2479; Match(POOL);
			State = 2480; _localctx.pool_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_external_tableContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public Drop_external_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_external_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_external_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_external_table(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_external_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_external_tableContext drop_external_table() {
		Drop_external_tableContext _localctx = new Drop_external_tableContext(_ctx, State);
		EnterRule(_localctx, 202, RULE_drop_external_table);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2482; Match(DROP);
			State = 2483; Match(EXTERNAL);
			State = 2484; Match(TABLE);
			State = 2488;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,169,_ctx) ) {
			case 1:
				{
				State = 2485; database_name();
				State = 2486; Match(DOT);
				}
				break;
			}
			State = 2493;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,170,_ctx) ) {
			case 1:
				{
				State = 2490; schema_name();
				State = 2491; Match(DOT);
				}
				break;
			}
			State = 2495; table_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_event_notificationsContext : ParserRuleContext {
		public IdContext notification_name;
		public IdContext queue_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode EVENT() { return GetToken(TSqlParser.EVENT, 0); }
		public ITerminalNode NOTIFICATION() { return GetToken(TSqlParser.NOTIFICATION, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Drop_event_notificationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_event_notifications; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_event_notifications(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_event_notifications(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_event_notifications(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_event_notificationsContext drop_event_notifications() {
		Drop_event_notificationsContext _localctx = new Drop_event_notificationsContext(_ctx, State);
		EnterRule(_localctx, 204, RULE_drop_event_notifications);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2497; Match(DROP);
			State = 2498; Match(EVENT);
			State = 2499; Match(NOTIFICATION);
			State = 2504;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 2501;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,171,_ctx) ) {
				case 1:
					{
					State = 2500; Match(COMMA);
					}
					break;
				}
				State = 2503; _localctx.notification_name = id();
				}
				}
				State = 2506;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSENT) | (1L << AES) | (1L << ALLOW_CONNECTIONS) | (1L << ALLOW_MULTIPLE_EVENT_LOSS) | (1L << ALLOW_SINGLE_EVENT_LOSS) | (1L << ANONYMOUS) | (1L << APPEND) | (1L << APPLICATION) | (1L << ASYMMETRIC) | (1L << ASYNCHRONOUS_COMMIT) | (1L << AUTHENTICATION) | (1L << AUTOMATED_BACKUP_PREFERENCE) | (1L << AUTOMATIC) | (1L << AVAILABILITY_MODE) | (1L << BACKSLASH) | (1L << BEFORE) | (1L << BLOCK) | (1L << BLOCKSIZE) | (1L << BLOCKING_HIERARCHY) | (1L << BUFFER) | (1L << BUFFERCOUNT) | (1L << CACHE) | (1L << CALLED) | (1L << CERTIFICATE) | (1L << CHANGETABLE) | (1L << CHANGES) | (1L << CHECK_POLICY) | (1L << CHECK_EXPIRATION) | (1L << CLASSIFIER_FUNCTION) | (1L << CLUSTER) | (1L << COMPRESSION) | (1L << CONNECTION_OPTIONS) | (1L << CONFIGURATION) | (1L << CONTAINMENT))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CONTEXT - 65)) | (1L << (CONTINUE_AFTER_ERROR - 65)) | (1L << (CONTRACT - 65)) | (1L << (CONTRACT_NAME - 65)) | (1L << (CONVERSATION - 65)) | (1L << (COPY_ONLY - 65)) | (1L << (CURRENT_TIMESTAMP - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA_COMPRESSION - 65)) | (1L << (DATA_SOURCE - 65)) | (1L << (DATABASE_MIRRORING - 65)) | (1L << (DEFAULT_DATABASE - 65)) | (1L << (DEFAULT_SCHEMA - 65)) | (1L << (DIAGNOSTICS - 65)) | (1L << (DIFFERENTIAL - 65)) | (1L << (DISK - 65)) | (1L << (DOUBLE_BACK_SLASH - 65)) | (1L << (DOUBLE_FORWARD_SLASH - 65)) | (1L << (DTC_SUPPORT - 65)) | (1L << (DUMP - 65)) | (1L << (ENABLED - 65)) | (1L << (ENDPOINT - 65)) | (1L << (ERROR - 65)) | (1L << (EVENT - 65)) | (1L << (EVENTDATA - 65)) | (1L << (EVENT_RETENTION_MODE - 65)) | (1L << (EXECUTABLE_FILE - 65)) | (1L << (EXPIREDATE - 65)) | (1L << (EXTENSION - 65)) | (1L << (EXTERNAL_ACCESS - 65)) | (1L << (FAILOVER - 65)) | (1L << (FAILURECONDITIONLEVEL - 65)) | (1L << (FAN_IN - 65)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (FILENAME - 130)) | (1L << (FILLFACTOR - 130)) | (1L << (FILE_SNAPSHOT - 130)) | (1L << (FORCESEEK - 130)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 130)) | (1L << (GET - 130)) | (1L << (GOVERNOR - 130)) | (1L << (HASHED - 130)) | (1L << (HEALTHCHECKTIMEOUT - 130)) | (1L << (IDENTITYCOL - 130)) | (1L << (IIF - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCREMENT - 130)) | (1L << (INFINITE - 130)) | (1L << (INIT - 130)) | (1L << (INSTEAD - 130)) | (1L << (IPV4_ADDR - 130)) | (1L << (IPV6_ADDR - 130)) | (1L << (ISNULL - 130)) | (1L << (KERBEROS - 130)) | (1L << (KEY - 130)) | (1L << (KEY_PATH - 130)) | (1L << (KEY_STORE_PROVIDER_NAME - 130)) | (1L << (LANGUAGE - 130)) | (1L << (LIBRARY - 130)) | (1L << (LIFETIME - 130)) | (1L << (LINUX - 130)) | (1L << (LISTENER_IP - 130)) | (1L << (LISTENER_PORT - 130)) | (1L << (LOAD - 130)) | (1L << (LOCAL_SERVICE_NAME - 130)) | (1L << (LOG - 130)) | (1L << (MATCHED - 130)) | (1L << (MASTER - 130)) | (1L << (MAX_MEMORY - 130)) | (1L << (MAXTRANSFER - 130)) | (1L << (MAXVALUE - 130)) | (1L << (MAX_DISPATCH_LATENCY - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (MAX_EVENT_SIZE - 194)) | (1L << (MAX_SIZE - 194)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 194)) | (1L << (MEDIADESCRIPTION - 194)) | (1L << (MEDIANAME - 194)) | (1L << (MEMBER - 194)) | (1L << (MEMORY_PARTITION_MODE - 194)) | (1L << (MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT - 194)) | (1L << (MESSAGE_FORWARDING - 194)) | (1L << (MESSAGE_FORWARD_SIZE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MIRROR - 194)) | (1L << (MUST_CHANGE - 194)) | (1L << (NATIVE_COMPILATION - 194)) | (1L << (NEGOTIATE - 194)) | (1L << (NOFORMAT - 194)) | (1L << (NOINIT - 194)) | (1L << (NONE - 194)) | (1L << (NOREWIND - 194)) | (1L << (NOSKIP - 194)) | (1L << (NOUNLOAD - 194)) | (1L << (NO_CHECKSUM - 194)) | (1L << (NO_COMPRESSION - 194)) | (1L << (NO_EVENT_LOSS - 194)) | (1L << (NOTIFICATION - 194)) | (1L << (NTLM - 194)) | (1L << (NULL - 194)) | (1L << (OFFSETS - 194)) | (1L << (OLD_PASSWORD - 194)) | (1L << (ON_FAILURE - 194)) | (1L << (PAGE - 194)) | (1L << (PARAM_NODE - 194)) | (1L << (PARTIAL - 194)) | (1L << (PASSWORD - 194)) | (1L << (PERMISSION_SET - 194)) | (1L << (PER_CPU - 194)) | (1L << (PER_DB - 194)) | (1L << (PER_NODE - 194)) | (1L << (PLATFORM - 194)) | (1L << (POLICY - 194)) | (1L << (PRECISION - 194)) | (1L << (PREDICATE - 194)))) != 0) || ((((_la - 262)) & ~0x3f) == 0 && ((1L << (_la - 262)) & ((1L << (PROCESS - 262)) | (1L << (PUBLIC - 262)) | (1L << (PUSHDOWN - 262)) | (1L << (PYTHON - 262)) | (1L << (R - 262)) | (1L << (RAW - 262)) | (1L << (READ_WRITE_FILEGROUPS - 262)) | (1L << (REGENERATE - 262)) | (1L << (RELATED_CONVERSATION - 262)) | (1L << (RELATED_CONVERSATION_GROUP - 262)) | (1L << (REQUIRED - 262)) | (1L << (RESET - 262)) | (1L << (RESTART - 262)) | (1L << (RESULT_SETS - 262)) | (1L << (RESUME - 262)) | (1L << (RETAINDAYS - 262)) | (1L << (RETURN - 262)) | (1L << (RETURNS - 262)) | (1L << (REWIND - 262)) | (1L << (ROLE - 262)) | (1L << (ROWCOUNT - 262)) | (1L << (ROWGUIDCOL - 262)) | (1L << (RSA_512 - 262)) | (1L << (RSA_1024 - 262)) | (1L << (RSA_2048 - 262)) | (1L << (RSA_3072 - 262)) | (1L << (RSA_4096 - 262)) | (1L << (SAFETY - 262)) | (1L << (SAFE - 262)) | (1L << (SCHEDULER - 262)) | (1L << (SCHEME - 262)) | (1L << (SECURITYAUDIT - 262)) | (1L << (SERVER - 262)) | (1L << (SERVICE - 262)) | (1L << (SERVICE_BROKER - 262)) | (1L << (SERVICE_NAME - 262)) | (1L << (SESSION - 262)) | (1L << (SESSION_USER - 262)) | (1L << (SID - 262)) | (1L << (SKIP_KEYWORD - 262)) | (1L << (SOFTNUMA - 262)))) != 0) || ((((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & ((1L << (SOURCE - 326)) | (1L << (SPECIFICATION - 326)) | (1L << (SPLIT - 326)) | (1L << (SQLDUMPERFLAGS - 326)) | (1L << (SQLDUMPERPATH - 326)) | (1L << (SQLDUMPERTIMEOUT - 326)) | (1L << (STATE - 326)) | (1L << (STATS - 326)) | (1L << (START - 326)) | (1L << (STARTED - 326)) | (1L << (STARTUP_STATE - 326)) | (1L << (STOP - 326)) | (1L << (STOPPED - 326)) | (1L << (STOP_ON_ERROR - 326)) | (1L << (SUPPORTED - 326)) | (1L << (SYSTEM_USER - 326)) | (1L << (TAPE - 326)) | (1L << (TARGET - 326)) | (1L << (TCP - 326)) | (1L << (TRACK_CAUSALITY - 326)) | (1L << (TRANSFER - 326)) | (1L << (UNCHECKED - 326)) | (1L << (UNLOCK - 326)) | (1L << (UNSAFE - 326)) | (1L << (URL - 326)) | (1L << (USED - 326)) | (1L << (USER - 326)) | (1L << (VERBOSELOGGING - 326)) | (1L << (VISIBILITY - 326)) | (1L << (WINDOWS - 326)) | (1L << (WITHIN - 326)) | (1L << (WITHOUT - 326)) | (1L << (WITNESS - 326)) | (1L << (ABSOLUTE - 326)) | (1L << (ACCENT_SENSITIVITY - 326)) | (1L << (ACTION - 326)) | (1L << (ACTIVATION - 326)))) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & ((1L << (ACTIVE - 390)) | (1L << (ADDRESS - 390)) | (1L << (AES_128 - 390)) | (1L << (AES_192 - 390)) | (1L << (AES_256 - 390)) | (1L << (AFFINITY - 390)) | (1L << (AFTER - 390)) | (1L << (AGGREGATE - 390)) | (1L << (ALGORITHM - 390)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 390)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 390)) | (1L << (ALLOWED - 390)) | (1L << (ANSI_NULL_DEFAULT - 390)) | (1L << (ANSI_NULLS - 390)) | (1L << (ANSI_PADDING - 390)) | (1L << (ANSI_WARNINGS - 390)) | (1L << (APPLICATION_LOG - 390)) | (1L << (APPLY - 390)) | (1L << (ARITHABORT - 390)) | (1L << (ASSEMBLY - 390)) | (1L << (AUDIT - 390)) | (1L << (AUDIT_GUID - 390)) | (1L << (AUTO - 390)) | (1L << (AUTO_CLEANUP - 390)) | (1L << (AUTO_CLOSE - 390)) | (1L << (AUTO_CREATE_STATISTICS - 390)) | (1L << (AUTO_SHRINK - 390)) | (1L << (AUTO_UPDATE_STATISTICS - 390)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 390)) | (1L << (AVAILABILITY - 390)) | (1L << (AVG - 390)) | (1L << (BACKUP_PRIORITY - 390)) | (1L << (BEGIN_DIALOG - 390)) | (1L << (BIGINT - 390)) | (1L << (BINARY_BASE64 - 390)) | (1L << (BINARY_CHECKSUM - 390)) | (1L << (BINDING - 390)) | (1L << (BLOB_STORAGE - 390)) | (1L << (BROKER - 390)) | (1L << (BROKER_INSTANCE - 390)) | (1L << (BUCKET_COUNT - 390)) | (1L << (BULK_LOGGED - 390)) | (1L << (CALLER - 390)) | (1L << (CAP_CPU_PERCENT - 390)) | (1L << (CAST - 390)) | (1L << (CATALOG - 390)) | (1L << (CATCH - 390)) | (1L << (CHANGE_RETENTION - 390)) | (1L << (CHANGE_TRACKING - 390)) | (1L << (CHECKSUM - 390)) | (1L << (CHECKSUM_AGG - 390)) | (1L << (CLEANUP - 390)) | (1L << (COLLECTION - 390)) | (1L << (COLUMN_MASTER_KEY - 390)) | (1L << (COMMITTED - 390)) | (1L << (COMPATIBILITY_LEVEL - 390)) | (1L << (CONCAT - 390)) | (1L << (CONCAT_NULL_YIELDS_NULL - 390)) | (1L << (CONTENT - 390)) | (1L << (CONTROL - 390)) | (1L << (COOKIE - 390)) | (1L << (COUNT - 390)) | (1L << (COUNT_BIG - 390)) | (1L << (COUNTER - 390)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (CPU - 454)) | (1L << (CREATE_NEW - 454)) | (1L << (CREATION_DISPOSITION - 454)) | (1L << (CREDENTIAL - 454)) | (1L << (CRYPTOGRAPHIC - 454)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 454)) | (1L << (CURSOR_DEFAULT - 454)) | (1L << (DATA - 454)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 454)) | (1L << (DATEADD - 454)) | (1L << (DATEDIFF - 454)) | (1L << (DATEFIRST - 454)) | (1L << (DATEFORMAT - 454)) | (1L << (DATENAME - 454)) | (1L << (DATEPART - 454)) | (1L << (DAYS - 454)) | (1L << (DB_CHAINING - 454)) | (1L << (DB_FAILOVER - 454)) | (1L << (DECRYPTION - 454)) | (1L << (DEFAULT_DOUBLE_QUOTE - 454)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 454)) | (1L << (DEFAULT_LANGUAGE - 454)) | (1L << (DELAY - 454)) | (1L << (DELAYED_DURABILITY - 454)) | (1L << (DELETED - 454)) | (1L << (DENSE_RANK - 454)) | (1L << (DEPENDENTS - 454)) | (1L << (DES - 454)) | (1L << (DESCRIPTION - 454)) | (1L << (DESX - 454)) | (1L << (DHCP - 454)) | (1L << (DIALOG - 454)) | (1L << (DIRECTORY_NAME - 454)) | (1L << (DISABLE - 454)) | (1L << (DISABLE_BROKER - 454)) | (1L << (DISABLED - 454)) | (1L << (DISK_DRIVE - 454)) | (1L << (DOCUMENT - 454)) | (1L << (DYNAMIC - 454)) | (1L << (ELEMENTS - 454)) | (1L << (EMERGENCY - 454)) | (1L << (EMPTY - 454)) | (1L << (ENABLE - 454)) | (1L << (ENABLE_BROKER - 454)) | (1L << (ENCRYPTED_VALUE - 454)) | (1L << (ENCRYPTION - 454)) | (1L << (ENDPOINT_URL - 454)) | (1L << (ERROR_BROKER_CONVERSATIONS - 454)) | (1L << (EXCLUSIVE - 454)) | (1L << (EXECUTABLE - 454)) | (1L << (EXIST - 454)) | (1L << (EXPAND - 454)) | (1L << (EXPIRY_DATE - 454)) | (1L << (EXPLICIT - 454)) | (1L << (FAIL_OPERATION - 454)) | (1L << (FAILOVER_MODE - 454)) | (1L << (FAILURE - 454)) | (1L << (FAILURE_CONDITION_LEVEL - 454)) | (1L << (FAST - 454)) | (1L << (FAST_FORWARD - 454)) | (1L << (FILEGROUP - 454)) | (1L << (FILEGROWTH - 454)) | (1L << (FILEPATH - 454)) | (1L << (FILESTREAM - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (FILTER - 518)) | (1L << (FIRST - 518)) | (1L << (FIRST_VALUE - 518)) | (1L << (FOLLOWING - 518)) | (1L << (FORCE - 518)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 518)) | (1L << (FORCED - 518)) | (1L << (FORMAT - 518)) | (1L << (FORWARD_ONLY - 518)) | (1L << (FULLSCAN - 518)) | (1L << (FULLTEXT - 518)) | (1L << (GB - 518)) | (1L << (GETDATE - 518)) | (1L << (GETUTCDATE - 518)) | (1L << (GLOBAL - 518)) | (1L << (GO - 518)) | (1L << (GROUP_MAX_REQUESTS - 518)) | (1L << (GROUPING - 518)) | (1L << (GROUPING_ID - 518)) | (1L << (HADOOP - 518)) | (1L << (HADR - 518)) | (1L << (HASH - 518)) | (1L << (HEALTH_CHECK_TIMEOUT - 518)) | (1L << (HIGH - 518)) | (1L << (HONOR_BROKER_PRIORITY - 518)) | (1L << (HOURS - 518)) | (1L << (IDENTITY_VALUE - 518)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 518)) | (1L << (IMMEDIATE - 518)) | (1L << (IMPERSONATE - 518)) | (1L << (IMPORTANCE - 518)) | (1L << (INCLUDE_NULL_VALUES - 518)) | (1L << (INCREMENTAL - 518)) | (1L << (INITIATOR - 518)) | (1L << (INPUT - 518)) | (1L << (INSENSITIVE - 518)) | (1L << (INSERTED - 518)) | (1L << (INT - 518)) | (1L << (IP - 518)) | (1L << (ISOLATION - 518)) | (1L << (JOB - 518)) | (1L << (JSON - 518)) | (1L << (KB - 518)) | (1L << (KEEP - 518)) | (1L << (KEEPFIXED - 518)) | (1L << (KEY_SOURCE - 518)) | (1L << (KEYS - 518)) | (1L << (KEYSET - 518)) | (1L << (LAG - 518)) | (1L << (LAST - 518)) | (1L << (LAST_VALUE - 518)) | (1L << (LEAD - 518)) | (1L << (LEVEL - 518)) | (1L << (LIST - 518)) | (1L << (LISTENER - 518)) | (1L << (LISTENER_URL - 518)) | (1L << (LOB_COMPACTION - 518)) | (1L << (LOCAL - 518)) | (1L << (LOCATION - 518)) | (1L << (LOCK - 518)) | (1L << (LOCK_ESCALATION - 518)) | (1L << (LOGIN - 518)) | (1L << (LOOP - 518)) | (1L << (LOW - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (MANUAL - 582)) | (1L << (MARK - 582)) | (1L << (MATERIALIZED - 582)) | (1L << (MAX - 582)) | (1L << (MAX_CPU_PERCENT - 582)) | (1L << (MAX_DOP - 582)) | (1L << (MAX_FILES - 582)) | (1L << (MAX_IOPS_PER_VOLUME - 582)) | (1L << (MAX_MEMORY_PERCENT - 582)) | (1L << (MAX_PROCESSES - 582)) | (1L << (MAX_QUEUE_READERS - 582)) | (1L << (MAX_ROLLOVER_FILES - 582)) | (1L << (MAXDOP - 582)) | (1L << (MAXRECURSION - 582)) | (1L << (MAXSIZE - 582)) | (1L << (MB - 582)) | (1L << (MEDIUM - 582)) | (1L << (MEMORY_OPTIMIZED_DATA - 582)) | (1L << (MESSAGE - 582)) | (1L << (MIN - 582)) | (1L << (MIN_ACTIVE_ROWVERSION - 582)) | (1L << (MIN_CPU_PERCENT - 582)) | (1L << (MIN_IOPS_PER_VOLUME - 582)) | (1L << (MIN_MEMORY_PERCENT - 582)) | (1L << (MINUTES - 582)) | (1L << (MIRROR_ADDRESS - 582)) | (1L << (MIXED_PAGE_ALLOCATION - 582)) | (1L << (MODE - 582)) | (1L << (MODIFY - 582)) | (1L << (MOVE - 582)) | (1L << (MULTI_USER - 582)) | (1L << (NAME - 582)) | (1L << (NESTED_TRIGGERS - 582)) | (1L << (NEW_ACCOUNT - 582)) | (1L << (NEW_BROKER - 582)) | (1L << (NEW_PASSWORD - 582)) | (1L << (NEXT - 582)) | (1L << (NO - 582)) | (1L << (NO_TRUNCATE - 582)) | (1L << (NO_WAIT - 582)) | (1L << (NOCOUNT - 582)) | (1L << (NODES - 582)) | (1L << (NOEXPAND - 582)) | (1L << (NON_TRANSACTED_ACCESS - 582)) | (1L << (NORECOMPUTE - 582)) | (1L << (NORECOVERY - 582)) | (1L << (NOWAIT - 582)) | (1L << (NTILE - 582)) | (1L << (NUMANODE - 582)) | (1L << (NUMBER - 582)) | (1L << (NUMERIC_ROUNDABORT - 582)) | (1L << (OBJECT - 582)) | (1L << (OFFLINE - 582)) | (1L << (OFFSET - 582)) | (1L << (OLD_ACCOUNT - 582)) | (1L << (ONLINE - 582)) | (1L << (ONLY - 582)) | (1L << (OPEN_EXISTING - 582)) | (1L << (OPTIMISTIC - 582)) | (1L << (OPTIMIZE - 582)) | (1L << (OUT - 582)) | (1L << (OUTPUT - 582)) | (1L << (OVERRIDE - 582)) | (1L << (OWNER - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (PAGE_VERIFY - 646)) | (1L << (PARAMETERIZATION - 646)) | (1L << (PARTITION - 646)) | (1L << (PARTITIONS - 646)) | (1L << (PARTNER - 646)) | (1L << (PATH - 646)) | (1L << (POISON_MESSAGE_HANDLING - 646)) | (1L << (POOL - 646)) | (1L << (PORT - 646)) | (1L << (PRECEDING - 646)) | (1L << (PRIMARY_ROLE - 646)) | (1L << (PRIOR - 646)) | (1L << (PRIORITY - 646)) | (1L << (PRIORITY_LEVEL - 646)) | (1L << (PRIVATE - 646)) | (1L << (PRIVATE_KEY - 646)) | (1L << (PRIVILEGES - 646)) | (1L << (PROCEDURE_NAME - 646)) | (1L << (PROPERTY - 646)) | (1L << (PROVIDER - 646)) | (1L << (PROVIDER_KEY_NAME - 646)) | (1L << (QUERY - 646)) | (1L << (QUEUE - 646)) | (1L << (QUEUE_DELAY - 646)) | (1L << (QUOTED_IDENTIFIER - 646)) | (1L << (RANGE - 646)) | (1L << (RANK - 646)) | (1L << (RC2 - 646)) | (1L << (RC4 - 646)) | (1L << (RC4_128 - 646)) | (1L << (READ_COMMITTED_SNAPSHOT - 646)) | (1L << (READ_ONLY - 646)) | (1L << (READ_ONLY_ROUTING_LIST - 646)) | (1L << (READ_WRITE - 646)) | (1L << (READONLY - 646)) | (1L << (REBUILD - 646)) | (1L << (RECEIVE - 646)) | (1L << (RECOMPILE - 646)) | (1L << (RECOVERY - 646)) | (1L << (RECURSIVE_TRIGGERS - 646)) | (1L << (RELATIVE - 646)) | (1L << (REMOTE - 646)) | (1L << (REMOTE_SERVICE_NAME - 646)) | (1L << (REMOVE - 646)) | (1L << (REORGANIZE - 646)) | (1L << (REPEATABLE - 646)) | (1L << (REPLICA - 646)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 646)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 646)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 646)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 646)) | (1L << (RESERVE_DISK_SPACE - 646)) | (1L << (RESOURCE - 646)) | (1L << (RESOURCE_MANAGER_LOCATION - 646)) | (1L << (RESTRICTED_USER - 646)) | (1L << (RETENTION - 646)) | (1L << (ROBUST - 646)) | (1L << (ROOT - 646)) | (1L << (ROUTE - 646)) | (1L << (ROW - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (ROWGUID - 646)) | (1L << (ROWS - 646)) | (1L << (SAMPLE - 646)))) != 0) || ((((_la - 710)) & ~0x3f) == 0 && ((1L << (_la - 710)) & ((1L << (SCHEMABINDING - 710)) | (1L << (SCOPED - 710)) | (1L << (SCROLL - 710)) | (1L << (SCROLL_LOCKS - 710)) | (1L << (SEARCH - 710)) | (1L << (SECONDARY - 710)) | (1L << (SECONDARY_ONLY - 710)) | (1L << (SECONDARY_ROLE - 710)) | (1L << (SECONDS - 710)) | (1L << (SECRET - 710)) | (1L << (SECURITY - 710)) | (1L << (SECURITY_LOG - 710)) | (1L << (SEEDING_MODE - 710)) | (1L << (SELF - 710)) | (1L << (SEMI_SENSITIVE - 710)) | (1L << (SEND - 710)) | (1L << (SENT - 710)) | (1L << (SEQUENCE - 710)) | (1L << (SERIALIZABLE - 710)) | (1L << (SESSION_TIMEOUT - 710)) | (1L << (SETERROR - 710)) | (1L << (SHARE - 710)) | (1L << (SHOWPLAN - 710)) | (1L << (SIGNATURE - 710)) | (1L << (SIMPLE - 710)) | (1L << (SINGLE_USER - 710)) | (1L << (SIZE - 710)) | (1L << (SMALLINT - 710)) | (1L << (SNAPSHOT - 710)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 710)) | (1L << (STANDBY - 710)) | (1L << (START_DATE - 710)) | (1L << (STATIC - 710)) | (1L << (STATS_STREAM - 710)) | (1L << (STATUS - 710)) | (1L << (STATUSONLY - 710)) | (1L << (STDEV - 710)) | (1L << (STDEVP - 710)) | (1L << (STOPLIST - 710)) | (1L << (STRING_AGG - 710)) | (1L << (STUFF - 710)) | (1L << (SUBJECT - 710)) | (1L << (SUBSCRIPTION - 710)) | (1L << (SUM - 710)) | (1L << (SUSPEND - 710)) | (1L << (SYMMETRIC - 710)) | (1L << (SYNCHRONOUS_COMMIT - 710)) | (1L << (SYNONYM - 710)) | (1L << (SYSTEM - 710)) | (1L << (TAKE - 710)) | (1L << (TARGET_RECOVERY_TIME - 710)) | (1L << (TB - 710)) | (1L << (TEXTIMAGE_ON - 710)) | (1L << (THROW - 710)) | (1L << (TIES - 710)) | (1L << (TIME - 710)) | (1L << (TIMEOUT - 710)) | (1L << (TIMER - 710)) | (1L << (TINYINT - 710)) | (1L << (TORN_PAGE_DETECTION - 710)) | (1L << (TRANSFORM_NOISE_WORDS - 710)) | (1L << (TRIPLE_DES - 710)) | (1L << (TRIPLE_DES_3KEY - 710)) | (1L << (TRUSTWORTHY - 710)))) != 0) || ((((_la - 774)) & ~0x3f) == 0 && ((1L << (_la - 774)) & ((1L << (TRY - 774)) | (1L << (TSQL - 774)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 774)) | (1L << (TYPE - 774)) | (1L << (TYPE_WARNING - 774)) | (1L << (UNBOUNDED - 774)) | (1L << (UNCOMMITTED - 774)) | (1L << (UNDEFINED - 774)) | (1L << (UNKNOWN - 774)) | (1L << (UNLIMITED - 774)) | (1L << (UOW - 774)) | (1L << (USING - 774)) | (1L << (VALID_XML - 774)) | (1L << (VALIDATION - 774)) | (1L << (VALUE - 774)) | (1L << (VAR - 774)) | (1L << (VARP - 774)) | (1L << (VIEW_METADATA - 774)) | (1L << (VIEWS - 774)) | (1L << (WAIT - 774)) | (1L << (WELL_FORMED_XML - 774)) | (1L << (WITHOUT_ARRAY_WRAPPER - 774)) | (1L << (WORK - 774)) | (1L << (WORKLOAD - 774)) | (1L << (XML - 774)) | (1L << (XMLDATA - 774)) | (1L << (XMLNAMESPACES - 774)) | (1L << (XMLSCHEMA - 774)) | (1L << (XSINIL - 774)) | (1L << (DOLLAR_ACTION - 774)) | (1L << (SPACE - 774)) | (1L << (COMMENT - 774)) | (1L << (LINE_COMMENT - 774)) | (1L << (DOUBLE_QUOTE_ID - 774)) | (1L << (SINGLE_QUOTE - 774)) | (1L << (SQUARE_BRACKET_ID - 774)) | (1L << (LOCAL_ID - 774)) | (1L << (DECIMAL - 774)) | (1L << (ID - 774)) | (1L << (QUOTED_URL - 774)) | (1L << (QUOTED_HOST_AND_PORT - 774)) | (1L << (STRING - 774)) | (1L << (BINARY - 774)) | (1L << (FLOAT - 774)) | (1L << (REAL - 774)) | (1L << (EQUAL - 774)) | (1L << (GREATER - 774)) | (1L << (LESS - 774)) | (1L << (EXCLAMATION - 774)) | (1L << (PLUS_ASSIGN - 774)) | (1L << (MINUS_ASSIGN - 774)) | (1L << (MULT_ASSIGN - 774)) | (1L << (DIV_ASSIGN - 774)) | (1L << (MOD_ASSIGN - 774)) | (1L << (AND_ASSIGN - 774)) | (1L << (XOR_ASSIGN - 774)) | (1L << (OR_ASSIGN - 774)) | (1L << (DOUBLE_BAR - 774)) | (1L << (DOT - 774)) | (1L << (UNDERLINE - 774)) | (1L << (AT - 774)) | (1L << (SHARP - 774)) | (1L << (DOLLAR - 774)) | (1L << (LR_BRACKET - 774)))) != 0) || ((((_la - 838)) & ~0x3f) == 0 && ((1L << (_la - 838)) & ((1L << (RR_BRACKET - 838)) | (1L << (COMMA - 838)) | (1L << (SEMI - 838)) | (1L << (COLON - 838)) | (1L << (STAR - 838)) | (1L << (DIVIDE - 838)) | (1L << (MODULE - 838)) | (1L << (PLUS - 838)) | (1L << (MINUS - 838)) | (1L << (BIT_NOT - 838)) | (1L << (BIT_OR - 838)) | (1L << (BIT_AND - 838)) | (1L << (BIT_XOR - 838)) | (1L << (MDY - 838)) | (1L << (DMY - 838)) | (1L << (YMD - 838)) | (1L << (YDM - 838)) | (1L << (MYD - 838)) | (1L << (DYM - 838)) | (1L << (IPV4_OCTECT - 838)))) != 0) );
			State = 2508; Match(ON);
			State = 2513;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case SERVER:
				{
				State = 2509; Match(SERVER);
				}
				break;
			case DATABASE:
				{
				State = 2510; Match(DATABASE);
				}
				break;
			case QUEUE:
				{
				State = 2511; Match(QUEUE);
				State = 2512; _localctx.queue_name = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_event_sessionContext : ParserRuleContext {
		public IdContext event_session_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode EVENT() { return GetToken(TSqlParser.EVENT, 0); }
		public ITerminalNode SESSION() { return GetToken(TSqlParser.SESSION, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_event_sessionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_event_session; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_event_session(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_event_session(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_event_session(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_event_sessionContext drop_event_session() {
		Drop_event_sessionContext _localctx = new Drop_event_sessionContext(_ctx, State);
		EnterRule(_localctx, 206, RULE_drop_event_session);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2515; Match(DROP);
			State = 2516; Match(EVENT);
			State = 2517; Match(SESSION);
			State = 2518; _localctx.event_session_name = id();
			State = 2519; Match(ON);
			State = 2520; Match(SERVER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_fulltext_catalogContext : ParserRuleContext {
		public IdContext catalog_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode CATALOG() { return GetToken(TSqlParser.CATALOG, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_fulltext_catalogContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_fulltext_catalog; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_fulltext_catalog(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_fulltext_catalog(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_fulltext_catalog(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_fulltext_catalogContext drop_fulltext_catalog() {
		Drop_fulltext_catalogContext _localctx = new Drop_fulltext_catalogContext(_ctx, State);
		EnterRule(_localctx, 208, RULE_drop_fulltext_catalog);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2522; Match(DROP);
			State = 2523; Match(FULLTEXT);
			State = 2524; Match(CATALOG);
			State = 2525; _localctx.catalog_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_fulltext_indexContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Drop_fulltext_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_fulltext_index; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_fulltext_index(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_fulltext_index(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_fulltext_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_fulltext_indexContext drop_fulltext_index() {
		Drop_fulltext_indexContext _localctx = new Drop_fulltext_indexContext(_ctx, State);
		EnterRule(_localctx, 210, RULE_drop_fulltext_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2527; Match(DROP);
			State = 2528; Match(FULLTEXT);
			State = 2529; Match(INDEX);
			State = 2530; Match(ON);
			State = 2534;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,174,_ctx) ) {
			case 1:
				{
				State = 2531; schema_name();
				State = 2532; Match(DOT);
				}
				break;
			}
			State = 2536; table_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_fulltext_stoplistContext : ParserRuleContext {
		public IdContext stoplist_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode STOPLIST() { return GetToken(TSqlParser.STOPLIST, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_fulltext_stoplistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_fulltext_stoplist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_fulltext_stoplist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_fulltext_stoplist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_fulltext_stoplist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_fulltext_stoplistContext drop_fulltext_stoplist() {
		Drop_fulltext_stoplistContext _localctx = new Drop_fulltext_stoplistContext(_ctx, State);
		EnterRule(_localctx, 212, RULE_drop_fulltext_stoplist);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2538; Match(DROP);
			State = 2539; Match(FULLTEXT);
			State = 2540; Match(STOPLIST);
			State = 2541; _localctx.stoplist_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_loginContext : ParserRuleContext {
		public IdContext login_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_loginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_login; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_login(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_login(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_login(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_loginContext drop_login() {
		Drop_loginContext _localctx = new Drop_loginContext(_ctx, State);
		EnterRule(_localctx, 214, RULE_drop_login);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2543; Match(DROP);
			State = 2544; Match(LOGIN);
			State = 2545; _localctx.login_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_master_keyContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public Drop_master_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_master_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_master_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_master_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_master_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_master_keyContext drop_master_key() {
		Drop_master_keyContext _localctx = new Drop_master_keyContext(_ctx, State);
		EnterRule(_localctx, 216, RULE_drop_master_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2547; Match(DROP);
			State = 2548; Match(MASTER);
			State = 2549; Match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_message_typeContext : ParserRuleContext {
		public IdContext message_type_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode MESSAGE() { return GetToken(TSqlParser.MESSAGE, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_message_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_message_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_message_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_message_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_message_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_message_typeContext drop_message_type() {
		Drop_message_typeContext _localctx = new Drop_message_typeContext(_ctx, State);
		EnterRule(_localctx, 218, RULE_drop_message_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2551; Match(DROP);
			State = 2552; Match(MESSAGE);
			State = 2553; Match(TYPE);
			State = 2554; _localctx.message_type_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_partition_functionContext : ParserRuleContext {
		public IdContext partition_function_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		public ITerminalNode FUNCTION() { return GetToken(TSqlParser.FUNCTION, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_partition_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_partition_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_partition_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_partition_function(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_partition_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_partition_functionContext drop_partition_function() {
		Drop_partition_functionContext _localctx = new Drop_partition_functionContext(_ctx, State);
		EnterRule(_localctx, 220, RULE_drop_partition_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2556; Match(DROP);
			State = 2557; Match(PARTITION);
			State = 2558; Match(FUNCTION);
			State = 2559; _localctx.partition_function_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_partition_schemeContext : ParserRuleContext {
		public IdContext partition_scheme_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		public ITerminalNode SCHEME() { return GetToken(TSqlParser.SCHEME, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_partition_schemeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_partition_scheme; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_partition_scheme(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_partition_scheme(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_partition_scheme(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_partition_schemeContext drop_partition_scheme() {
		Drop_partition_schemeContext _localctx = new Drop_partition_schemeContext(_ctx, State);
		EnterRule(_localctx, 222, RULE_drop_partition_scheme);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2561; Match(DROP);
			State = 2562; Match(PARTITION);
			State = 2563; Match(SCHEME);
			State = 2564; _localctx.partition_scheme_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_queueContext : ParserRuleContext {
		public IdContext queue_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public Drop_queueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_queue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_queue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_queue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_queue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_queueContext drop_queue() {
		Drop_queueContext _localctx = new Drop_queueContext(_ctx, State);
		EnterRule(_localctx, 224, RULE_drop_queue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2566; Match(DROP);
			State = 2567; Match(QUEUE);
			State = 2571;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,175,_ctx) ) {
			case 1:
				{
				State = 2568; database_name();
				State = 2569; Match(DOT);
				}
				break;
			}
			State = 2576;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,176,_ctx) ) {
			case 1:
				{
				State = 2573; schema_name();
				State = 2574; Match(DOT);
				}
				break;
			}
			State = 2578; _localctx.queue_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_remote_service_bindingContext : ParserRuleContext {
		public IdContext binding_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode REMOTE() { return GetToken(TSqlParser.REMOTE, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode BINDING() { return GetToken(TSqlParser.BINDING, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_remote_service_bindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_remote_service_binding; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_remote_service_binding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_remote_service_binding(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_remote_service_binding(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_remote_service_bindingContext drop_remote_service_binding() {
		Drop_remote_service_bindingContext _localctx = new Drop_remote_service_bindingContext(_ctx, State);
		EnterRule(_localctx, 226, RULE_drop_remote_service_binding);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2580; Match(DROP);
			State = 2581; Match(REMOTE);
			State = 2582; Match(SERVICE);
			State = 2583; Match(BINDING);
			State = 2584; _localctx.binding_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_resource_poolContext : ParserRuleContext {
		public IdContext pool_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode RESOURCE() { return GetToken(TSqlParser.RESOURCE, 0); }
		public ITerminalNode POOL() { return GetToken(TSqlParser.POOL, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_resource_poolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_resource_pool; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_resource_pool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_resource_pool(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_resource_pool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_resource_poolContext drop_resource_pool() {
		Drop_resource_poolContext _localctx = new Drop_resource_poolContext(_ctx, State);
		EnterRule(_localctx, 228, RULE_drop_resource_pool);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2586; Match(DROP);
			State = 2587; Match(RESOURCE);
			State = 2588; Match(POOL);
			State = 2589; _localctx.pool_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_db_roleContext : ParserRuleContext {
		public IdContext role_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_db_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_db_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_db_role(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_db_role(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_db_role(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_db_roleContext drop_db_role() {
		Drop_db_roleContext _localctx = new Drop_db_roleContext(_ctx, State);
		EnterRule(_localctx, 230, RULE_drop_db_role);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2591; Match(DROP);
			State = 2592; Match(ROLE);
			State = 2595;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IF) {
				{
				State = 2593; Match(IF);
				State = 2594; Match(EXISTS);
				}
			}

			State = 2597; _localctx.role_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_routeContext : ParserRuleContext {
		public IdContext route_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode ROUTE() { return GetToken(TSqlParser.ROUTE, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_routeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_route; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_route(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_route(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_route(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_routeContext drop_route() {
		Drop_routeContext _localctx = new Drop_routeContext(_ctx, State);
		EnterRule(_localctx, 232, RULE_drop_route);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2599; Match(DROP);
			State = 2600; Match(ROUTE);
			State = 2601; _localctx.route_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_ruleContext : ParserRuleContext {
		public IdContext rule_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode RULE() { return GetToken(TSqlParser.RULE, 0); }
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Drop_ruleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_rule; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_rule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_rule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_rule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_ruleContext drop_rule() {
		Drop_ruleContext _localctx = new Drop_ruleContext(_ctx, State);
		EnterRule(_localctx, 234, RULE_drop_rule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2603; Match(DROP);
			State = 2604; Match(RULE);
			State = 2607;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,178,_ctx) ) {
			case 1:
				{
				State = 2605; Match(IF);
				State = 2606; Match(EXISTS);
				}
				break;
			}
			State = 2618;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,181,_ctx) ) {
			case 1:
				{
				State = 2610;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,179,_ctx) ) {
				case 1:
					{
					State = 2609; Match(COMMA);
					}
					break;
				}
				State = 2615;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,180,_ctx) ) {
				case 1:
					{
					State = 2612; schema_name();
					State = 2613; Match(DOT);
					}
					break;
				}
				State = 2617; _localctx.rule_name = id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_schemaContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_schema; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_schema(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_schema(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_schema(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_schemaContext drop_schema() {
		Drop_schemaContext _localctx = new Drop_schemaContext(_ctx, State);
		EnterRule(_localctx, 236, RULE_drop_schema);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2620; Match(DROP);
			State = 2621; Match(SCHEMA);
			State = 2624;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IF) {
				{
				State = 2622; Match(IF);
				State = 2623; Match(EXISTS);
				}
			}

			State = 2626; schema_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_search_property_listContext : ParserRuleContext {
		public IdContext property_list_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SEARCH() { return GetToken(TSqlParser.SEARCH, 0); }
		public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		public ITerminalNode LIST() { return GetToken(TSqlParser.LIST, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_search_property_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_search_property_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_search_property_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_search_property_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_search_property_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_search_property_listContext drop_search_property_list() {
		Drop_search_property_listContext _localctx = new Drop_search_property_listContext(_ctx, State);
		EnterRule(_localctx, 238, RULE_drop_search_property_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2628; Match(DROP);
			State = 2629; Match(SEARCH);
			State = 2630; Match(PROPERTY);
			State = 2631; Match(LIST);
			State = 2632; _localctx.property_list_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_security_policyContext : ParserRuleContext {
		public IdContext security_policy_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SECURITY() { return GetToken(TSqlParser.SECURITY, 0); }
		public ITerminalNode POLICY() { return GetToken(TSqlParser.POLICY, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Drop_security_policyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_security_policy; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_security_policy(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_security_policy(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_security_policy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_security_policyContext drop_security_policy() {
		Drop_security_policyContext _localctx = new Drop_security_policyContext(_ctx, State);
		EnterRule(_localctx, 240, RULE_drop_security_policy);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2634; Match(DROP);
			State = 2635; Match(SECURITY);
			State = 2636; Match(POLICY);
			State = 2639;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IF) {
				{
				State = 2637; Match(IF);
				State = 2638; Match(EXISTS);
				}
			}

			State = 2644;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,184,_ctx) ) {
			case 1:
				{
				State = 2641; schema_name();
				State = 2642; Match(DOT);
				}
				break;
			}
			State = 2646; _localctx.security_policy_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_sequenceContext : ParserRuleContext {
		public IdContext sequence_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SEQUENCE() { return GetToken(TSqlParser.SEQUENCE, 0); }
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public Drop_sequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_sequence; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_sequence(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_sequence(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_sequence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_sequenceContext drop_sequence() {
		Drop_sequenceContext _localctx = new Drop_sequenceContext(_ctx, State);
		EnterRule(_localctx, 242, RULE_drop_sequence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2648; Match(DROP);
			State = 2649; Match(SEQUENCE);
			State = 2652;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,185,_ctx) ) {
			case 1:
				{
				State = 2650; Match(IF);
				State = 2651; Match(EXISTS);
				}
				break;
			}
			State = 2668;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,189,_ctx) ) {
			case 1:
				{
				State = 2655;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,186,_ctx) ) {
				case 1:
					{
					State = 2654; Match(COMMA);
					}
					break;
				}
				State = 2660;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,187,_ctx) ) {
				case 1:
					{
					State = 2657; database_name();
					State = 2658; Match(DOT);
					}
					break;
				}
				State = 2665;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,188,_ctx) ) {
				case 1:
					{
					State = 2662; schema_name();
					State = 2663; Match(DOT);
					}
					break;
				}
				State = 2667; _localctx.sequence_name = id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_server_auditContext : ParserRuleContext {
		public IdContext audit_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode AUDIT() { return GetToken(TSqlParser.AUDIT, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_server_auditContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_server_audit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_server_audit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_server_audit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_server_audit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_server_auditContext drop_server_audit() {
		Drop_server_auditContext _localctx = new Drop_server_auditContext(_ctx, State);
		EnterRule(_localctx, 244, RULE_drop_server_audit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2670; Match(DROP);
			State = 2671; Match(SERVER);
			State = 2672; Match(AUDIT);
			State = 2673; _localctx.audit_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_server_audit_specificationContext : ParserRuleContext {
		public IdContext audit_specification_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode AUDIT() { return GetToken(TSqlParser.AUDIT, 0); }
		public ITerminalNode SPECIFICATION() { return GetToken(TSqlParser.SPECIFICATION, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_server_audit_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_server_audit_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_server_audit_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_server_audit_specification(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_server_audit_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_server_audit_specificationContext drop_server_audit_specification() {
		Drop_server_audit_specificationContext _localctx = new Drop_server_audit_specificationContext(_ctx, State);
		EnterRule(_localctx, 246, RULE_drop_server_audit_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2675; Match(DROP);
			State = 2676; Match(SERVER);
			State = 2677; Match(AUDIT);
			State = 2678; Match(SPECIFICATION);
			State = 2679; _localctx.audit_specification_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_server_roleContext : ParserRuleContext {
		public IdContext role_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_server_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_server_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_server_role(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_server_role(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_server_role(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_server_roleContext drop_server_role() {
		Drop_server_roleContext _localctx = new Drop_server_roleContext(_ctx, State);
		EnterRule(_localctx, 248, RULE_drop_server_role);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2681; Match(DROP);
			State = 2682; Match(SERVER);
			State = 2683; Match(ROLE);
			State = 2684; _localctx.role_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_serviceContext : ParserRuleContext {
		public IdContext dropped_service_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_serviceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_service; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_service(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_service(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_service(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_serviceContext drop_service() {
		Drop_serviceContext _localctx = new Drop_serviceContext(_ctx, State);
		EnterRule(_localctx, 250, RULE_drop_service);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2686; Match(DROP);
			State = 2687; Match(SERVICE);
			State = 2688; _localctx.dropped_service_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_signatureContext : ParserRuleContext {
		public IdContext module_name;
		public IdContext cert_name;
		public IdContext Asym_key_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SIGNATURE() { return GetToken(TSqlParser.SIGNATURE, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode COUNTER() { return GetToken(TSqlParser.COUNTER, 0); }
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode[] CERTIFICATE() { return GetTokens(TSqlParser.CERTIFICATE); }
		public ITerminalNode CERTIFICATE(int i) {
			return GetToken(TSqlParser.CERTIFICATE, i);
		}
		public ITerminalNode[] ASYMMETRIC() { return GetTokens(TSqlParser.ASYMMETRIC); }
		public ITerminalNode ASYMMETRIC(int i) {
			return GetToken(TSqlParser.ASYMMETRIC, i);
		}
		public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Drop_signatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_signature; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_signature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_signature(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_signature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_signatureContext drop_signature() {
		Drop_signatureContext _localctx = new Drop_signatureContext(_ctx, State);
		EnterRule(_localctx, 252, RULE_drop_signature);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2690; Match(DROP);
			State = 2692;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COUNTER) {
				{
				State = 2691; Match(COUNTER);
				}
			}

			State = 2694; Match(SIGNATURE);
			State = 2695; Match(FROM);
			State = 2699;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,191,_ctx) ) {
			case 1:
				{
				State = 2696; schema_name();
				State = 2697; Match(DOT);
				}
				break;
			}
			State = 2701; _localctx.module_name = id();
			State = 2702; Match(BY);
			State = 2714;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 2714;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,194,_ctx) ) {
					case 1:
						{
						State = 2704;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==COMMA) {
							{
							State = 2703; Match(COMMA);
							}
						}

						State = 2706; Match(CERTIFICATE);
						State = 2707; _localctx.cert_name = id();
						}
						break;

					case 2:
						{
						State = 2709;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==COMMA) {
							{
							State = 2708; Match(COMMA);
							}
						}

						State = 2711; Match(ASYMMETRIC);
						State = 2712; Match(KEY);
						State = 2713; _localctx.Asym_key_name = id();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2716;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,195,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_statistics_name_azure_dw_and_pdwContext : ParserRuleContext {
		public IdContext object_name;
		public IdContext statistics_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode STATISTICS() { return GetToken(TSqlParser.STATISTICS, 0); }
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public Drop_statistics_name_azure_dw_and_pdwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_statistics_name_azure_dw_and_pdw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_statistics_name_azure_dw_and_pdw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_statistics_name_azure_dw_and_pdw(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_statistics_name_azure_dw_and_pdw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_statistics_name_azure_dw_and_pdwContext drop_statistics_name_azure_dw_and_pdw() {
		Drop_statistics_name_azure_dw_and_pdwContext _localctx = new Drop_statistics_name_azure_dw_and_pdwContext(_ctx, State);
		EnterRule(_localctx, 254, RULE_drop_statistics_name_azure_dw_and_pdw);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2718; Match(DROP);
			State = 2719; Match(STATISTICS);
			State = 2723;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,196,_ctx) ) {
			case 1:
				{
				State = 2720; schema_name();
				State = 2721; Match(DOT);
				}
				break;
			}
			State = 2725; _localctx.object_name = id();
			State = 2726; Match(DOT);
			State = 2727; _localctx.statistics_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_symmetric_keyContext : ParserRuleContext {
		public IdContext symmetric_key_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public Drop_symmetric_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_symmetric_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_symmetric_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_symmetric_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_symmetric_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_symmetric_keyContext drop_symmetric_key() {
		Drop_symmetric_keyContext _localctx = new Drop_symmetric_keyContext(_ctx, State);
		EnterRule(_localctx, 256, RULE_drop_symmetric_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2729; Match(DROP);
			State = 2730; Match(SYMMETRIC);
			State = 2731; Match(KEY);
			State = 2732; _localctx.symmetric_key_name = id();
			State = 2736;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,197,_ctx) ) {
			case 1:
				{
				State = 2733; Match(REMOVE);
				State = 2734; Match(PROVIDER);
				State = 2735; Match(KEY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_synonymContext : ParserRuleContext {
		public IdContext synonym_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SYNONYM() { return GetToken(TSqlParser.SYNONYM, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Drop_synonymContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_synonym; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_synonym(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_synonym(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_synonym(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_synonymContext drop_synonym() {
		Drop_synonymContext _localctx = new Drop_synonymContext(_ctx, State);
		EnterRule(_localctx, 258, RULE_drop_synonym);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2738; Match(DROP);
			State = 2739; Match(SYNONYM);
			State = 2742;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IF) {
				{
				State = 2740; Match(IF);
				State = 2741; Match(EXISTS);
				}
			}

			State = 2747;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,199,_ctx) ) {
			case 1:
				{
				State = 2744; schema_name();
				State = 2745; Match(DOT);
				}
				break;
			}
			State = 2749; _localctx.synonym_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_userContext : ParserRuleContext {
		public IdContext user_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_userContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_user; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_user(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_user(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_user(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_userContext drop_user() {
		Drop_userContext _localctx = new Drop_userContext(_ctx, State);
		EnterRule(_localctx, 260, RULE_drop_user);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2751; Match(DROP);
			State = 2752; Match(USER);
			State = 2755;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IF) {
				{
				State = 2753; Match(IF);
				State = 2754; Match(EXISTS);
				}
			}

			State = 2757; _localctx.user_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_workload_groupContext : ParserRuleContext {
		public IdContext group_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode WORKLOAD() { return GetToken(TSqlParser.WORKLOAD, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_workload_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_workload_group; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_workload_group(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_workload_group(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_workload_group(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_workload_groupContext drop_workload_group() {
		Drop_workload_groupContext _localctx = new Drop_workload_groupContext(_ctx, State);
		EnterRule(_localctx, 262, RULE_drop_workload_group);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2759; Match(DROP);
			State = 2760; Match(WORKLOAD);
			State = 2761; Match(GROUP);
			State = 2762; _localctx.group_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_xml_schema_collectionContext : ParserRuleContext {
		public IdContext relational_schema;
		public IdContext sql_identifier;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Drop_xml_schema_collectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_xml_schema_collection; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_xml_schema_collection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_xml_schema_collection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_xml_schema_collection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_xml_schema_collectionContext drop_xml_schema_collection() {
		Drop_xml_schema_collectionContext _localctx = new Drop_xml_schema_collectionContext(_ctx, State);
		EnterRule(_localctx, 264, RULE_drop_xml_schema_collection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2764; Match(DROP);
			State = 2765; Match(XML);
			State = 2766; Match(SCHEMA);
			State = 2767; Match(COLLECTION);
			State = 2771;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,201,_ctx) ) {
			case 1:
				{
				State = 2768; _localctx.relational_schema = id();
				State = 2769; Match(DOT);
				}
				break;
			}
			State = 2773; _localctx.sql_identifier = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Disable_triggerContext : ParserRuleContext {
		public IdContext trigger_name;
		public IdContext schema_id;
		public IdContext object_name;
		public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode[] ALL() { return GetTokens(TSqlParser.ALL); }
		public ITerminalNode ALL(int i) {
			return GetToken(TSqlParser.ALL, i);
		}
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Schema_nameContext[] schema_name() {
			return GetRuleContexts<Schema_nameContext>();
		}
		public Schema_nameContext schema_name(int i) {
			return GetRuleContext<Schema_nameContext>(i);
		}
		public Disable_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_disable_trigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDisable_trigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDisable_trigger(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisable_trigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Disable_triggerContext disable_trigger() {
		Disable_triggerContext _localctx = new Disable_triggerContext(_ctx, State);
		EnterRule(_localctx, 266, RULE_disable_trigger);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2775; Match(DISABLE);
			State = 2776; Match(TRIGGER);
			State = 2791;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BACKSLASH:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONNECTION_OPTIONS:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DISK:
			case DOUBLE_BACK_SLASH:
			case DOUBLE_FORWARD_SLASH:
			case DTC_SUPPORT:
			case DUMP:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILENAME:
			case FILLFACTOR:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IDENTITYCOL:
			case IIF:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case IPV4_ADDR:
			case IPV6_ADDR:
			case ISNULL:
			case KERBEROS:
			case KEY:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOAD:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NATIVE_COMPILATION:
			case NEGOTIATE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case NULL:
			case OFFSETS:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PLATFORM:
			case POLICY:
			case PRECISION:
			case PREDICATE:
			case PROCESS:
			case PUBLIC:
			case PUSHDOWN:
			case PYTHON:
			case R:
			case RAW:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESULT_SETS:
			case RESUME:
			case RETAINDAYS:
			case RETURN:
			case RETURNS:
			case REWIND:
			case ROLE:
			case ROWCOUNT:
			case ROWGUIDCOL:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SECURITYAUDIT:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SESSION_USER:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case SYSTEM_USER:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case USER:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHIN:
			case WITHOUT:
			case WITNESS:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BUCKET_COUNT:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATEFIRST:
			case DATEFORMAT:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADOOP:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNDEFINED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case DOLLAR_ACTION:
			case SPACE:
			case COMMENT:
			case LINE_COMMENT:
			case DOUBLE_QUOTE_ID:
			case SINGLE_QUOTE:
			case SQUARE_BRACKET_ID:
			case LOCAL_ID:
			case DECIMAL:
			case ID:
			case QUOTED_URL:
			case QUOTED_HOST_AND_PORT:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case EQUAL:
			case GREATER:
			case LESS:
			case EXCLAMATION:
			case PLUS_ASSIGN:
			case MINUS_ASSIGN:
			case MULT_ASSIGN:
			case DIV_ASSIGN:
			case MOD_ASSIGN:
			case AND_ASSIGN:
			case XOR_ASSIGN:
			case OR_ASSIGN:
			case DOUBLE_BAR:
			case DOT:
			case UNDERLINE:
			case AT:
			case SHARP:
			case DOLLAR:
			case LR_BRACKET:
			case RR_BRACKET:
			case COMMA:
			case SEMI:
			case COLON:
			case STAR:
			case DIVIDE:
			case MODULE:
			case PLUS:
			case MINUS:
			case BIT_NOT:
			case BIT_OR:
			case BIT_AND:
			case BIT_XOR:
			case MDY:
			case DMY:
			case YMD:
			case YDM:
			case MYD:
			case DYM:
			case IPV4_OCTECT:
				{
				State = 2786;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 2778;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,202,_ctx) ) {
					case 1:
						{
						State = 2777; Match(COMMA);
						}
						break;
					}
					State = 2783;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,203,_ctx) ) {
					case 1:
						{
						State = 2780; schema_name();
						State = 2781; Match(DOT);
						}
						break;
					}
					State = 2785; _localctx.trigger_name = id();
					}
					}
					State = 2788;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSENT) | (1L << AES) | (1L << ALLOW_CONNECTIONS) | (1L << ALLOW_MULTIPLE_EVENT_LOSS) | (1L << ALLOW_SINGLE_EVENT_LOSS) | (1L << ANONYMOUS) | (1L << APPEND) | (1L << APPLICATION) | (1L << ASYMMETRIC) | (1L << ASYNCHRONOUS_COMMIT) | (1L << AUTHENTICATION) | (1L << AUTOMATED_BACKUP_PREFERENCE) | (1L << AUTOMATIC) | (1L << AVAILABILITY_MODE) | (1L << BACKSLASH) | (1L << BEFORE) | (1L << BLOCK) | (1L << BLOCKSIZE) | (1L << BLOCKING_HIERARCHY) | (1L << BUFFER) | (1L << BUFFERCOUNT) | (1L << CACHE) | (1L << CALLED) | (1L << CERTIFICATE) | (1L << CHANGETABLE) | (1L << CHANGES) | (1L << CHECK_POLICY) | (1L << CHECK_EXPIRATION) | (1L << CLASSIFIER_FUNCTION) | (1L << CLUSTER) | (1L << COMPRESSION) | (1L << CONNECTION_OPTIONS) | (1L << CONFIGURATION) | (1L << CONTAINMENT))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CONTEXT - 65)) | (1L << (CONTINUE_AFTER_ERROR - 65)) | (1L << (CONTRACT - 65)) | (1L << (CONTRACT_NAME - 65)) | (1L << (CONVERSATION - 65)) | (1L << (COPY_ONLY - 65)) | (1L << (CURRENT_TIMESTAMP - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA_COMPRESSION - 65)) | (1L << (DATA_SOURCE - 65)) | (1L << (DATABASE_MIRRORING - 65)) | (1L << (DEFAULT_DATABASE - 65)) | (1L << (DEFAULT_SCHEMA - 65)) | (1L << (DIAGNOSTICS - 65)) | (1L << (DIFFERENTIAL - 65)) | (1L << (DISK - 65)) | (1L << (DOUBLE_BACK_SLASH - 65)) | (1L << (DOUBLE_FORWARD_SLASH - 65)) | (1L << (DTC_SUPPORT - 65)) | (1L << (DUMP - 65)) | (1L << (ENABLED - 65)) | (1L << (ENDPOINT - 65)) | (1L << (ERROR - 65)) | (1L << (EVENT - 65)) | (1L << (EVENTDATA - 65)) | (1L << (EVENT_RETENTION_MODE - 65)) | (1L << (EXECUTABLE_FILE - 65)) | (1L << (EXPIREDATE - 65)) | (1L << (EXTENSION - 65)) | (1L << (EXTERNAL_ACCESS - 65)) | (1L << (FAILOVER - 65)) | (1L << (FAILURECONDITIONLEVEL - 65)) | (1L << (FAN_IN - 65)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (FILENAME - 130)) | (1L << (FILLFACTOR - 130)) | (1L << (FILE_SNAPSHOT - 130)) | (1L << (FORCESEEK - 130)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 130)) | (1L << (GET - 130)) | (1L << (GOVERNOR - 130)) | (1L << (HASHED - 130)) | (1L << (HEALTHCHECKTIMEOUT - 130)) | (1L << (IDENTITYCOL - 130)) | (1L << (IIF - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCREMENT - 130)) | (1L << (INFINITE - 130)) | (1L << (INIT - 130)) | (1L << (INSTEAD - 130)) | (1L << (IPV4_ADDR - 130)) | (1L << (IPV6_ADDR - 130)) | (1L << (ISNULL - 130)) | (1L << (KERBEROS - 130)) | (1L << (KEY - 130)) | (1L << (KEY_PATH - 130)) | (1L << (KEY_STORE_PROVIDER_NAME - 130)) | (1L << (LANGUAGE - 130)) | (1L << (LIBRARY - 130)) | (1L << (LIFETIME - 130)) | (1L << (LINUX - 130)) | (1L << (LISTENER_IP - 130)) | (1L << (LISTENER_PORT - 130)) | (1L << (LOAD - 130)) | (1L << (LOCAL_SERVICE_NAME - 130)) | (1L << (LOG - 130)) | (1L << (MATCHED - 130)) | (1L << (MASTER - 130)) | (1L << (MAX_MEMORY - 130)) | (1L << (MAXTRANSFER - 130)) | (1L << (MAXVALUE - 130)) | (1L << (MAX_DISPATCH_LATENCY - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (MAX_EVENT_SIZE - 194)) | (1L << (MAX_SIZE - 194)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 194)) | (1L << (MEDIADESCRIPTION - 194)) | (1L << (MEDIANAME - 194)) | (1L << (MEMBER - 194)) | (1L << (MEMORY_PARTITION_MODE - 194)) | (1L << (MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT - 194)) | (1L << (MESSAGE_FORWARDING - 194)) | (1L << (MESSAGE_FORWARD_SIZE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MIRROR - 194)) | (1L << (MUST_CHANGE - 194)) | (1L << (NATIVE_COMPILATION - 194)) | (1L << (NEGOTIATE - 194)) | (1L << (NOFORMAT - 194)) | (1L << (NOINIT - 194)) | (1L << (NONE - 194)) | (1L << (NOREWIND - 194)) | (1L << (NOSKIP - 194)) | (1L << (NOUNLOAD - 194)) | (1L << (NO_CHECKSUM - 194)) | (1L << (NO_COMPRESSION - 194)) | (1L << (NO_EVENT_LOSS - 194)) | (1L << (NOTIFICATION - 194)) | (1L << (NTLM - 194)) | (1L << (NULL - 194)) | (1L << (OFFSETS - 194)) | (1L << (OLD_PASSWORD - 194)) | (1L << (ON_FAILURE - 194)) | (1L << (PAGE - 194)) | (1L << (PARAM_NODE - 194)) | (1L << (PARTIAL - 194)) | (1L << (PASSWORD - 194)) | (1L << (PERMISSION_SET - 194)) | (1L << (PER_CPU - 194)) | (1L << (PER_DB - 194)) | (1L << (PER_NODE - 194)) | (1L << (PLATFORM - 194)) | (1L << (POLICY - 194)) | (1L << (PRECISION - 194)) | (1L << (PREDICATE - 194)))) != 0) || ((((_la - 262)) & ~0x3f) == 0 && ((1L << (_la - 262)) & ((1L << (PROCESS - 262)) | (1L << (PUBLIC - 262)) | (1L << (PUSHDOWN - 262)) | (1L << (PYTHON - 262)) | (1L << (R - 262)) | (1L << (RAW - 262)) | (1L << (READ_WRITE_FILEGROUPS - 262)) | (1L << (REGENERATE - 262)) | (1L << (RELATED_CONVERSATION - 262)) | (1L << (RELATED_CONVERSATION_GROUP - 262)) | (1L << (REQUIRED - 262)) | (1L << (RESET - 262)) | (1L << (RESTART - 262)) | (1L << (RESULT_SETS - 262)) | (1L << (RESUME - 262)) | (1L << (RETAINDAYS - 262)) | (1L << (RETURN - 262)) | (1L << (RETURNS - 262)) | (1L << (REWIND - 262)) | (1L << (ROLE - 262)) | (1L << (ROWCOUNT - 262)) | (1L << (ROWGUIDCOL - 262)) | (1L << (RSA_512 - 262)) | (1L << (RSA_1024 - 262)) | (1L << (RSA_2048 - 262)) | (1L << (RSA_3072 - 262)) | (1L << (RSA_4096 - 262)) | (1L << (SAFETY - 262)) | (1L << (SAFE - 262)) | (1L << (SCHEDULER - 262)) | (1L << (SCHEME - 262)) | (1L << (SECURITYAUDIT - 262)) | (1L << (SERVER - 262)) | (1L << (SERVICE - 262)) | (1L << (SERVICE_BROKER - 262)) | (1L << (SERVICE_NAME - 262)) | (1L << (SESSION - 262)) | (1L << (SESSION_USER - 262)) | (1L << (SID - 262)) | (1L << (SKIP_KEYWORD - 262)) | (1L << (SOFTNUMA - 262)))) != 0) || ((((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & ((1L << (SOURCE - 326)) | (1L << (SPECIFICATION - 326)) | (1L << (SPLIT - 326)) | (1L << (SQLDUMPERFLAGS - 326)) | (1L << (SQLDUMPERPATH - 326)) | (1L << (SQLDUMPERTIMEOUT - 326)) | (1L << (STATE - 326)) | (1L << (STATS - 326)) | (1L << (START - 326)) | (1L << (STARTED - 326)) | (1L << (STARTUP_STATE - 326)) | (1L << (STOP - 326)) | (1L << (STOPPED - 326)) | (1L << (STOP_ON_ERROR - 326)) | (1L << (SUPPORTED - 326)) | (1L << (SYSTEM_USER - 326)) | (1L << (TAPE - 326)) | (1L << (TARGET - 326)) | (1L << (TCP - 326)) | (1L << (TRACK_CAUSALITY - 326)) | (1L << (TRANSFER - 326)) | (1L << (UNCHECKED - 326)) | (1L << (UNLOCK - 326)) | (1L << (UNSAFE - 326)) | (1L << (URL - 326)) | (1L << (USED - 326)) | (1L << (USER - 326)) | (1L << (VERBOSELOGGING - 326)) | (1L << (VISIBILITY - 326)) | (1L << (WINDOWS - 326)) | (1L << (WITHIN - 326)) | (1L << (WITHOUT - 326)) | (1L << (WITNESS - 326)) | (1L << (ABSOLUTE - 326)) | (1L << (ACCENT_SENSITIVITY - 326)) | (1L << (ACTION - 326)) | (1L << (ACTIVATION - 326)))) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & ((1L << (ACTIVE - 390)) | (1L << (ADDRESS - 390)) | (1L << (AES_128 - 390)) | (1L << (AES_192 - 390)) | (1L << (AES_256 - 390)) | (1L << (AFFINITY - 390)) | (1L << (AFTER - 390)) | (1L << (AGGREGATE - 390)) | (1L << (ALGORITHM - 390)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 390)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 390)) | (1L << (ALLOWED - 390)) | (1L << (ANSI_NULL_DEFAULT - 390)) | (1L << (ANSI_NULLS - 390)) | (1L << (ANSI_PADDING - 390)) | (1L << (ANSI_WARNINGS - 390)) | (1L << (APPLICATION_LOG - 390)) | (1L << (APPLY - 390)) | (1L << (ARITHABORT - 390)) | (1L << (ASSEMBLY - 390)) | (1L << (AUDIT - 390)) | (1L << (AUDIT_GUID - 390)) | (1L << (AUTO - 390)) | (1L << (AUTO_CLEANUP - 390)) | (1L << (AUTO_CLOSE - 390)) | (1L << (AUTO_CREATE_STATISTICS - 390)) | (1L << (AUTO_SHRINK - 390)) | (1L << (AUTO_UPDATE_STATISTICS - 390)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 390)) | (1L << (AVAILABILITY - 390)) | (1L << (AVG - 390)) | (1L << (BACKUP_PRIORITY - 390)) | (1L << (BEGIN_DIALOG - 390)) | (1L << (BIGINT - 390)) | (1L << (BINARY_BASE64 - 390)) | (1L << (BINARY_CHECKSUM - 390)) | (1L << (BINDING - 390)) | (1L << (BLOB_STORAGE - 390)) | (1L << (BROKER - 390)) | (1L << (BROKER_INSTANCE - 390)) | (1L << (BUCKET_COUNT - 390)) | (1L << (BULK_LOGGED - 390)) | (1L << (CALLER - 390)) | (1L << (CAP_CPU_PERCENT - 390)) | (1L << (CAST - 390)) | (1L << (CATALOG - 390)) | (1L << (CATCH - 390)) | (1L << (CHANGE_RETENTION - 390)) | (1L << (CHANGE_TRACKING - 390)) | (1L << (CHECKSUM - 390)) | (1L << (CHECKSUM_AGG - 390)) | (1L << (CLEANUP - 390)) | (1L << (COLLECTION - 390)) | (1L << (COLUMN_MASTER_KEY - 390)) | (1L << (COMMITTED - 390)) | (1L << (COMPATIBILITY_LEVEL - 390)) | (1L << (CONCAT - 390)) | (1L << (CONCAT_NULL_YIELDS_NULL - 390)) | (1L << (CONTENT - 390)) | (1L << (CONTROL - 390)) | (1L << (COOKIE - 390)) | (1L << (COUNT - 390)) | (1L << (COUNT_BIG - 390)) | (1L << (COUNTER - 390)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (CPU - 454)) | (1L << (CREATE_NEW - 454)) | (1L << (CREATION_DISPOSITION - 454)) | (1L << (CREDENTIAL - 454)) | (1L << (CRYPTOGRAPHIC - 454)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 454)) | (1L << (CURSOR_DEFAULT - 454)) | (1L << (DATA - 454)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 454)) | (1L << (DATEADD - 454)) | (1L << (DATEDIFF - 454)) | (1L << (DATEFIRST - 454)) | (1L << (DATEFORMAT - 454)) | (1L << (DATENAME - 454)) | (1L << (DATEPART - 454)) | (1L << (DAYS - 454)) | (1L << (DB_CHAINING - 454)) | (1L << (DB_FAILOVER - 454)) | (1L << (DECRYPTION - 454)) | (1L << (DEFAULT_DOUBLE_QUOTE - 454)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 454)) | (1L << (DEFAULT_LANGUAGE - 454)) | (1L << (DELAY - 454)) | (1L << (DELAYED_DURABILITY - 454)) | (1L << (DELETED - 454)) | (1L << (DENSE_RANK - 454)) | (1L << (DEPENDENTS - 454)) | (1L << (DES - 454)) | (1L << (DESCRIPTION - 454)) | (1L << (DESX - 454)) | (1L << (DHCP - 454)) | (1L << (DIALOG - 454)) | (1L << (DIRECTORY_NAME - 454)) | (1L << (DISABLE - 454)) | (1L << (DISABLE_BROKER - 454)) | (1L << (DISABLED - 454)) | (1L << (DISK_DRIVE - 454)) | (1L << (DOCUMENT - 454)) | (1L << (DYNAMIC - 454)) | (1L << (ELEMENTS - 454)) | (1L << (EMERGENCY - 454)) | (1L << (EMPTY - 454)) | (1L << (ENABLE - 454)) | (1L << (ENABLE_BROKER - 454)) | (1L << (ENCRYPTED_VALUE - 454)) | (1L << (ENCRYPTION - 454)) | (1L << (ENDPOINT_URL - 454)) | (1L << (ERROR_BROKER_CONVERSATIONS - 454)) | (1L << (EXCLUSIVE - 454)) | (1L << (EXECUTABLE - 454)) | (1L << (EXIST - 454)) | (1L << (EXPAND - 454)) | (1L << (EXPIRY_DATE - 454)) | (1L << (EXPLICIT - 454)) | (1L << (FAIL_OPERATION - 454)) | (1L << (FAILOVER_MODE - 454)) | (1L << (FAILURE - 454)) | (1L << (FAILURE_CONDITION_LEVEL - 454)) | (1L << (FAST - 454)) | (1L << (FAST_FORWARD - 454)) | (1L << (FILEGROUP - 454)) | (1L << (FILEGROWTH - 454)) | (1L << (FILEPATH - 454)) | (1L << (FILESTREAM - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (FILTER - 518)) | (1L << (FIRST - 518)) | (1L << (FIRST_VALUE - 518)) | (1L << (FOLLOWING - 518)) | (1L << (FORCE - 518)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 518)) | (1L << (FORCED - 518)) | (1L << (FORMAT - 518)) | (1L << (FORWARD_ONLY - 518)) | (1L << (FULLSCAN - 518)) | (1L << (FULLTEXT - 518)) | (1L << (GB - 518)) | (1L << (GETDATE - 518)) | (1L << (GETUTCDATE - 518)) | (1L << (GLOBAL - 518)) | (1L << (GO - 518)) | (1L << (GROUP_MAX_REQUESTS - 518)) | (1L << (GROUPING - 518)) | (1L << (GROUPING_ID - 518)) | (1L << (HADOOP - 518)) | (1L << (HADR - 518)) | (1L << (HASH - 518)) | (1L << (HEALTH_CHECK_TIMEOUT - 518)) | (1L << (HIGH - 518)) | (1L << (HONOR_BROKER_PRIORITY - 518)) | (1L << (HOURS - 518)) | (1L << (IDENTITY_VALUE - 518)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 518)) | (1L << (IMMEDIATE - 518)) | (1L << (IMPERSONATE - 518)) | (1L << (IMPORTANCE - 518)) | (1L << (INCLUDE_NULL_VALUES - 518)) | (1L << (INCREMENTAL - 518)) | (1L << (INITIATOR - 518)) | (1L << (INPUT - 518)) | (1L << (INSENSITIVE - 518)) | (1L << (INSERTED - 518)) | (1L << (INT - 518)) | (1L << (IP - 518)) | (1L << (ISOLATION - 518)) | (1L << (JOB - 518)) | (1L << (JSON - 518)) | (1L << (KB - 518)) | (1L << (KEEP - 518)) | (1L << (KEEPFIXED - 518)) | (1L << (KEY_SOURCE - 518)) | (1L << (KEYS - 518)) | (1L << (KEYSET - 518)) | (1L << (LAG - 518)) | (1L << (LAST - 518)) | (1L << (LAST_VALUE - 518)) | (1L << (LEAD - 518)) | (1L << (LEVEL - 518)) | (1L << (LIST - 518)) | (1L << (LISTENER - 518)) | (1L << (LISTENER_URL - 518)) | (1L << (LOB_COMPACTION - 518)) | (1L << (LOCAL - 518)) | (1L << (LOCATION - 518)) | (1L << (LOCK - 518)) | (1L << (LOCK_ESCALATION - 518)) | (1L << (LOGIN - 518)) | (1L << (LOOP - 518)) | (1L << (LOW - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (MANUAL - 582)) | (1L << (MARK - 582)) | (1L << (MATERIALIZED - 582)) | (1L << (MAX - 582)) | (1L << (MAX_CPU_PERCENT - 582)) | (1L << (MAX_DOP - 582)) | (1L << (MAX_FILES - 582)) | (1L << (MAX_IOPS_PER_VOLUME - 582)) | (1L << (MAX_MEMORY_PERCENT - 582)) | (1L << (MAX_PROCESSES - 582)) | (1L << (MAX_QUEUE_READERS - 582)) | (1L << (MAX_ROLLOVER_FILES - 582)) | (1L << (MAXDOP - 582)) | (1L << (MAXRECURSION - 582)) | (1L << (MAXSIZE - 582)) | (1L << (MB - 582)) | (1L << (MEDIUM - 582)) | (1L << (MEMORY_OPTIMIZED_DATA - 582)) | (1L << (MESSAGE - 582)) | (1L << (MIN - 582)) | (1L << (MIN_ACTIVE_ROWVERSION - 582)) | (1L << (MIN_CPU_PERCENT - 582)) | (1L << (MIN_IOPS_PER_VOLUME - 582)) | (1L << (MIN_MEMORY_PERCENT - 582)) | (1L << (MINUTES - 582)) | (1L << (MIRROR_ADDRESS - 582)) | (1L << (MIXED_PAGE_ALLOCATION - 582)) | (1L << (MODE - 582)) | (1L << (MODIFY - 582)) | (1L << (MOVE - 582)) | (1L << (MULTI_USER - 582)) | (1L << (NAME - 582)) | (1L << (NESTED_TRIGGERS - 582)) | (1L << (NEW_ACCOUNT - 582)) | (1L << (NEW_BROKER - 582)) | (1L << (NEW_PASSWORD - 582)) | (1L << (NEXT - 582)) | (1L << (NO - 582)) | (1L << (NO_TRUNCATE - 582)) | (1L << (NO_WAIT - 582)) | (1L << (NOCOUNT - 582)) | (1L << (NODES - 582)) | (1L << (NOEXPAND - 582)) | (1L << (NON_TRANSACTED_ACCESS - 582)) | (1L << (NORECOMPUTE - 582)) | (1L << (NORECOVERY - 582)) | (1L << (NOWAIT - 582)) | (1L << (NTILE - 582)) | (1L << (NUMANODE - 582)) | (1L << (NUMBER - 582)) | (1L << (NUMERIC_ROUNDABORT - 582)) | (1L << (OBJECT - 582)) | (1L << (OFFLINE - 582)) | (1L << (OFFSET - 582)) | (1L << (OLD_ACCOUNT - 582)) | (1L << (ONLINE - 582)) | (1L << (ONLY - 582)) | (1L << (OPEN_EXISTING - 582)) | (1L << (OPTIMISTIC - 582)) | (1L << (OPTIMIZE - 582)) | (1L << (OUT - 582)) | (1L << (OUTPUT - 582)) | (1L << (OVERRIDE - 582)) | (1L << (OWNER - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (PAGE_VERIFY - 646)) | (1L << (PARAMETERIZATION - 646)) | (1L << (PARTITION - 646)) | (1L << (PARTITIONS - 646)) | (1L << (PARTNER - 646)) | (1L << (PATH - 646)) | (1L << (POISON_MESSAGE_HANDLING - 646)) | (1L << (POOL - 646)) | (1L << (PORT - 646)) | (1L << (PRECEDING - 646)) | (1L << (PRIMARY_ROLE - 646)) | (1L << (PRIOR - 646)) | (1L << (PRIORITY - 646)) | (1L << (PRIORITY_LEVEL - 646)) | (1L << (PRIVATE - 646)) | (1L << (PRIVATE_KEY - 646)) | (1L << (PRIVILEGES - 646)) | (1L << (PROCEDURE_NAME - 646)) | (1L << (PROPERTY - 646)) | (1L << (PROVIDER - 646)) | (1L << (PROVIDER_KEY_NAME - 646)) | (1L << (QUERY - 646)) | (1L << (QUEUE - 646)) | (1L << (QUEUE_DELAY - 646)) | (1L << (QUOTED_IDENTIFIER - 646)) | (1L << (RANGE - 646)) | (1L << (RANK - 646)) | (1L << (RC2 - 646)) | (1L << (RC4 - 646)) | (1L << (RC4_128 - 646)) | (1L << (READ_COMMITTED_SNAPSHOT - 646)) | (1L << (READ_ONLY - 646)) | (1L << (READ_ONLY_ROUTING_LIST - 646)) | (1L << (READ_WRITE - 646)) | (1L << (READONLY - 646)) | (1L << (REBUILD - 646)) | (1L << (RECEIVE - 646)) | (1L << (RECOMPILE - 646)) | (1L << (RECOVERY - 646)) | (1L << (RECURSIVE_TRIGGERS - 646)) | (1L << (RELATIVE - 646)) | (1L << (REMOTE - 646)) | (1L << (REMOTE_SERVICE_NAME - 646)) | (1L << (REMOVE - 646)) | (1L << (REORGANIZE - 646)) | (1L << (REPEATABLE - 646)) | (1L << (REPLICA - 646)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 646)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 646)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 646)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 646)) | (1L << (RESERVE_DISK_SPACE - 646)) | (1L << (RESOURCE - 646)) | (1L << (RESOURCE_MANAGER_LOCATION - 646)) | (1L << (RESTRICTED_USER - 646)) | (1L << (RETENTION - 646)) | (1L << (ROBUST - 646)) | (1L << (ROOT - 646)) | (1L << (ROUTE - 646)) | (1L << (ROW - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (ROWGUID - 646)) | (1L << (ROWS - 646)) | (1L << (SAMPLE - 646)))) != 0) || ((((_la - 710)) & ~0x3f) == 0 && ((1L << (_la - 710)) & ((1L << (SCHEMABINDING - 710)) | (1L << (SCOPED - 710)) | (1L << (SCROLL - 710)) | (1L << (SCROLL_LOCKS - 710)) | (1L << (SEARCH - 710)) | (1L << (SECONDARY - 710)) | (1L << (SECONDARY_ONLY - 710)) | (1L << (SECONDARY_ROLE - 710)) | (1L << (SECONDS - 710)) | (1L << (SECRET - 710)) | (1L << (SECURITY - 710)) | (1L << (SECURITY_LOG - 710)) | (1L << (SEEDING_MODE - 710)) | (1L << (SELF - 710)) | (1L << (SEMI_SENSITIVE - 710)) | (1L << (SEND - 710)) | (1L << (SENT - 710)) | (1L << (SEQUENCE - 710)) | (1L << (SERIALIZABLE - 710)) | (1L << (SESSION_TIMEOUT - 710)) | (1L << (SETERROR - 710)) | (1L << (SHARE - 710)) | (1L << (SHOWPLAN - 710)) | (1L << (SIGNATURE - 710)) | (1L << (SIMPLE - 710)) | (1L << (SINGLE_USER - 710)) | (1L << (SIZE - 710)) | (1L << (SMALLINT - 710)) | (1L << (SNAPSHOT - 710)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 710)) | (1L << (STANDBY - 710)) | (1L << (START_DATE - 710)) | (1L << (STATIC - 710)) | (1L << (STATS_STREAM - 710)) | (1L << (STATUS - 710)) | (1L << (STATUSONLY - 710)) | (1L << (STDEV - 710)) | (1L << (STDEVP - 710)) | (1L << (STOPLIST - 710)) | (1L << (STRING_AGG - 710)) | (1L << (STUFF - 710)) | (1L << (SUBJECT - 710)) | (1L << (SUBSCRIPTION - 710)) | (1L << (SUM - 710)) | (1L << (SUSPEND - 710)) | (1L << (SYMMETRIC - 710)) | (1L << (SYNCHRONOUS_COMMIT - 710)) | (1L << (SYNONYM - 710)) | (1L << (SYSTEM - 710)) | (1L << (TAKE - 710)) | (1L << (TARGET_RECOVERY_TIME - 710)) | (1L << (TB - 710)) | (1L << (TEXTIMAGE_ON - 710)) | (1L << (THROW - 710)) | (1L << (TIES - 710)) | (1L << (TIME - 710)) | (1L << (TIMEOUT - 710)) | (1L << (TIMER - 710)) | (1L << (TINYINT - 710)) | (1L << (TORN_PAGE_DETECTION - 710)) | (1L << (TRANSFORM_NOISE_WORDS - 710)) | (1L << (TRIPLE_DES - 710)) | (1L << (TRIPLE_DES_3KEY - 710)) | (1L << (TRUSTWORTHY - 710)))) != 0) || ((((_la - 774)) & ~0x3f) == 0 && ((1L << (_la - 774)) & ((1L << (TRY - 774)) | (1L << (TSQL - 774)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 774)) | (1L << (TYPE - 774)) | (1L << (TYPE_WARNING - 774)) | (1L << (UNBOUNDED - 774)) | (1L << (UNCOMMITTED - 774)) | (1L << (UNDEFINED - 774)) | (1L << (UNKNOWN - 774)) | (1L << (UNLIMITED - 774)) | (1L << (UOW - 774)) | (1L << (USING - 774)) | (1L << (VALID_XML - 774)) | (1L << (VALIDATION - 774)) | (1L << (VALUE - 774)) | (1L << (VAR - 774)) | (1L << (VARP - 774)) | (1L << (VIEW_METADATA - 774)) | (1L << (VIEWS - 774)) | (1L << (WAIT - 774)) | (1L << (WELL_FORMED_XML - 774)) | (1L << (WITHOUT_ARRAY_WRAPPER - 774)) | (1L << (WORK - 774)) | (1L << (WORKLOAD - 774)) | (1L << (XML - 774)) | (1L << (XMLDATA - 774)) | (1L << (XMLNAMESPACES - 774)) | (1L << (XMLSCHEMA - 774)) | (1L << (XSINIL - 774)) | (1L << (DOLLAR_ACTION - 774)) | (1L << (SPACE - 774)) | (1L << (COMMENT - 774)) | (1L << (LINE_COMMENT - 774)) | (1L << (DOUBLE_QUOTE_ID - 774)) | (1L << (SINGLE_QUOTE - 774)) | (1L << (SQUARE_BRACKET_ID - 774)) | (1L << (LOCAL_ID - 774)) | (1L << (DECIMAL - 774)) | (1L << (ID - 774)) | (1L << (QUOTED_URL - 774)) | (1L << (QUOTED_HOST_AND_PORT - 774)) | (1L << (STRING - 774)) | (1L << (BINARY - 774)) | (1L << (FLOAT - 774)) | (1L << (REAL - 774)) | (1L << (EQUAL - 774)) | (1L << (GREATER - 774)) | (1L << (LESS - 774)) | (1L << (EXCLAMATION - 774)) | (1L << (PLUS_ASSIGN - 774)) | (1L << (MINUS_ASSIGN - 774)) | (1L << (MULT_ASSIGN - 774)) | (1L << (DIV_ASSIGN - 774)) | (1L << (MOD_ASSIGN - 774)) | (1L << (AND_ASSIGN - 774)) | (1L << (XOR_ASSIGN - 774)) | (1L << (OR_ASSIGN - 774)) | (1L << (DOUBLE_BAR - 774)) | (1L << (DOT - 774)) | (1L << (UNDERLINE - 774)) | (1L << (AT - 774)) | (1L << (SHARP - 774)) | (1L << (DOLLAR - 774)) | (1L << (LR_BRACKET - 774)))) != 0) || ((((_la - 838)) & ~0x3f) == 0 && ((1L << (_la - 838)) & ((1L << (RR_BRACKET - 838)) | (1L << (COMMA - 838)) | (1L << (SEMI - 838)) | (1L << (COLON - 838)) | (1L << (STAR - 838)) | (1L << (DIVIDE - 838)) | (1L << (MODULE - 838)) | (1L << (PLUS - 838)) | (1L << (MINUS - 838)) | (1L << (BIT_NOT - 838)) | (1L << (BIT_OR - 838)) | (1L << (BIT_AND - 838)) | (1L << (BIT_XOR - 838)) | (1L << (MDY - 838)) | (1L << (DMY - 838)) | (1L << (YMD - 838)) | (1L << (YDM - 838)) | (1L << (MYD - 838)) | (1L << (DYM - 838)) | (1L << (IPV4_OCTECT - 838)))) != 0) );
				}
				break;
			case ALL:
				{
				State = 2790; Match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2793; Match(ON);
			State = 2803;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BACKSLASH:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONNECTION_OPTIONS:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DISK:
			case DOUBLE_BACK_SLASH:
			case DOUBLE_FORWARD_SLASH:
			case DTC_SUPPORT:
			case DUMP:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILENAME:
			case FILLFACTOR:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IDENTITYCOL:
			case IIF:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case IPV4_ADDR:
			case IPV6_ADDR:
			case ISNULL:
			case KERBEROS:
			case KEY:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOAD:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NATIVE_COMPILATION:
			case NEGOTIATE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case NULL:
			case OFFSETS:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PLATFORM:
			case POLICY:
			case PRECISION:
			case PREDICATE:
			case PROCESS:
			case PUBLIC:
			case PUSHDOWN:
			case PYTHON:
			case R:
			case RAW:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESULT_SETS:
			case RESUME:
			case RETAINDAYS:
			case RETURN:
			case RETURNS:
			case REWIND:
			case ROLE:
			case ROWCOUNT:
			case ROWGUIDCOL:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SECURITYAUDIT:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SESSION_USER:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case SYSTEM_USER:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case USER:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHIN:
			case WITHOUT:
			case WITNESS:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BUCKET_COUNT:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATEFIRST:
			case DATEFORMAT:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADOOP:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNDEFINED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case DOLLAR_ACTION:
			case SPACE:
			case COMMENT:
			case LINE_COMMENT:
			case DOUBLE_QUOTE_ID:
			case SINGLE_QUOTE:
			case SQUARE_BRACKET_ID:
			case LOCAL_ID:
			case DECIMAL:
			case ID:
			case QUOTED_URL:
			case QUOTED_HOST_AND_PORT:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case EQUAL:
			case GREATER:
			case LESS:
			case EXCLAMATION:
			case PLUS_ASSIGN:
			case MINUS_ASSIGN:
			case MULT_ASSIGN:
			case DIV_ASSIGN:
			case MOD_ASSIGN:
			case AND_ASSIGN:
			case XOR_ASSIGN:
			case OR_ASSIGN:
			case DOUBLE_BAR:
			case DOT:
			case UNDERLINE:
			case AT:
			case SHARP:
			case DOLLAR:
			case LR_BRACKET:
			case RR_BRACKET:
			case COMMA:
			case SEMI:
			case COLON:
			case STAR:
			case DIVIDE:
			case MODULE:
			case PLUS:
			case MINUS:
			case BIT_NOT:
			case BIT_OR:
			case BIT_AND:
			case BIT_XOR:
			case MDY:
			case DMY:
			case YMD:
			case YDM:
			case MYD:
			case DYM:
			case IPV4_OCTECT:
				{
				State = 2797;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,206,_ctx) ) {
				case 1:
					{
					State = 2794; _localctx.schema_id = id();
					State = 2795; Match(DOT);
					}
					break;
				}
				State = 2799; _localctx.object_name = id();
				}
				break;
			case DATABASE:
				{
				State = 2800; Match(DATABASE);
				}
				break;
			case ALL:
				{
				State = 2801; Match(ALL);
				State = 2802; Match(SERVER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enable_triggerContext : ParserRuleContext {
		public IdContext trigger_name;
		public IdContext schema_id;
		public IdContext object_name;
		public ITerminalNode ENABLE() { return GetToken(TSqlParser.ENABLE, 0); }
		public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode[] ALL() { return GetTokens(TSqlParser.ALL); }
		public ITerminalNode ALL(int i) {
			return GetToken(TSqlParser.ALL, i);
		}
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Schema_nameContext[] schema_name() {
			return GetRuleContexts<Schema_nameContext>();
		}
		public Schema_nameContext schema_name(int i) {
			return GetRuleContext<Schema_nameContext>(i);
		}
		public Enable_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enable_trigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEnable_trigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEnable_trigger(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnable_trigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enable_triggerContext enable_trigger() {
		Enable_triggerContext _localctx = new Enable_triggerContext(_ctx, State);
		EnterRule(_localctx, 268, RULE_enable_trigger);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2805; Match(ENABLE);
			State = 2806; Match(TRIGGER);
			State = 2821;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BACKSLASH:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONNECTION_OPTIONS:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DISK:
			case DOUBLE_BACK_SLASH:
			case DOUBLE_FORWARD_SLASH:
			case DTC_SUPPORT:
			case DUMP:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILENAME:
			case FILLFACTOR:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IDENTITYCOL:
			case IIF:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case IPV4_ADDR:
			case IPV6_ADDR:
			case ISNULL:
			case KERBEROS:
			case KEY:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOAD:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NATIVE_COMPILATION:
			case NEGOTIATE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case NULL:
			case OFFSETS:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PLATFORM:
			case POLICY:
			case PRECISION:
			case PREDICATE:
			case PROCESS:
			case PUBLIC:
			case PUSHDOWN:
			case PYTHON:
			case R:
			case RAW:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESULT_SETS:
			case RESUME:
			case RETAINDAYS:
			case RETURN:
			case RETURNS:
			case REWIND:
			case ROLE:
			case ROWCOUNT:
			case ROWGUIDCOL:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SECURITYAUDIT:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SESSION_USER:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case SYSTEM_USER:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case USER:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHIN:
			case WITHOUT:
			case WITNESS:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BUCKET_COUNT:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATEFIRST:
			case DATEFORMAT:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADOOP:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNDEFINED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case DOLLAR_ACTION:
			case SPACE:
			case COMMENT:
			case LINE_COMMENT:
			case DOUBLE_QUOTE_ID:
			case SINGLE_QUOTE:
			case SQUARE_BRACKET_ID:
			case LOCAL_ID:
			case DECIMAL:
			case ID:
			case QUOTED_URL:
			case QUOTED_HOST_AND_PORT:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case EQUAL:
			case GREATER:
			case LESS:
			case EXCLAMATION:
			case PLUS_ASSIGN:
			case MINUS_ASSIGN:
			case MULT_ASSIGN:
			case DIV_ASSIGN:
			case MOD_ASSIGN:
			case AND_ASSIGN:
			case XOR_ASSIGN:
			case OR_ASSIGN:
			case DOUBLE_BAR:
			case DOT:
			case UNDERLINE:
			case AT:
			case SHARP:
			case DOLLAR:
			case LR_BRACKET:
			case RR_BRACKET:
			case COMMA:
			case SEMI:
			case COLON:
			case STAR:
			case DIVIDE:
			case MODULE:
			case PLUS:
			case MINUS:
			case BIT_NOT:
			case BIT_OR:
			case BIT_AND:
			case BIT_XOR:
			case MDY:
			case DMY:
			case YMD:
			case YDM:
			case MYD:
			case DYM:
			case IPV4_OCTECT:
				{
				State = 2816;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 2808;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,208,_ctx) ) {
					case 1:
						{
						State = 2807; Match(COMMA);
						}
						break;
					}
					State = 2813;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,209,_ctx) ) {
					case 1:
						{
						State = 2810; schema_name();
						State = 2811; Match(DOT);
						}
						break;
					}
					State = 2815; _localctx.trigger_name = id();
					}
					}
					State = 2818;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSENT) | (1L << AES) | (1L << ALLOW_CONNECTIONS) | (1L << ALLOW_MULTIPLE_EVENT_LOSS) | (1L << ALLOW_SINGLE_EVENT_LOSS) | (1L << ANONYMOUS) | (1L << APPEND) | (1L << APPLICATION) | (1L << ASYMMETRIC) | (1L << ASYNCHRONOUS_COMMIT) | (1L << AUTHENTICATION) | (1L << AUTOMATED_BACKUP_PREFERENCE) | (1L << AUTOMATIC) | (1L << AVAILABILITY_MODE) | (1L << BACKSLASH) | (1L << BEFORE) | (1L << BLOCK) | (1L << BLOCKSIZE) | (1L << BLOCKING_HIERARCHY) | (1L << BUFFER) | (1L << BUFFERCOUNT) | (1L << CACHE) | (1L << CALLED) | (1L << CERTIFICATE) | (1L << CHANGETABLE) | (1L << CHANGES) | (1L << CHECK_POLICY) | (1L << CHECK_EXPIRATION) | (1L << CLASSIFIER_FUNCTION) | (1L << CLUSTER) | (1L << COMPRESSION) | (1L << CONNECTION_OPTIONS) | (1L << CONFIGURATION) | (1L << CONTAINMENT))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CONTEXT - 65)) | (1L << (CONTINUE_AFTER_ERROR - 65)) | (1L << (CONTRACT - 65)) | (1L << (CONTRACT_NAME - 65)) | (1L << (CONVERSATION - 65)) | (1L << (COPY_ONLY - 65)) | (1L << (CURRENT_TIMESTAMP - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA_COMPRESSION - 65)) | (1L << (DATA_SOURCE - 65)) | (1L << (DATABASE_MIRRORING - 65)) | (1L << (DEFAULT_DATABASE - 65)) | (1L << (DEFAULT_SCHEMA - 65)) | (1L << (DIAGNOSTICS - 65)) | (1L << (DIFFERENTIAL - 65)) | (1L << (DISK - 65)) | (1L << (DOUBLE_BACK_SLASH - 65)) | (1L << (DOUBLE_FORWARD_SLASH - 65)) | (1L << (DTC_SUPPORT - 65)) | (1L << (DUMP - 65)) | (1L << (ENABLED - 65)) | (1L << (ENDPOINT - 65)) | (1L << (ERROR - 65)) | (1L << (EVENT - 65)) | (1L << (EVENTDATA - 65)) | (1L << (EVENT_RETENTION_MODE - 65)) | (1L << (EXECUTABLE_FILE - 65)) | (1L << (EXPIREDATE - 65)) | (1L << (EXTENSION - 65)) | (1L << (EXTERNAL_ACCESS - 65)) | (1L << (FAILOVER - 65)) | (1L << (FAILURECONDITIONLEVEL - 65)) | (1L << (FAN_IN - 65)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (FILENAME - 130)) | (1L << (FILLFACTOR - 130)) | (1L << (FILE_SNAPSHOT - 130)) | (1L << (FORCESEEK - 130)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 130)) | (1L << (GET - 130)) | (1L << (GOVERNOR - 130)) | (1L << (HASHED - 130)) | (1L << (HEALTHCHECKTIMEOUT - 130)) | (1L << (IDENTITYCOL - 130)) | (1L << (IIF - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCREMENT - 130)) | (1L << (INFINITE - 130)) | (1L << (INIT - 130)) | (1L << (INSTEAD - 130)) | (1L << (IPV4_ADDR - 130)) | (1L << (IPV6_ADDR - 130)) | (1L << (ISNULL - 130)) | (1L << (KERBEROS - 130)) | (1L << (KEY - 130)) | (1L << (KEY_PATH - 130)) | (1L << (KEY_STORE_PROVIDER_NAME - 130)) | (1L << (LANGUAGE - 130)) | (1L << (LIBRARY - 130)) | (1L << (LIFETIME - 130)) | (1L << (LINUX - 130)) | (1L << (LISTENER_IP - 130)) | (1L << (LISTENER_PORT - 130)) | (1L << (LOAD - 130)) | (1L << (LOCAL_SERVICE_NAME - 130)) | (1L << (LOG - 130)) | (1L << (MATCHED - 130)) | (1L << (MASTER - 130)) | (1L << (MAX_MEMORY - 130)) | (1L << (MAXTRANSFER - 130)) | (1L << (MAXVALUE - 130)) | (1L << (MAX_DISPATCH_LATENCY - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (MAX_EVENT_SIZE - 194)) | (1L << (MAX_SIZE - 194)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 194)) | (1L << (MEDIADESCRIPTION - 194)) | (1L << (MEDIANAME - 194)) | (1L << (MEMBER - 194)) | (1L << (MEMORY_PARTITION_MODE - 194)) | (1L << (MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT - 194)) | (1L << (MESSAGE_FORWARDING - 194)) | (1L << (MESSAGE_FORWARD_SIZE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MIRROR - 194)) | (1L << (MUST_CHANGE - 194)) | (1L << (NATIVE_COMPILATION - 194)) | (1L << (NEGOTIATE - 194)) | (1L << (NOFORMAT - 194)) | (1L << (NOINIT - 194)) | (1L << (NONE - 194)) | (1L << (NOREWIND - 194)) | (1L << (NOSKIP - 194)) | (1L << (NOUNLOAD - 194)) | (1L << (NO_CHECKSUM - 194)) | (1L << (NO_COMPRESSION - 194)) | (1L << (NO_EVENT_LOSS - 194)) | (1L << (NOTIFICATION - 194)) | (1L << (NTLM - 194)) | (1L << (NULL - 194)) | (1L << (OFFSETS - 194)) | (1L << (OLD_PASSWORD - 194)) | (1L << (ON_FAILURE - 194)) | (1L << (PAGE - 194)) | (1L << (PARAM_NODE - 194)) | (1L << (PARTIAL - 194)) | (1L << (PASSWORD - 194)) | (1L << (PERMISSION_SET - 194)) | (1L << (PER_CPU - 194)) | (1L << (PER_DB - 194)) | (1L << (PER_NODE - 194)) | (1L << (PLATFORM - 194)) | (1L << (POLICY - 194)) | (1L << (PRECISION - 194)) | (1L << (PREDICATE - 194)))) != 0) || ((((_la - 262)) & ~0x3f) == 0 && ((1L << (_la - 262)) & ((1L << (PROCESS - 262)) | (1L << (PUBLIC - 262)) | (1L << (PUSHDOWN - 262)) | (1L << (PYTHON - 262)) | (1L << (R - 262)) | (1L << (RAW - 262)) | (1L << (READ_WRITE_FILEGROUPS - 262)) | (1L << (REGENERATE - 262)) | (1L << (RELATED_CONVERSATION - 262)) | (1L << (RELATED_CONVERSATION_GROUP - 262)) | (1L << (REQUIRED - 262)) | (1L << (RESET - 262)) | (1L << (RESTART - 262)) | (1L << (RESULT_SETS - 262)) | (1L << (RESUME - 262)) | (1L << (RETAINDAYS - 262)) | (1L << (RETURN - 262)) | (1L << (RETURNS - 262)) | (1L << (REWIND - 262)) | (1L << (ROLE - 262)) | (1L << (ROWCOUNT - 262)) | (1L << (ROWGUIDCOL - 262)) | (1L << (RSA_512 - 262)) | (1L << (RSA_1024 - 262)) | (1L << (RSA_2048 - 262)) | (1L << (RSA_3072 - 262)) | (1L << (RSA_4096 - 262)) | (1L << (SAFETY - 262)) | (1L << (SAFE - 262)) | (1L << (SCHEDULER - 262)) | (1L << (SCHEME - 262)) | (1L << (SECURITYAUDIT - 262)) | (1L << (SERVER - 262)) | (1L << (SERVICE - 262)) | (1L << (SERVICE_BROKER - 262)) | (1L << (SERVICE_NAME - 262)) | (1L << (SESSION - 262)) | (1L << (SESSION_USER - 262)) | (1L << (SID - 262)) | (1L << (SKIP_KEYWORD - 262)) | (1L << (SOFTNUMA - 262)))) != 0) || ((((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & ((1L << (SOURCE - 326)) | (1L << (SPECIFICATION - 326)) | (1L << (SPLIT - 326)) | (1L << (SQLDUMPERFLAGS - 326)) | (1L << (SQLDUMPERPATH - 326)) | (1L << (SQLDUMPERTIMEOUT - 326)) | (1L << (STATE - 326)) | (1L << (STATS - 326)) | (1L << (START - 326)) | (1L << (STARTED - 326)) | (1L << (STARTUP_STATE - 326)) | (1L << (STOP - 326)) | (1L << (STOPPED - 326)) | (1L << (STOP_ON_ERROR - 326)) | (1L << (SUPPORTED - 326)) | (1L << (SYSTEM_USER - 326)) | (1L << (TAPE - 326)) | (1L << (TARGET - 326)) | (1L << (TCP - 326)) | (1L << (TRACK_CAUSALITY - 326)) | (1L << (TRANSFER - 326)) | (1L << (UNCHECKED - 326)) | (1L << (UNLOCK - 326)) | (1L << (UNSAFE - 326)) | (1L << (URL - 326)) | (1L << (USED - 326)) | (1L << (USER - 326)) | (1L << (VERBOSELOGGING - 326)) | (1L << (VISIBILITY - 326)) | (1L << (WINDOWS - 326)) | (1L << (WITHIN - 326)) | (1L << (WITHOUT - 326)) | (1L << (WITNESS - 326)) | (1L << (ABSOLUTE - 326)) | (1L << (ACCENT_SENSITIVITY - 326)) | (1L << (ACTION - 326)) | (1L << (ACTIVATION - 326)))) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & ((1L << (ACTIVE - 390)) | (1L << (ADDRESS - 390)) | (1L << (AES_128 - 390)) | (1L << (AES_192 - 390)) | (1L << (AES_256 - 390)) | (1L << (AFFINITY - 390)) | (1L << (AFTER - 390)) | (1L << (AGGREGATE - 390)) | (1L << (ALGORITHM - 390)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 390)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 390)) | (1L << (ALLOWED - 390)) | (1L << (ANSI_NULL_DEFAULT - 390)) | (1L << (ANSI_NULLS - 390)) | (1L << (ANSI_PADDING - 390)) | (1L << (ANSI_WARNINGS - 390)) | (1L << (APPLICATION_LOG - 390)) | (1L << (APPLY - 390)) | (1L << (ARITHABORT - 390)) | (1L << (ASSEMBLY - 390)) | (1L << (AUDIT - 390)) | (1L << (AUDIT_GUID - 390)) | (1L << (AUTO - 390)) | (1L << (AUTO_CLEANUP - 390)) | (1L << (AUTO_CLOSE - 390)) | (1L << (AUTO_CREATE_STATISTICS - 390)) | (1L << (AUTO_SHRINK - 390)) | (1L << (AUTO_UPDATE_STATISTICS - 390)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 390)) | (1L << (AVAILABILITY - 390)) | (1L << (AVG - 390)) | (1L << (BACKUP_PRIORITY - 390)) | (1L << (BEGIN_DIALOG - 390)) | (1L << (BIGINT - 390)) | (1L << (BINARY_BASE64 - 390)) | (1L << (BINARY_CHECKSUM - 390)) | (1L << (BINDING - 390)) | (1L << (BLOB_STORAGE - 390)) | (1L << (BROKER - 390)) | (1L << (BROKER_INSTANCE - 390)) | (1L << (BUCKET_COUNT - 390)) | (1L << (BULK_LOGGED - 390)) | (1L << (CALLER - 390)) | (1L << (CAP_CPU_PERCENT - 390)) | (1L << (CAST - 390)) | (1L << (CATALOG - 390)) | (1L << (CATCH - 390)) | (1L << (CHANGE_RETENTION - 390)) | (1L << (CHANGE_TRACKING - 390)) | (1L << (CHECKSUM - 390)) | (1L << (CHECKSUM_AGG - 390)) | (1L << (CLEANUP - 390)) | (1L << (COLLECTION - 390)) | (1L << (COLUMN_MASTER_KEY - 390)) | (1L << (COMMITTED - 390)) | (1L << (COMPATIBILITY_LEVEL - 390)) | (1L << (CONCAT - 390)) | (1L << (CONCAT_NULL_YIELDS_NULL - 390)) | (1L << (CONTENT - 390)) | (1L << (CONTROL - 390)) | (1L << (COOKIE - 390)) | (1L << (COUNT - 390)) | (1L << (COUNT_BIG - 390)) | (1L << (COUNTER - 390)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (CPU - 454)) | (1L << (CREATE_NEW - 454)) | (1L << (CREATION_DISPOSITION - 454)) | (1L << (CREDENTIAL - 454)) | (1L << (CRYPTOGRAPHIC - 454)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 454)) | (1L << (CURSOR_DEFAULT - 454)) | (1L << (DATA - 454)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 454)) | (1L << (DATEADD - 454)) | (1L << (DATEDIFF - 454)) | (1L << (DATEFIRST - 454)) | (1L << (DATEFORMAT - 454)) | (1L << (DATENAME - 454)) | (1L << (DATEPART - 454)) | (1L << (DAYS - 454)) | (1L << (DB_CHAINING - 454)) | (1L << (DB_FAILOVER - 454)) | (1L << (DECRYPTION - 454)) | (1L << (DEFAULT_DOUBLE_QUOTE - 454)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 454)) | (1L << (DEFAULT_LANGUAGE - 454)) | (1L << (DELAY - 454)) | (1L << (DELAYED_DURABILITY - 454)) | (1L << (DELETED - 454)) | (1L << (DENSE_RANK - 454)) | (1L << (DEPENDENTS - 454)) | (1L << (DES - 454)) | (1L << (DESCRIPTION - 454)) | (1L << (DESX - 454)) | (1L << (DHCP - 454)) | (1L << (DIALOG - 454)) | (1L << (DIRECTORY_NAME - 454)) | (1L << (DISABLE - 454)) | (1L << (DISABLE_BROKER - 454)) | (1L << (DISABLED - 454)) | (1L << (DISK_DRIVE - 454)) | (1L << (DOCUMENT - 454)) | (1L << (DYNAMIC - 454)) | (1L << (ELEMENTS - 454)) | (1L << (EMERGENCY - 454)) | (1L << (EMPTY - 454)) | (1L << (ENABLE - 454)) | (1L << (ENABLE_BROKER - 454)) | (1L << (ENCRYPTED_VALUE - 454)) | (1L << (ENCRYPTION - 454)) | (1L << (ENDPOINT_URL - 454)) | (1L << (ERROR_BROKER_CONVERSATIONS - 454)) | (1L << (EXCLUSIVE - 454)) | (1L << (EXECUTABLE - 454)) | (1L << (EXIST - 454)) | (1L << (EXPAND - 454)) | (1L << (EXPIRY_DATE - 454)) | (1L << (EXPLICIT - 454)) | (1L << (FAIL_OPERATION - 454)) | (1L << (FAILOVER_MODE - 454)) | (1L << (FAILURE - 454)) | (1L << (FAILURE_CONDITION_LEVEL - 454)) | (1L << (FAST - 454)) | (1L << (FAST_FORWARD - 454)) | (1L << (FILEGROUP - 454)) | (1L << (FILEGROWTH - 454)) | (1L << (FILEPATH - 454)) | (1L << (FILESTREAM - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (FILTER - 518)) | (1L << (FIRST - 518)) | (1L << (FIRST_VALUE - 518)) | (1L << (FOLLOWING - 518)) | (1L << (FORCE - 518)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 518)) | (1L << (FORCED - 518)) | (1L << (FORMAT - 518)) | (1L << (FORWARD_ONLY - 518)) | (1L << (FULLSCAN - 518)) | (1L << (FULLTEXT - 518)) | (1L << (GB - 518)) | (1L << (GETDATE - 518)) | (1L << (GETUTCDATE - 518)) | (1L << (GLOBAL - 518)) | (1L << (GO - 518)) | (1L << (GROUP_MAX_REQUESTS - 518)) | (1L << (GROUPING - 518)) | (1L << (GROUPING_ID - 518)) | (1L << (HADOOP - 518)) | (1L << (HADR - 518)) | (1L << (HASH - 518)) | (1L << (HEALTH_CHECK_TIMEOUT - 518)) | (1L << (HIGH - 518)) | (1L << (HONOR_BROKER_PRIORITY - 518)) | (1L << (HOURS - 518)) | (1L << (IDENTITY_VALUE - 518)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 518)) | (1L << (IMMEDIATE - 518)) | (1L << (IMPERSONATE - 518)) | (1L << (IMPORTANCE - 518)) | (1L << (INCLUDE_NULL_VALUES - 518)) | (1L << (INCREMENTAL - 518)) | (1L << (INITIATOR - 518)) | (1L << (INPUT - 518)) | (1L << (INSENSITIVE - 518)) | (1L << (INSERTED - 518)) | (1L << (INT - 518)) | (1L << (IP - 518)) | (1L << (ISOLATION - 518)) | (1L << (JOB - 518)) | (1L << (JSON - 518)) | (1L << (KB - 518)) | (1L << (KEEP - 518)) | (1L << (KEEPFIXED - 518)) | (1L << (KEY_SOURCE - 518)) | (1L << (KEYS - 518)) | (1L << (KEYSET - 518)) | (1L << (LAG - 518)) | (1L << (LAST - 518)) | (1L << (LAST_VALUE - 518)) | (1L << (LEAD - 518)) | (1L << (LEVEL - 518)) | (1L << (LIST - 518)) | (1L << (LISTENER - 518)) | (1L << (LISTENER_URL - 518)) | (1L << (LOB_COMPACTION - 518)) | (1L << (LOCAL - 518)) | (1L << (LOCATION - 518)) | (1L << (LOCK - 518)) | (1L << (LOCK_ESCALATION - 518)) | (1L << (LOGIN - 518)) | (1L << (LOOP - 518)) | (1L << (LOW - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (MANUAL - 582)) | (1L << (MARK - 582)) | (1L << (MATERIALIZED - 582)) | (1L << (MAX - 582)) | (1L << (MAX_CPU_PERCENT - 582)) | (1L << (MAX_DOP - 582)) | (1L << (MAX_FILES - 582)) | (1L << (MAX_IOPS_PER_VOLUME - 582)) | (1L << (MAX_MEMORY_PERCENT - 582)) | (1L << (MAX_PROCESSES - 582)) | (1L << (MAX_QUEUE_READERS - 582)) | (1L << (MAX_ROLLOVER_FILES - 582)) | (1L << (MAXDOP - 582)) | (1L << (MAXRECURSION - 582)) | (1L << (MAXSIZE - 582)) | (1L << (MB - 582)) | (1L << (MEDIUM - 582)) | (1L << (MEMORY_OPTIMIZED_DATA - 582)) | (1L << (MESSAGE - 582)) | (1L << (MIN - 582)) | (1L << (MIN_ACTIVE_ROWVERSION - 582)) | (1L << (MIN_CPU_PERCENT - 582)) | (1L << (MIN_IOPS_PER_VOLUME - 582)) | (1L << (MIN_MEMORY_PERCENT - 582)) | (1L << (MINUTES - 582)) | (1L << (MIRROR_ADDRESS - 582)) | (1L << (MIXED_PAGE_ALLOCATION - 582)) | (1L << (MODE - 582)) | (1L << (MODIFY - 582)) | (1L << (MOVE - 582)) | (1L << (MULTI_USER - 582)) | (1L << (NAME - 582)) | (1L << (NESTED_TRIGGERS - 582)) | (1L << (NEW_ACCOUNT - 582)) | (1L << (NEW_BROKER - 582)) | (1L << (NEW_PASSWORD - 582)) | (1L << (NEXT - 582)) | (1L << (NO - 582)) | (1L << (NO_TRUNCATE - 582)) | (1L << (NO_WAIT - 582)) | (1L << (NOCOUNT - 582)) | (1L << (NODES - 582)) | (1L << (NOEXPAND - 582)) | (1L << (NON_TRANSACTED_ACCESS - 582)) | (1L << (NORECOMPUTE - 582)) | (1L << (NORECOVERY - 582)) | (1L << (NOWAIT - 582)) | (1L << (NTILE - 582)) | (1L << (NUMANODE - 582)) | (1L << (NUMBER - 582)) | (1L << (NUMERIC_ROUNDABORT - 582)) | (1L << (OBJECT - 582)) | (1L << (OFFLINE - 582)) | (1L << (OFFSET - 582)) | (1L << (OLD_ACCOUNT - 582)) | (1L << (ONLINE - 582)) | (1L << (ONLY - 582)) | (1L << (OPEN_EXISTING - 582)) | (1L << (OPTIMISTIC - 582)) | (1L << (OPTIMIZE - 582)) | (1L << (OUT - 582)) | (1L << (OUTPUT - 582)) | (1L << (OVERRIDE - 582)) | (1L << (OWNER - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (PAGE_VERIFY - 646)) | (1L << (PARAMETERIZATION - 646)) | (1L << (PARTITION - 646)) | (1L << (PARTITIONS - 646)) | (1L << (PARTNER - 646)) | (1L << (PATH - 646)) | (1L << (POISON_MESSAGE_HANDLING - 646)) | (1L << (POOL - 646)) | (1L << (PORT - 646)) | (1L << (PRECEDING - 646)) | (1L << (PRIMARY_ROLE - 646)) | (1L << (PRIOR - 646)) | (1L << (PRIORITY - 646)) | (1L << (PRIORITY_LEVEL - 646)) | (1L << (PRIVATE - 646)) | (1L << (PRIVATE_KEY - 646)) | (1L << (PRIVILEGES - 646)) | (1L << (PROCEDURE_NAME - 646)) | (1L << (PROPERTY - 646)) | (1L << (PROVIDER - 646)) | (1L << (PROVIDER_KEY_NAME - 646)) | (1L << (QUERY - 646)) | (1L << (QUEUE - 646)) | (1L << (QUEUE_DELAY - 646)) | (1L << (QUOTED_IDENTIFIER - 646)) | (1L << (RANGE - 646)) | (1L << (RANK - 646)) | (1L << (RC2 - 646)) | (1L << (RC4 - 646)) | (1L << (RC4_128 - 646)) | (1L << (READ_COMMITTED_SNAPSHOT - 646)) | (1L << (READ_ONLY - 646)) | (1L << (READ_ONLY_ROUTING_LIST - 646)) | (1L << (READ_WRITE - 646)) | (1L << (READONLY - 646)) | (1L << (REBUILD - 646)) | (1L << (RECEIVE - 646)) | (1L << (RECOMPILE - 646)) | (1L << (RECOVERY - 646)) | (1L << (RECURSIVE_TRIGGERS - 646)) | (1L << (RELATIVE - 646)) | (1L << (REMOTE - 646)) | (1L << (REMOTE_SERVICE_NAME - 646)) | (1L << (REMOVE - 646)) | (1L << (REORGANIZE - 646)) | (1L << (REPEATABLE - 646)) | (1L << (REPLICA - 646)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 646)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 646)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 646)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 646)) | (1L << (RESERVE_DISK_SPACE - 646)) | (1L << (RESOURCE - 646)) | (1L << (RESOURCE_MANAGER_LOCATION - 646)) | (1L << (RESTRICTED_USER - 646)) | (1L << (RETENTION - 646)) | (1L << (ROBUST - 646)) | (1L << (ROOT - 646)) | (1L << (ROUTE - 646)) | (1L << (ROW - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (ROWGUID - 646)) | (1L << (ROWS - 646)) | (1L << (SAMPLE - 646)))) != 0) || ((((_la - 710)) & ~0x3f) == 0 && ((1L << (_la - 710)) & ((1L << (SCHEMABINDING - 710)) | (1L << (SCOPED - 710)) | (1L << (SCROLL - 710)) | (1L << (SCROLL_LOCKS - 710)) | (1L << (SEARCH - 710)) | (1L << (SECONDARY - 710)) | (1L << (SECONDARY_ONLY - 710)) | (1L << (SECONDARY_ROLE - 710)) | (1L << (SECONDS - 710)) | (1L << (SECRET - 710)) | (1L << (SECURITY - 710)) | (1L << (SECURITY_LOG - 710)) | (1L << (SEEDING_MODE - 710)) | (1L << (SELF - 710)) | (1L << (SEMI_SENSITIVE - 710)) | (1L << (SEND - 710)) | (1L << (SENT - 710)) | (1L << (SEQUENCE - 710)) | (1L << (SERIALIZABLE - 710)) | (1L << (SESSION_TIMEOUT - 710)) | (1L << (SETERROR - 710)) | (1L << (SHARE - 710)) | (1L << (SHOWPLAN - 710)) | (1L << (SIGNATURE - 710)) | (1L << (SIMPLE - 710)) | (1L << (SINGLE_USER - 710)) | (1L << (SIZE - 710)) | (1L << (SMALLINT - 710)) | (1L << (SNAPSHOT - 710)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 710)) | (1L << (STANDBY - 710)) | (1L << (START_DATE - 710)) | (1L << (STATIC - 710)) | (1L << (STATS_STREAM - 710)) | (1L << (STATUS - 710)) | (1L << (STATUSONLY - 710)) | (1L << (STDEV - 710)) | (1L << (STDEVP - 710)) | (1L << (STOPLIST - 710)) | (1L << (STRING_AGG - 710)) | (1L << (STUFF - 710)) | (1L << (SUBJECT - 710)) | (1L << (SUBSCRIPTION - 710)) | (1L << (SUM - 710)) | (1L << (SUSPEND - 710)) | (1L << (SYMMETRIC - 710)) | (1L << (SYNCHRONOUS_COMMIT - 710)) | (1L << (SYNONYM - 710)) | (1L << (SYSTEM - 710)) | (1L << (TAKE - 710)) | (1L << (TARGET_RECOVERY_TIME - 710)) | (1L << (TB - 710)) | (1L << (TEXTIMAGE_ON - 710)) | (1L << (THROW - 710)) | (1L << (TIES - 710)) | (1L << (TIME - 710)) | (1L << (TIMEOUT - 710)) | (1L << (TIMER - 710)) | (1L << (TINYINT - 710)) | (1L << (TORN_PAGE_DETECTION - 710)) | (1L << (TRANSFORM_NOISE_WORDS - 710)) | (1L << (TRIPLE_DES - 710)) | (1L << (TRIPLE_DES_3KEY - 710)) | (1L << (TRUSTWORTHY - 710)))) != 0) || ((((_la - 774)) & ~0x3f) == 0 && ((1L << (_la - 774)) & ((1L << (TRY - 774)) | (1L << (TSQL - 774)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 774)) | (1L << (TYPE - 774)) | (1L << (TYPE_WARNING - 774)) | (1L << (UNBOUNDED - 774)) | (1L << (UNCOMMITTED - 774)) | (1L << (UNDEFINED - 774)) | (1L << (UNKNOWN - 774)) | (1L << (UNLIMITED - 774)) | (1L << (UOW - 774)) | (1L << (USING - 774)) | (1L << (VALID_XML - 774)) | (1L << (VALIDATION - 774)) | (1L << (VALUE - 774)) | (1L << (VAR - 774)) | (1L << (VARP - 774)) | (1L << (VIEW_METADATA - 774)) | (1L << (VIEWS - 774)) | (1L << (WAIT - 774)) | (1L << (WELL_FORMED_XML - 774)) | (1L << (WITHOUT_ARRAY_WRAPPER - 774)) | (1L << (WORK - 774)) | (1L << (WORKLOAD - 774)) | (1L << (XML - 774)) | (1L << (XMLDATA - 774)) | (1L << (XMLNAMESPACES - 774)) | (1L << (XMLSCHEMA - 774)) | (1L << (XSINIL - 774)) | (1L << (DOLLAR_ACTION - 774)) | (1L << (SPACE - 774)) | (1L << (COMMENT - 774)) | (1L << (LINE_COMMENT - 774)) | (1L << (DOUBLE_QUOTE_ID - 774)) | (1L << (SINGLE_QUOTE - 774)) | (1L << (SQUARE_BRACKET_ID - 774)) | (1L << (LOCAL_ID - 774)) | (1L << (DECIMAL - 774)) | (1L << (ID - 774)) | (1L << (QUOTED_URL - 774)) | (1L << (QUOTED_HOST_AND_PORT - 774)) | (1L << (STRING - 774)) | (1L << (BINARY - 774)) | (1L << (FLOAT - 774)) | (1L << (REAL - 774)) | (1L << (EQUAL - 774)) | (1L << (GREATER - 774)) | (1L << (LESS - 774)) | (1L << (EXCLAMATION - 774)) | (1L << (PLUS_ASSIGN - 774)) | (1L << (MINUS_ASSIGN - 774)) | (1L << (MULT_ASSIGN - 774)) | (1L << (DIV_ASSIGN - 774)) | (1L << (MOD_ASSIGN - 774)) | (1L << (AND_ASSIGN - 774)) | (1L << (XOR_ASSIGN - 774)) | (1L << (OR_ASSIGN - 774)) | (1L << (DOUBLE_BAR - 774)) | (1L << (DOT - 774)) | (1L << (UNDERLINE - 774)) | (1L << (AT - 774)) | (1L << (SHARP - 774)) | (1L << (DOLLAR - 774)) | (1L << (LR_BRACKET - 774)))) != 0) || ((((_la - 838)) & ~0x3f) == 0 && ((1L << (_la - 838)) & ((1L << (RR_BRACKET - 838)) | (1L << (COMMA - 838)) | (1L << (SEMI - 838)) | (1L << (COLON - 838)) | (1L << (STAR - 838)) | (1L << (DIVIDE - 838)) | (1L << (MODULE - 838)) | (1L << (PLUS - 838)) | (1L << (MINUS - 838)) | (1L << (BIT_NOT - 838)) | (1L << (BIT_OR - 838)) | (1L << (BIT_AND - 838)) | (1L << (BIT_XOR - 838)) | (1L << (MDY - 838)) | (1L << (DMY - 838)) | (1L << (YMD - 838)) | (1L << (YDM - 838)) | (1L << (MYD - 838)) | (1L << (DYM - 838)) | (1L << (IPV4_OCTECT - 838)))) != 0) );
				}
				break;
			case ALL:
				{
				State = 2820; Match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2823; Match(ON);
			State = 2833;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BACKSLASH:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONNECTION_OPTIONS:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DISK:
			case DOUBLE_BACK_SLASH:
			case DOUBLE_FORWARD_SLASH:
			case DTC_SUPPORT:
			case DUMP:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILENAME:
			case FILLFACTOR:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IDENTITYCOL:
			case IIF:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case IPV4_ADDR:
			case IPV6_ADDR:
			case ISNULL:
			case KERBEROS:
			case KEY:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOAD:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NATIVE_COMPILATION:
			case NEGOTIATE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case NULL:
			case OFFSETS:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PLATFORM:
			case POLICY:
			case PRECISION:
			case PREDICATE:
			case PROCESS:
			case PUBLIC:
			case PUSHDOWN:
			case PYTHON:
			case R:
			case RAW:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESULT_SETS:
			case RESUME:
			case RETAINDAYS:
			case RETURN:
			case RETURNS:
			case REWIND:
			case ROLE:
			case ROWCOUNT:
			case ROWGUIDCOL:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SECURITYAUDIT:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SESSION_USER:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case SYSTEM_USER:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case USER:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHIN:
			case WITHOUT:
			case WITNESS:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BUCKET_COUNT:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATEFIRST:
			case DATEFORMAT:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADOOP:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNDEFINED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case DOLLAR_ACTION:
			case SPACE:
			case COMMENT:
			case LINE_COMMENT:
			case DOUBLE_QUOTE_ID:
			case SINGLE_QUOTE:
			case SQUARE_BRACKET_ID:
			case LOCAL_ID:
			case DECIMAL:
			case ID:
			case QUOTED_URL:
			case QUOTED_HOST_AND_PORT:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case EQUAL:
			case GREATER:
			case LESS:
			case EXCLAMATION:
			case PLUS_ASSIGN:
			case MINUS_ASSIGN:
			case MULT_ASSIGN:
			case DIV_ASSIGN:
			case MOD_ASSIGN:
			case AND_ASSIGN:
			case XOR_ASSIGN:
			case OR_ASSIGN:
			case DOUBLE_BAR:
			case DOT:
			case UNDERLINE:
			case AT:
			case SHARP:
			case DOLLAR:
			case LR_BRACKET:
			case RR_BRACKET:
			case COMMA:
			case SEMI:
			case COLON:
			case STAR:
			case DIVIDE:
			case MODULE:
			case PLUS:
			case MINUS:
			case BIT_NOT:
			case BIT_OR:
			case BIT_AND:
			case BIT_XOR:
			case MDY:
			case DMY:
			case YMD:
			case YDM:
			case MYD:
			case DYM:
			case IPV4_OCTECT:
				{
				State = 2827;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,212,_ctx) ) {
				case 1:
					{
					State = 2824; _localctx.schema_id = id();
					State = 2825; Match(DOT);
					}
					break;
				}
				State = 2829; _localctx.object_name = id();
				}
				break;
			case DATABASE:
				{
				State = 2830; Match(DATABASE);
				}
				break;
			case ALL:
				{
				State = 2831; Match(ALL);
				State = 2832; Match(SERVER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lock_tableContext : ParserRuleContext {
		public IToken seconds;
		public ITerminalNode LOCK() { return GetToken(TSqlParser.LOCK, 0); }
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public Schema_object_nameContext schema_object_name() {
			return GetRuleContext<Schema_object_nameContext>(0);
		}
		public ITerminalNode IN() { return GetToken(TSqlParser.IN, 0); }
		public ITerminalNode MODE() { return GetToken(TSqlParser.MODE, 0); }
		public ITerminalNode SHARE() { return GetToken(TSqlParser.SHARE, 0); }
		public ITerminalNode EXCLUSIVE() { return GetToken(TSqlParser.EXCLUSIVE, 0); }
		public ITerminalNode WAIT() { return GetToken(TSqlParser.WAIT, 0); }
		public ITerminalNode NOWAIT() { return GetToken(TSqlParser.NOWAIT, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Lock_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lock_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterLock_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitLock_table(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLock_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lock_tableContext lock_table() {
		Lock_tableContext _localctx = new Lock_tableContext(_ctx, State);
		EnterRule(_localctx, 270, RULE_lock_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2835; Match(LOCK);
			State = 2836; Match(TABLE);
			State = 2837; schema_object_name();
			State = 2838; Match(IN);
			State = 2839;
			_la = _input.La(1);
			if ( !(_la==EXCLUSIVE || _la==SHARE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 2840; Match(MODE);
			State = 2844;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,214,_ctx) ) {
			case 1:
				{
				State = 2841; Match(WAIT);
				State = 2842; _localctx.seconds = Match(DECIMAL);
				}
				break;

			case 2:
				{
				State = 2843; Match(NOWAIT);
				}
				break;
			}
			State = 2847;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,215,_ctx) ) {
			case 1:
				{
				State = 2846; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Truncate_tableContext : ParserRuleContext {
		public ITerminalNode TRUNCATE() { return GetToken(TSqlParser.TRUNCATE, 0); }
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public Schema_object_nameContext schema_object_name() {
			return GetRuleContext<Schema_object_nameContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode PARTITIONS() { return GetToken(TSqlParser.PARTITIONS, 0); }
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Truncate_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_truncate_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTruncate_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTruncate_table(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTruncate_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Truncate_tableContext truncate_table() {
		Truncate_tableContext _localctx = new Truncate_tableContext(_ctx, State);
		EnterRule(_localctx, 272, RULE_truncate_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2849; Match(TRUNCATE);
			State = 2850; Match(TABLE);
			State = 2851; schema_object_name();
			State = 2871;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,219,_ctx) ) {
			case 1:
				{
				State = 2852; Match(WITH);
				State = 2853; Match(LR_BRACKET);
				State = 2854; Match(PARTITIONS);
				State = 2855; Match(LR_BRACKET);
				State = 2865;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 2857;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==COMMA) {
						{
						State = 2856; Match(COMMA);
						}
					}

					State = 2863;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,217,_ctx) ) {
					case 1:
						{
						State = 2859; Match(DECIMAL);
						}
						break;

					case 2:
						{
						State = 2860; Match(DECIMAL);
						State = 2861; Match(TO);
						State = 2862; Match(DECIMAL);
						}
						break;
					}
					}
					}
					State = 2867;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==DECIMAL || _la==COMMA );
				State = 2869; Match(RR_BRACKET);
				State = 2870; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_column_master_keyContext : ParserRuleContext {
		public IdContext key_name;
		public IToken key_store_provider_name;
		public IToken key_path;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode COLUMN() { return GetToken(TSqlParser.COLUMN, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode KEY_STORE_PROVIDER_NAME() { return GetToken(TSqlParser.KEY_STORE_PROVIDER_NAME, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode KEY_PATH() { return GetToken(TSqlParser.KEY_PATH, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public Create_column_master_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_column_master_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_column_master_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_column_master_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_column_master_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_column_master_keyContext create_column_master_key() {
		Create_column_master_keyContext _localctx = new Create_column_master_keyContext(_ctx, State);
		EnterRule(_localctx, 274, RULE_create_column_master_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2873; Match(CREATE);
			State = 2874; Match(COLUMN);
			State = 2875; Match(MASTER);
			State = 2876; Match(KEY);
			State = 2877; _localctx.key_name = id();
			State = 2878; Match(WITH);
			State = 2879; Match(LR_BRACKET);
			State = 2880; Match(KEY_STORE_PROVIDER_NAME);
			State = 2881; Match(EQUAL);
			State = 2882; _localctx.key_store_provider_name = Match(STRING);
			State = 2883; Match(COMMA);
			State = 2884; Match(KEY_PATH);
			State = 2885; Match(EQUAL);
			State = 2886; _localctx.key_path = Match(STRING);
			State = 2887; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_credentialContext : ParserRuleContext {
		public IdContext credential_name;
		public IToken identity_name;
		public IToken secret;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode CREDENTIAL() { return GetToken(TSqlParser.CREDENTIAL, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode IDENTITY() { return GetToken(TSqlParser.IDENTITY, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode SECRET() { return GetToken(TSqlParser.SECRET, 0); }
		public Alter_credentialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_credential; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_credential(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_credential(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_credential(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_credentialContext alter_credential() {
		Alter_credentialContext _localctx = new Alter_credentialContext(_ctx, State);
		EnterRule(_localctx, 276, RULE_alter_credential);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2889; Match(ALTER);
			State = 2890; Match(CREDENTIAL);
			State = 2891; _localctx.credential_name = id();
			State = 2892; Match(WITH);
			State = 2893; Match(IDENTITY);
			State = 2894; Match(EQUAL);
			State = 2895; _localctx.identity_name = Match(STRING);
			State = 2900;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,220,_ctx) ) {
			case 1:
				{
				State = 2896; Match(COMMA);
				State = 2897; Match(SECRET);
				State = 2898; Match(EQUAL);
				State = 2899; _localctx.secret = Match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_credentialContext : ParserRuleContext {
		public IdContext credential_name;
		public IToken identity_name;
		public IToken secret;
		public IdContext cryptographic_provider_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode CREDENTIAL() { return GetToken(TSqlParser.CREDENTIAL, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode IDENTITY() { return GetToken(TSqlParser.IDENTITY, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode SECRET() { return GetToken(TSqlParser.SECRET, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode CRYPTOGRAPHIC() { return GetToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public Create_credentialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_credential; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_credential(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_credential(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_credential(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_credentialContext create_credential() {
		Create_credentialContext _localctx = new Create_credentialContext(_ctx, State);
		EnterRule(_localctx, 278, RULE_create_credential);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2902; Match(CREATE);
			State = 2903; Match(CREDENTIAL);
			State = 2904; _localctx.credential_name = id();
			State = 2905; Match(WITH);
			State = 2906; Match(IDENTITY);
			State = 2907; Match(EQUAL);
			State = 2908; _localctx.identity_name = Match(STRING);
			State = 2913;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,221,_ctx) ) {
			case 1:
				{
				State = 2909; Match(COMMA);
				State = 2910; Match(SECRET);
				State = 2911; Match(EQUAL);
				State = 2912; _localctx.secret = Match(STRING);
				}
				break;
			}
			State = 2919;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==FOR) {
				{
				State = 2915; Match(FOR);
				State = 2916; Match(CRYPTOGRAPHIC);
				State = 2917; Match(PROVIDER);
				State = 2918; _localctx.cryptographic_provider_name = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_database_scoped_credentialContext : ParserRuleContext {
		public IdContext credential_name;
		public IToken identity_name;
		public IToken secret;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode SCOPED() { return GetToken(TSqlParser.SCOPED, 0); }
		public ITerminalNode CREDENTIAL() { return GetToken(TSqlParser.CREDENTIAL, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode IDENTITY() { return GetToken(TSqlParser.IDENTITY, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode SECRET() { return GetToken(TSqlParser.SECRET, 0); }
		public Create_database_scoped_credentialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_database_scoped_credential; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_database_scoped_credential(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_database_scoped_credential(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_database_scoped_credential(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_database_scoped_credentialContext create_database_scoped_credential() {
		Create_database_scoped_credentialContext _localctx = new Create_database_scoped_credentialContext(_ctx, State);
		EnterRule(_localctx, 280, RULE_create_database_scoped_credential);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2921; Match(CREATE);
			State = 2922; Match(DATABASE);
			State = 2923; Match(SCOPED);
			State = 2924; Match(CREDENTIAL);
			State = 2925; _localctx.credential_name = id();
			State = 2926; Match(WITH);
			State = 2927; Match(IDENTITY);
			State = 2928; Match(EQUAL);
			State = 2929; _localctx.identity_name = Match(STRING);
			State = 2934;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,223,_ctx) ) {
			case 1:
				{
				State = 2930; Match(COMMA);
				State = 2931; Match(SECRET);
				State = 2932; Match(EQUAL);
				State = 2933; _localctx.secret = Match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_cryptographic_providerContext : ParserRuleContext {
		public IdContext provider_name;
		public IToken crypto_provider_ddl_file;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode CRYPTOGRAPHIC() { return GetToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode ENABLE() { return GetToken(TSqlParser.ENABLE, 0); }
		public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		public Alter_cryptographic_providerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_cryptographic_provider; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_cryptographic_provider(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_cryptographic_provider(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_cryptographic_provider(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_cryptographic_providerContext alter_cryptographic_provider() {
		Alter_cryptographic_providerContext _localctx = new Alter_cryptographic_providerContext(_ctx, State);
		EnterRule(_localctx, 282, RULE_alter_cryptographic_provider);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2936; Match(ALTER);
			State = 2937; Match(CRYPTOGRAPHIC);
			State = 2938; Match(PROVIDER);
			State = 2939; _localctx.provider_name = id();
			State = 2944;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==FROM) {
				{
				State = 2940; Match(FROM);
				State = 2941; Match(FILE);
				State = 2942; Match(EQUAL);
				State = 2943; _localctx.crypto_provider_ddl_file = Match(STRING);
				}
			}

			State = 2947;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,225,_ctx) ) {
			case 1:
				{
				State = 2946;
				_la = _input.La(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_cryptographic_providerContext : ParserRuleContext {
		public IdContext provider_name;
		public IToken path_of_DLL;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode CRYPTOGRAPHIC() { return GetToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Create_cryptographic_providerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_cryptographic_provider; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_cryptographic_provider(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_cryptographic_provider(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_cryptographic_provider(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_cryptographic_providerContext create_cryptographic_provider() {
		Create_cryptographic_providerContext _localctx = new Create_cryptographic_providerContext(_ctx, State);
		EnterRule(_localctx, 284, RULE_create_cryptographic_provider);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2949; Match(CREATE);
			State = 2950; Match(CRYPTOGRAPHIC);
			State = 2951; Match(PROVIDER);
			State = 2952; _localctx.provider_name = id();
			State = 2953; Match(FROM);
			State = 2954; Match(FILE);
			State = 2955; Match(EQUAL);
			State = 2956; _localctx.path_of_DLL = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_event_notificationContext : ParserRuleContext {
		public IdContext event_notification_name;
		public IdContext queue_name;
		public IdContext event_type_or_group;
		public IToken broker_service;
		public IToken broker_service_specifier_or_current_database;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode EVENT() { return GetToken(TSqlParser.EVENT, 0); }
		public ITerminalNode NOTIFICATION() { return GetToken(TSqlParser.NOTIFICATION, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode FAN_IN() { return GetToken(TSqlParser.FAN_IN, 0); }
		public Create_event_notificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_event_notification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_event_notification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_event_notification(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_event_notification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_event_notificationContext create_event_notification() {
		Create_event_notificationContext _localctx = new Create_event_notificationContext(_ctx, State);
		EnterRule(_localctx, 286, RULE_create_event_notification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2958; Match(CREATE);
			State = 2959; Match(EVENT);
			State = 2960; Match(NOTIFICATION);
			State = 2961; _localctx.event_notification_name = id();
			State = 2962; Match(ON);
			State = 2967;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case SERVER:
				{
				State = 2963; Match(SERVER);
				}
				break;
			case DATABASE:
				{
				State = 2964; Match(DATABASE);
				}
				break;
			case QUEUE:
				{
				State = 2965; Match(QUEUE);
				State = 2966; _localctx.queue_name = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2971;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WITH) {
				{
				State = 2969; Match(WITH);
				State = 2970; Match(FAN_IN);
				}
			}

			State = 2973; Match(FOR);
			State = 2978;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 2975;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,228,_ctx) ) {
				case 1:
					{
					State = 2974; Match(COMMA);
					}
					break;
				}
				State = 2977; _localctx.event_type_or_group = id();
				}
				}
				State = 2980;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSENT) | (1L << AES) | (1L << ALLOW_CONNECTIONS) | (1L << ALLOW_MULTIPLE_EVENT_LOSS) | (1L << ALLOW_SINGLE_EVENT_LOSS) | (1L << ANONYMOUS) | (1L << APPEND) | (1L << APPLICATION) | (1L << ASYMMETRIC) | (1L << ASYNCHRONOUS_COMMIT) | (1L << AUTHENTICATION) | (1L << AUTOMATED_BACKUP_PREFERENCE) | (1L << AUTOMATIC) | (1L << AVAILABILITY_MODE) | (1L << BACKSLASH) | (1L << BEFORE) | (1L << BLOCK) | (1L << BLOCKSIZE) | (1L << BLOCKING_HIERARCHY) | (1L << BUFFER) | (1L << BUFFERCOUNT) | (1L << CACHE) | (1L << CALLED) | (1L << CERTIFICATE) | (1L << CHANGETABLE) | (1L << CHANGES) | (1L << CHECK_POLICY) | (1L << CHECK_EXPIRATION) | (1L << CLASSIFIER_FUNCTION) | (1L << CLUSTER) | (1L << COMPRESSION) | (1L << CONNECTION_OPTIONS) | (1L << CONFIGURATION) | (1L << CONTAINMENT))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CONTEXT - 65)) | (1L << (CONTINUE_AFTER_ERROR - 65)) | (1L << (CONTRACT - 65)) | (1L << (CONTRACT_NAME - 65)) | (1L << (CONVERSATION - 65)) | (1L << (COPY_ONLY - 65)) | (1L << (CURRENT_TIMESTAMP - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA_COMPRESSION - 65)) | (1L << (DATA_SOURCE - 65)) | (1L << (DATABASE_MIRRORING - 65)) | (1L << (DEFAULT_DATABASE - 65)) | (1L << (DEFAULT_SCHEMA - 65)) | (1L << (DIAGNOSTICS - 65)) | (1L << (DIFFERENTIAL - 65)) | (1L << (DISK - 65)) | (1L << (DOUBLE_BACK_SLASH - 65)) | (1L << (DOUBLE_FORWARD_SLASH - 65)) | (1L << (DTC_SUPPORT - 65)) | (1L << (DUMP - 65)) | (1L << (ENABLED - 65)) | (1L << (ENDPOINT - 65)) | (1L << (ERROR - 65)) | (1L << (EVENT - 65)) | (1L << (EVENTDATA - 65)) | (1L << (EVENT_RETENTION_MODE - 65)) | (1L << (EXECUTABLE_FILE - 65)) | (1L << (EXPIREDATE - 65)) | (1L << (EXTENSION - 65)) | (1L << (EXTERNAL_ACCESS - 65)) | (1L << (FAILOVER - 65)) | (1L << (FAILURECONDITIONLEVEL - 65)) | (1L << (FAN_IN - 65)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (FILENAME - 130)) | (1L << (FILLFACTOR - 130)) | (1L << (FILE_SNAPSHOT - 130)) | (1L << (FORCESEEK - 130)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 130)) | (1L << (GET - 130)) | (1L << (GOVERNOR - 130)) | (1L << (HASHED - 130)) | (1L << (HEALTHCHECKTIMEOUT - 130)) | (1L << (IDENTITYCOL - 130)) | (1L << (IIF - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCREMENT - 130)) | (1L << (INFINITE - 130)) | (1L << (INIT - 130)) | (1L << (INSTEAD - 130)) | (1L << (IPV4_ADDR - 130)) | (1L << (IPV6_ADDR - 130)) | (1L << (ISNULL - 130)) | (1L << (KERBEROS - 130)) | (1L << (KEY - 130)) | (1L << (KEY_PATH - 130)) | (1L << (KEY_STORE_PROVIDER_NAME - 130)) | (1L << (LANGUAGE - 130)) | (1L << (LIBRARY - 130)) | (1L << (LIFETIME - 130)) | (1L << (LINUX - 130)) | (1L << (LISTENER_IP - 130)) | (1L << (LISTENER_PORT - 130)) | (1L << (LOAD - 130)) | (1L << (LOCAL_SERVICE_NAME - 130)) | (1L << (LOG - 130)) | (1L << (MATCHED - 130)) | (1L << (MASTER - 130)) | (1L << (MAX_MEMORY - 130)) | (1L << (MAXTRANSFER - 130)) | (1L << (MAXVALUE - 130)) | (1L << (MAX_DISPATCH_LATENCY - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (MAX_EVENT_SIZE - 194)) | (1L << (MAX_SIZE - 194)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 194)) | (1L << (MEDIADESCRIPTION - 194)) | (1L << (MEDIANAME - 194)) | (1L << (MEMBER - 194)) | (1L << (MEMORY_PARTITION_MODE - 194)) | (1L << (MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT - 194)) | (1L << (MESSAGE_FORWARDING - 194)) | (1L << (MESSAGE_FORWARD_SIZE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MIRROR - 194)) | (1L << (MUST_CHANGE - 194)) | (1L << (NATIVE_COMPILATION - 194)) | (1L << (NEGOTIATE - 194)) | (1L << (NOFORMAT - 194)) | (1L << (NOINIT - 194)) | (1L << (NONE - 194)) | (1L << (NOREWIND - 194)) | (1L << (NOSKIP - 194)) | (1L << (NOUNLOAD - 194)) | (1L << (NO_CHECKSUM - 194)) | (1L << (NO_COMPRESSION - 194)) | (1L << (NO_EVENT_LOSS - 194)) | (1L << (NOTIFICATION - 194)) | (1L << (NTLM - 194)) | (1L << (NULL - 194)) | (1L << (OFFSETS - 194)) | (1L << (OLD_PASSWORD - 194)) | (1L << (ON_FAILURE - 194)) | (1L << (PAGE - 194)) | (1L << (PARAM_NODE - 194)) | (1L << (PARTIAL - 194)) | (1L << (PASSWORD - 194)) | (1L << (PERMISSION_SET - 194)) | (1L << (PER_CPU - 194)) | (1L << (PER_DB - 194)) | (1L << (PER_NODE - 194)) | (1L << (PLATFORM - 194)) | (1L << (POLICY - 194)) | (1L << (PRECISION - 194)) | (1L << (PREDICATE - 194)))) != 0) || ((((_la - 262)) & ~0x3f) == 0 && ((1L << (_la - 262)) & ((1L << (PROCESS - 262)) | (1L << (PUBLIC - 262)) | (1L << (PUSHDOWN - 262)) | (1L << (PYTHON - 262)) | (1L << (R - 262)) | (1L << (RAW - 262)) | (1L << (READ_WRITE_FILEGROUPS - 262)) | (1L << (REGENERATE - 262)) | (1L << (RELATED_CONVERSATION - 262)) | (1L << (RELATED_CONVERSATION_GROUP - 262)) | (1L << (REQUIRED - 262)) | (1L << (RESET - 262)) | (1L << (RESTART - 262)) | (1L << (RESULT_SETS - 262)) | (1L << (RESUME - 262)) | (1L << (RETAINDAYS - 262)) | (1L << (RETURN - 262)) | (1L << (RETURNS - 262)) | (1L << (REWIND - 262)) | (1L << (ROLE - 262)) | (1L << (ROWCOUNT - 262)) | (1L << (ROWGUIDCOL - 262)) | (1L << (RSA_512 - 262)) | (1L << (RSA_1024 - 262)) | (1L << (RSA_2048 - 262)) | (1L << (RSA_3072 - 262)) | (1L << (RSA_4096 - 262)) | (1L << (SAFETY - 262)) | (1L << (SAFE - 262)) | (1L << (SCHEDULER - 262)) | (1L << (SCHEME - 262)) | (1L << (SECURITYAUDIT - 262)) | (1L << (SERVER - 262)) | (1L << (SERVICE - 262)) | (1L << (SERVICE_BROKER - 262)) | (1L << (SERVICE_NAME - 262)) | (1L << (SESSION - 262)) | (1L << (SESSION_USER - 262)) | (1L << (SID - 262)) | (1L << (SKIP_KEYWORD - 262)) | (1L << (SOFTNUMA - 262)))) != 0) || ((((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & ((1L << (SOURCE - 326)) | (1L << (SPECIFICATION - 326)) | (1L << (SPLIT - 326)) | (1L << (SQLDUMPERFLAGS - 326)) | (1L << (SQLDUMPERPATH - 326)) | (1L << (SQLDUMPERTIMEOUT - 326)) | (1L << (STATE - 326)) | (1L << (STATS - 326)) | (1L << (START - 326)) | (1L << (STARTED - 326)) | (1L << (STARTUP_STATE - 326)) | (1L << (STOP - 326)) | (1L << (STOPPED - 326)) | (1L << (STOP_ON_ERROR - 326)) | (1L << (SUPPORTED - 326)) | (1L << (SYSTEM_USER - 326)) | (1L << (TAPE - 326)) | (1L << (TARGET - 326)) | (1L << (TCP - 326)) | (1L << (TRACK_CAUSALITY - 326)) | (1L << (TRANSFER - 326)) | (1L << (UNCHECKED - 326)) | (1L << (UNLOCK - 326)) | (1L << (UNSAFE - 326)) | (1L << (URL - 326)) | (1L << (USED - 326)) | (1L << (USER - 326)) | (1L << (VERBOSELOGGING - 326)) | (1L << (VISIBILITY - 326)) | (1L << (WINDOWS - 326)) | (1L << (WITHIN - 326)) | (1L << (WITHOUT - 326)) | (1L << (WITNESS - 326)) | (1L << (ABSOLUTE - 326)) | (1L << (ACCENT_SENSITIVITY - 326)) | (1L << (ACTION - 326)) | (1L << (ACTIVATION - 326)))) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & ((1L << (ACTIVE - 390)) | (1L << (ADDRESS - 390)) | (1L << (AES_128 - 390)) | (1L << (AES_192 - 390)) | (1L << (AES_256 - 390)) | (1L << (AFFINITY - 390)) | (1L << (AFTER - 390)) | (1L << (AGGREGATE - 390)) | (1L << (ALGORITHM - 390)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 390)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 390)) | (1L << (ALLOWED - 390)) | (1L << (ANSI_NULL_DEFAULT - 390)) | (1L << (ANSI_NULLS - 390)) | (1L << (ANSI_PADDING - 390)) | (1L << (ANSI_WARNINGS - 390)) | (1L << (APPLICATION_LOG - 390)) | (1L << (APPLY - 390)) | (1L << (ARITHABORT - 390)) | (1L << (ASSEMBLY - 390)) | (1L << (AUDIT - 390)) | (1L << (AUDIT_GUID - 390)) | (1L << (AUTO - 390)) | (1L << (AUTO_CLEANUP - 390)) | (1L << (AUTO_CLOSE - 390)) | (1L << (AUTO_CREATE_STATISTICS - 390)) | (1L << (AUTO_SHRINK - 390)) | (1L << (AUTO_UPDATE_STATISTICS - 390)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 390)) | (1L << (AVAILABILITY - 390)) | (1L << (AVG - 390)) | (1L << (BACKUP_PRIORITY - 390)) | (1L << (BEGIN_DIALOG - 390)) | (1L << (BIGINT - 390)) | (1L << (BINARY_BASE64 - 390)) | (1L << (BINARY_CHECKSUM - 390)) | (1L << (BINDING - 390)) | (1L << (BLOB_STORAGE - 390)) | (1L << (BROKER - 390)) | (1L << (BROKER_INSTANCE - 390)) | (1L << (BUCKET_COUNT - 390)) | (1L << (BULK_LOGGED - 390)) | (1L << (CALLER - 390)) | (1L << (CAP_CPU_PERCENT - 390)) | (1L << (CAST - 390)) | (1L << (CATALOG - 390)) | (1L << (CATCH - 390)) | (1L << (CHANGE_RETENTION - 390)) | (1L << (CHANGE_TRACKING - 390)) | (1L << (CHECKSUM - 390)) | (1L << (CHECKSUM_AGG - 390)) | (1L << (CLEANUP - 390)) | (1L << (COLLECTION - 390)) | (1L << (COLUMN_MASTER_KEY - 390)) | (1L << (COMMITTED - 390)) | (1L << (COMPATIBILITY_LEVEL - 390)) | (1L << (CONCAT - 390)) | (1L << (CONCAT_NULL_YIELDS_NULL - 390)) | (1L << (CONTENT - 390)) | (1L << (CONTROL - 390)) | (1L << (COOKIE - 390)) | (1L << (COUNT - 390)) | (1L << (COUNT_BIG - 390)) | (1L << (COUNTER - 390)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (CPU - 454)) | (1L << (CREATE_NEW - 454)) | (1L << (CREATION_DISPOSITION - 454)) | (1L << (CREDENTIAL - 454)) | (1L << (CRYPTOGRAPHIC - 454)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 454)) | (1L << (CURSOR_DEFAULT - 454)) | (1L << (DATA - 454)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 454)) | (1L << (DATEADD - 454)) | (1L << (DATEDIFF - 454)) | (1L << (DATEFIRST - 454)) | (1L << (DATEFORMAT - 454)) | (1L << (DATENAME - 454)) | (1L << (DATEPART - 454)) | (1L << (DAYS - 454)) | (1L << (DB_CHAINING - 454)) | (1L << (DB_FAILOVER - 454)) | (1L << (DECRYPTION - 454)) | (1L << (DEFAULT_DOUBLE_QUOTE - 454)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 454)) | (1L << (DEFAULT_LANGUAGE - 454)) | (1L << (DELAY - 454)) | (1L << (DELAYED_DURABILITY - 454)) | (1L << (DELETED - 454)) | (1L << (DENSE_RANK - 454)) | (1L << (DEPENDENTS - 454)) | (1L << (DES - 454)) | (1L << (DESCRIPTION - 454)) | (1L << (DESX - 454)) | (1L << (DHCP - 454)) | (1L << (DIALOG - 454)) | (1L << (DIRECTORY_NAME - 454)) | (1L << (DISABLE - 454)) | (1L << (DISABLE_BROKER - 454)) | (1L << (DISABLED - 454)) | (1L << (DISK_DRIVE - 454)) | (1L << (DOCUMENT - 454)) | (1L << (DYNAMIC - 454)) | (1L << (ELEMENTS - 454)) | (1L << (EMERGENCY - 454)) | (1L << (EMPTY - 454)) | (1L << (ENABLE - 454)) | (1L << (ENABLE_BROKER - 454)) | (1L << (ENCRYPTED_VALUE - 454)) | (1L << (ENCRYPTION - 454)) | (1L << (ENDPOINT_URL - 454)) | (1L << (ERROR_BROKER_CONVERSATIONS - 454)) | (1L << (EXCLUSIVE - 454)) | (1L << (EXECUTABLE - 454)) | (1L << (EXIST - 454)) | (1L << (EXPAND - 454)) | (1L << (EXPIRY_DATE - 454)) | (1L << (EXPLICIT - 454)) | (1L << (FAIL_OPERATION - 454)) | (1L << (FAILOVER_MODE - 454)) | (1L << (FAILURE - 454)) | (1L << (FAILURE_CONDITION_LEVEL - 454)) | (1L << (FAST - 454)) | (1L << (FAST_FORWARD - 454)) | (1L << (FILEGROUP - 454)) | (1L << (FILEGROWTH - 454)) | (1L << (FILEPATH - 454)) | (1L << (FILESTREAM - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (FILTER - 518)) | (1L << (FIRST - 518)) | (1L << (FIRST_VALUE - 518)) | (1L << (FOLLOWING - 518)) | (1L << (FORCE - 518)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 518)) | (1L << (FORCED - 518)) | (1L << (FORMAT - 518)) | (1L << (FORWARD_ONLY - 518)) | (1L << (FULLSCAN - 518)) | (1L << (FULLTEXT - 518)) | (1L << (GB - 518)) | (1L << (GETDATE - 518)) | (1L << (GETUTCDATE - 518)) | (1L << (GLOBAL - 518)) | (1L << (GO - 518)) | (1L << (GROUP_MAX_REQUESTS - 518)) | (1L << (GROUPING - 518)) | (1L << (GROUPING_ID - 518)) | (1L << (HADOOP - 518)) | (1L << (HADR - 518)) | (1L << (HASH - 518)) | (1L << (HEALTH_CHECK_TIMEOUT - 518)) | (1L << (HIGH - 518)) | (1L << (HONOR_BROKER_PRIORITY - 518)) | (1L << (HOURS - 518)) | (1L << (IDENTITY_VALUE - 518)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 518)) | (1L << (IMMEDIATE - 518)) | (1L << (IMPERSONATE - 518)) | (1L << (IMPORTANCE - 518)) | (1L << (INCLUDE_NULL_VALUES - 518)) | (1L << (INCREMENTAL - 518)) | (1L << (INITIATOR - 518)) | (1L << (INPUT - 518)) | (1L << (INSENSITIVE - 518)) | (1L << (INSERTED - 518)) | (1L << (INT - 518)) | (1L << (IP - 518)) | (1L << (ISOLATION - 518)) | (1L << (JOB - 518)) | (1L << (JSON - 518)) | (1L << (KB - 518)) | (1L << (KEEP - 518)) | (1L << (KEEPFIXED - 518)) | (1L << (KEY_SOURCE - 518)) | (1L << (KEYS - 518)) | (1L << (KEYSET - 518)) | (1L << (LAG - 518)) | (1L << (LAST - 518)) | (1L << (LAST_VALUE - 518)) | (1L << (LEAD - 518)) | (1L << (LEVEL - 518)) | (1L << (LIST - 518)) | (1L << (LISTENER - 518)) | (1L << (LISTENER_URL - 518)) | (1L << (LOB_COMPACTION - 518)) | (1L << (LOCAL - 518)) | (1L << (LOCATION - 518)) | (1L << (LOCK - 518)) | (1L << (LOCK_ESCALATION - 518)) | (1L << (LOGIN - 518)) | (1L << (LOOP - 518)) | (1L << (LOW - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (MANUAL - 582)) | (1L << (MARK - 582)) | (1L << (MATERIALIZED - 582)) | (1L << (MAX - 582)) | (1L << (MAX_CPU_PERCENT - 582)) | (1L << (MAX_DOP - 582)) | (1L << (MAX_FILES - 582)) | (1L << (MAX_IOPS_PER_VOLUME - 582)) | (1L << (MAX_MEMORY_PERCENT - 582)) | (1L << (MAX_PROCESSES - 582)) | (1L << (MAX_QUEUE_READERS - 582)) | (1L << (MAX_ROLLOVER_FILES - 582)) | (1L << (MAXDOP - 582)) | (1L << (MAXRECURSION - 582)) | (1L << (MAXSIZE - 582)) | (1L << (MB - 582)) | (1L << (MEDIUM - 582)) | (1L << (MEMORY_OPTIMIZED_DATA - 582)) | (1L << (MESSAGE - 582)) | (1L << (MIN - 582)) | (1L << (MIN_ACTIVE_ROWVERSION - 582)) | (1L << (MIN_CPU_PERCENT - 582)) | (1L << (MIN_IOPS_PER_VOLUME - 582)) | (1L << (MIN_MEMORY_PERCENT - 582)) | (1L << (MINUTES - 582)) | (1L << (MIRROR_ADDRESS - 582)) | (1L << (MIXED_PAGE_ALLOCATION - 582)) | (1L << (MODE - 582)) | (1L << (MODIFY - 582)) | (1L << (MOVE - 582)) | (1L << (MULTI_USER - 582)) | (1L << (NAME - 582)) | (1L << (NESTED_TRIGGERS - 582)) | (1L << (NEW_ACCOUNT - 582)) | (1L << (NEW_BROKER - 582)) | (1L << (NEW_PASSWORD - 582)) | (1L << (NEXT - 582)) | (1L << (NO - 582)) | (1L << (NO_TRUNCATE - 582)) | (1L << (NO_WAIT - 582)) | (1L << (NOCOUNT - 582)) | (1L << (NODES - 582)) | (1L << (NOEXPAND - 582)) | (1L << (NON_TRANSACTED_ACCESS - 582)) | (1L << (NORECOMPUTE - 582)) | (1L << (NORECOVERY - 582)) | (1L << (NOWAIT - 582)) | (1L << (NTILE - 582)) | (1L << (NUMANODE - 582)) | (1L << (NUMBER - 582)) | (1L << (NUMERIC_ROUNDABORT - 582)) | (1L << (OBJECT - 582)) | (1L << (OFFLINE - 582)) | (1L << (OFFSET - 582)) | (1L << (OLD_ACCOUNT - 582)) | (1L << (ONLINE - 582)) | (1L << (ONLY - 582)) | (1L << (OPEN_EXISTING - 582)) | (1L << (OPTIMISTIC - 582)) | (1L << (OPTIMIZE - 582)) | (1L << (OUT - 582)) | (1L << (OUTPUT - 582)) | (1L << (OVERRIDE - 582)) | (1L << (OWNER - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (PAGE_VERIFY - 646)) | (1L << (PARAMETERIZATION - 646)) | (1L << (PARTITION - 646)) | (1L << (PARTITIONS - 646)) | (1L << (PARTNER - 646)) | (1L << (PATH - 646)) | (1L << (POISON_MESSAGE_HANDLING - 646)) | (1L << (POOL - 646)) | (1L << (PORT - 646)) | (1L << (PRECEDING - 646)) | (1L << (PRIMARY_ROLE - 646)) | (1L << (PRIOR - 646)) | (1L << (PRIORITY - 646)) | (1L << (PRIORITY_LEVEL - 646)) | (1L << (PRIVATE - 646)) | (1L << (PRIVATE_KEY - 646)) | (1L << (PRIVILEGES - 646)) | (1L << (PROCEDURE_NAME - 646)) | (1L << (PROPERTY - 646)) | (1L << (PROVIDER - 646)) | (1L << (PROVIDER_KEY_NAME - 646)) | (1L << (QUERY - 646)) | (1L << (QUEUE - 646)) | (1L << (QUEUE_DELAY - 646)) | (1L << (QUOTED_IDENTIFIER - 646)) | (1L << (RANGE - 646)) | (1L << (RANK - 646)) | (1L << (RC2 - 646)) | (1L << (RC4 - 646)) | (1L << (RC4_128 - 646)) | (1L << (READ_COMMITTED_SNAPSHOT - 646)) | (1L << (READ_ONLY - 646)) | (1L << (READ_ONLY_ROUTING_LIST - 646)) | (1L << (READ_WRITE - 646)) | (1L << (READONLY - 646)) | (1L << (REBUILD - 646)) | (1L << (RECEIVE - 646)) | (1L << (RECOMPILE - 646)) | (1L << (RECOVERY - 646)) | (1L << (RECURSIVE_TRIGGERS - 646)) | (1L << (RELATIVE - 646)) | (1L << (REMOTE - 646)) | (1L << (REMOTE_SERVICE_NAME - 646)) | (1L << (REMOVE - 646)) | (1L << (REORGANIZE - 646)) | (1L << (REPEATABLE - 646)) | (1L << (REPLICA - 646)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 646)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 646)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 646)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 646)) | (1L << (RESERVE_DISK_SPACE - 646)) | (1L << (RESOURCE - 646)) | (1L << (RESOURCE_MANAGER_LOCATION - 646)) | (1L << (RESTRICTED_USER - 646)) | (1L << (RETENTION - 646)) | (1L << (ROBUST - 646)) | (1L << (ROOT - 646)) | (1L << (ROUTE - 646)) | (1L << (ROW - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (ROWGUID - 646)) | (1L << (ROWS - 646)) | (1L << (SAMPLE - 646)))) != 0) || ((((_la - 710)) & ~0x3f) == 0 && ((1L << (_la - 710)) & ((1L << (SCHEMABINDING - 710)) | (1L << (SCOPED - 710)) | (1L << (SCROLL - 710)) | (1L << (SCROLL_LOCKS - 710)) | (1L << (SEARCH - 710)) | (1L << (SECONDARY - 710)) | (1L << (SECONDARY_ONLY - 710)) | (1L << (SECONDARY_ROLE - 710)) | (1L << (SECONDS - 710)) | (1L << (SECRET - 710)) | (1L << (SECURITY - 710)) | (1L << (SECURITY_LOG - 710)) | (1L << (SEEDING_MODE - 710)) | (1L << (SELF - 710)) | (1L << (SEMI_SENSITIVE - 710)) | (1L << (SEND - 710)) | (1L << (SENT - 710)) | (1L << (SEQUENCE - 710)) | (1L << (SERIALIZABLE - 710)) | (1L << (SESSION_TIMEOUT - 710)) | (1L << (SETERROR - 710)) | (1L << (SHARE - 710)) | (1L << (SHOWPLAN - 710)) | (1L << (SIGNATURE - 710)) | (1L << (SIMPLE - 710)) | (1L << (SINGLE_USER - 710)) | (1L << (SIZE - 710)) | (1L << (SMALLINT - 710)) | (1L << (SNAPSHOT - 710)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 710)) | (1L << (STANDBY - 710)) | (1L << (START_DATE - 710)) | (1L << (STATIC - 710)) | (1L << (STATS_STREAM - 710)) | (1L << (STATUS - 710)) | (1L << (STATUSONLY - 710)) | (1L << (STDEV - 710)) | (1L << (STDEVP - 710)) | (1L << (STOPLIST - 710)) | (1L << (STRING_AGG - 710)) | (1L << (STUFF - 710)) | (1L << (SUBJECT - 710)) | (1L << (SUBSCRIPTION - 710)) | (1L << (SUM - 710)) | (1L << (SUSPEND - 710)) | (1L << (SYMMETRIC - 710)) | (1L << (SYNCHRONOUS_COMMIT - 710)) | (1L << (SYNONYM - 710)) | (1L << (SYSTEM - 710)) | (1L << (TAKE - 710)) | (1L << (TARGET_RECOVERY_TIME - 710)) | (1L << (TB - 710)) | (1L << (TEXTIMAGE_ON - 710)) | (1L << (THROW - 710)) | (1L << (TIES - 710)) | (1L << (TIME - 710)) | (1L << (TIMEOUT - 710)) | (1L << (TIMER - 710)) | (1L << (TINYINT - 710)) | (1L << (TORN_PAGE_DETECTION - 710)) | (1L << (TRANSFORM_NOISE_WORDS - 710)) | (1L << (TRIPLE_DES - 710)) | (1L << (TRIPLE_DES_3KEY - 710)) | (1L << (TRUSTWORTHY - 710)))) != 0) || ((((_la - 774)) & ~0x3f) == 0 && ((1L << (_la - 774)) & ((1L << (TRY - 774)) | (1L << (TSQL - 774)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 774)) | (1L << (TYPE - 774)) | (1L << (TYPE_WARNING - 774)) | (1L << (UNBOUNDED - 774)) | (1L << (UNCOMMITTED - 774)) | (1L << (UNDEFINED - 774)) | (1L << (UNKNOWN - 774)) | (1L << (UNLIMITED - 774)) | (1L << (UOW - 774)) | (1L << (USING - 774)) | (1L << (VALID_XML - 774)) | (1L << (VALIDATION - 774)) | (1L << (VALUE - 774)) | (1L << (VAR - 774)) | (1L << (VARP - 774)) | (1L << (VIEW_METADATA - 774)) | (1L << (VIEWS - 774)) | (1L << (WAIT - 774)) | (1L << (WELL_FORMED_XML - 774)) | (1L << (WITHOUT_ARRAY_WRAPPER - 774)) | (1L << (WORK - 774)) | (1L << (WORKLOAD - 774)) | (1L << (XML - 774)) | (1L << (XMLDATA - 774)) | (1L << (XMLNAMESPACES - 774)) | (1L << (XMLSCHEMA - 774)) | (1L << (XSINIL - 774)) | (1L << (DOLLAR_ACTION - 774)) | (1L << (SPACE - 774)) | (1L << (COMMENT - 774)) | (1L << (LINE_COMMENT - 774)) | (1L << (DOUBLE_QUOTE_ID - 774)) | (1L << (SINGLE_QUOTE - 774)) | (1L << (SQUARE_BRACKET_ID - 774)) | (1L << (LOCAL_ID - 774)) | (1L << (DECIMAL - 774)) | (1L << (ID - 774)) | (1L << (QUOTED_URL - 774)) | (1L << (QUOTED_HOST_AND_PORT - 774)) | (1L << (STRING - 774)) | (1L << (BINARY - 774)) | (1L << (FLOAT - 774)) | (1L << (REAL - 774)) | (1L << (EQUAL - 774)) | (1L << (GREATER - 774)) | (1L << (LESS - 774)) | (1L << (EXCLAMATION - 774)) | (1L << (PLUS_ASSIGN - 774)) | (1L << (MINUS_ASSIGN - 774)) | (1L << (MULT_ASSIGN - 774)) | (1L << (DIV_ASSIGN - 774)) | (1L << (MOD_ASSIGN - 774)) | (1L << (AND_ASSIGN - 774)) | (1L << (XOR_ASSIGN - 774)) | (1L << (OR_ASSIGN - 774)) | (1L << (DOUBLE_BAR - 774)) | (1L << (DOT - 774)) | (1L << (UNDERLINE - 774)) | (1L << (AT - 774)) | (1L << (SHARP - 774)) | (1L << (DOLLAR - 774)) | (1L << (LR_BRACKET - 774)))) != 0) || ((((_la - 838)) & ~0x3f) == 0 && ((1L << (_la - 838)) & ((1L << (RR_BRACKET - 838)) | (1L << (COMMA - 838)) | (1L << (SEMI - 838)) | (1L << (COLON - 838)) | (1L << (STAR - 838)) | (1L << (DIVIDE - 838)) | (1L << (MODULE - 838)) | (1L << (PLUS - 838)) | (1L << (MINUS - 838)) | (1L << (BIT_NOT - 838)) | (1L << (BIT_OR - 838)) | (1L << (BIT_AND - 838)) | (1L << (BIT_XOR - 838)) | (1L << (MDY - 838)) | (1L << (DMY - 838)) | (1L << (YMD - 838)) | (1L << (YDM - 838)) | (1L << (MYD - 838)) | (1L << (DYM - 838)) | (1L << (IPV4_OCTECT - 838)))) != 0) );
			State = 2982; Match(TO);
			State = 2983; Match(SERVICE);
			State = 2984; _localctx.broker_service = Match(STRING);
			State = 2985; Match(COMMA);
			State = 2986; _localctx.broker_service_specifier_or_current_database = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_or_alter_event_sessionContext : ParserRuleContext {
		public IdContext event_session_name;
		public IdContext event_module_guid;
		public IdContext event_package_name;
		public IdContext event_name;
		public IdContext event_customizable_attributue;
		public IdContext action_name;
		public IdContext target_name;
		public IdContext target_parameter_name;
		public IToken max_memory;
		public IToken max_dispatch_latency_seconds;
		public IToken max_event_size;
		public ITerminalNode[] EVENT() { return GetTokens(TSqlParser.EVENT); }
		public ITerminalNode EVENT(int i) {
			return GetToken(TSqlParser.EVENT, i);
		}
		public ITerminalNode SESSION() { return GetToken(TSqlParser.SESSION, 0); }
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] ADD() { return GetTokens(TSqlParser.ADD); }
		public ITerminalNode ADD(int i) {
			return GetToken(TSqlParser.ADD, i);
		}
		public ITerminalNode[] DROP() { return GetTokens(TSqlParser.DROP); }
		public ITerminalNode DROP(int i) {
			return GetToken(TSqlParser.DROP, i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public ITerminalNode[] TARGET() { return GetTokens(TSqlParser.TARGET); }
		public ITerminalNode TARGET(int i) {
			return GetToken(TSqlParser.TARGET, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode START() { return GetToken(TSqlParser.START, 0); }
		public ITerminalNode STOP() { return GetToken(TSqlParser.STOP, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] SET() { return GetTokens(TSqlParser.SET); }
		public ITerminalNode SET(int i) {
			return GetToken(TSqlParser.SET, i);
		}
		public ITerminalNode MAX_MEMORY() { return GetToken(TSqlParser.MAX_MEMORY, 0); }
		public ITerminalNode EVENT_RETENTION_MODE() { return GetToken(TSqlParser.EVENT_RETENTION_MODE, 0); }
		public ITerminalNode MAX_DISPATCH_LATENCY() { return GetToken(TSqlParser.MAX_DISPATCH_LATENCY, 0); }
		public ITerminalNode MAX_EVENT_SIZE() { return GetToken(TSqlParser.MAX_EVENT_SIZE, 0); }
		public ITerminalNode MEMORY_PARTITION_MODE() { return GetToken(TSqlParser.MEMORY_PARTITION_MODE, 0); }
		public ITerminalNode TRACK_CAUSALITY() { return GetToken(TSqlParser.TRACK_CAUSALITY, 0); }
		public ITerminalNode STARTUP_STATE() { return GetToken(TSqlParser.STARTUP_STATE, 0); }
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] KB() { return GetTokens(TSqlParser.KB); }
		public ITerminalNode KB(int i) {
			return GetToken(TSqlParser.KB, i);
		}
		public ITerminalNode[] MB() { return GetTokens(TSqlParser.MB); }
		public ITerminalNode MB(int i) {
			return GetToken(TSqlParser.MB, i);
		}
		public ITerminalNode ALLOW_SINGLE_EVENT_LOSS() { return GetToken(TSqlParser.ALLOW_SINGLE_EVENT_LOSS, 0); }
		public ITerminalNode ALLOW_MULTIPLE_EVENT_LOSS() { return GetToken(TSqlParser.ALLOW_MULTIPLE_EVENT_LOSS, 0); }
		public ITerminalNode NO_EVENT_LOSS() { return GetToken(TSqlParser.NO_EVENT_LOSS, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode PER_NODE() { return GetToken(TSqlParser.PER_NODE, 0); }
		public ITerminalNode PER_CPU() { return GetToken(TSqlParser.PER_CPU, 0); }
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode SECONDS() { return GetToken(TSqlParser.SECONDS, 0); }
		public ITerminalNode INFINITE() { return GetToken(TSqlParser.INFINITE, 0); }
		public ITerminalNode[] ACTION() { return GetTokens(TSqlParser.ACTION); }
		public ITerminalNode ACTION(int i) {
			return GetToken(TSqlParser.ACTION, i);
		}
		public ITerminalNode[] WHERE() { return GetTokens(TSqlParser.WHERE); }
		public ITerminalNode WHERE(int i) {
			return GetToken(TSqlParser.WHERE, i);
		}
		public Event_session_predicate_expressionContext[] event_session_predicate_expression() {
			return GetRuleContexts<Event_session_predicate_expressionContext>();
		}
		public Event_session_predicate_expressionContext event_session_predicate_expression(int i) {
			return GetRuleContext<Event_session_predicate_expressionContext>(i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public Create_or_alter_event_sessionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_or_alter_event_session; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_or_alter_event_session(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_or_alter_event_session(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_or_alter_event_session(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_or_alter_event_sessionContext create_or_alter_event_session() {
		Create_or_alter_event_sessionContext _localctx = new Create_or_alter_event_sessionContext(_ctx, State);
		EnterRule(_localctx, 288, RULE_create_or_alter_event_session);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2988;
			_la = _input.La(1);
			if ( !(_la==ALTER || _la==CREATE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 2989; Match(EVENT);
			State = 2990; Match(SESSION);
			State = 2991; _localctx.event_session_name = id();
			State = 2992; Match(ON);
			State = 2993; Match(SERVER);
			State = 3061;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,241,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2995;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==COMMA) {
						{
						State = 2994; Match(COMMA);
						}
					}

					State = 2997; Match(ADD);
					State = 2998; Match(EVENT);
					{
					State = 3002;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,231,_ctx) ) {
					case 1:
						{
						State = 2999; _localctx.event_module_guid = id();
						State = 3000; Match(DOT);
						}
						break;
					}
					State = 3004; _localctx.event_package_name = id();
					State = 3005; Match(DOT);
					State = 3006; _localctx.event_name = id();
					}
					State = 3056;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,240,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 3008; Match(LR_BRACKET);
							State = 3022;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==SET) {
								{
								State = 3009; Match(SET);
								State = 3019;
								_errHandler.Sync(this);
								_alt = Interpreter.AdaptivePredict(_input,233,_ctx);
								while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
									if ( _alt==1 ) {
										{
										{
										State = 3011;
										_errHandler.Sync(this);
										switch ( Interpreter.AdaptivePredict(_input,232,_ctx) ) {
										case 1:
											{
											State = 3010; Match(COMMA);
											}
											break;
										}
										State = 3013; _localctx.event_customizable_attributue = id();
										State = 3014; Match(EQUAL);
										State = 3015;
										_la = _input.La(1);
										if ( !(_la==DECIMAL || _la==STRING) ) {
										_errHandler.RecoverInline(this);
										} else {
											if (_input.La(1) == TokenConstants.Eof) {
												matchedEOF = true;
											}

											_errHandler.ReportMatch(this);
											Consume();
										}
										}
										} 
									}
									State = 3021;
									_errHandler.Sync(this);
									_alt = Interpreter.AdaptivePredict(_input,233,_ctx);
								}
								}
							}

							State = 3044;
							_errHandler.Sync(this);
							_la = _input.La(1);
							do {
								{
								{
								State = 3024; Match(ACTION);
								State = 3025; Match(LR_BRACKET);
								State = 3038;
								_errHandler.Sync(this);
								_alt = 1;
								do {
									switch (_alt) {
									case 1:
										{
										{
										State = 3027;
										_errHandler.Sync(this);
										switch ( Interpreter.AdaptivePredict(_input,235,_ctx) ) {
										case 1:
											{
											State = 3026; Match(COMMA);
											}
											break;
										}
										State = 3032;
										_errHandler.Sync(this);
										switch ( Interpreter.AdaptivePredict(_input,236,_ctx) ) {
										case 1:
											{
											State = 3029; _localctx.event_module_guid = id();
											State = 3030; Match(DOT);
											}
											break;
										}
										State = 3034; _localctx.event_package_name = id();
										State = 3035; Match(DOT);
										State = 3036; _localctx.action_name = id();
										}
										}
										break;
									default:
										throw new NoViableAltException(this);
									}
									State = 3040;
									_errHandler.Sync(this);
									_alt = Interpreter.AdaptivePredict(_input,237,_ctx);
								} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
								State = 3042; Match(RR_BRACKET);
								}
								}
								State = 3046;
								_errHandler.Sync(this);
								_la = _input.La(1);
							} while ( _la==ACTION );
							State = 3050;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==WHERE) {
								{
								State = 3048; Match(WHERE);
								State = 3049; event_session_predicate_expression();
								}
							}

							State = 3052; Match(RR_BRACKET);
							}
							} 
						}
						State = 3058;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,240,_ctx);
					}
					}
					} 
				}
				State = 3063;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,241,_ctx);
			}
			State = 3080;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,244,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 3065;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==COMMA) {
						{
						State = 3064; Match(COMMA);
						}
					}

					State = 3067; Match(DROP);
					State = 3068; Match(EVENT);
					State = 3072;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,243,_ctx) ) {
					case 1:
						{
						State = 3069; _localctx.event_module_guid = id();
						State = 3070; Match(DOT);
						}
						break;
					}
					State = 3074; _localctx.event_package_name = id();
					State = 3075; Match(DOT);
					State = 3076; _localctx.event_name = id();
					}
					} 
				}
				State = 3082;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,244,_ctx);
			}
			State = 3124;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==ADD) {
				{
				{
				{
				State = 3083; Match(ADD);
				State = 3084; Match(TARGET);
				State = 3088;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,245,_ctx) ) {
				case 1:
					{
					State = 3085; _localctx.event_module_guid = id();
					State = 3086; Match(DOT);
					}
					break;
				}
				State = 3090; _localctx.event_package_name = id();
				State = 3091; Match(DOT);
				State = 3092; _localctx.target_name = id();
				}
				State = 3119;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,251,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 3094; Match(LR_BRACKET);
						State = 3095; Match(SET);
						State = 3111;
						_errHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 3097;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,246,_ctx) ) {
								case 1:
									{
									State = 3096; Match(COMMA);
									}
									break;
								}
								State = 3099; _localctx.target_parameter_name = id();
								State = 3100; Match(EQUAL);
								State = 3109;
								_errHandler.Sync(this);
								switch (_input.La(1)) {
								case DECIMAL:
								case LR_BRACKET:
									{
									State = 3102;
									_errHandler.Sync(this);
									_la = _input.La(1);
									if (_la==LR_BRACKET) {
										{
										State = 3101; Match(LR_BRACKET);
										}
									}

									State = 3104; Match(DECIMAL);
									State = 3106;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,248,_ctx) ) {
									case 1:
										{
										State = 3105; Match(RR_BRACKET);
										}
										break;
									}
									}
									break;
								case STRING:
									{
									State = 3108; Match(STRING);
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 3113;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,250,_ctx);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
						State = 3115; Match(RR_BRACKET);
						}
						} 
					}
					State = 3121;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,251,_ctx);
				}
				}
				}
				State = 3126;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 3140;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,254,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 3127; Match(DROP);
					State = 3128; Match(TARGET);
					State = 3132;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,253,_ctx) ) {
					case 1:
						{
						State = 3129; _localctx.event_module_guid = id();
						State = 3130; Match(DOT);
						}
						break;
					}
					State = 3134; _localctx.event_package_name = id();
					State = 3135; Match(DOT);
					State = 3136; _localctx.target_name = id();
					}
					} 
				}
				State = 3142;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,254,_ctx);
			}
			State = 3208;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,270,_ctx) ) {
			case 1:
				{
				State = 3143; Match(WITH);
				State = 3144; Match(LR_BRACKET);
				State = 3152;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,256,_ctx) ) {
				case 1:
					{
					State = 3146;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==COMMA) {
						{
						State = 3145; Match(COMMA);
						}
					}

					State = 3148; Match(MAX_MEMORY);
					State = 3149; Match(EQUAL);
					State = 3150; _localctx.max_memory = Match(DECIMAL);
					State = 3151;
					_la = _input.La(1);
					if ( !(_la==KB || _la==MB) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 3160;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,258,_ctx) ) {
				case 1:
					{
					State = 3155;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==COMMA) {
						{
						State = 3154; Match(COMMA);
						}
					}

					State = 3157; Match(EVENT_RETENTION_MODE);
					State = 3158; Match(EQUAL);
					State = 3159;
					_la = _input.La(1);
					if ( !(_la==ALLOW_MULTIPLE_EVENT_LOSS || _la==ALLOW_SINGLE_EVENT_LOSS || _la==NO_EVENT_LOSS) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 3172;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,261,_ctx) ) {
				case 1:
					{
					State = 3163;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==COMMA) {
						{
						State = 3162; Match(COMMA);
						}
					}

					State = 3165; Match(MAX_DISPATCH_LATENCY);
					State = 3166; Match(EQUAL);
					State = 3170;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case DECIMAL:
						{
						State = 3167; _localctx.max_dispatch_latency_seconds = Match(DECIMAL);
						State = 3168; Match(SECONDS);
						}
						break;
					case INFINITE:
						{
						State = 3169; Match(INFINITE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				State = 3181;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,263,_ctx) ) {
				case 1:
					{
					State = 3175;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==COMMA) {
						{
						State = 3174; Match(COMMA);
						}
					}

					State = 3177; Match(MAX_EVENT_SIZE);
					State = 3178; Match(EQUAL);
					State = 3179; _localctx.max_event_size = Match(DECIMAL);
					State = 3180;
					_la = _input.La(1);
					if ( !(_la==KB || _la==MB) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 3189;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,265,_ctx) ) {
				case 1:
					{
					State = 3184;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==COMMA) {
						{
						State = 3183; Match(COMMA);
						}
					}

					State = 3186; Match(MEMORY_PARTITION_MODE);
					State = 3187; Match(EQUAL);
					State = 3188;
					_la = _input.La(1);
					if ( !(((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (NONE - 215)) | (1L << (PER_CPU - 215)) | (1L << (PER_NODE - 215)))) != 0)) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 3197;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,267,_ctx) ) {
				case 1:
					{
					State = 3192;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==COMMA) {
						{
						State = 3191; Match(COMMA);
						}
					}

					State = 3194; Match(TRACK_CAUSALITY);
					State = 3195; Match(EQUAL);
					State = 3196;
					_la = _input.La(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 3205;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==STARTUP_STATE || _la==COMMA) {
					{
					State = 3200;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==COMMA) {
						{
						State = 3199; Match(COMMA);
						}
					}

					State = 3202; Match(STARTUP_STATE);
					State = 3203; Match(EQUAL);
					State = 3204;
					_la = _input.La(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
				}

				State = 3207; Match(RR_BRACKET);
				}
				break;
			}
			State = 3213;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,271,_ctx) ) {
			case 1:
				{
				State = 3210; Match(STATE);
				State = 3211; Match(EQUAL);
				State = 3212;
				_la = _input.La(1);
				if ( !(_la==START || _la==STOP) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_session_predicate_expressionContext : ParserRuleContext {
		public Event_session_predicate_factorContext[] event_session_predicate_factor() {
			return GetRuleContexts<Event_session_predicate_factorContext>();
		}
		public Event_session_predicate_factorContext event_session_predicate_factor(int i) {
			return GetRuleContext<Event_session_predicate_factorContext>(i);
		}
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public Event_session_predicate_expressionContext[] event_session_predicate_expression() {
			return GetRuleContexts<Event_session_predicate_expressionContext>();
		}
		public Event_session_predicate_expressionContext event_session_predicate_expression(int i) {
			return GetRuleContext<Event_session_predicate_expressionContext>(i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] NOT() { return GetTokens(TSqlParser.NOT); }
		public ITerminalNode NOT(int i) {
			return GetToken(TSqlParser.NOT, i);
		}
		public ITerminalNode[] AND() { return GetTokens(TSqlParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(TSqlParser.AND, i);
		}
		public ITerminalNode[] OR() { return GetTokens(TSqlParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(TSqlParser.OR, i);
		}
		public Event_session_predicate_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_session_predicate_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEvent_session_predicate_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEvent_session_predicate_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvent_session_predicate_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Event_session_predicate_expressionContext event_session_predicate_expression() {
		Event_session_predicate_expressionContext _localctx = new Event_session_predicate_expressionContext(_ctx, State);
		EnterRule(_localctx, 290, RULE_event_session_predicate_expression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3231;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 3216;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,272,_ctx) ) {
					case 1:
						{
						State = 3215; Match(COMMA);
						}
						break;
					}
					State = 3219;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==AND || _la==OR) {
						{
						State = 3218;
						_la = _input.La(1);
						if ( !(_la==AND || _la==OR) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
					}

					State = 3222;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==NOT) {
						{
						State = 3221; Match(NOT);
						}
					}

					State = 3229;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,275,_ctx) ) {
					case 1:
						{
						State = 3224; event_session_predicate_factor();
						}
						break;

					case 2:
						{
						State = 3225; Match(LR_BRACKET);
						State = 3226; event_session_predicate_expression();
						State = 3227; Match(RR_BRACKET);
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 3233;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,276,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_session_predicate_factorContext : ParserRuleContext {
		public Event_session_predicate_leafContext event_session_predicate_leaf() {
			return GetRuleContext<Event_session_predicate_leafContext>(0);
		}
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Event_session_predicate_expressionContext event_session_predicate_expression() {
			return GetRuleContext<Event_session_predicate_expressionContext>(0);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Event_session_predicate_factorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_session_predicate_factor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEvent_session_predicate_factor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEvent_session_predicate_factor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvent_session_predicate_factor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Event_session_predicate_factorContext event_session_predicate_factor() {
		Event_session_predicate_factorContext _localctx = new Event_session_predicate_factorContext(_ctx, State);
		EnterRule(_localctx, 292, RULE_event_session_predicate_factor);
		try {
			State = 3240;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,277,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3235; event_session_predicate_leaf();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3236; Match(LR_BRACKET);
				State = 3237; event_session_predicate_expression();
				State = 3238; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_session_predicate_leafContext : ParserRuleContext {
		public IdContext event_field_name;
		public IdContext event_module_guid;
		public IdContext event_package_name;
		public IdContext predicate_source_name;
		public IdContext predicate_compare_name;
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode GREATER() { return GetToken(TSqlParser.GREATER, 0); }
		public ITerminalNode LESS() { return GetToken(TSqlParser.LESS, 0); }
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public ITerminalNode EXCLAMATION() { return GetToken(TSqlParser.EXCLAMATION, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public Event_session_predicate_leafContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_session_predicate_leaf; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEvent_session_predicate_leaf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEvent_session_predicate_leaf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvent_session_predicate_leaf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Event_session_predicate_leafContext event_session_predicate_leaf() {
		Event_session_predicate_leafContext _localctx = new Event_session_predicate_leafContext(_ctx, State);
		EnterRule(_localctx, 294, RULE_event_session_predicate_leaf);
		int _la;
		try {
			State = 3298;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,285,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3270;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,281,_ctx) ) {
				case 1:
					{
					State = 3242; _localctx.event_field_name = id();
					}
					break;

				case 2:
					{
					State = 3253;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,279,_ctx) ) {
					case 1:
						{
						State = 3243; _localctx.event_field_name = id();
						}
						break;

					case 2:
						{
						{
						State = 3247;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,278,_ctx) ) {
						case 1:
							{
							State = 3244; _localctx.event_module_guid = id();
							State = 3245; Match(DOT);
							}
							break;
						}
						State = 3249; _localctx.event_package_name = id();
						State = 3250; Match(DOT);
						State = 3251; _localctx.predicate_source_name = id();
						}
						}
						break;
					}
					State = 3266;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,280,_ctx) ) {
					case 1:
						{
						State = 3255; Match(EQUAL);
						}
						break;

					case 2:
						{
						{
						State = 3256; Match(LESS);
						State = 3257; Match(GREATER);
						}
						}
						break;

					case 3:
						{
						{
						State = 3258; Match(EXCLAMATION);
						State = 3259; Match(EQUAL);
						}
						}
						break;

					case 4:
						{
						State = 3260; Match(GREATER);
						}
						break;

					case 5:
						{
						{
						State = 3261; Match(GREATER);
						State = 3262; Match(EQUAL);
						}
						}
						break;

					case 6:
						{
						State = 3263; Match(LESS);
						}
						break;

					case 7:
						{
						State = 3264; Match(LESS);
						State = 3265; Match(EQUAL);
						}
						break;
					}
					State = 3268;
					_la = _input.La(1);
					if ( !(_la==DECIMAL || _la==STRING) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3275;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,282,_ctx) ) {
				case 1:
					{
					State = 3272; _localctx.event_module_guid = id();
					State = 3273; Match(DOT);
					}
					break;
				}
				State = 3277; _localctx.event_package_name = id();
				State = 3278; Match(DOT);
				State = 3279; _localctx.predicate_compare_name = id();
				State = 3280; Match(LR_BRACKET);
				State = 3294;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,284,_ctx) ) {
				case 1:
					{
					State = 3281; _localctx.event_field_name = id();
					}
					break;

				case 2:
					{
					{
					State = 3285;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,283,_ctx) ) {
					case 1:
						{
						State = 3282; _localctx.event_module_guid = id();
						State = 3283; Match(DOT);
						}
						break;
					}
					State = 3287; _localctx.event_package_name = id();
					State = 3288; Match(DOT);
					State = 3289; _localctx.predicate_source_name = id();
					}
					State = 3291; Match(COMMA);
					State = 3292;
					_la = _input.La(1);
					if ( !(_la==DECIMAL || _la==STRING) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 3296; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_external_data_sourceContext : ParserRuleContext {
		public IdContext data_source_name;
		public IToken location;
		public IToken resource_manager_location;
		public IdContext credential_name;
		public IToken connection_options;
		public On_offContext pushdown;
		public IToken type;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode DATA() { return GetToken(TSqlParser.DATA, 0); }
		public ITerminalNode SOURCE() { return GetToken(TSqlParser.SOURCE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] LOCATION() { return GetTokens(TSqlParser.LOCATION); }
		public ITerminalNode LOCATION(int i) {
			return GetToken(TSqlParser.LOCATION, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] RESOURCE_MANAGER_LOCATION() { return GetTokens(TSqlParser.RESOURCE_MANAGER_LOCATION); }
		public ITerminalNode RESOURCE_MANAGER_LOCATION(int i) {
			return GetToken(TSqlParser.RESOURCE_MANAGER_LOCATION, i);
		}
		public ITerminalNode[] CREDENTIAL() { return GetTokens(TSqlParser.CREDENTIAL); }
		public ITerminalNode CREDENTIAL(int i) {
			return GetToken(TSqlParser.CREDENTIAL, i);
		}
		public ITerminalNode[] CONNECTION_OPTIONS() { return GetTokens(TSqlParser.CONNECTION_OPTIONS); }
		public ITerminalNode CONNECTION_OPTIONS(int i) {
			return GetToken(TSqlParser.CONNECTION_OPTIONS, i);
		}
		public ITerminalNode[] PUSHDOWN() { return GetTokens(TSqlParser.PUSHDOWN); }
		public ITerminalNode PUSHDOWN(int i) {
			return GetToken(TSqlParser.PUSHDOWN, i);
		}
		public ITerminalNode[] TYPE() { return GetTokens(TSqlParser.TYPE); }
		public ITerminalNode TYPE(int i) {
			return GetToken(TSqlParser.TYPE, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public On_offContext[] on_off() {
			return GetRuleContexts<On_offContext>();
		}
		public On_offContext on_off(int i) {
			return GetRuleContext<On_offContext>(i);
		}
		public ITerminalNode[] QUOTED_URL() { return GetTokens(TSqlParser.QUOTED_URL); }
		public ITerminalNode QUOTED_URL(int i) {
			return GetToken(TSqlParser.QUOTED_URL, i);
		}
		public ITerminalNode[] QUOTED_HOST_AND_PORT() { return GetTokens(TSqlParser.QUOTED_HOST_AND_PORT); }
		public ITerminalNode QUOTED_HOST_AND_PORT(int i) {
			return GetToken(TSqlParser.QUOTED_HOST_AND_PORT, i);
		}
		public ITerminalNode[] HADOOP() { return GetTokens(TSqlParser.HADOOP); }
		public ITerminalNode HADOOP(int i) {
			return GetToken(TSqlParser.HADOOP, i);
		}
		public ITerminalNode[] BLOB_STORAGE() { return GetTokens(TSqlParser.BLOB_STORAGE); }
		public ITerminalNode BLOB_STORAGE(int i) {
			return GetToken(TSqlParser.BLOB_STORAGE, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Create_external_data_sourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_external_data_source; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_external_data_source(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_external_data_source(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_external_data_source(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_external_data_sourceContext create_external_data_source() {
		Create_external_data_sourceContext _localctx = new Create_external_data_sourceContext(_ctx, State);
		EnterRule(_localctx, 296, RULE_create_external_data_source);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3300; Match(CREATE);
			State = 3301; Match(EXTERNAL);
			State = 3302; Match(DATA);
			State = 3303; Match(SOURCE);
			State = 3304; _localctx.data_source_name = id();
			State = 3305; Match(WITH);
			State = 3306; Match(LR_BRACKET);
			State = 3331;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				State = 3331;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case LOCATION:
					{
					State = 3307; Match(LOCATION);
					State = 3308; Match(EQUAL);
					State = 3309;
					_localctx.location = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==QUOTED_URL || _la==QUOTED_HOST_AND_PORT) ) {
						_localctx.location = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 3311;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==COMMA) {
						{
						State = 3310; Match(COMMA);
						}
					}

					}
					break;
				case RESOURCE_MANAGER_LOCATION:
					{
					State = 3313; Match(RESOURCE_MANAGER_LOCATION);
					State = 3314; Match(EQUAL);
					State = 3315;
					_localctx.resource_manager_location = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==QUOTED_URL || _la==QUOTED_HOST_AND_PORT) ) {
						_localctx.resource_manager_location = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 3317;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==COMMA) {
						{
						State = 3316; Match(COMMA);
						}
					}

					}
					break;
				case CREDENTIAL:
					{
					State = 3319; Match(CREDENTIAL);
					State = 3320; Match(EQUAL);
					State = 3321; _localctx.credential_name = id();
					}
					break;
				case CONNECTION_OPTIONS:
					{
					State = 3322; Match(CONNECTION_OPTIONS);
					State = 3323; Match(EQUAL);
					State = 3324; _localctx.connection_options = Match(STRING);
					}
					break;
				case PUSHDOWN:
					{
					State = 3325; Match(PUSHDOWN);
					State = 3326; Match(EQUAL);
					State = 3327; _localctx.pushdown = on_off();
					}
					break;
				case TYPE:
					{
					State = 3328; Match(TYPE);
					State = 3329; Match(EQUAL);
					State = 3330;
					_localctx.type = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==BLOB_STORAGE || _la==HADOOP) ) {
						_localctx.type = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 3333;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==CONNECTION_OPTIONS || _la==PUSHDOWN || _la==CREDENTIAL || _la==LOCATION || _la==RESOURCE_MANAGER_LOCATION || _la==TYPE );
			State = 3335; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_external_data_sourceContext : ParserRuleContext {
		public IdContext data_source_name;
		public IToken location;
		public IToken resource_manager_location;
		public IdContext credential_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode DATA() { return GetToken(TSqlParser.DATA, 0); }
		public ITerminalNode SOURCE() { return GetToken(TSqlParser.SOURCE, 0); }
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] LOCATION() { return GetTokens(TSqlParser.LOCATION); }
		public ITerminalNode LOCATION(int i) {
			return GetToken(TSqlParser.LOCATION, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] RESOURCE_MANAGER_LOCATION() { return GetTokens(TSqlParser.RESOURCE_MANAGER_LOCATION); }
		public ITerminalNode RESOURCE_MANAGER_LOCATION(int i) {
			return GetToken(TSqlParser.RESOURCE_MANAGER_LOCATION, i);
		}
		public ITerminalNode[] CREDENTIAL() { return GetTokens(TSqlParser.CREDENTIAL); }
		public ITerminalNode CREDENTIAL(int i) {
			return GetToken(TSqlParser.CREDENTIAL, i);
		}
		public ITerminalNode[] QUOTED_URL() { return GetTokens(TSqlParser.QUOTED_URL); }
		public ITerminalNode QUOTED_URL(int i) {
			return GetToken(TSqlParser.QUOTED_URL, i);
		}
		public ITerminalNode[] QUOTED_HOST_AND_PORT() { return GetTokens(TSqlParser.QUOTED_HOST_AND_PORT); }
		public ITerminalNode QUOTED_HOST_AND_PORT(int i) {
			return GetToken(TSqlParser.QUOTED_HOST_AND_PORT, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ITerminalNode BLOB_STORAGE() { return GetToken(TSqlParser.BLOB_STORAGE, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Alter_external_data_sourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_external_data_source; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_external_data_source(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_external_data_source(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_external_data_source(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_external_data_sourceContext alter_external_data_source() {
		Alter_external_data_sourceContext _localctx = new Alter_external_data_sourceContext(_ctx, State);
		EnterRule(_localctx, 298, RULE_alter_external_data_source);
		int _la;
		try {
			int _alt;
			State = 3384;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,295,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3337; Match(ALTER);
				State = 3338; Match(EXTERNAL);
				State = 3339; Match(DATA);
				State = 3340; Match(SOURCE);
				State = 3341; _localctx.data_source_name = id();
				State = 3342; Match(SET);
				State = 3358;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 3358;
						_errHandler.Sync(this);
						switch (_input.La(1)) {
						case LOCATION:
							{
							State = 3343; Match(LOCATION);
							State = 3344; Match(EQUAL);
							State = 3345;
							_localctx.location = _input.Lt(1);
							_la = _input.La(1);
							if ( !(_la==QUOTED_URL || _la==QUOTED_HOST_AND_PORT) ) {
								_localctx.location = _errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							State = 3347;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,290,_ctx) ) {
							case 1:
								{
								State = 3346; Match(COMMA);
								}
								break;
							}
							}
							break;
						case RESOURCE_MANAGER_LOCATION:
							{
							State = 3349; Match(RESOURCE_MANAGER_LOCATION);
							State = 3350; Match(EQUAL);
							State = 3351;
							_localctx.resource_manager_location = _input.Lt(1);
							_la = _input.La(1);
							if ( !(_la==QUOTED_URL || _la==QUOTED_HOST_AND_PORT) ) {
								_localctx.resource_manager_location = _errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							State = 3353;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,291,_ctx) ) {
							case 1:
								{
								State = 3352; Match(COMMA);
								}
								break;
							}
							}
							break;
						case CREDENTIAL:
							{
							State = 3355; Match(CREDENTIAL);
							State = 3356; Match(EQUAL);
							State = 3357; _localctx.credential_name = id();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3360;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,293,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3362; Match(ALTER);
				State = 3363; Match(EXTERNAL);
				State = 3364; Match(DATA);
				State = 3365; Match(SOURCE);
				State = 3366; _localctx.data_source_name = id();
				State = 3367; Match(WITH);
				State = 3368; Match(LR_BRACKET);
				State = 3369; Match(TYPE);
				State = 3370; Match(EQUAL);
				State = 3371; Match(BLOB_STORAGE);
				State = 3372; Match(COMMA);
				State = 3373; Match(LOCATION);
				State = 3374; Match(EQUAL);
				State = 3375; _localctx.location = Match(STRING);
				State = 3380;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 3376; Match(COMMA);
					State = 3377; Match(CREDENTIAL);
					State = 3378; Match(EQUAL);
					State = 3379; _localctx.credential_name = id();
					}
				}

				State = 3382; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_external_libraryContext : ParserRuleContext {
		public IdContext library_name;
		public IdContext owner_name;
		public IToken client_library;
		public IdContext external_data_source_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode LIBRARY() { return GetToken(TSqlParser.LIBRARY, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode CONTENT() { return GetToken(TSqlParser.CONTENT, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode PLATFORM() { return GetToken(TSqlParser.PLATFORM, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode[] LANGUAGE() { return GetTokens(TSqlParser.LANGUAGE); }
		public ITerminalNode LANGUAGE(int i) {
			return GetToken(TSqlParser.LANGUAGE, i);
		}
		public ITerminalNode[] DATA_SOURCE() { return GetTokens(TSqlParser.DATA_SOURCE); }
		public ITerminalNode DATA_SOURCE(int i) {
			return GetToken(TSqlParser.DATA_SOURCE, i);
		}
		public ITerminalNode[] R() { return GetTokens(TSqlParser.R); }
		public ITerminalNode R(int i) {
			return GetToken(TSqlParser.R, i);
		}
		public ITerminalNode[] PYTHON() { return GetTokens(TSqlParser.PYTHON); }
		public ITerminalNode PYTHON(int i) {
			return GetToken(TSqlParser.PYTHON, i);
		}
		public ITerminalNode WINDOWS() { return GetToken(TSqlParser.WINDOWS, 0); }
		public ITerminalNode LINUX() { return GetToken(TSqlParser.LINUX, 0); }
		public Alter_external_libraryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_external_library; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_external_library(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_external_library(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_external_library(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_external_libraryContext alter_external_library() {
		Alter_external_libraryContext _localctx = new Alter_external_libraryContext(_ctx, State);
		EnterRule(_localctx, 300, RULE_alter_external_library);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3386; Match(ALTER);
			State = 3387; Match(EXTERNAL);
			State = 3388; Match(LIBRARY);
			State = 3389; _localctx.library_name = id();
			State = 3392;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AUTHORIZATION) {
				{
				State = 3390; Match(AUTHORIZATION);
				State = 3391; _localctx.owner_name = id();
				}
			}

			State = 3394;
			_la = _input.La(1);
			if ( !(_la==ADD || _la==SET) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			{
			State = 3395; Match(LR_BRACKET);
			State = 3396; Match(CONTENT);
			State = 3397; Match(EQUAL);
			State = 3401;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case STRING:
				{
				State = 3398; _localctx.client_library = Match(STRING);
				}
				break;
			case BINARY:
				{
				State = 3399; Match(BINARY);
				}
				break;
			case NONE:
				{
				State = 3400; Match(NONE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			{
			State = 3403; Match(COMMA);
			State = 3404; Match(PLATFORM);
			State = 3405; Match(EQUAL);
			State = 3407;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LINUX || _la==WINDOWS) {
				{
				State = 3406;
				_la = _input.La(1);
				if ( !(_la==LINUX || _la==WINDOWS) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 3409; Match(RR_BRACKET);
			}
			State = 3411; Match(WITH);
			State = 3421;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				State = 3421;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case LANGUAGE:
				case COMMA:
					{
					State = 3413;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==COMMA) {
						{
						State = 3412; Match(COMMA);
						}
					}

					State = 3415; Match(LANGUAGE);
					State = 3416; Match(EQUAL);
					State = 3417;
					_la = _input.La(1);
					if ( !(_la==PYTHON || _la==R) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				case DATA_SOURCE:
					{
					State = 3418; Match(DATA_SOURCE);
					State = 3419; Match(EQUAL);
					State = 3420; _localctx.external_data_source_name = id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 3423;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==DATA_SOURCE || _la==LANGUAGE || _la==COMMA );
			State = 3425; Match(RR_BRACKET);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_external_libraryContext : ParserRuleContext {
		public IdContext library_name;
		public IdContext owner_name;
		public IToken client_library;
		public IdContext external_data_source_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode LIBRARY() { return GetToken(TSqlParser.LIBRARY, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode CONTENT() { return GetToken(TSqlParser.CONTENT, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode PLATFORM() { return GetToken(TSqlParser.PLATFORM, 0); }
		public ITerminalNode[] LANGUAGE() { return GetTokens(TSqlParser.LANGUAGE); }
		public ITerminalNode LANGUAGE(int i) {
			return GetToken(TSqlParser.LANGUAGE, i);
		}
		public ITerminalNode[] DATA_SOURCE() { return GetTokens(TSqlParser.DATA_SOURCE); }
		public ITerminalNode DATA_SOURCE(int i) {
			return GetToken(TSqlParser.DATA_SOURCE, i);
		}
		public ITerminalNode[] R() { return GetTokens(TSqlParser.R); }
		public ITerminalNode R(int i) {
			return GetToken(TSqlParser.R, i);
		}
		public ITerminalNode[] PYTHON() { return GetTokens(TSqlParser.PYTHON); }
		public ITerminalNode PYTHON(int i) {
			return GetToken(TSqlParser.PYTHON, i);
		}
		public ITerminalNode WINDOWS() { return GetToken(TSqlParser.WINDOWS, 0); }
		public ITerminalNode LINUX() { return GetToken(TSqlParser.LINUX, 0); }
		public Create_external_libraryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_external_library; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_external_library(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_external_library(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_external_library(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_external_libraryContext create_external_library() {
		Create_external_libraryContext _localctx = new Create_external_libraryContext(_ctx, State);
		EnterRule(_localctx, 302, RULE_create_external_library);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3427; Match(CREATE);
			State = 3428; Match(EXTERNAL);
			State = 3429; Match(LIBRARY);
			State = 3430; _localctx.library_name = id();
			State = 3433;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AUTHORIZATION) {
				{
				State = 3431; Match(AUTHORIZATION);
				State = 3432; _localctx.owner_name = id();
				}
			}

			State = 3435; Match(FROM);
			{
			State = 3437;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 3436; Match(COMMA);
				}
			}

			State = 3440;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LR_BRACKET) {
				{
				State = 3439; Match(LR_BRACKET);
				}
			}

			State = 3444;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CONTENT) {
				{
				State = 3442; Match(CONTENT);
				State = 3443; Match(EQUAL);
				}
			}

			State = 3449;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case STRING:
				{
				State = 3446; _localctx.client_library = Match(STRING);
				}
				break;
			case BINARY:
				{
				State = 3447; Match(BINARY);
				}
				break;
			case NONE:
				{
				State = 3448; Match(NONE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3458;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,308,_ctx) ) {
			case 1:
				{
				State = 3451; Match(COMMA);
				State = 3452; Match(PLATFORM);
				State = 3453; Match(EQUAL);
				State = 3455;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LINUX || _la==WINDOWS) {
					{
					State = 3454;
					_la = _input.La(1);
					if ( !(_la==LINUX || _la==WINDOWS) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
				}

				State = 3457; Match(RR_BRACKET);
				}
				break;
			}
			}
			State = 3475;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,312,_ctx) ) {
			case 1:
				{
				State = 3460; Match(WITH);
				State = 3470;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					State = 3470;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case LANGUAGE:
					case COMMA:
						{
						State = 3462;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==COMMA) {
							{
							State = 3461; Match(COMMA);
							}
						}

						State = 3464; Match(LANGUAGE);
						State = 3465; Match(EQUAL);
						State = 3466;
						_la = _input.La(1);
						if ( !(_la==PYTHON || _la==R) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					case DATA_SOURCE:
						{
						State = 3467; Match(DATA_SOURCE);
						State = 3468; Match(EQUAL);
						State = 3469; _localctx.external_data_source_name = id();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 3472;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==DATA_SOURCE || _la==LANGUAGE || _la==COMMA );
				State = 3474; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_external_resource_poolContext : ParserRuleContext {
		public IdContext pool_name;
		public IToken max_cpu_percent;
		public IToken max_memory_percent;
		public IToken max_processes;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode RESOURCE() { return GetToken(TSqlParser.RESOURCE, 0); }
		public ITerminalNode POOL() { return GetToken(TSqlParser.POOL, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode MAX_CPU_PERCENT() { return GetToken(TSqlParser.MAX_CPU_PERCENT, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode DEFAULT_DOUBLE_QUOTE() { return GetToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, 0); }
		public ITerminalNode AFFINITY() { return GetToken(TSqlParser.AFFINITY, 0); }
		public ITerminalNode CPU() { return GetToken(TSqlParser.CPU, 0); }
		public ITerminalNode NUMANODE() { return GetToken(TSqlParser.NUMANODE, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode MAX_MEMORY_PERCENT() { return GetToken(TSqlParser.MAX_MEMORY_PERCENT, 0); }
		public ITerminalNode MAX_PROCESSES() { return GetToken(TSqlParser.MAX_PROCESSES, 0); }
		public ITerminalNode AUTO() { return GetToken(TSqlParser.AUTO, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		public Alter_external_resource_poolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_external_resource_pool; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_external_resource_pool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_external_resource_pool(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_external_resource_pool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_external_resource_poolContext alter_external_resource_pool() {
		Alter_external_resource_poolContext _localctx = new Alter_external_resource_poolContext(_ctx, State);
		EnterRule(_localctx, 304, RULE_alter_external_resource_pool);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3477; Match(ALTER);
			State = 3478; Match(EXTERNAL);
			State = 3479; Match(RESOURCE);
			State = 3480; Match(POOL);
			State = 3483;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,313,_ctx) ) {
			case 1:
				{
				State = 3481; _localctx.pool_name = id();
				}
				break;

			case 2:
				{
				State = 3482; Match(DEFAULT_DOUBLE_QUOTE);
				}
				break;
			}
			State = 3485; Match(WITH);
			State = 3486; Match(LR_BRACKET);
			State = 3487; Match(MAX_CPU_PERCENT);
			State = 3488; Match(EQUAL);
			State = 3489; _localctx.max_cpu_percent = Match(DECIMAL);
			State = 3527;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case AFFINITY:
			case COMMA:
				{
				State = 3491;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 3490; Match(COMMA);
					}
				}

				State = 3493; Match(AFFINITY);
				State = 3494; Match(CPU);
				State = 3495; Match(EQUAL);
				State = 3509;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case AUTO:
					{
					State = 3496; Match(AUTO);
					}
					break;
				case DECIMAL:
				case COMMA:
					{
					State = 3505;
					_errHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							State = 3505;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,316,_ctx) ) {
							case 1:
								{
								State = 3498;
								_errHandler.Sync(this);
								_la = _input.La(1);
								if (_la==COMMA) {
									{
									State = 3497; Match(COMMA);
									}
								}

								State = 3500; Match(DECIMAL);
								State = 3501; Match(TO);
								State = 3502; Match(DECIMAL);
								}
								break;

							case 2:
								{
								State = 3503; Match(COMMA);
								State = 3504; Match(DECIMAL);
								}
								break;
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 3507;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,317,_ctx);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NUMANODE:
				{
				State = 3511; Match(NUMANODE);
				State = 3512; Match(EQUAL);
				State = 3523;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 3523;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,321,_ctx) ) {
						case 1:
							{
							State = 3514;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 3513; Match(COMMA);
								}
							}

							State = 3516; Match(DECIMAL);
							State = 3517; Match(TO);
							State = 3518; Match(DECIMAL);
							}
							break;

						case 2:
							{
							State = 3520;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 3519; Match(COMMA);
								}
							}

							State = 3522; Match(DECIMAL);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3525;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,322,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3535;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,325,_ctx) ) {
			case 1:
				{
				State = 3530;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 3529; Match(COMMA);
					}
				}

				State = 3532; Match(MAX_MEMORY_PERCENT);
				State = 3533; Match(EQUAL);
				State = 3534; _localctx.max_memory_percent = Match(DECIMAL);
				}
				break;
			}
			State = 3543;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==MAX_PROCESSES || _la==COMMA) {
				{
				State = 3538;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 3537; Match(COMMA);
					}
				}

				State = 3540; Match(MAX_PROCESSES);
				State = 3541; Match(EQUAL);
				State = 3542; _localctx.max_processes = Match(DECIMAL);
				}
			}

			State = 3545; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_external_resource_poolContext : ParserRuleContext {
		public IdContext pool_name;
		public IToken max_cpu_percent;
		public IToken max_memory_percent;
		public IToken max_processes;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode RESOURCE() { return GetToken(TSqlParser.RESOURCE, 0); }
		public ITerminalNode POOL() { return GetToken(TSqlParser.POOL, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode MAX_CPU_PERCENT() { return GetToken(TSqlParser.MAX_CPU_PERCENT, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode AFFINITY() { return GetToken(TSqlParser.AFFINITY, 0); }
		public ITerminalNode CPU() { return GetToken(TSqlParser.CPU, 0); }
		public ITerminalNode NUMANODE() { return GetToken(TSqlParser.NUMANODE, 0); }
		public ITerminalNode MAX_MEMORY_PERCENT() { return GetToken(TSqlParser.MAX_MEMORY_PERCENT, 0); }
		public ITerminalNode MAX_PROCESSES() { return GetToken(TSqlParser.MAX_PROCESSES, 0); }
		public ITerminalNode AUTO() { return GetToken(TSqlParser.AUTO, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		public Create_external_resource_poolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_external_resource_pool; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_external_resource_pool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_external_resource_pool(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_external_resource_pool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_external_resource_poolContext create_external_resource_pool() {
		Create_external_resource_poolContext _localctx = new Create_external_resource_poolContext(_ctx, State);
		EnterRule(_localctx, 306, RULE_create_external_resource_pool);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3547; Match(CREATE);
			State = 3548; Match(EXTERNAL);
			State = 3549; Match(RESOURCE);
			State = 3550; Match(POOL);
			State = 3551; _localctx.pool_name = id();
			State = 3552; Match(WITH);
			State = 3553; Match(LR_BRACKET);
			State = 3554; Match(MAX_CPU_PERCENT);
			State = 3555; Match(EQUAL);
			State = 3556; _localctx.max_cpu_percent = Match(DECIMAL);
			State = 3594;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case AFFINITY:
			case COMMA:
				{
				State = 3558;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 3557; Match(COMMA);
					}
				}

				State = 3560; Match(AFFINITY);
				State = 3561; Match(CPU);
				State = 3562; Match(EQUAL);
				State = 3576;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case AUTO:
					{
					State = 3563; Match(AUTO);
					}
					break;
				case DECIMAL:
				case COMMA:
					{
					State = 3572;
					_errHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							State = 3572;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,330,_ctx) ) {
							case 1:
								{
								State = 3565;
								_errHandler.Sync(this);
								_la = _input.La(1);
								if (_la==COMMA) {
									{
									State = 3564; Match(COMMA);
									}
								}

								State = 3567; Match(DECIMAL);
								State = 3568; Match(TO);
								State = 3569; Match(DECIMAL);
								}
								break;

							case 2:
								{
								State = 3570; Match(COMMA);
								State = 3571; Match(DECIMAL);
								}
								break;
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 3574;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,331,_ctx);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NUMANODE:
				{
				State = 3578; Match(NUMANODE);
				State = 3579; Match(EQUAL);
				State = 3590;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 3590;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,335,_ctx) ) {
						case 1:
							{
							State = 3581;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 3580; Match(COMMA);
								}
							}

							State = 3583; Match(DECIMAL);
							State = 3584; Match(TO);
							State = 3585; Match(DECIMAL);
							}
							break;

						case 2:
							{
							State = 3587;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 3586; Match(COMMA);
								}
							}

							State = 3589; Match(DECIMAL);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3592;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,336,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3602;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,339,_ctx) ) {
			case 1:
				{
				State = 3597;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 3596; Match(COMMA);
					}
				}

				State = 3599; Match(MAX_MEMORY_PERCENT);
				State = 3600; Match(EQUAL);
				State = 3601; _localctx.max_memory_percent = Match(DECIMAL);
				}
				break;
			}
			State = 3610;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==MAX_PROCESSES || _la==COMMA) {
				{
				State = 3605;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 3604; Match(COMMA);
					}
				}

				State = 3607; Match(MAX_PROCESSES);
				State = 3608; Match(EQUAL);
				State = 3609; _localctx.max_processes = Match(DECIMAL);
				}
			}

			State = 3612; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_fulltext_catalogContext : ParserRuleContext {
		public IdContext catalog_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode CATALOG() { return GetToken(TSqlParser.CATALOG, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode REBUILD() { return GetToken(TSqlParser.REBUILD, 0); }
		public ITerminalNode REORGANIZE() { return GetToken(TSqlParser.REORGANIZE, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode ACCENT_SENSITIVITY() { return GetToken(TSqlParser.ACCENT_SENSITIVITY, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Alter_fulltext_catalogContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_fulltext_catalog; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_fulltext_catalog(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_fulltext_catalog(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_fulltext_catalog(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_fulltext_catalogContext alter_fulltext_catalog() {
		Alter_fulltext_catalogContext _localctx = new Alter_fulltext_catalogContext(_ctx, State);
		EnterRule(_localctx, 308, RULE_alter_fulltext_catalog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3614; Match(ALTER);
			State = 3615; Match(FULLTEXT);
			State = 3616; Match(CATALOG);
			State = 3617; _localctx.catalog_name = id();
			State = 3628;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case REBUILD:
				{
				State = 3618; Match(REBUILD);
				State = 3623;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,342,_ctx) ) {
				case 1:
					{
					State = 3619; Match(WITH);
					State = 3620; Match(ACCENT_SENSITIVITY);
					State = 3621; Match(EQUAL);
					State = 3622;
					_la = _input.La(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;
			case REORGANIZE:
				{
				State = 3625; Match(REORGANIZE);
				}
				break;
			case AS:
				{
				State = 3626; Match(AS);
				State = 3627; Match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_fulltext_catalogContext : ParserRuleContext {
		public IdContext catalog_name;
		public IdContext filegroup;
		public IToken rootpath;
		public IdContext owner_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode CATALOG() { return GetToken(TSqlParser.CATALOG, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode FILEGROUP() { return GetToken(TSqlParser.FILEGROUP, 0); }
		public ITerminalNode IN() { return GetToken(TSqlParser.IN, 0); }
		public ITerminalNode PATH() { return GetToken(TSqlParser.PATH, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode ACCENT_SENSITIVITY() { return GetToken(TSqlParser.ACCENT_SENSITIVITY, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Create_fulltext_catalogContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_fulltext_catalog; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_fulltext_catalog(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_fulltext_catalog(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_fulltext_catalog(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_fulltext_catalogContext create_fulltext_catalog() {
		Create_fulltext_catalogContext _localctx = new Create_fulltext_catalogContext(_ctx, State);
		EnterRule(_localctx, 310, RULE_create_fulltext_catalog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3630; Match(CREATE);
			State = 3631; Match(FULLTEXT);
			State = 3632; Match(CATALOG);
			State = 3633; _localctx.catalog_name = id();
			State = 3637;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ON) {
				{
				State = 3634; Match(ON);
				State = 3635; Match(FILEGROUP);
				State = 3636; _localctx.filegroup = id();
				}
			}

			State = 3642;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IN) {
				{
				State = 3639; Match(IN);
				State = 3640; Match(PATH);
				State = 3641; _localctx.rootpath = Match(STRING);
				}
			}

			State = 3648;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,346,_ctx) ) {
			case 1:
				{
				State = 3644; Match(WITH);
				State = 3645; Match(ACCENT_SENSITIVITY);
				State = 3646; Match(EQUAL);
				State = 3647;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 3652;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 3650; Match(AS);
				State = 3651; Match(DEFAULT);
				}
			}

			State = 3656;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AUTHORIZATION) {
				{
				State = 3654; Match(AUTHORIZATION);
				State = 3655; _localctx.owner_name = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_fulltext_stoplistContext : ParserRuleContext {
		public IdContext stoplist_name;
		public IToken stopword;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode STOPLIST() { return GetToken(TSqlParser.STOPLIST, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode LANGUAGE() { return GetToken(TSqlParser.LANGUAGE, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public Alter_fulltext_stoplistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_fulltext_stoplist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_fulltext_stoplist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_fulltext_stoplist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_fulltext_stoplist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_fulltext_stoplistContext alter_fulltext_stoplist() {
		Alter_fulltext_stoplistContext _localctx = new Alter_fulltext_stoplistContext(_ctx, State);
		EnterRule(_localctx, 312, RULE_alter_fulltext_stoplist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3658; Match(ALTER);
			State = 3659; Match(FULLTEXT);
			State = 3660; Match(STOPLIST);
			State = 3661; _localctx.stoplist_name = id();
			State = 3675;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ADD:
				{
				State = 3662; Match(ADD);
				State = 3663; _localctx.stopword = Match(STRING);
				State = 3664; Match(LANGUAGE);
				State = 3665;
				_la = _input.La(1);
				if ( !(((((_la - 811)) & ~0x3f) == 0 && ((1L << (_la - 811)) & ((1L << (DECIMAL - 811)) | (1L << (STRING - 811)) | (1L << (BINARY - 811)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			case DROP:
				{
				State = 3666; Match(DROP);
				State = 3673;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,349,_ctx) ) {
				case 1:
					{
					State = 3667; _localctx.stopword = Match(STRING);
					State = 3668; Match(LANGUAGE);
					State = 3669;
					_la = _input.La(1);
					if ( !(((((_la - 811)) & ~0x3f) == 0 && ((1L << (_la - 811)) & ((1L << (DECIMAL - 811)) | (1L << (STRING - 811)) | (1L << (BINARY - 811)))) != 0)) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 2:
					{
					State = 3670; Match(ALL);
					State = 3671;
					_la = _input.La(1);
					if ( !(((((_la - 811)) & ~0x3f) == 0 && ((1L << (_la - 811)) & ((1L << (DECIMAL - 811)) | (1L << (STRING - 811)) | (1L << (BINARY - 811)))) != 0)) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 3:
					{
					State = 3672; Match(ALL);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_fulltext_stoplistContext : ParserRuleContext {
		public IdContext stoplist_name;
		public IdContext source_stoplist_name;
		public IdContext owner_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode[] STOPLIST() { return GetTokens(TSqlParser.STOPLIST); }
		public ITerminalNode STOPLIST(int i) {
			return GetToken(TSqlParser.STOPLIST, i);
		}
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode SYSTEM() { return GetToken(TSqlParser.SYSTEM, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Create_fulltext_stoplistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_fulltext_stoplist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_fulltext_stoplist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_fulltext_stoplist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_fulltext_stoplist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_fulltext_stoplistContext create_fulltext_stoplist() {
		Create_fulltext_stoplistContext _localctx = new Create_fulltext_stoplistContext(_ctx, State);
		EnterRule(_localctx, 314, RULE_create_fulltext_stoplist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3677; Match(CREATE);
			State = 3678; Match(FULLTEXT);
			State = 3679; Match(STOPLIST);
			State = 3680; _localctx.stoplist_name = id();
			State = 3692;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==FROM) {
				{
				State = 3681; Match(FROM);
				State = 3690;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,352,_ctx) ) {
				case 1:
					{
					State = 3685;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,351,_ctx) ) {
					case 1:
						{
						State = 3682; database_name();
						State = 3683; Match(DOT);
						}
						break;
					}
					State = 3687; _localctx.source_stoplist_name = id();
					}
					break;

				case 2:
					{
					State = 3688; Match(SYSTEM);
					State = 3689; Match(STOPLIST);
					}
					break;
				}
				}
			}

			State = 3696;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AUTHORIZATION) {
				{
				State = 3694; Match(AUTHORIZATION);
				State = 3695; _localctx.owner_name = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_login_sql_serverContext : ParserRuleContext {
		public IdContext login_name;
		public IToken password;
		public IToken password_hash;
		public IToken old_password;
		public IdContext default_database;
		public IdContext default_laguage;
		public IdContext credential_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] CREDENTIAL() { return GetTokens(TSqlParser.CREDENTIAL); }
		public ITerminalNode CREDENTIAL(int i) {
			return GetToken(TSqlParser.CREDENTIAL, i);
		}
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode OLD_PASSWORD() { return GetToken(TSqlParser.OLD_PASSWORD, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode DEFAULT_DATABASE() { return GetToken(TSqlParser.DEFAULT_DATABASE, 0); }
		public ITerminalNode DEFAULT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode CHECK_POLICY() { return GetToken(TSqlParser.CHECK_POLICY, 0); }
		public ITerminalNode CHECK_EXPIRATION() { return GetToken(TSqlParser.CHECK_EXPIRATION, 0); }
		public ITerminalNode NO() { return GetToken(TSqlParser.NO, 0); }
		public ITerminalNode ENABLE() { return GetToken(TSqlParser.ENABLE, 0); }
		public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode HASHED() { return GetToken(TSqlParser.HASHED, 0); }
		public ITerminalNode[] MUST_CHANGE() { return GetTokens(TSqlParser.MUST_CHANGE); }
		public ITerminalNode MUST_CHANGE(int i) {
			return GetToken(TSqlParser.MUST_CHANGE, i);
		}
		public ITerminalNode[] UNLOCK() { return GetTokens(TSqlParser.UNLOCK); }
		public ITerminalNode UNLOCK(int i) {
			return GetToken(TSqlParser.UNLOCK, i);
		}
		public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		public Alter_login_sql_serverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_login_sql_server; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_login_sql_server(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_login_sql_server(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_login_sql_server(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_login_sql_serverContext alter_login_sql_server() {
		Alter_login_sql_serverContext _localctx = new Alter_login_sql_serverContext(_ctx, State);
		EnterRule(_localctx, 316, RULE_alter_login_sql_server);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3698; Match(ALTER);
			State = 3699; Match(LOGIN);
			State = 3700; _localctx.login_name = id();
			State = 3768;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,368,_ctx) ) {
			case 1:
				{
				State = 3702;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,355,_ctx) ) {
				case 1:
					{
					State = 3701;
					_la = _input.La(1);
					if ( !(_la==DISABLE || _la==ENABLE) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 3704; Match(WITH);
				State = 3718;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,358,_ctx) ) {
				case 1:
					{
					{
					State = 3705; Match(PASSWORD);
					State = 3706; Match(EQUAL);
					State = 3710;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case STRING:
						{
						State = 3707; _localctx.password = Match(STRING);
						}
						break;
					case BINARY:
						{
						State = 3708; _localctx.password_hash = Match(BINARY);
						State = 3709; Match(HASHED);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 3715;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,357,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 3712;
							_la = _input.La(1);
							if ( !(_la==MUST_CHANGE || _la==UNLOCK) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							} 
						}
						State = 3717;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,357,_ctx);
					}
					}
					break;
				}
				State = 3729;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,360,_ctx) ) {
				case 1:
					{
					State = 3720; Match(OLD_PASSWORD);
					State = 3721; Match(EQUAL);
					State = 3722; _localctx.old_password = Match(STRING);
					State = 3726;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,359,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 3723;
							_la = _input.La(1);
							if ( !(_la==MUST_CHANGE || _la==UNLOCK) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							} 
						}
						State = 3728;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,359,_ctx);
					}
					}
					break;
				}
				State = 3734;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,361,_ctx) ) {
				case 1:
					{
					State = 3731; Match(DEFAULT_DATABASE);
					State = 3732; Match(EQUAL);
					State = 3733; _localctx.default_database = id();
					}
					break;
				}
				State = 3739;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,362,_ctx) ) {
				case 1:
					{
					State = 3736; Match(DEFAULT_LANGUAGE);
					State = 3737; Match(EQUAL);
					State = 3738; _localctx.default_laguage = id();
					}
					break;
				}
				State = 3744;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,363,_ctx) ) {
				case 1:
					{
					State = 3741; Match(NAME);
					State = 3742; Match(EQUAL);
					State = 3743; _localctx.login_name = id();
					}
					break;
				}
				State = 3749;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,364,_ctx) ) {
				case 1:
					{
					State = 3746; Match(CHECK_POLICY);
					State = 3747; Match(EQUAL);
					State = 3748;
					_la = _input.La(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 3754;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,365,_ctx) ) {
				case 1:
					{
					State = 3751; Match(CHECK_EXPIRATION);
					State = 3752; Match(EQUAL);
					State = 3753;
					_la = _input.La(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 3759;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,366,_ctx) ) {
				case 1:
					{
					State = 3756; Match(CREDENTIAL);
					State = 3757; Match(EQUAL);
					State = 3758; _localctx.credential_name = id();
					}
					break;
				}
				State = 3763;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,367,_ctx) ) {
				case 1:
					{
					State = 3761; Match(NO);
					State = 3762; Match(CREDENTIAL);
					}
					break;
				}
				}
				break;

			case 3:
				{
				State = 3765;
				_la = _input.La(1);
				if ( !(_la==ADD || _la==DROP) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 3766; Match(CREDENTIAL);
				State = 3767; _localctx.credential_name = id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_login_sql_serverContext : ParserRuleContext {
		public IdContext login_name;
		public IToken password;
		public IToken password_hash;
		public IToken sid;
		public IdContext default_database;
		public IdContext default_laguage;
		public IdContext credential_name;
		public IToken default_language;
		public IdContext certname;
		public IdContext asym_key_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode SID() { return GetToken(TSqlParser.SID, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode DEFAULT_DATABASE() { return GetToken(TSqlParser.DEFAULT_DATABASE, 0); }
		public ITerminalNode DEFAULT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
		public ITerminalNode CHECK_EXPIRATION() { return GetToken(TSqlParser.CHECK_EXPIRATION, 0); }
		public ITerminalNode CHECK_POLICY() { return GetToken(TSqlParser.CHECK_POLICY, 0); }
		public ITerminalNode CREDENTIAL() { return GetToken(TSqlParser.CREDENTIAL, 0); }
		public ITerminalNode[] BINARY() { return GetTokens(TSqlParser.BINARY); }
		public ITerminalNode BINARY(int i) {
			return GetToken(TSqlParser.BINARY, i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode WINDOWS() { return GetToken(TSqlParser.WINDOWS, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode HASHED() { return GetToken(TSqlParser.HASHED, 0); }
		public ITerminalNode[] MUST_CHANGE() { return GetTokens(TSqlParser.MUST_CHANGE); }
		public ITerminalNode MUST_CHANGE(int i) {
			return GetToken(TSqlParser.MUST_CHANGE, i);
		}
		public ITerminalNode[] UNLOCK() { return GetTokens(TSqlParser.UNLOCK); }
		public ITerminalNode UNLOCK(int i) {
			return GetToken(TSqlParser.UNLOCK, i);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Create_login_sql_serverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_login_sql_server; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_login_sql_server(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_login_sql_server(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_login_sql_server(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_login_sql_serverContext create_login_sql_server() {
		Create_login_sql_serverContext _localctx = new Create_login_sql_serverContext(_ctx, State);
		EnterRule(_localctx, 318, RULE_create_login_sql_server);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3770; Match(CREATE);
			State = 3771; Match(LOGIN);
			State = 3772; _localctx.login_name = id();
			State = 3863;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case WITH:
				{
				State = 3773; Match(WITH);
				State = 3787;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,371,_ctx) ) {
				case 1:
					{
					{
					State = 3774; Match(PASSWORD);
					State = 3775; Match(EQUAL);
					State = 3779;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case STRING:
						{
						State = 3776; _localctx.password = Match(STRING);
						}
						break;
					case BINARY:
						{
						State = 3777; _localctx.password_hash = Match(BINARY);
						State = 3778; Match(HASHED);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 3784;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,370,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 3781;
							_la = _input.La(1);
							if ( !(_la==MUST_CHANGE || _la==UNLOCK) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							} 
						}
						State = 3786;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,370,_ctx);
					}
					}
					break;
				}
				State = 3795;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,373,_ctx) ) {
				case 1:
					{
					State = 3790;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==COMMA) {
						{
						State = 3789; Match(COMMA);
						}
					}

					State = 3792; Match(SID);
					State = 3793; Match(EQUAL);
					State = 3794; _localctx.sid = Match(BINARY);
					}
					break;
				}
				State = 3803;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,375,_ctx) ) {
				case 1:
					{
					State = 3798;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==COMMA) {
						{
						State = 3797; Match(COMMA);
						}
					}

					State = 3800; Match(DEFAULT_DATABASE);
					State = 3801; Match(EQUAL);
					State = 3802; _localctx.default_database = id();
					}
					break;
				}
				State = 3811;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,377,_ctx) ) {
				case 1:
					{
					State = 3806;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==COMMA) {
						{
						State = 3805; Match(COMMA);
						}
					}

					State = 3808; Match(DEFAULT_LANGUAGE);
					State = 3809; Match(EQUAL);
					State = 3810; _localctx.default_laguage = id();
					}
					break;
				}
				State = 3819;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,379,_ctx) ) {
				case 1:
					{
					State = 3814;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==COMMA) {
						{
						State = 3813; Match(COMMA);
						}
					}

					State = 3816; Match(CHECK_EXPIRATION);
					State = 3817; Match(EQUAL);
					State = 3818;
					_la = _input.La(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 3827;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,381,_ctx) ) {
				case 1:
					{
					State = 3822;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==COMMA) {
						{
						State = 3821; Match(COMMA);
						}
					}

					State = 3824; Match(CHECK_POLICY);
					State = 3825; Match(EQUAL);
					State = 3826;
					_la = _input.La(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 3835;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,383,_ctx) ) {
				case 1:
					{
					State = 3830;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==COMMA) {
						{
						State = 3829; Match(COMMA);
						}
					}

					State = 3832; Match(CREDENTIAL);
					State = 3833; Match(EQUAL);
					State = 3834; _localctx.credential_name = id();
					}
					break;
				}
				}
				break;
			case FROM:
				{
				{
				State = 3837; Match(FROM);
				State = 3861;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case WINDOWS:
					{
					State = 3838; Match(WINDOWS);
					{
					State = 3839; Match(WITH);
					State = 3846;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,385,_ctx) ) {
					case 1:
						{
						State = 3841;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==COMMA) {
							{
							State = 3840; Match(COMMA);
							}
						}

						State = 3843; Match(DEFAULT_DATABASE);
						State = 3844; Match(EQUAL);
						State = 3845; _localctx.default_database = id();
						}
						break;
					}
					State = 3854;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,387,_ctx) ) {
					case 1:
						{
						State = 3849;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==COMMA) {
							{
							State = 3848; Match(COMMA);
							}
						}

						State = 3851; Match(DEFAULT_LANGUAGE);
						State = 3852; Match(EQUAL);
						State = 3853; _localctx.default_language = Match(STRING);
						}
						break;
					}
					}
					}
					break;
				case CERTIFICATE:
					{
					State = 3856; Match(CERTIFICATE);
					State = 3857; _localctx.certname = id();
					}
					break;
				case ASYMMETRIC:
					{
					State = 3858; Match(ASYMMETRIC);
					State = 3859; Match(KEY);
					State = 3860; _localctx.asym_key_name = id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_login_azure_sqlContext : ParserRuleContext {
		public IdContext login_name;
		public IToken password;
		public IToken old_password;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode ENABLE() { return GetToken(TSqlParser.ENABLE, 0); }
		public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		public ITerminalNode OLD_PASSWORD() { return GetToken(TSqlParser.OLD_PASSWORD, 0); }
		public Alter_login_azure_sqlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_login_azure_sql; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_login_azure_sql(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_login_azure_sql(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_login_azure_sql(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_login_azure_sqlContext alter_login_azure_sql() {
		Alter_login_azure_sqlContext _localctx = new Alter_login_azure_sqlContext(_ctx, State);
		EnterRule(_localctx, 320, RULE_alter_login_azure_sql);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3865; Match(ALTER);
			State = 3866; Match(LOGIN);
			State = 3867; _localctx.login_name = id();
			State = 3885;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,393,_ctx) ) {
			case 1:
				{
				State = 3869;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,390,_ctx) ) {
				case 1:
					{
					State = 3868;
					_la = _input.La(1);
					if ( !(_la==DISABLE || _la==ENABLE) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 3871; Match(WITH);
				State = 3883;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case PASSWORD:
					{
					State = 3872; Match(PASSWORD);
					State = 3873; Match(EQUAL);
					State = 3874; _localctx.password = Match(STRING);
					State = 3878;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,391,_ctx) ) {
					case 1:
						{
						State = 3875; Match(OLD_PASSWORD);
						State = 3876; Match(EQUAL);
						State = 3877; _localctx.old_password = Match(STRING);
						}
						break;
					}
					}
					break;
				case NAME:
					{
					State = 3880; Match(NAME);
					State = 3881; Match(EQUAL);
					State = 3882; _localctx.login_name = id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_login_azure_sqlContext : ParserRuleContext {
		public IdContext login_name;
		public IToken sid;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode SID() { return GetToken(TSqlParser.SID, 0); }
		public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		public Create_login_azure_sqlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_login_azure_sql; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_login_azure_sql(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_login_azure_sql(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_login_azure_sql(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_login_azure_sqlContext create_login_azure_sql() {
		Create_login_azure_sqlContext _localctx = new Create_login_azure_sqlContext(_ctx, State);
		EnterRule(_localctx, 322, RULE_create_login_azure_sql);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3887; Match(CREATE);
			State = 3888; Match(LOGIN);
			State = 3889; _localctx.login_name = id();
			State = 3890; Match(WITH);
			State = 3891; Match(PASSWORD);
			State = 3892; Match(EQUAL);
			State = 3893; Match(STRING);
			State = 3897;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,394,_ctx) ) {
			case 1:
				{
				State = 3894; Match(SID);
				State = 3895; Match(EQUAL);
				State = 3896; _localctx.sid = Match(BINARY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_login_azure_sql_dw_and_pdwContext : ParserRuleContext {
		public IdContext login_name;
		public IToken password;
		public IToken old_password;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode ENABLE() { return GetToken(TSqlParser.ENABLE, 0); }
		public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		public ITerminalNode OLD_PASSWORD() { return GetToken(TSqlParser.OLD_PASSWORD, 0); }
		public ITerminalNode[] MUST_CHANGE() { return GetTokens(TSqlParser.MUST_CHANGE); }
		public ITerminalNode MUST_CHANGE(int i) {
			return GetToken(TSqlParser.MUST_CHANGE, i);
		}
		public ITerminalNode[] UNLOCK() { return GetTokens(TSqlParser.UNLOCK); }
		public ITerminalNode UNLOCK(int i) {
			return GetToken(TSqlParser.UNLOCK, i);
		}
		public Alter_login_azure_sql_dw_and_pdwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_login_azure_sql_dw_and_pdw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_login_azure_sql_dw_and_pdw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_login_azure_sql_dw_and_pdw(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_login_azure_sql_dw_and_pdw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_login_azure_sql_dw_and_pdwContext alter_login_azure_sql_dw_and_pdw() {
		Alter_login_azure_sql_dw_and_pdwContext _localctx = new Alter_login_azure_sql_dw_and_pdwContext(_ctx, State);
		EnterRule(_localctx, 324, RULE_alter_login_azure_sql_dw_and_pdw);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3899; Match(ALTER);
			State = 3900; Match(LOGIN);
			State = 3901; _localctx.login_name = id();
			State = 3925;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,399,_ctx) ) {
			case 1:
				{
				State = 3903;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,395,_ctx) ) {
				case 1:
					{
					State = 3902;
					_la = _input.La(1);
					if ( !(_la==DISABLE || _la==ENABLE) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 3905; Match(WITH);
				State = 3923;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case PASSWORD:
					{
					State = 3906; Match(PASSWORD);
					State = 3907; Match(EQUAL);
					State = 3908; _localctx.password = Match(STRING);
					State = 3918;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,397,_ctx) ) {
					case 1:
						{
						State = 3909; Match(OLD_PASSWORD);
						State = 3910; Match(EQUAL);
						State = 3911; _localctx.old_password = Match(STRING);
						State = 3915;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,396,_ctx);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
							if ( _alt==1 ) {
								{
								{
								State = 3912;
								_la = _input.La(1);
								if ( !(_la==MUST_CHANGE || _la==UNLOCK) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								}
								} 
							}
							State = 3917;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,396,_ctx);
						}
						}
						break;
					}
					}
					break;
				case NAME:
					{
					State = 3920; Match(NAME);
					State = 3921; Match(EQUAL);
					State = 3922; _localctx.login_name = id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_login_pdwContext : ParserRuleContext {
		public IdContext loginName;
		public IToken password;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode WINDOWS() { return GetToken(TSqlParser.WINDOWS, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode MUST_CHANGE() { return GetToken(TSqlParser.MUST_CHANGE, 0); }
		public ITerminalNode CHECK_POLICY() { return GetToken(TSqlParser.CHECK_POLICY, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Create_login_pdwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_login_pdw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_login_pdw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_login_pdw(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_login_pdw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_login_pdwContext create_login_pdw() {
		Create_login_pdwContext _localctx = new Create_login_pdwContext(_ctx, State);
		EnterRule(_localctx, 326, RULE_create_login_pdw);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3927; Match(CREATE);
			State = 3928; Match(LOGIN);
			State = 3929; _localctx.loginName = id();
			State = 3946;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case WITH:
				{
				State = 3930; Match(WITH);
				{
				State = 3931; Match(PASSWORD);
				State = 3932; Match(EQUAL);
				State = 3933; _localctx.password = Match(STRING);
				State = 3935;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,400,_ctx) ) {
				case 1:
					{
					State = 3934; Match(MUST_CHANGE);
					}
					break;
				}
				State = 3942;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,402,_ctx) ) {
				case 1:
					{
					State = 3937; Match(CHECK_POLICY);
					State = 3938; Match(EQUAL);
					State = 3940;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==OFF || _la==ON) {
						{
						State = 3939;
						_la = _input.La(1);
						if ( !(_la==OFF || _la==ON) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
					}

					}
					break;
				}
				}
				}
				break;
			case FROM:
				{
				State = 3944; Match(FROM);
				State = 3945; Match(WINDOWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_master_key_sql_serverContext : ParserRuleContext {
		public IToken password;
		public IToken encryption_password;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode[] MASTER() { return GetTokens(TSqlParser.MASTER); }
		public ITerminalNode MASTER(int i) {
			return GetToken(TSqlParser.MASTER, i);
		}
		public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		public ITerminalNode REGENERATE() { return GetToken(TSqlParser.REGENERATE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode FORCE() { return GetToken(TSqlParser.FORCE, 0); }
		public Alter_master_key_sql_serverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_master_key_sql_server; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_master_key_sql_server(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_master_key_sql_server(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_master_key_sql_server(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_master_key_sql_serverContext alter_master_key_sql_server() {
		Alter_master_key_sql_serverContext _localctx = new Alter_master_key_sql_serverContext(_ctx, State);
		EnterRule(_localctx, 328, RULE_alter_master_key_sql_server);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3948; Match(ALTER);
			State = 3949; Match(MASTER);
			State = 3950; Match(KEY);
			State = 3972;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case REGENERATE:
			case FORCE:
				{
				State = 3952;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==FORCE) {
					{
					State = 3951; Match(FORCE);
					}
				}

				State = 3954; Match(REGENERATE);
				State = 3955; Match(WITH);
				State = 3956; Match(ENCRYPTION);
				State = 3957; Match(BY);
				State = 3958; Match(PASSWORD);
				State = 3959; Match(EQUAL);
				State = 3960; _localctx.password = Match(STRING);
				}
				break;
			case ADD:
			case DROP:
				{
				State = 3961;
				_la = _input.La(1);
				if ( !(_la==ADD || _la==DROP) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 3962; Match(ENCRYPTION);
				State = 3963; Match(BY);
				State = 3970;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case SERVICE:
					{
					State = 3964; Match(SERVICE);
					State = 3965; Match(MASTER);
					State = 3966; Match(KEY);
					}
					break;
				case PASSWORD:
					{
					State = 3967; Match(PASSWORD);
					State = 3968; Match(EQUAL);
					State = 3969; _localctx.encryption_password = Match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_master_key_sql_serverContext : ParserRuleContext {
		public IToken password;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Create_master_key_sql_serverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_master_key_sql_server; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_master_key_sql_server(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_master_key_sql_server(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_master_key_sql_server(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_master_key_sql_serverContext create_master_key_sql_server() {
		Create_master_key_sql_serverContext _localctx = new Create_master_key_sql_serverContext(_ctx, State);
		EnterRule(_localctx, 330, RULE_create_master_key_sql_server);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3974; Match(CREATE);
			State = 3975; Match(MASTER);
			State = 3976; Match(KEY);
			State = 3977; Match(ENCRYPTION);
			State = 3978; Match(BY);
			State = 3979; Match(PASSWORD);
			State = 3980; Match(EQUAL);
			State = 3981; _localctx.password = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_master_key_azure_sqlContext : ParserRuleContext {
		public IToken password;
		public IToken encryption_password;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode[] MASTER() { return GetTokens(TSqlParser.MASTER); }
		public ITerminalNode MASTER(int i) {
			return GetToken(TSqlParser.MASTER, i);
		}
		public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		public ITerminalNode REGENERATE() { return GetToken(TSqlParser.REGENERATE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode FORCE() { return GetToken(TSqlParser.FORCE, 0); }
		public Alter_master_key_azure_sqlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_master_key_azure_sql; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_master_key_azure_sql(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_master_key_azure_sql(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_master_key_azure_sql(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_master_key_azure_sqlContext alter_master_key_azure_sql() {
		Alter_master_key_azure_sqlContext _localctx = new Alter_master_key_azure_sqlContext(_ctx, State);
		EnterRule(_localctx, 332, RULE_alter_master_key_azure_sql);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3983; Match(ALTER);
			State = 3984; Match(MASTER);
			State = 3985; Match(KEY);
			State = 4013;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case REGENERATE:
			case FORCE:
				{
				State = 3987;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==FORCE) {
					{
					State = 3986; Match(FORCE);
					}
				}

				State = 3989; Match(REGENERATE);
				State = 3990; Match(WITH);
				State = 3991; Match(ENCRYPTION);
				State = 3992; Match(BY);
				State = 3993; Match(PASSWORD);
				State = 3994; Match(EQUAL);
				State = 3995; _localctx.password = Match(STRING);
				}
				break;
			case ADD:
				{
				State = 3996; Match(ADD);
				State = 3997; Match(ENCRYPTION);
				State = 3998; Match(BY);
				State = 4005;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case SERVICE:
					{
					State = 3999; Match(SERVICE);
					State = 4000; Match(MASTER);
					State = 4001; Match(KEY);
					}
					break;
				case PASSWORD:
					{
					State = 4002; Match(PASSWORD);
					State = 4003; Match(EQUAL);
					State = 4004; _localctx.encryption_password = Match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DROP:
				{
				State = 4007; Match(DROP);
				State = 4008; Match(ENCRYPTION);
				State = 4009; Match(BY);
				State = 4010; Match(PASSWORD);
				State = 4011; Match(EQUAL);
				State = 4012; _localctx.encryption_password = Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_master_key_azure_sqlContext : ParserRuleContext {
		public IToken password;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Create_master_key_azure_sqlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_master_key_azure_sql; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_master_key_azure_sql(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_master_key_azure_sql(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_master_key_azure_sql(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_master_key_azure_sqlContext create_master_key_azure_sql() {
		Create_master_key_azure_sqlContext _localctx = new Create_master_key_azure_sqlContext(_ctx, State);
		EnterRule(_localctx, 334, RULE_create_master_key_azure_sql);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4015; Match(CREATE);
			State = 4016; Match(MASTER);
			State = 4017; Match(KEY);
			State = 4023;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,410,_ctx) ) {
			case 1:
				{
				State = 4018; Match(ENCRYPTION);
				State = 4019; Match(BY);
				State = 4020; Match(PASSWORD);
				State = 4021; Match(EQUAL);
				State = 4022; _localctx.password = Match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_message_typeContext : ParserRuleContext {
		public IdContext message_type_name;
		public IdContext schema_collection_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode MESSAGE() { return GetToken(TSqlParser.MESSAGE, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ITerminalNode VALIDATION() { return GetToken(TSqlParser.VALIDATION, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode EMPTY() { return GetToken(TSqlParser.EMPTY, 0); }
		public ITerminalNode WELL_FORMED_XML() { return GetToken(TSqlParser.WELL_FORMED_XML, 0); }
		public ITerminalNode VALID_XML() { return GetToken(TSqlParser.VALID_XML, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public Alter_message_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_message_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_message_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_message_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_message_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_message_typeContext alter_message_type() {
		Alter_message_typeContext _localctx = new Alter_message_typeContext(_ctx, State);
		EnterRule(_localctx, 336, RULE_alter_message_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4025; Match(ALTER);
			State = 4026; Match(MESSAGE);
			State = 4027; Match(TYPE);
			State = 4028; _localctx.message_type_name = id();
			State = 4029; Match(VALIDATION);
			State = 4030; Match(EQUAL);
			State = 4039;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NONE:
				{
				State = 4031; Match(NONE);
				}
				break;
			case EMPTY:
				{
				State = 4032; Match(EMPTY);
				}
				break;
			case WELL_FORMED_XML:
				{
				State = 4033; Match(WELL_FORMED_XML);
				}
				break;
			case VALID_XML:
				{
				State = 4034; Match(VALID_XML);
				State = 4035; Match(WITH);
				State = 4036; Match(SCHEMA);
				State = 4037; Match(COLLECTION);
				State = 4038; _localctx.schema_collection_name = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_partition_functionContext : ParserRuleContext {
		public IdContext partition_function_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		public ITerminalNode FUNCTION() { return GetToken(TSqlParser.FUNCTION, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode RANGE() { return GetToken(TSqlParser.RANGE, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode SPLIT() { return GetToken(TSqlParser.SPLIT, 0); }
		public ITerminalNode MERGE() { return GetToken(TSqlParser.MERGE, 0); }
		public Alter_partition_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_partition_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_partition_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_partition_function(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_partition_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_partition_functionContext alter_partition_function() {
		Alter_partition_functionContext _localctx = new Alter_partition_functionContext(_ctx, State);
		EnterRule(_localctx, 338, RULE_alter_partition_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4041; Match(ALTER);
			State = 4042; Match(PARTITION);
			State = 4043; Match(FUNCTION);
			State = 4044; _localctx.partition_function_name = id();
			State = 4045; Match(LR_BRACKET);
			State = 4046; Match(RR_BRACKET);
			State = 4047;
			_la = _input.La(1);
			if ( !(_la==MERGE || _la==SPLIT) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 4048; Match(RANGE);
			State = 4049; Match(LR_BRACKET);
			State = 4050; Match(DECIMAL);
			State = 4051; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_partition_schemeContext : ParserRuleContext {
		public IdContext partition_scheme_name;
		public IdContext file_group_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		public ITerminalNode SCHEME() { return GetToken(TSqlParser.SCHEME, 0); }
		public ITerminalNode NEXT() { return GetToken(TSqlParser.NEXT, 0); }
		public ITerminalNode USED() { return GetToken(TSqlParser.USED, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public Alter_partition_schemeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_partition_scheme; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_partition_scheme(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_partition_scheme(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_partition_scheme(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_partition_schemeContext alter_partition_scheme() {
		Alter_partition_schemeContext _localctx = new Alter_partition_schemeContext(_ctx, State);
		EnterRule(_localctx, 340, RULE_alter_partition_scheme);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4053; Match(ALTER);
			State = 4054; Match(PARTITION);
			State = 4055; Match(SCHEME);
			State = 4056; _localctx.partition_scheme_name = id();
			State = 4057; Match(NEXT);
			State = 4058; Match(USED);
			State = 4060;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,412,_ctx) ) {
			case 1:
				{
				State = 4059; _localctx.file_group_name = id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_remote_service_bindingContext : ParserRuleContext {
		public IdContext binding_name;
		public IdContext user_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode REMOTE() { return GetToken(TSqlParser.REMOTE, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode BINDING() { return GetToken(TSqlParser.BINDING, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode ANONYMOUS() { return GetToken(TSqlParser.ANONYMOUS, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Alter_remote_service_bindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_remote_service_binding; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_remote_service_binding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_remote_service_binding(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_remote_service_binding(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_remote_service_bindingContext alter_remote_service_binding() {
		Alter_remote_service_bindingContext _localctx = new Alter_remote_service_bindingContext(_ctx, State);
		EnterRule(_localctx, 342, RULE_alter_remote_service_binding);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4062; Match(ALTER);
			State = 4063; Match(REMOTE);
			State = 4064; Match(SERVICE);
			State = 4065; Match(BINDING);
			State = 4066; _localctx.binding_name = id();
			State = 4067; Match(WITH);
			State = 4071;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,413,_ctx) ) {
			case 1:
				{
				State = 4068; Match(USER);
				State = 4069; Match(EQUAL);
				State = 4070; _localctx.user_name = id();
				}
				break;
			}
			State = 4077;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,414,_ctx) ) {
			case 1:
				{
				State = 4073; Match(COMMA);
				State = 4074; Match(ANONYMOUS);
				State = 4075; Match(EQUAL);
				State = 4076;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_remote_service_bindingContext : ParserRuleContext {
		public IdContext binding_name;
		public IdContext owner_name;
		public IToken remote_service_name;
		public IdContext user_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode REMOTE() { return GetToken(TSqlParser.REMOTE, 0); }
		public ITerminalNode[] SERVICE() { return GetTokens(TSqlParser.SERVICE); }
		public ITerminalNode SERVICE(int i) {
			return GetToken(TSqlParser.SERVICE, i);
		}
		public ITerminalNode BINDING() { return GetToken(TSqlParser.BINDING, 0); }
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode ANONYMOUS() { return GetToken(TSqlParser.ANONYMOUS, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Create_remote_service_bindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_remote_service_binding; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_remote_service_binding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_remote_service_binding(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_remote_service_binding(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_remote_service_bindingContext create_remote_service_binding() {
		Create_remote_service_bindingContext _localctx = new Create_remote_service_bindingContext(_ctx, State);
		EnterRule(_localctx, 344, RULE_create_remote_service_binding);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4079; Match(CREATE);
			State = 4080; Match(REMOTE);
			State = 4081; Match(SERVICE);
			State = 4082; Match(BINDING);
			State = 4083; _localctx.binding_name = id();
			State = 4086;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AUTHORIZATION) {
				{
				State = 4084; Match(AUTHORIZATION);
				State = 4085; _localctx.owner_name = id();
				}
			}

			State = 4088; Match(TO);
			State = 4089; Match(SERVICE);
			State = 4090; _localctx.remote_service_name = Match(STRING);
			State = 4091; Match(WITH);
			State = 4095;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,416,_ctx) ) {
			case 1:
				{
				State = 4092; Match(USER);
				State = 4093; Match(EQUAL);
				State = 4094; _localctx.user_name = id();
				}
				break;
			}
			State = 4101;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,417,_ctx) ) {
			case 1:
				{
				State = 4097; Match(COMMA);
				State = 4098; Match(ANONYMOUS);
				State = 4099; Match(EQUAL);
				State = 4100;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_resource_poolContext : ParserRuleContext {
		public IdContext pool_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode RESOURCE() { return GetToken(TSqlParser.RESOURCE, 0); }
		public ITerminalNode POOL() { return GetToken(TSqlParser.POOL, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode MIN_CPU_PERCENT() { return GetToken(TSqlParser.MIN_CPU_PERCENT, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode MAX_CPU_PERCENT() { return GetToken(TSqlParser.MAX_CPU_PERCENT, 0); }
		public ITerminalNode CAP_CPU_PERCENT() { return GetToken(TSqlParser.CAP_CPU_PERCENT, 0); }
		public ITerminalNode AFFINITY() { return GetToken(TSqlParser.AFFINITY, 0); }
		public ITerminalNode SCHEDULER() { return GetToken(TSqlParser.SCHEDULER, 0); }
		public ITerminalNode MIN_MEMORY_PERCENT() { return GetToken(TSqlParser.MIN_MEMORY_PERCENT, 0); }
		public ITerminalNode MAX_MEMORY_PERCENT() { return GetToken(TSqlParser.MAX_MEMORY_PERCENT, 0); }
		public ITerminalNode MIN_IOPS_PER_VOLUME() { return GetToken(TSqlParser.MIN_IOPS_PER_VOLUME, 0); }
		public ITerminalNode MAX_IOPS_PER_VOLUME() { return GetToken(TSqlParser.MAX_IOPS_PER_VOLUME, 0); }
		public ITerminalNode AUTO() { return GetToken(TSqlParser.AUTO, 0); }
		public ITerminalNode NUMANODE() { return GetToken(TSqlParser.NUMANODE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		public Create_resource_poolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_resource_pool; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_resource_pool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_resource_pool(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_resource_pool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_resource_poolContext create_resource_pool() {
		Create_resource_poolContext _localctx = new Create_resource_poolContext(_ctx, State);
		EnterRule(_localctx, 346, RULE_create_resource_pool);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4103; Match(CREATE);
			State = 4104; Match(RESOURCE);
			State = 4105; Match(POOL);
			State = 4106; _localctx.pool_name = id();
			State = 4209;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,441,_ctx) ) {
			case 1:
				{
				State = 4107; Match(WITH);
				State = 4108; Match(LR_BRACKET);
				State = 4115;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,419,_ctx) ) {
				case 1:
					{
					State = 4110;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==COMMA) {
						{
						State = 4109; Match(COMMA);
						}
					}

					State = 4112; Match(MIN_CPU_PERCENT);
					State = 4113; Match(EQUAL);
					State = 4114; Match(DECIMAL);
					}
					break;
				}
				State = 4123;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,421,_ctx) ) {
				case 1:
					{
					State = 4118;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==COMMA) {
						{
						State = 4117; Match(COMMA);
						}
					}

					State = 4120; Match(MAX_CPU_PERCENT);
					State = 4121; Match(EQUAL);
					State = 4122; Match(DECIMAL);
					}
					break;
				}
				State = 4131;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,423,_ctx) ) {
				case 1:
					{
					State = 4126;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==COMMA) {
						{
						State = 4125; Match(COMMA);
						}
					}

					State = 4128; Match(CAP_CPU_PERCENT);
					State = 4129; Match(EQUAL);
					State = 4130; Match(DECIMAL);
					}
					break;
				}
				State = 4174;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,432,_ctx) ) {
				case 1:
					{
					State = 4134;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==COMMA) {
						{
						State = 4133; Match(COMMA);
						}
					}

					State = 4136; Match(AFFINITY);
					State = 4137; Match(SCHEDULER);
					State = 4138; Match(EQUAL);
					State = 4172;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case AUTO:
						{
						State = 4139; Match(AUTO);
						}
						break;
					case LR_BRACKET:
						{
						State = 4140; Match(LR_BRACKET);
						State = 4150;
						_errHandler.Sync(this);
						_la = _input.La(1);
						do {
							{
							{
							State = 4142;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 4141; Match(COMMA);
								}
							}

							State = 4148;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,426,_ctx) ) {
							case 1:
								{
								State = 4144; Match(DECIMAL);
								}
								break;

							case 2:
								{
								State = 4145; Match(DECIMAL);
								State = 4146; Match(TO);
								State = 4147; Match(DECIMAL);
								}
								break;
							}
							}
							}
							State = 4152;
							_errHandler.Sync(this);
							_la = _input.La(1);
						} while ( _la==DECIMAL || _la==COMMA );
						State = 4154; Match(RR_BRACKET);
						}
						break;
					case NUMANODE:
						{
						State = 4155; Match(NUMANODE);
						State = 4156; Match(EQUAL);
						State = 4157; Match(LR_BRACKET);
						State = 4167;
						_errHandler.Sync(this);
						_la = _input.La(1);
						do {
							{
							{
							State = 4159;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 4158; Match(COMMA);
								}
							}

							State = 4165;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,429,_ctx) ) {
							case 1:
								{
								State = 4161; Match(DECIMAL);
								}
								break;

							case 2:
								{
								State = 4162; Match(DECIMAL);
								State = 4163; Match(TO);
								State = 4164; Match(DECIMAL);
								}
								break;
							}
							}
							}
							State = 4169;
							_errHandler.Sync(this);
							_la = _input.La(1);
						} while ( _la==DECIMAL || _la==COMMA );
						State = 4171; Match(RR_BRACKET);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				State = 4182;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,434,_ctx) ) {
				case 1:
					{
					State = 4177;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==COMMA) {
						{
						State = 4176; Match(COMMA);
						}
					}

					State = 4179; Match(MIN_MEMORY_PERCENT);
					State = 4180; Match(EQUAL);
					State = 4181; Match(DECIMAL);
					}
					break;
				}
				State = 4190;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,436,_ctx) ) {
				case 1:
					{
					State = 4185;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==COMMA) {
						{
						State = 4184; Match(COMMA);
						}
					}

					State = 4187; Match(MAX_MEMORY_PERCENT);
					State = 4188; Match(EQUAL);
					State = 4189; Match(DECIMAL);
					}
					break;
				}
				State = 4198;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,438,_ctx) ) {
				case 1:
					{
					State = 4193;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==COMMA) {
						{
						State = 4192; Match(COMMA);
						}
					}

					State = 4195; Match(MIN_IOPS_PER_VOLUME);
					State = 4196; Match(EQUAL);
					State = 4197; Match(DECIMAL);
					}
					break;
				}
				State = 4206;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==MAX_IOPS_PER_VOLUME || _la==COMMA) {
					{
					State = 4201;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==COMMA) {
						{
						State = 4200; Match(COMMA);
						}
					}

					State = 4203; Match(MAX_IOPS_PER_VOLUME);
					State = 4204; Match(EQUAL);
					State = 4205; Match(DECIMAL);
					}
				}

				State = 4208; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_resource_governorContext : ParserRuleContext {
		public IdContext function_name;
		public IToken max_outstanding_io_per_volume;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode RESOURCE() { return GetToken(TSqlParser.RESOURCE, 0); }
		public ITerminalNode GOVERNOR() { return GetToken(TSqlParser.GOVERNOR, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode CLASSIFIER_FUNCTION() { return GetToken(TSqlParser.CLASSIFIER_FUNCTION, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode RESET() { return GetToken(TSqlParser.RESET, 0); }
		public ITerminalNode STATISTICS() { return GetToken(TSqlParser.STATISTICS, 0); }
		public ITerminalNode MAX_OUTSTANDING_IO_PER_VOLUME() { return GetToken(TSqlParser.MAX_OUTSTANDING_IO_PER_VOLUME, 0); }
		public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		public ITerminalNode RECONFIGURE() { return GetToken(TSqlParser.RECONFIGURE, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode NULL() { return GetToken(TSqlParser.NULL, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Alter_resource_governorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_resource_governor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_resource_governor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_resource_governor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_resource_governor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_resource_governorContext alter_resource_governor() {
		Alter_resource_governorContext _localctx = new Alter_resource_governorContext(_ctx, State);
		EnterRule(_localctx, 348, RULE_alter_resource_governor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4211; Match(ALTER);
			State = 4212; Match(RESOURCE);
			State = 4213; Match(GOVERNOR);
			State = 4235;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,443,_ctx) ) {
			case 1:
				{
				State = 4214;
				_la = _input.La(1);
				if ( !(_la==RECONFIGURE || _la==DISABLE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 2:
				{
				State = 4215; Match(WITH);
				State = 4216; Match(LR_BRACKET);
				State = 4217; Match(CLASSIFIER_FUNCTION);
				State = 4218; Match(EQUAL);
				State = 4224;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,442,_ctx) ) {
				case 1:
					{
					State = 4219; schema_name();
					State = 4220; Match(DOT);
					State = 4221; _localctx.function_name = id();
					}
					break;

				case 2:
					{
					State = 4223; Match(NULL);
					}
					break;
				}
				State = 4226; Match(RR_BRACKET);
				}
				break;

			case 3:
				{
				State = 4227; Match(RESET);
				State = 4228; Match(STATISTICS);
				}
				break;

			case 4:
				{
				State = 4229; Match(WITH);
				State = 4230; Match(LR_BRACKET);
				State = 4231; Match(MAX_OUTSTANDING_IO_PER_VOLUME);
				State = 4232; Match(EQUAL);
				State = 4233; _localctx.max_outstanding_io_per_volume = Match(DECIMAL);
				State = 4234; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_db_roleContext : ParserRuleContext {
		public IdContext role_name;
		public IdContext database_principal;
		public IdContext new_role_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode MEMBER() { return GetToken(TSqlParser.MEMBER, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public Alter_db_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_db_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_db_role(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_db_role(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_db_role(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_db_roleContext alter_db_role() {
		Alter_db_roleContext _localctx = new Alter_db_roleContext(_ctx, State);
		EnterRule(_localctx, 350, RULE_alter_db_role);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4237; Match(ALTER);
			State = 4238; Match(ROLE);
			State = 4239; _localctx.role_name = id();
			State = 4247;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ADD:
			case DROP:
				{
				State = 4240;
				_la = _input.La(1);
				if ( !(_la==ADD || _la==DROP) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 4241; Match(MEMBER);
				State = 4242; _localctx.database_principal = id();
				}
				break;
			case WITH:
				{
				State = 4243; Match(WITH);
				State = 4244; Match(NAME);
				State = 4245; Match(EQUAL);
				State = 4246; _localctx.new_role_name = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_db_roleContext : ParserRuleContext {
		public IdContext role_name;
		public IdContext owner_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public Create_db_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_db_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_db_role(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_db_role(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_db_role(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_db_roleContext create_db_role() {
		Create_db_roleContext _localctx = new Create_db_roleContext(_ctx, State);
		EnterRule(_localctx, 352, RULE_create_db_role);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4249; Match(CREATE);
			State = 4250; Match(ROLE);
			State = 4251; _localctx.role_name = id();
			State = 4254;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AUTHORIZATION) {
				{
				State = 4252; Match(AUTHORIZATION);
				State = 4253; _localctx.owner_name = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_routeContext : ParserRuleContext {
		public IdContext route_name;
		public IdContext owner_name;
		public IToken route_service_name;
		public IToken broker_instance_identifier;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode ROUTE() { return GetToken(TSqlParser.ROUTE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode ADDRESS() { return GetToken(TSqlParser.ADDRESS, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] QUOTED_URL() { return GetTokens(TSqlParser.QUOTED_URL); }
		public ITerminalNode QUOTED_URL(int i) {
			return GetToken(TSqlParser.QUOTED_URL, i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode SERVICE_NAME() { return GetToken(TSqlParser.SERVICE_NAME, 0); }
		public ITerminalNode BROKER_INSTANCE() { return GetToken(TSqlParser.BROKER_INSTANCE, 0); }
		public ITerminalNode LIFETIME() { return GetToken(TSqlParser.LIFETIME, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode MIRROR_ADDRESS() { return GetToken(TSqlParser.MIRROR_ADDRESS, 0); }
		public Create_routeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_route; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_route(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_route(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_route(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_routeContext create_route() {
		Create_routeContext _localctx = new Create_routeContext(_ctx, State);
		EnterRule(_localctx, 354, RULE_create_route);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4256; Match(CREATE);
			State = 4257; Match(ROUTE);
			State = 4258; _localctx.route_name = id();
			State = 4261;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AUTHORIZATION) {
				{
				State = 4259; Match(AUTHORIZATION);
				State = 4260; _localctx.owner_name = id();
				}
			}

			State = 4263; Match(WITH);
			State = 4270;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,448,_ctx) ) {
			case 1:
				{
				State = 4265;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 4264; Match(COMMA);
					}
				}

				State = 4267; Match(SERVICE_NAME);
				State = 4268; Match(EQUAL);
				State = 4269; _localctx.route_service_name = Match(STRING);
				}
				break;
			}
			State = 4278;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,450,_ctx) ) {
			case 1:
				{
				State = 4273;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 4272; Match(COMMA);
					}
				}

				State = 4275; Match(BROKER_INSTANCE);
				State = 4276; Match(EQUAL);
				State = 4277; _localctx.broker_instance_identifier = Match(STRING);
				}
				break;
			}
			State = 4286;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,452,_ctx) ) {
			case 1:
				{
				State = 4281;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 4280; Match(COMMA);
					}
				}

				State = 4283; Match(LIFETIME);
				State = 4284; Match(EQUAL);
				State = 4285; Match(DECIMAL);
				}
				break;
			}
			State = 4289;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 4288; Match(COMMA);
				}
			}

			State = 4291; Match(ADDRESS);
			State = 4292; Match(EQUAL);
			State = 4293;
			_la = _input.La(1);
			if ( !(_la==QUOTED_URL || _la==STRING) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 4298;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,454,_ctx) ) {
			case 1:
				{
				State = 4294; Match(COMMA);
				State = 4295; Match(MIRROR_ADDRESS);
				State = 4296; Match(EQUAL);
				State = 4297;
				_la = _input.La(1);
				if ( !(_la==QUOTED_URL || _la==STRING) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_ruleContext : ParserRuleContext {
		public IdContext rule_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode RULE() { return GetToken(TSqlParser.RULE, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Create_ruleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_rule; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_rule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_rule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_rule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_ruleContext create_rule() {
		Create_ruleContext _localctx = new Create_ruleContext(_ctx, State);
		EnterRule(_localctx, 356, RULE_create_rule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4300; Match(CREATE);
			State = 4301; Match(RULE);
			State = 4305;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,455,_ctx) ) {
			case 1:
				{
				State = 4302; schema_name();
				State = 4303; Match(DOT);
				}
				break;
			}
			State = 4307; _localctx.rule_name = id();
			State = 4308; Match(AS);
			State = 4309; search_condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_schema_sqlContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode[] SCHEMA() { return GetTokens(TSqlParser.SCHEMA); }
		public ITerminalNode SCHEMA(int i) {
			return GetToken(TSqlParser.SCHEMA, i);
		}
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public ITerminalNode TRANSFER() { return GetToken(TSqlParser.TRANSFER, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] COLON() { return GetTokens(TSqlParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(TSqlParser.COLON, i);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public Alter_schema_sqlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_schema_sql; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_schema_sql(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_schema_sql(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_schema_sql(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_schema_sqlContext alter_schema_sql() {
		Alter_schema_sqlContext _localctx = new Alter_schema_sqlContext(_ctx, State);
		EnterRule(_localctx, 358, RULE_alter_schema_sql);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4311; Match(ALTER);
			State = 4312; Match(SCHEMA);
			State = 4313; schema_name();
			State = 4314; Match(TRANSFER);
			State = 4324;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,457,_ctx) ) {
			case 1:
				{
				State = 4320;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case OBJECT:
					{
					State = 4315; Match(OBJECT);
					}
					break;
				case TYPE:
					{
					State = 4316; Match(TYPE);
					}
					break;
				case XML:
					{
					State = 4317; Match(XML);
					State = 4318; Match(SCHEMA);
					State = 4319; Match(COLLECTION);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 4322; Match(COLON);
				State = 4323; Match(COLON);
				}
				break;
			}
			State = 4326; id();
			State = 4329;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,458,_ctx) ) {
			case 1:
				{
				State = 4327; Match(DOT);
				State = 4328; id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_schemaContext : ParserRuleContext {
		public IdContext owner_name;
		public IdContext object_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode[] SCHEMA() { return GetTokens(TSqlParser.SCHEMA); }
		public ITerminalNode SCHEMA(int i) {
			return GetToken(TSqlParser.SCHEMA, i);
		}
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public Create_tableContext[] create_table() {
			return GetRuleContexts<Create_tableContext>();
		}
		public Create_tableContext create_table(int i) {
			return GetRuleContext<Create_tableContext>(i);
		}
		public Create_viewContext[] create_view() {
			return GetRuleContexts<Create_viewContext>();
		}
		public Create_viewContext create_view(int i) {
			return GetRuleContext<Create_viewContext>(i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		public ITerminalNode[] REVOKE() { return GetTokens(TSqlParser.REVOKE); }
		public ITerminalNode REVOKE(int i) {
			return GetToken(TSqlParser.REVOKE, i);
		}
		public ITerminalNode[] FROM() { return GetTokens(TSqlParser.FROM); }
		public ITerminalNode FROM(int i) {
			return GetToken(TSqlParser.FROM, i);
		}
		public ITerminalNode[] GRANT() { return GetTokens(TSqlParser.GRANT); }
		public ITerminalNode GRANT(int i) {
			return GetToken(TSqlParser.GRANT, i);
		}
		public ITerminalNode[] DENY() { return GetTokens(TSqlParser.DENY); }
		public ITerminalNode DENY(int i) {
			return GetToken(TSqlParser.DENY, i);
		}
		public ITerminalNode[] SELECT() { return GetTokens(TSqlParser.SELECT); }
		public ITerminalNode SELECT(int i) {
			return GetToken(TSqlParser.SELECT, i);
		}
		public ITerminalNode[] INSERT() { return GetTokens(TSqlParser.INSERT); }
		public ITerminalNode INSERT(int i) {
			return GetToken(TSqlParser.INSERT, i);
		}
		public ITerminalNode[] DELETE() { return GetTokens(TSqlParser.DELETE); }
		public ITerminalNode DELETE(int i) {
			return GetToken(TSqlParser.DELETE, i);
		}
		public ITerminalNode[] UPDATE() { return GetTokens(TSqlParser.UPDATE); }
		public ITerminalNode UPDATE(int i) {
			return GetToken(TSqlParser.UPDATE, i);
		}
		public ITerminalNode[] COLON() { return GetTokens(TSqlParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(TSqlParser.COLON, i);
		}
		public Create_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_schema; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_schema(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_schema(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_schema(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_schemaContext create_schema() {
		Create_schemaContext _localctx = new Create_schemaContext(_ctx, State);
		EnterRule(_localctx, 360, RULE_create_schema);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4331; Match(CREATE);
			State = 4332; Match(SCHEMA);
			State = 4340;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,459,_ctx) ) {
			case 1:
				{
				State = 4333; schema_name();
				}
				break;

			case 2:
				{
				State = 4334; Match(AUTHORIZATION);
				State = 4335; _localctx.owner_name = id();
				}
				break;

			case 3:
				{
				State = 4336; schema_name();
				State = 4337; Match(AUTHORIZATION);
				State = 4338; _localctx.owner_name = id();
				}
				break;
			}
			State = 4370;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,463,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					State = 4368;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,462,_ctx) ) {
					case 1:
						{
						State = 4342; create_table();
						}
						break;

					case 2:
						{
						State = 4343; create_view();
						}
						break;

					case 3:
						{
						State = 4344;
						_la = _input.La(1);
						if ( !(_la==DENY || _la==GRANT) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 4345;
						_la = _input.La(1);
						if ( !(_la==DELETE || _la==INSERT || _la==SELECT || _la==UPDATE) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 4346; Match(ON);
						State = 4350;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==SCHEMA) {
							{
							State = 4347; Match(SCHEMA);
							State = 4348; Match(COLON);
							State = 4349; Match(COLON);
							}
						}

						State = 4352; _localctx.object_name = id();
						State = 4353; Match(TO);
						State = 4354; _localctx.owner_name = id();
						}
						break;

					case 4:
						{
						State = 4356; Match(REVOKE);
						State = 4357;
						_la = _input.La(1);
						if ( !(_la==DELETE || _la==INSERT || _la==SELECT || _la==UPDATE) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 4358; Match(ON);
						State = 4362;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==SCHEMA) {
							{
							State = 4359; Match(SCHEMA);
							State = 4360; Match(COLON);
							State = 4361; Match(COLON);
							}
						}

						State = 4364; _localctx.object_name = id();
						State = 4365; Match(FROM);
						State = 4366; _localctx.owner_name = id();
						}
						break;
					}
					} 
				}
				State = 4372;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,463,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_schema_azure_sql_dw_and_pdwContext : ParserRuleContext {
		public IdContext owner_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Create_schema_azure_sql_dw_and_pdwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_schema_azure_sql_dw_and_pdw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_schema_azure_sql_dw_and_pdw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_schema_azure_sql_dw_and_pdw(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_schema_azure_sql_dw_and_pdw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_schema_azure_sql_dw_and_pdwContext create_schema_azure_sql_dw_and_pdw() {
		Create_schema_azure_sql_dw_and_pdwContext _localctx = new Create_schema_azure_sql_dw_and_pdwContext(_ctx, State);
		EnterRule(_localctx, 362, RULE_create_schema_azure_sql_dw_and_pdw);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4373; Match(CREATE);
			State = 4374; Match(SCHEMA);
			State = 4375; schema_name();
			State = 4378;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AUTHORIZATION) {
				{
				State = 4376; Match(AUTHORIZATION);
				State = 4377; _localctx.owner_name = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_schema_azure_sql_dw_and_pdwContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public ITerminalNode TRANSFER() { return GetToken(TSqlParser.TRANSFER, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		public ITerminalNode[] COLON() { return GetTokens(TSqlParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(TSqlParser.COLON, i);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode ID() { return GetToken(TSqlParser.ID, 0); }
		public Alter_schema_azure_sql_dw_and_pdwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_schema_azure_sql_dw_and_pdw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_schema_azure_sql_dw_and_pdw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_schema_azure_sql_dw_and_pdw(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_schema_azure_sql_dw_and_pdw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_schema_azure_sql_dw_and_pdwContext alter_schema_azure_sql_dw_and_pdw() {
		Alter_schema_azure_sql_dw_and_pdwContext _localctx = new Alter_schema_azure_sql_dw_and_pdwContext(_ctx, State);
		EnterRule(_localctx, 364, RULE_alter_schema_azure_sql_dw_and_pdw);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4380; Match(ALTER);
			State = 4381; Match(SCHEMA);
			State = 4382; schema_name();
			State = 4383; Match(TRANSFER);
			State = 4387;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,465,_ctx) ) {
			case 1:
				{
				State = 4384; Match(OBJECT);
				State = 4385; Match(COLON);
				State = 4386; Match(COLON);
				}
				break;
			}
			State = 4389; id();
			State = 4392;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,466,_ctx) ) {
			case 1:
				{
				State = 4390; Match(DOT);
				State = 4391; Match(ID);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_search_property_listContext : ParserRuleContext {
		public IdContext new_list_name;
		public IdContext source_list_name;
		public IdContext owner_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode SEARCH() { return GetToken(TSqlParser.SEARCH, 0); }
		public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		public ITerminalNode LIST() { return GetToken(TSqlParser.LIST, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Create_search_property_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_search_property_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_search_property_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_search_property_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_search_property_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_search_property_listContext create_search_property_list() {
		Create_search_property_listContext _localctx = new Create_search_property_listContext(_ctx, State);
		EnterRule(_localctx, 366, RULE_create_search_property_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4394; Match(CREATE);
			State = 4395; Match(SEARCH);
			State = 4396; Match(PROPERTY);
			State = 4397; Match(LIST);
			State = 4398; _localctx.new_list_name = id();
			State = 4406;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==FROM) {
				{
				State = 4399; Match(FROM);
				State = 4403;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,467,_ctx) ) {
				case 1:
					{
					State = 4400; database_name();
					State = 4401; Match(DOT);
					}
					break;
				}
				State = 4405; _localctx.source_list_name = id();
				}
			}

			State = 4410;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AUTHORIZATION) {
				{
				State = 4408; Match(AUTHORIZATION);
				State = 4409; _localctx.owner_name = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_security_policyContext : ParserRuleContext {
		public IdContext security_policy_name;
		public IdContext tvf_schema_name;
		public IdContext security_predicate_function_name;
		public IdContext column_name_or_arguments;
		public IdContext table_schema_name;
		public IdContext name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode SECURITY() { return GetToken(TSqlParser.SECURITY, 0); }
		public ITerminalNode POLICY() { return GetToken(TSqlParser.POLICY, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public ITerminalNode[] ADD() { return GetTokens(TSqlParser.ADD); }
		public ITerminalNode ADD(int i) {
			return GetToken(TSqlParser.ADD, i);
		}
		public ITerminalNode[] PREDICATE() { return GetTokens(TSqlParser.PREDICATE); }
		public ITerminalNode PREDICATE(int i) {
			return GetToken(TSqlParser.PREDICATE, i);
		}
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode REPLICATION() { return GetToken(TSqlParser.REPLICATION, 0); }
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] AFTER() { return GetTokens(TSqlParser.AFTER); }
		public ITerminalNode AFTER(int i) {
			return GetToken(TSqlParser.AFTER, i);
		}
		public ITerminalNode[] BEFORE() { return GetTokens(TSqlParser.BEFORE); }
		public ITerminalNode BEFORE(int i) {
			return GetToken(TSqlParser.BEFORE, i);
		}
		public ITerminalNode SCHEMABINDING() { return GetToken(TSqlParser.SCHEMABINDING, 0); }
		public ITerminalNode[] FILTER() { return GetTokens(TSqlParser.FILTER); }
		public ITerminalNode FILTER(int i) {
			return GetToken(TSqlParser.FILTER, i);
		}
		public ITerminalNode[] BLOCK() { return GetTokens(TSqlParser.BLOCK); }
		public ITerminalNode BLOCK(int i) {
			return GetToken(TSqlParser.BLOCK, i);
		}
		public ITerminalNode[] INSERT() { return GetTokens(TSqlParser.INSERT); }
		public ITerminalNode INSERT(int i) {
			return GetToken(TSqlParser.INSERT, i);
		}
		public ITerminalNode[] UPDATE() { return GetTokens(TSqlParser.UPDATE); }
		public ITerminalNode UPDATE(int i) {
			return GetToken(TSqlParser.UPDATE, i);
		}
		public ITerminalNode[] DELETE() { return GetTokens(TSqlParser.DELETE); }
		public ITerminalNode DELETE(int i) {
			return GetToken(TSqlParser.DELETE, i);
		}
		public Create_security_policyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_security_policy; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_security_policy(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_security_policy(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_security_policy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_security_policyContext create_security_policy() {
		Create_security_policyContext _localctx = new Create_security_policyContext(_ctx, State);
		EnterRule(_localctx, 368, RULE_create_security_policy);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4412; Match(CREATE);
			State = 4413; Match(SECURITY);
			State = 4414; Match(POLICY);
			State = 4418;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,470,_ctx) ) {
			case 1:
				{
				State = 4415; schema_name();
				State = 4416; Match(DOT);
				}
				break;
			}
			State = 4420; _localctx.security_policy_name = id();
			State = 4461;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 4422;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==COMMA) {
						{
						State = 4421; Match(COMMA);
						}
					}

					State = 4424; Match(ADD);
					State = 4426;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==BLOCK || _la==FILTER) {
						{
						State = 4425;
						_la = _input.La(1);
						if ( !(_la==BLOCK || _la==FILTER) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
					}

					State = 4428; Match(PREDICATE);
					State = 4429; _localctx.tvf_schema_name = id();
					State = 4430; Match(DOT);
					State = 4431; _localctx.security_predicate_function_name = id();
					State = 4432; Match(LR_BRACKET);
					State = 4437;
					_errHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 4434;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,473,_ctx) ) {
							case 1:
								{
								State = 4433; Match(COMMA);
								}
								break;
							}
							State = 4436; _localctx.column_name_or_arguments = id();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 4439;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,474,_ctx);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					State = 4441; Match(RR_BRACKET);
					State = 4442; Match(ON);
					State = 4443; _localctx.table_schema_name = id();
					State = 4444; Match(DOT);
					State = 4445; _localctx.name = id();
					State = 4458;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,478,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							State = 4456;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,477,_ctx) ) {
							case 1:
								{
								State = 4447;
								_errHandler.Sync(this);
								_la = _input.La(1);
								if (_la==COMMA) {
									{
									State = 4446; Match(COMMA);
									}
								}

								State = 4449; Match(AFTER);
								State = 4450;
								_la = _input.La(1);
								if ( !(_la==INSERT || _la==UPDATE) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								}
								break;

							case 2:
								{
								State = 4452;
								_errHandler.Sync(this);
								_la = _input.La(1);
								if (_la==COMMA) {
									{
									State = 4451; Match(COMMA);
									}
								}

								State = 4454; Match(BEFORE);
								State = 4455;
								_la = _input.La(1);
								if ( !(_la==DELETE || _la==UPDATE) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								}
								break;
							}
							} 
						}
						State = 4460;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,478,_ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 4463;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,479,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 4475;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,481,_ctx) ) {
			case 1:
				{
				State = 4465; Match(WITH);
				State = 4466; Match(LR_BRACKET);
				State = 4467; Match(STATE);
				State = 4468; Match(EQUAL);
				State = 4469;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 4472;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==SCHEMABINDING) {
					{
					State = 4470; Match(SCHEMABINDING);
					State = 4471;
					_la = _input.La(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
				}

				State = 4474; Match(RR_BRACKET);
				}
				break;
			}
			State = 4480;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==NOT) {
				{
				State = 4477; Match(NOT);
				State = 4478; Match(FOR);
				State = 4479; Match(REPLICATION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_sequenceContext : ParserRuleContext {
		public IdContext sequence_name;
		public IToken sequnce_increment;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode SEQUENCE() { return GetToken(TSqlParser.SEQUENCE, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode RESTART() { return GetToken(TSqlParser.RESTART, 0); }
		public ITerminalNode INCREMENT() { return GetToken(TSqlParser.INCREMENT, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode MINVALUE() { return GetToken(TSqlParser.MINVALUE, 0); }
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] NO() { return GetTokens(TSqlParser.NO); }
		public ITerminalNode NO(int i) {
			return GetToken(TSqlParser.NO, i);
		}
		public ITerminalNode MAXVALUE() { return GetToken(TSqlParser.MAXVALUE, 0); }
		public ITerminalNode CYCLE() { return GetToken(TSqlParser.CYCLE, 0); }
		public ITerminalNode CACHE() { return GetToken(TSqlParser.CACHE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Alter_sequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_sequence; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_sequence(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_sequence(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_sequence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_sequenceContext alter_sequence() {
		Alter_sequenceContext _localctx = new Alter_sequenceContext(_ctx, State);
		EnterRule(_localctx, 370, RULE_alter_sequence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4482; Match(ALTER);
			State = 4483; Match(SEQUENCE);
			State = 4487;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,483,_ctx) ) {
			case 1:
				{
				State = 4484; schema_name();
				State = 4485; Match(DOT);
				}
				break;
			}
			State = 4489; _localctx.sequence_name = id();
			State = 4495;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,485,_ctx) ) {
			case 1:
				{
				State = 4490; Match(RESTART);
				State = 4493;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,484,_ctx) ) {
				case 1:
					{
					State = 4491; Match(WITH);
					State = 4492; Match(DECIMAL);
					}
					break;
				}
				}
				break;
			}
			State = 4500;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,486,_ctx) ) {
			case 1:
				{
				State = 4497; Match(INCREMENT);
				State = 4498; Match(BY);
				State = 4499; _localctx.sequnce_increment = Match(DECIMAL);
				}
				break;
			}
			State = 4506;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,487,_ctx) ) {
			case 1:
				{
				State = 4502; Match(MINVALUE);
				State = 4503; Match(DECIMAL);
				}
				break;

			case 2:
				{
				State = 4504; Match(NO);
				State = 4505; Match(MINVALUE);
				}
				break;
			}
			State = 4512;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,488,_ctx) ) {
			case 1:
				{
				State = 4508; Match(MAXVALUE);
				State = 4509; Match(DECIMAL);
				}
				break;

			case 2:
				{
				State = 4510; Match(NO);
				State = 4511; Match(MAXVALUE);
				}
				break;
			}
			State = 4517;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,489,_ctx) ) {
			case 1:
				{
				State = 4514; Match(CYCLE);
				}
				break;

			case 2:
				{
				State = 4515; Match(NO);
				State = 4516; Match(CYCLE);
				}
				break;
			}
			State = 4523;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,490,_ctx) ) {
			case 1:
				{
				State = 4519; Match(CACHE);
				State = 4520; Match(DECIMAL);
				}
				break;

			case 2:
				{
				State = 4521; Match(NO);
				State = 4522; Match(CACHE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_sequenceContext : ParserRuleContext {
		public IdContext sequence_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode SEQUENCE() { return GetToken(TSqlParser.SEQUENCE, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ITerminalNode START() { return GetToken(TSqlParser.START, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode INCREMENT() { return GetToken(TSqlParser.INCREMENT, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode MINVALUE() { return GetToken(TSqlParser.MINVALUE, 0); }
		public ITerminalNode[] NO() { return GetTokens(TSqlParser.NO); }
		public ITerminalNode NO(int i) {
			return GetToken(TSqlParser.NO, i);
		}
		public ITerminalNode MAXVALUE() { return GetToken(TSqlParser.MAXVALUE, 0); }
		public ITerminalNode CYCLE() { return GetToken(TSqlParser.CYCLE, 0); }
		public ITerminalNode CACHE() { return GetToken(TSqlParser.CACHE, 0); }
		public ITerminalNode MINUS() { return GetToken(TSqlParser.MINUS, 0); }
		public Create_sequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_sequence; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_sequence(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_sequence(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_sequence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_sequenceContext create_sequence() {
		Create_sequenceContext _localctx = new Create_sequenceContext(_ctx, State);
		EnterRule(_localctx, 372, RULE_create_sequence);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4525; Match(CREATE);
			State = 4526; Match(SEQUENCE);
			State = 4530;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,491,_ctx) ) {
			case 1:
				{
				State = 4527; schema_name();
				State = 4528; Match(DOT);
				}
				break;
			}
			State = 4532; _localctx.sequence_name = id();
			State = 4535;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 4533; Match(AS);
				State = 4534; data_type();
				}
			}

			State = 4540;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,493,_ctx) ) {
			case 1:
				{
				State = 4537; Match(START);
				State = 4538; Match(WITH);
				State = 4539; Match(DECIMAL);
				}
				break;
			}
			State = 4548;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,495,_ctx) ) {
			case 1:
				{
				State = 4542; Match(INCREMENT);
				State = 4543; Match(BY);
				State = 4545;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==MINUS) {
					{
					State = 4544; Match(MINUS);
					}
				}

				State = 4547; Match(DECIMAL);
				}
				break;
			}
			State = 4556;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,497,_ctx) ) {
			case 1:
				{
				State = 4550; Match(MINVALUE);
				State = 4552;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,496,_ctx) ) {
				case 1:
					{
					State = 4551; Match(DECIMAL);
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 4554; Match(NO);
				State = 4555; Match(MINVALUE);
				}
				break;
			}
			State = 4564;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,499,_ctx) ) {
			case 1:
				{
				State = 4558; Match(MAXVALUE);
				State = 4560;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,498,_ctx) ) {
				case 1:
					{
					State = 4559; Match(DECIMAL);
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 4562; Match(NO);
				State = 4563; Match(MAXVALUE);
				}
				break;
			}
			State = 4569;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,500,_ctx) ) {
			case 1:
				{
				State = 4566; Match(CYCLE);
				}
				break;

			case 2:
				{
				State = 4567; Match(NO);
				State = 4568; Match(CYCLE);
				}
				break;
			}
			State = 4577;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,502,_ctx) ) {
			case 1:
				{
				State = 4571; Match(CACHE);
				State = 4573;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,501,_ctx) ) {
				case 1:
					{
					State = 4572; Match(DECIMAL);
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 4575; Match(NO);
				State = 4576; Match(CACHE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_server_auditContext : ParserRuleContext {
		public IdContext audit_name;
		public IToken filepath;
		public IToken max_rollover_files;
		public IToken max_files;
		public IToken queue_delay;
		public IdContext event_field_name;
		public IdContext new_audit_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode AUDIT() { return GetToken(TSqlParser.AUDIT, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode WHERE() { return GetToken(TSqlParser.WHERE, 0); }
		public ITerminalNode MODIFY() { return GetToken(TSqlParser.MODIFY, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode APPLICATION_LOG() { return GetToken(TSqlParser.APPLICATION_LOG, 0); }
		public ITerminalNode SECURITY_LOG() { return GetToken(TSqlParser.SECURITY_LOG, 0); }
		public ITerminalNode[] QUEUE_DELAY() { return GetTokens(TSqlParser.QUEUE_DELAY); }
		public ITerminalNode QUEUE_DELAY(int i) {
			return GetToken(TSqlParser.QUEUE_DELAY, i);
		}
		public ITerminalNode[] ON_FAILURE() { return GetTokens(TSqlParser.ON_FAILURE); }
		public ITerminalNode ON_FAILURE(int i) {
			return GetToken(TSqlParser.ON_FAILURE, i);
		}
		public ITerminalNode[] STATE() { return GetTokens(TSqlParser.STATE); }
		public ITerminalNode STATE(int i) {
			return GetToken(TSqlParser.STATE, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode AND() { return GetToken(TSqlParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(TSqlParser.OR, 0); }
		public ITerminalNode[] CONTINUE() { return GetTokens(TSqlParser.CONTINUE); }
		public ITerminalNode CONTINUE(int i) {
			return GetToken(TSqlParser.CONTINUE, i);
		}
		public ITerminalNode[] SHUTDOWN() { return GetTokens(TSqlParser.SHUTDOWN); }
		public ITerminalNode SHUTDOWN(int i) {
			return GetToken(TSqlParser.SHUTDOWN, i);
		}
		public ITerminalNode[] FAIL_OPERATION() { return GetTokens(TSqlParser.FAIL_OPERATION); }
		public ITerminalNode FAIL_OPERATION(int i) {
			return GetToken(TSqlParser.FAIL_OPERATION, i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode GREATER() { return GetToken(TSqlParser.GREATER, 0); }
		public ITerminalNode LESS() { return GetToken(TSqlParser.LESS, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public ITerminalNode EXCLAMATION() { return GetToken(TSqlParser.EXCLAMATION, 0); }
		public ITerminalNode[] FILEPATH() { return GetTokens(TSqlParser.FILEPATH); }
		public ITerminalNode FILEPATH(int i) {
			return GetToken(TSqlParser.FILEPATH, i);
		}
		public ITerminalNode[] MAXSIZE() { return GetTokens(TSqlParser.MAXSIZE); }
		public ITerminalNode MAXSIZE(int i) {
			return GetToken(TSqlParser.MAXSIZE, i);
		}
		public ITerminalNode[] MAX_ROLLOVER_FILES() { return GetTokens(TSqlParser.MAX_ROLLOVER_FILES); }
		public ITerminalNode MAX_ROLLOVER_FILES(int i) {
			return GetToken(TSqlParser.MAX_ROLLOVER_FILES, i);
		}
		public ITerminalNode[] MAX_FILES() { return GetTokens(TSqlParser.MAX_FILES); }
		public ITerminalNode MAX_FILES(int i) {
			return GetToken(TSqlParser.MAX_FILES, i);
		}
		public ITerminalNode[] RESERVE_DISK_SPACE() { return GetTokens(TSqlParser.RESERVE_DISK_SPACE); }
		public ITerminalNode RESERVE_DISK_SPACE(int i) {
			return GetToken(TSqlParser.RESERVE_DISK_SPACE, i);
		}
		public ITerminalNode[] UNLIMITED() { return GetTokens(TSqlParser.UNLIMITED); }
		public ITerminalNode UNLIMITED(int i) {
			return GetToken(TSqlParser.UNLIMITED, i);
		}
		public ITerminalNode[] MB() { return GetTokens(TSqlParser.MB); }
		public ITerminalNode MB(int i) {
			return GetToken(TSqlParser.MB, i);
		}
		public ITerminalNode[] GB() { return GetTokens(TSqlParser.GB); }
		public ITerminalNode GB(int i) {
			return GetToken(TSqlParser.GB, i);
		}
		public ITerminalNode[] TB() { return GetTokens(TSqlParser.TB); }
		public ITerminalNode TB(int i) {
			return GetToken(TSqlParser.TB, i);
		}
		public Alter_server_auditContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_server_audit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_server_audit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_server_audit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_server_audit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_server_auditContext alter_server_audit() {
		Alter_server_auditContext _localctx = new Alter_server_auditContext(_ctx, State);
		EnterRule(_localctx, 374, RULE_alter_server_audit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4579; Match(ALTER);
			State = 4580; Match(SERVER);
			State = 4581; Match(AUDIT);
			State = 4582; _localctx.audit_name = id();
			State = 4714;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,527,_ctx) ) {
			case 1:
				{
				State = 4630;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==TO) {
					{
					State = 4583; Match(TO);
					State = 4628;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case FILE:
						{
						State = 4584; Match(FILE);
						{
						State = 4585; Match(LR_BRACKET);
						State = 4622;
						_errHandler.Sync(this);
						_la = _input.La(1);
						while (_la==FILEPATH || ((((_la - 588)) & ~0x3f) == 0 && ((1L << (_la - 588)) & ((1L << (MAX_FILES - 588)) | (1L << (MAX_ROLLOVER_FILES - 588)) | (1L << (MAXSIZE - 588)))) != 0) || _la==RESERVE_DISK_SPACE || _la==COMMA) {
							{
							State = 4620;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,509,_ctx) ) {
							case 1:
								{
								State = 4587;
								_errHandler.Sync(this);
								_la = _input.La(1);
								if (_la==COMMA) {
									{
									State = 4586; Match(COMMA);
									}
								}

								State = 4589; Match(FILEPATH);
								State = 4590; Match(EQUAL);
								State = 4591; _localctx.filepath = Match(STRING);
								}
								break;

							case 2:
								{
								State = 4593;
								_errHandler.Sync(this);
								_la = _input.La(1);
								if (_la==COMMA) {
									{
									State = 4592; Match(COMMA);
									}
								}

								State = 4595; Match(MAXSIZE);
								State = 4596; Match(EQUAL);
								State = 4600;
								_errHandler.Sync(this);
								switch (_input.La(1)) {
								case DECIMAL:
									{
									State = 4597; Match(DECIMAL);
									State = 4598;
									_la = _input.La(1);
									if ( !(_la==GB || _la==MB || _la==TB) ) {
									_errHandler.RecoverInline(this);
									} else {
										if (_input.La(1) == TokenConstants.Eof) {
											matchedEOF = true;
										}

										_errHandler.ReportMatch(this);
										Consume();
									}
									}
									break;
								case UNLIMITED:
									{
									State = 4599; Match(UNLIMITED);
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								break;

							case 3:
								{
								State = 4603;
								_errHandler.Sync(this);
								_la = _input.La(1);
								if (_la==COMMA) {
									{
									State = 4602; Match(COMMA);
									}
								}

								State = 4605; Match(MAX_ROLLOVER_FILES);
								State = 4606; Match(EQUAL);
								State = 4607;
								_localctx.max_rollover_files = _input.Lt(1);
								_la = _input.La(1);
								if ( !(_la==UNLIMITED || _la==DECIMAL) ) {
									_localctx.max_rollover_files = _errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								}
								break;

							case 4:
								{
								State = 4609;
								_errHandler.Sync(this);
								_la = _input.La(1);
								if (_la==COMMA) {
									{
									State = 4608; Match(COMMA);
									}
								}

								State = 4611; Match(MAX_FILES);
								State = 4612; Match(EQUAL);
								State = 4613; _localctx.max_files = Match(DECIMAL);
								}
								break;

							case 5:
								{
								State = 4615;
								_errHandler.Sync(this);
								_la = _input.La(1);
								if (_la==COMMA) {
									{
									State = 4614; Match(COMMA);
									}
								}

								State = 4617; Match(RESERVE_DISK_SPACE);
								State = 4618; Match(EQUAL);
								State = 4619;
								_la = _input.La(1);
								if ( !(_la==OFF || _la==ON) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								}
								break;
							}
							}
							State = 4624;
							_errHandler.Sync(this);
							_la = _input.La(1);
						}
						State = 4625; Match(RR_BRACKET);
						}
						}
						break;
					case APPLICATION_LOG:
						{
						State = 4626; Match(APPLICATION_LOG);
						}
						break;
					case SECURITY_LOG:
						{
						State = 4627; Match(SECURITY_LOG);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				State = 4658;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,518,_ctx) ) {
				case 1:
					{
					State = 4632; Match(WITH);
					State = 4633; Match(LR_BRACKET);
					State = 4654;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==ON_FAILURE || _la==STATE || _la==QUEUE_DELAY || _la==COMMA) {
						{
						State = 4652;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,516,_ctx) ) {
						case 1:
							{
							State = 4635;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 4634; Match(COMMA);
								}
							}

							State = 4637; Match(QUEUE_DELAY);
							State = 4638; Match(EQUAL);
							State = 4639; _localctx.queue_delay = Match(DECIMAL);
							}
							break;

						case 2:
							{
							State = 4641;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 4640; Match(COMMA);
								}
							}

							State = 4643; Match(ON_FAILURE);
							State = 4644; Match(EQUAL);
							State = 4645;
							_la = _input.La(1);
							if ( !(_la==CONTINUE || _la==SHUTDOWN || _la==FAIL_OPERATION) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 3:
							{
							State = 4647;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 4646; Match(COMMA);
								}
							}

							State = 4649; Match(STATE);
							State = 4650; Match(EQUAL);
							State = 4651;
							_la = _input.La(1);
							if ( !(_la==OFF || _la==ON) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;
						}
						}
						State = 4656;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 4657; Match(RR_BRACKET);
					}
					break;
				}
				State = 4706;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WHERE) {
					{
					State = 4660; Match(WHERE);
					State = 4704;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,525,_ctx) ) {
					case 1:
						{
						State = 4662;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,519,_ctx) ) {
						case 1:
							{
							State = 4661; Match(COMMA);
							}
							break;
						}
						{
						State = 4665;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==NOT) {
							{
							State = 4664; Match(NOT);
							}
						}

						}
						State = 4667; _localctx.event_field_name = id();
						State = 4679;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,521,_ctx) ) {
						case 1:
							{
							State = 4668; Match(EQUAL);
							}
							break;

						case 2:
							{
							{
							State = 4669; Match(LESS);
							State = 4670; Match(GREATER);
							}
							}
							break;

						case 3:
							{
							{
							State = 4671; Match(EXCLAMATION);
							State = 4672; Match(EQUAL);
							}
							}
							break;

						case 4:
							{
							State = 4673; Match(GREATER);
							}
							break;

						case 5:
							{
							{
							State = 4674; Match(GREATER);
							State = 4675; Match(EQUAL);
							}
							}
							break;

						case 6:
							{
							State = 4676; Match(LESS);
							}
							break;

						case 7:
							{
							State = 4677; Match(LESS);
							State = 4678; Match(EQUAL);
							}
							break;
						}
						State = 4681;
						_la = _input.La(1);
						if ( !(_la==DECIMAL || _la==STRING) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;

					case 2:
						{
						State = 4684;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==COMMA) {
							{
							State = 4683; Match(COMMA);
							}
						}

						State = 4686;
						_la = _input.La(1);
						if ( !(_la==AND || _la==OR) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 4688;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==NOT) {
							{
							State = 4687; Match(NOT);
							}
						}

						State = 4701;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,524,_ctx) ) {
						case 1:
							{
							State = 4690; Match(EQUAL);
							}
							break;

						case 2:
							{
							{
							State = 4691; Match(LESS);
							State = 4692; Match(GREATER);
							}
							}
							break;

						case 3:
							{
							{
							State = 4693; Match(EXCLAMATION);
							State = 4694; Match(EQUAL);
							}
							}
							break;

						case 4:
							{
							State = 4695; Match(GREATER);
							}
							break;

						case 5:
							{
							{
							State = 4696; Match(GREATER);
							State = 4697; Match(EQUAL);
							}
							}
							break;

						case 6:
							{
							State = 4698; Match(LESS);
							}
							break;

						case 7:
							{
							State = 4699; Match(LESS);
							State = 4700; Match(EQUAL);
							}
							break;
						}
						State = 4703;
						_la = _input.La(1);
						if ( !(_la==DECIMAL || _la==STRING) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					}
				}

				}
				break;

			case 2:
				{
				State = 4708; Match(REMOVE);
				State = 4709; Match(WHERE);
				}
				break;

			case 3:
				{
				State = 4710; Match(MODIFY);
				State = 4711; Match(NAME);
				State = 4712; Match(EQUAL);
				State = 4713; _localctx.new_audit_name = id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_server_auditContext : ParserRuleContext {
		public IdContext audit_name;
		public IToken filepath;
		public IToken max_rollover_files;
		public IToken max_files;
		public IToken queue_delay;
		public IdContext audit_guid;
		public IdContext event_field_name;
		public IdContext new_audit_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode AUDIT() { return GetToken(TSqlParser.AUDIT, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode WHERE() { return GetToken(TSqlParser.WHERE, 0); }
		public ITerminalNode MODIFY() { return GetToken(TSqlParser.MODIFY, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode APPLICATION_LOG() { return GetToken(TSqlParser.APPLICATION_LOG, 0); }
		public ITerminalNode SECURITY_LOG() { return GetToken(TSqlParser.SECURITY_LOG, 0); }
		public ITerminalNode[] QUEUE_DELAY() { return GetTokens(TSqlParser.QUEUE_DELAY); }
		public ITerminalNode QUEUE_DELAY(int i) {
			return GetToken(TSqlParser.QUEUE_DELAY, i);
		}
		public ITerminalNode[] ON_FAILURE() { return GetTokens(TSqlParser.ON_FAILURE); }
		public ITerminalNode ON_FAILURE(int i) {
			return GetToken(TSqlParser.ON_FAILURE, i);
		}
		public ITerminalNode[] STATE() { return GetTokens(TSqlParser.STATE); }
		public ITerminalNode STATE(int i) {
			return GetToken(TSqlParser.STATE, i);
		}
		public ITerminalNode[] AUDIT_GUID() { return GetTokens(TSqlParser.AUDIT_GUID); }
		public ITerminalNode AUDIT_GUID(int i) {
			return GetToken(TSqlParser.AUDIT_GUID, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode AND() { return GetToken(TSqlParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(TSqlParser.OR, 0); }
		public ITerminalNode[] CONTINUE() { return GetTokens(TSqlParser.CONTINUE); }
		public ITerminalNode CONTINUE(int i) {
			return GetToken(TSqlParser.CONTINUE, i);
		}
		public ITerminalNode[] SHUTDOWN() { return GetTokens(TSqlParser.SHUTDOWN); }
		public ITerminalNode SHUTDOWN(int i) {
			return GetToken(TSqlParser.SHUTDOWN, i);
		}
		public ITerminalNode[] FAIL_OPERATION() { return GetTokens(TSqlParser.FAIL_OPERATION); }
		public ITerminalNode FAIL_OPERATION(int i) {
			return GetToken(TSqlParser.FAIL_OPERATION, i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode GREATER() { return GetToken(TSqlParser.GREATER, 0); }
		public ITerminalNode LESS() { return GetToken(TSqlParser.LESS, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public ITerminalNode EXCLAMATION() { return GetToken(TSqlParser.EXCLAMATION, 0); }
		public ITerminalNode[] FILEPATH() { return GetTokens(TSqlParser.FILEPATH); }
		public ITerminalNode FILEPATH(int i) {
			return GetToken(TSqlParser.FILEPATH, i);
		}
		public ITerminalNode[] MAXSIZE() { return GetTokens(TSqlParser.MAXSIZE); }
		public ITerminalNode MAXSIZE(int i) {
			return GetToken(TSqlParser.MAXSIZE, i);
		}
		public ITerminalNode[] MAX_ROLLOVER_FILES() { return GetTokens(TSqlParser.MAX_ROLLOVER_FILES); }
		public ITerminalNode MAX_ROLLOVER_FILES(int i) {
			return GetToken(TSqlParser.MAX_ROLLOVER_FILES, i);
		}
		public ITerminalNode[] MAX_FILES() { return GetTokens(TSqlParser.MAX_FILES); }
		public ITerminalNode MAX_FILES(int i) {
			return GetToken(TSqlParser.MAX_FILES, i);
		}
		public ITerminalNode[] RESERVE_DISK_SPACE() { return GetTokens(TSqlParser.RESERVE_DISK_SPACE); }
		public ITerminalNode RESERVE_DISK_SPACE(int i) {
			return GetToken(TSqlParser.RESERVE_DISK_SPACE, i);
		}
		public ITerminalNode[] UNLIMITED() { return GetTokens(TSqlParser.UNLIMITED); }
		public ITerminalNode UNLIMITED(int i) {
			return GetToken(TSqlParser.UNLIMITED, i);
		}
		public ITerminalNode[] MB() { return GetTokens(TSqlParser.MB); }
		public ITerminalNode MB(int i) {
			return GetToken(TSqlParser.MB, i);
		}
		public ITerminalNode[] GB() { return GetTokens(TSqlParser.GB); }
		public ITerminalNode GB(int i) {
			return GetToken(TSqlParser.GB, i);
		}
		public ITerminalNode[] TB() { return GetTokens(TSqlParser.TB); }
		public ITerminalNode TB(int i) {
			return GetToken(TSqlParser.TB, i);
		}
		public Create_server_auditContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_server_audit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_server_audit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_server_audit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_server_audit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_server_auditContext create_server_audit() {
		Create_server_auditContext _localctx = new Create_server_auditContext(_ctx, State);
		EnterRule(_localctx, 376, RULE_create_server_audit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4716; Match(CREATE);
			State = 4717; Match(SERVER);
			State = 4718; Match(AUDIT);
			State = 4719; _localctx.audit_name = id();
			State = 4857;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,553,_ctx) ) {
			case 1:
				{
				State = 4767;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==TO) {
					{
					State = 4720; Match(TO);
					State = 4765;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case FILE:
						{
						State = 4721; Match(FILE);
						{
						State = 4722; Match(LR_BRACKET);
						State = 4759;
						_errHandler.Sync(this);
						_la = _input.La(1);
						while (_la==FILEPATH || ((((_la - 588)) & ~0x3f) == 0 && ((1L << (_la - 588)) & ((1L << (MAX_FILES - 588)) | (1L << (MAX_ROLLOVER_FILES - 588)) | (1L << (MAXSIZE - 588)))) != 0) || _la==RESERVE_DISK_SPACE || _la==COMMA) {
							{
							State = 4757;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,534,_ctx) ) {
							case 1:
								{
								State = 4724;
								_errHandler.Sync(this);
								_la = _input.La(1);
								if (_la==COMMA) {
									{
									State = 4723; Match(COMMA);
									}
								}

								State = 4726; Match(FILEPATH);
								State = 4727; Match(EQUAL);
								State = 4728; _localctx.filepath = Match(STRING);
								}
								break;

							case 2:
								{
								State = 4730;
								_errHandler.Sync(this);
								_la = _input.La(1);
								if (_la==COMMA) {
									{
									State = 4729; Match(COMMA);
									}
								}

								State = 4732; Match(MAXSIZE);
								State = 4733; Match(EQUAL);
								State = 4737;
								_errHandler.Sync(this);
								switch (_input.La(1)) {
								case DECIMAL:
									{
									State = 4734; Match(DECIMAL);
									State = 4735;
									_la = _input.La(1);
									if ( !(_la==GB || _la==MB || _la==TB) ) {
									_errHandler.RecoverInline(this);
									} else {
										if (_input.La(1) == TokenConstants.Eof) {
											matchedEOF = true;
										}

										_errHandler.ReportMatch(this);
										Consume();
									}
									}
									break;
								case UNLIMITED:
									{
									State = 4736; Match(UNLIMITED);
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								break;

							case 3:
								{
								State = 4740;
								_errHandler.Sync(this);
								_la = _input.La(1);
								if (_la==COMMA) {
									{
									State = 4739; Match(COMMA);
									}
								}

								State = 4742; Match(MAX_ROLLOVER_FILES);
								State = 4743; Match(EQUAL);
								State = 4744;
								_localctx.max_rollover_files = _input.Lt(1);
								_la = _input.La(1);
								if ( !(_la==UNLIMITED || _la==DECIMAL) ) {
									_localctx.max_rollover_files = _errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								}
								break;

							case 4:
								{
								State = 4746;
								_errHandler.Sync(this);
								_la = _input.La(1);
								if (_la==COMMA) {
									{
									State = 4745; Match(COMMA);
									}
								}

								State = 4748; Match(MAX_FILES);
								State = 4749; Match(EQUAL);
								State = 4750; _localctx.max_files = Match(DECIMAL);
								}
								break;

							case 5:
								{
								State = 4752;
								_errHandler.Sync(this);
								_la = _input.La(1);
								if (_la==COMMA) {
									{
									State = 4751; Match(COMMA);
									}
								}

								State = 4754; Match(RESERVE_DISK_SPACE);
								State = 4755; Match(EQUAL);
								State = 4756;
								_la = _input.La(1);
								if ( !(_la==OFF || _la==ON) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								}
								break;
							}
							}
							State = 4761;
							_errHandler.Sync(this);
							_la = _input.La(1);
						}
						State = 4762; Match(RR_BRACKET);
						}
						}
						break;
					case APPLICATION_LOG:
						{
						State = 4763; Match(APPLICATION_LOG);
						}
						break;
					case SECURITY_LOG:
						{
						State = 4764; Match(SECURITY_LOG);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				State = 4801;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,544,_ctx) ) {
				case 1:
					{
					State = 4769; Match(WITH);
					State = 4770; Match(LR_BRACKET);
					State = 4797;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==ON_FAILURE || _la==STATE || _la==AUDIT_GUID || _la==QUEUE_DELAY || _la==COMMA) {
						{
						State = 4795;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,542,_ctx) ) {
						case 1:
							{
							State = 4772;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 4771; Match(COMMA);
								}
							}

							State = 4774; Match(QUEUE_DELAY);
							State = 4775; Match(EQUAL);
							State = 4776; _localctx.queue_delay = Match(DECIMAL);
							}
							break;

						case 2:
							{
							State = 4778;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 4777; Match(COMMA);
								}
							}

							State = 4780; Match(ON_FAILURE);
							State = 4781; Match(EQUAL);
							State = 4782;
							_la = _input.La(1);
							if ( !(_la==CONTINUE || _la==SHUTDOWN || _la==FAIL_OPERATION) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 3:
							{
							State = 4784;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 4783; Match(COMMA);
								}
							}

							State = 4786; Match(STATE);
							State = 4787; Match(EQUAL);
							State = 4788;
							_la = _input.La(1);
							if ( !(_la==OFF || _la==ON) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 4:
							{
							State = 4790;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 4789; Match(COMMA);
								}
							}

							State = 4792; Match(AUDIT_GUID);
							State = 4793; Match(EQUAL);
							State = 4794; _localctx.audit_guid = id();
							}
							break;
						}
						}
						State = 4799;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 4800; Match(RR_BRACKET);
					}
					break;
				}
				State = 4849;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WHERE) {
					{
					State = 4803; Match(WHERE);
					State = 4847;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,551,_ctx) ) {
					case 1:
						{
						State = 4805;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,545,_ctx) ) {
						case 1:
							{
							State = 4804; Match(COMMA);
							}
							break;
						}
						{
						State = 4808;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==NOT) {
							{
							State = 4807; Match(NOT);
							}
						}

						}
						State = 4810; _localctx.event_field_name = id();
						State = 4822;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,547,_ctx) ) {
						case 1:
							{
							State = 4811; Match(EQUAL);
							}
							break;

						case 2:
							{
							{
							State = 4812; Match(LESS);
							State = 4813; Match(GREATER);
							}
							}
							break;

						case 3:
							{
							{
							State = 4814; Match(EXCLAMATION);
							State = 4815; Match(EQUAL);
							}
							}
							break;

						case 4:
							{
							State = 4816; Match(GREATER);
							}
							break;

						case 5:
							{
							{
							State = 4817; Match(GREATER);
							State = 4818; Match(EQUAL);
							}
							}
							break;

						case 6:
							{
							State = 4819; Match(LESS);
							}
							break;

						case 7:
							{
							State = 4820; Match(LESS);
							State = 4821; Match(EQUAL);
							}
							break;
						}
						State = 4824;
						_la = _input.La(1);
						if ( !(_la==DECIMAL || _la==STRING) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;

					case 2:
						{
						State = 4827;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==COMMA) {
							{
							State = 4826; Match(COMMA);
							}
						}

						State = 4829;
						_la = _input.La(1);
						if ( !(_la==AND || _la==OR) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 4831;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==NOT) {
							{
							State = 4830; Match(NOT);
							}
						}

						State = 4844;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,550,_ctx) ) {
						case 1:
							{
							State = 4833; Match(EQUAL);
							}
							break;

						case 2:
							{
							{
							State = 4834; Match(LESS);
							State = 4835; Match(GREATER);
							}
							}
							break;

						case 3:
							{
							{
							State = 4836; Match(EXCLAMATION);
							State = 4837; Match(EQUAL);
							}
							}
							break;

						case 4:
							{
							State = 4838; Match(GREATER);
							}
							break;

						case 5:
							{
							{
							State = 4839; Match(GREATER);
							State = 4840; Match(EQUAL);
							}
							}
							break;

						case 6:
							{
							State = 4841; Match(LESS);
							}
							break;

						case 7:
							{
							State = 4842; Match(LESS);
							State = 4843; Match(EQUAL);
							}
							break;
						}
						State = 4846;
						_la = _input.La(1);
						if ( !(_la==DECIMAL || _la==STRING) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					}
				}

				}
				break;

			case 2:
				{
				State = 4851; Match(REMOVE);
				State = 4852; Match(WHERE);
				}
				break;

			case 3:
				{
				State = 4853; Match(MODIFY);
				State = 4854; Match(NAME);
				State = 4855; Match(EQUAL);
				State = 4856; _localctx.new_audit_name = id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_server_audit_specificationContext : ParserRuleContext {
		public IdContext audit_specification_name;
		public IdContext audit_name;
		public IdContext audit_action_group_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode[] SERVER() { return GetTokens(TSqlParser.SERVER); }
		public ITerminalNode SERVER(int i) {
			return GetToken(TSqlParser.SERVER, i);
		}
		public ITerminalNode[] AUDIT() { return GetTokens(TSqlParser.AUDIT); }
		public ITerminalNode AUDIT(int i) {
			return GetToken(TSqlParser.AUDIT, i);
		}
		public ITerminalNode SPECIFICATION() { return GetToken(TSqlParser.SPECIFICATION, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode[] ADD() { return GetTokens(TSqlParser.ADD); }
		public ITerminalNode ADD(int i) {
			return GetToken(TSqlParser.ADD, i);
		}
		public ITerminalNode[] DROP() { return GetTokens(TSqlParser.DROP); }
		public ITerminalNode DROP(int i) {
			return GetToken(TSqlParser.DROP, i);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Alter_server_audit_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_server_audit_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_server_audit_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_server_audit_specification(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_server_audit_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_server_audit_specificationContext alter_server_audit_specification() {
		Alter_server_audit_specificationContext _localctx = new Alter_server_audit_specificationContext(_ctx, State);
		EnterRule(_localctx, 378, RULE_alter_server_audit_specification);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4859; Match(ALTER);
			State = 4860; Match(SERVER);
			State = 4861; Match(AUDIT);
			State = 4862; Match(SPECIFICATION);
			State = 4863; _localctx.audit_specification_name = id();
			State = 4868;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==FOR) {
				{
				State = 4864; Match(FOR);
				State = 4865; Match(SERVER);
				State = 4866; Match(AUDIT);
				State = 4867; _localctx.audit_name = id();
				}
			}

			State = 4877;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,555,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 4870;
					_la = _input.La(1);
					if ( !(_la==ADD || _la==DROP) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 4871; Match(LR_BRACKET);
					State = 4872; _localctx.audit_action_group_name = id();
					State = 4873; Match(RR_BRACKET);
					}
					} 
				}
				State = 4879;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,555,_ctx);
			}
			State = 4886;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,556,_ctx) ) {
			case 1:
				{
				State = 4880; Match(WITH);
				State = 4881; Match(LR_BRACKET);
				State = 4882; Match(STATE);
				State = 4883; Match(EQUAL);
				State = 4884;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 4885; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_server_audit_specificationContext : ParserRuleContext {
		public IdContext audit_specification_name;
		public IdContext audit_name;
		public IdContext audit_action_group_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode[] SERVER() { return GetTokens(TSqlParser.SERVER); }
		public ITerminalNode SERVER(int i) {
			return GetToken(TSqlParser.SERVER, i);
		}
		public ITerminalNode[] AUDIT() { return GetTokens(TSqlParser.AUDIT); }
		public ITerminalNode AUDIT(int i) {
			return GetToken(TSqlParser.AUDIT, i);
		}
		public ITerminalNode SPECIFICATION() { return GetToken(TSqlParser.SPECIFICATION, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode[] ADD() { return GetTokens(TSqlParser.ADD); }
		public ITerminalNode ADD(int i) {
			return GetToken(TSqlParser.ADD, i);
		}
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Create_server_audit_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_server_audit_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_server_audit_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_server_audit_specification(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_server_audit_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_server_audit_specificationContext create_server_audit_specification() {
		Create_server_audit_specificationContext _localctx = new Create_server_audit_specificationContext(_ctx, State);
		EnterRule(_localctx, 380, RULE_create_server_audit_specification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4888; Match(CREATE);
			State = 4889; Match(SERVER);
			State = 4890; Match(AUDIT);
			State = 4891; Match(SPECIFICATION);
			State = 4892; _localctx.audit_specification_name = id();
			State = 4897;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==FOR) {
				{
				State = 4893; Match(FOR);
				State = 4894; Match(SERVER);
				State = 4895; Match(AUDIT);
				State = 4896; _localctx.audit_name = id();
				}
			}

			State = 4906;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==ADD) {
				{
				{
				State = 4899; Match(ADD);
				State = 4900; Match(LR_BRACKET);
				State = 4901; _localctx.audit_action_group_name = id();
				State = 4902; Match(RR_BRACKET);
				}
				}
				State = 4908;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 4915;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,559,_ctx) ) {
			case 1:
				{
				State = 4909; Match(WITH);
				State = 4910; Match(LR_BRACKET);
				State = 4911; Match(STATE);
				State = 4912; Match(EQUAL);
				State = 4913;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 4914; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_server_configurationContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode CONFIGURATION() { return GetToken(TSqlParser.CONFIGURATION, 0); }
		public ITerminalNode[] SET() { return GetTokens(TSqlParser.SET); }
		public ITerminalNode SET(int i) {
			return GetToken(TSqlParser.SET, i);
		}
		public ITerminalNode PROCESS() { return GetToken(TSqlParser.PROCESS, 0); }
		public ITerminalNode AFFINITY() { return GetToken(TSqlParser.AFFINITY, 0); }
		public ITerminalNode DIAGNOSTICS() { return GetToken(TSqlParser.DIAGNOSTICS, 0); }
		public ITerminalNode LOG() { return GetToken(TSqlParser.LOG, 0); }
		public ITerminalNode FAILOVER() { return GetToken(TSqlParser.FAILOVER, 0); }
		public ITerminalNode CLUSTER() { return GetToken(TSqlParser.CLUSTER, 0); }
		public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		public ITerminalNode HADR() { return GetToken(TSqlParser.HADR, 0); }
		public ITerminalNode CONTEXT() { return GetToken(TSqlParser.CONTEXT, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode BUFFER() { return GetToken(TSqlParser.BUFFER, 0); }
		public ITerminalNode POOL() { return GetToken(TSqlParser.POOL, 0); }
		public ITerminalNode EXTENSION() { return GetToken(TSqlParser.EXTENSION, 0); }
		public ITerminalNode SOFTNUMA() { return GetToken(TSqlParser.SOFTNUMA, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode LOCAL() { return GetToken(TSqlParser.LOCAL, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode CPU() { return GetToken(TSqlParser.CPU, 0); }
		public ITerminalNode NUMANODE() { return GetToken(TSqlParser.NUMANODE, 0); }
		public ITerminalNode PATH() { return GetToken(TSqlParser.PATH, 0); }
		public ITerminalNode MAX_SIZE() { return GetToken(TSqlParser.MAX_SIZE, 0); }
		public ITerminalNode MAX_FILES() { return GetToken(TSqlParser.MAX_FILES, 0); }
		public ITerminalNode VERBOSELOGGING() { return GetToken(TSqlParser.VERBOSELOGGING, 0); }
		public ITerminalNode SQLDUMPERFLAGS() { return GetToken(TSqlParser.SQLDUMPERFLAGS, 0); }
		public ITerminalNode SQLDUMPERPATH() { return GetToken(TSqlParser.SQLDUMPERPATH, 0); }
		public ITerminalNode SQLDUMPERTIMEOUT() { return GetToken(TSqlParser.SQLDUMPERTIMEOUT, 0); }
		public ITerminalNode FAILURECONDITIONLEVEL() { return GetToken(TSqlParser.FAILURECONDITIONLEVEL, 0); }
		public ITerminalNode HEALTHCHECKTIMEOUT() { return GetToken(TSqlParser.HEALTHCHECKTIMEOUT, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode FILENAME() { return GetToken(TSqlParser.FILENAME, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode SIZE() { return GetToken(TSqlParser.SIZE, 0); }
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode KB() { return GetToken(TSqlParser.KB, 0); }
		public ITerminalNode MB() { return GetToken(TSqlParser.MB, 0); }
		public ITerminalNode GB() { return GetToken(TSqlParser.GB, 0); }
		public ITerminalNode AUTO() { return GetToken(TSqlParser.AUTO, 0); }
		public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		public Alter_server_configurationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_server_configuration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_server_configuration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_server_configuration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_server_configuration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_server_configurationContext alter_server_configuration() {
		Alter_server_configurationContext _localctx = new Alter_server_configurationContext(_ctx, State);
		EnterRule(_localctx, 382, RULE_alter_server_configuration);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4917; Match(ALTER);
			State = 4918; Match(SERVER);
			State = 4919; Match(CONFIGURATION);
			State = 4920; Match(SET);
			{
			State = 5026;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case PROCESS:
				{
				State = 4921; Match(PROCESS);
				State = 4922; Match(AFFINITY);
				State = 4958;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case CPU:
					{
					State = 4923; Match(CPU);
					State = 4924; Match(EQUAL);
					State = 4940;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case AUTO:
						{
						State = 4925; Match(AUTO);
						}
						break;
					case DECIMAL:
					case COMMA:
						{
						State = 4936;
						_errHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								State = 4936;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,562,_ctx) ) {
								case 1:
									{
									State = 4927;
									_errHandler.Sync(this);
									_la = _input.La(1);
									if (_la==COMMA) {
										{
										State = 4926; Match(COMMA);
										}
									}

									State = 4929; Match(DECIMAL);
									}
									break;

								case 2:
									{
									State = 4931;
									_errHandler.Sync(this);
									_la = _input.La(1);
									if (_la==COMMA) {
										{
										State = 4930; Match(COMMA);
										}
									}

									State = 4933; Match(DECIMAL);
									State = 4934; Match(TO);
									State = 4935; Match(DECIMAL);
									}
									break;
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 4938;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,563,_ctx);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case NUMANODE:
					{
					State = 4942; Match(NUMANODE);
					State = 4943; Match(EQUAL);
					State = 4954;
					_errHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							State = 4954;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,567,_ctx) ) {
							case 1:
								{
								State = 4945;
								_errHandler.Sync(this);
								_la = _input.La(1);
								if (_la==COMMA) {
									{
									State = 4944; Match(COMMA);
									}
								}

								State = 4947; Match(DECIMAL);
								}
								break;

							case 2:
								{
								State = 4949;
								_errHandler.Sync(this);
								_la = _input.La(1);
								if (_la==COMMA) {
									{
									State = 4948; Match(COMMA);
									}
								}

								State = 4951; Match(DECIMAL);
								State = 4952; Match(TO);
								State = 4953; Match(DECIMAL);
								}
								break;
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 4956;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,568,_ctx);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DIAGNOSTICS:
				{
				State = 4960; Match(DIAGNOSTICS);
				State = 4961; Match(LOG);
				State = 4977;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case ON:
					{
					State = 4962; Match(ON);
					}
					break;
				case OFF:
					{
					State = 4963; Match(OFF);
					}
					break;
				case PATH:
					{
					State = 4964; Match(PATH);
					State = 4965; Match(EQUAL);
					State = 4966;
					_la = _input.La(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				case MAX_SIZE:
					{
					State = 4967; Match(MAX_SIZE);
					State = 4968; Match(EQUAL);
					State = 4972;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case DECIMAL:
						{
						State = 4969; Match(DECIMAL);
						State = 4970; Match(MB);
						}
						break;
					case DEFAULT:
						{
						State = 4971; Match(DEFAULT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case MAX_FILES:
					{
					State = 4974; Match(MAX_FILES);
					State = 4975; Match(EQUAL);
					State = 4976;
					_la = _input.La(1);
					if ( !(_la==DEFAULT || _la==DECIMAL) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case FAILOVER:
				{
				State = 4979; Match(FAILOVER);
				State = 4980; Match(CLUSTER);
				State = 4981; Match(PROPERTY);
				State = 4999;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case VERBOSELOGGING:
					{
					State = 4982; Match(VERBOSELOGGING);
					State = 4983; Match(EQUAL);
					State = 4984;
					_la = _input.La(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				case SQLDUMPERFLAGS:
					{
					State = 4985; Match(SQLDUMPERFLAGS);
					State = 4986; Match(EQUAL);
					State = 4987;
					_la = _input.La(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				case SQLDUMPERPATH:
					{
					State = 4988; Match(SQLDUMPERPATH);
					State = 4989; Match(EQUAL);
					State = 4990;
					_la = _input.La(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				case SQLDUMPERTIMEOUT:
					{
					State = 4991; Match(SQLDUMPERTIMEOUT);
					State = 4992;
					_la = _input.La(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				case FAILURECONDITIONLEVEL:
					{
					State = 4993; Match(FAILURECONDITIONLEVEL);
					State = 4994; Match(EQUAL);
					State = 4995;
					_la = _input.La(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				case HEALTHCHECKTIMEOUT:
					{
					State = 4996; Match(HEALTHCHECKTIMEOUT);
					State = 4997; Match(EQUAL);
					State = 4998;
					_la = _input.La(1);
					if ( !(_la==DEFAULT || _la==DECIMAL) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case HADR:
				{
				State = 5001; Match(HADR);
				State = 5002; Match(CLUSTER);
				State = 5003; Match(CONTEXT);
				State = 5004; Match(EQUAL);
				State = 5005;
				_la = _input.La(1);
				if ( !(_la==LOCAL || _la==STRING) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			case BUFFER:
				{
				State = 5006; Match(BUFFER);
				State = 5007; Match(POOL);
				State = 5008; Match(EXTENSION);
				State = 5021;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case ON:
					{
					State = 5009; Match(ON);
					State = 5010; Match(LR_BRACKET);
					State = 5011; Match(FILENAME);
					State = 5012; Match(EQUAL);
					State = 5013; Match(STRING);
					State = 5014; Match(COMMA);
					State = 5015; Match(SIZE);
					State = 5016; Match(EQUAL);
					State = 5017; Match(DECIMAL);
					State = 5018;
					_la = _input.La(1);
					if ( !(_la==GB || _la==KB || _la==MB) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 5019; Match(RR_BRACKET);
					}
					break;
				case OFF:
					{
					State = 5020; Match(OFF);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case SET:
				{
				State = 5023; Match(SET);
				State = 5024; Match(SOFTNUMA);
				State = 5025;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_server_roleContext : ParserRuleContext {
		public IdContext server_role_name;
		public IdContext server_principal;
		public IdContext new_server_role_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode MEMBER() { return GetToken(TSqlParser.MEMBER, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public Alter_server_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_server_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_server_role(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_server_role(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_server_role(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_server_roleContext alter_server_role() {
		Alter_server_roleContext _localctx = new Alter_server_roleContext(_ctx, State);
		EnterRule(_localctx, 384, RULE_alter_server_role);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5028; Match(ALTER);
			State = 5029; Match(SERVER);
			State = 5030; Match(ROLE);
			State = 5031; _localctx.server_role_name = id();
			State = 5039;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ADD:
			case DROP:
				{
				State = 5032;
				_la = _input.La(1);
				if ( !(_la==ADD || _la==DROP) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 5033; Match(MEMBER);
				State = 5034; _localctx.server_principal = id();
				}
				break;
			case WITH:
				{
				State = 5035; Match(WITH);
				State = 5036; Match(NAME);
				State = 5037; Match(EQUAL);
				State = 5038; _localctx.new_server_role_name = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_server_roleContext : ParserRuleContext {
		public IdContext server_role;
		public IdContext server_principal;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public Create_server_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_server_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_server_role(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_server_role(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_server_role(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_server_roleContext create_server_role() {
		Create_server_roleContext _localctx = new Create_server_roleContext(_ctx, State);
		EnterRule(_localctx, 386, RULE_create_server_role);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5041; Match(CREATE);
			State = 5042; Match(SERVER);
			State = 5043; Match(ROLE);
			State = 5044; _localctx.server_role = id();
			State = 5047;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AUTHORIZATION) {
				{
				State = 5045; Match(AUTHORIZATION);
				State = 5046; _localctx.server_principal = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_server_role_pdwContext : ParserRuleContext {
		public IdContext server_role_name;
		public IdContext login;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public ITerminalNode MEMBER() { return GetToken(TSqlParser.MEMBER, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public Alter_server_role_pdwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_server_role_pdw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_server_role_pdw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_server_role_pdw(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_server_role_pdw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_server_role_pdwContext alter_server_role_pdw() {
		Alter_server_role_pdwContext _localctx = new Alter_server_role_pdwContext(_ctx, State);
		EnterRule(_localctx, 388, RULE_alter_server_role_pdw);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5049; Match(ALTER);
			State = 5050; Match(SERVER);
			State = 5051; Match(ROLE);
			State = 5052; _localctx.server_role_name = id();
			State = 5053;
			_la = _input.La(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 5054; Match(MEMBER);
			State = 5055; _localctx.login = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_serviceContext : ParserRuleContext {
		public IdContext modified_service_name;
		public IdContext queue_name;
		public IdContext modified_contract_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		public ITerminalNode[] ADD() { return GetTokens(TSqlParser.ADD); }
		public ITerminalNode ADD(int i) {
			return GetToken(TSqlParser.ADD, i);
		}
		public ITerminalNode[] DROP() { return GetTokens(TSqlParser.DROP); }
		public ITerminalNode DROP(int i) {
			return GetToken(TSqlParser.DROP, i);
		}
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Alter_serviceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_service; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_service(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_service(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_service(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_serviceContext alter_service() {
		Alter_serviceContext _localctx = new Alter_serviceContext(_ctx, State);
		EnterRule(_localctx, 390, RULE_alter_service);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5057; Match(ALTER);
			State = 5058; Match(SERVICE);
			State = 5059; _localctx.modified_service_name = id();
			State = 5067;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ON) {
				{
				State = 5060; Match(ON);
				State = 5061; Match(QUEUE);
				{
				State = 5062; schema_name();
				State = 5063; Match(DOT);
				}
				State = 5065; _localctx.queue_name = id();
				}
			}

			State = 5076;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,579,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 5070;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==COMMA) {
						{
						State = 5069; Match(COMMA);
						}
					}

					State = 5072;
					_la = _input.La(1);
					if ( !(_la==ADD || _la==DROP) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 5073; _localctx.modified_contract_name = id();
					}
					} 
				}
				State = 5078;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,579,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_serviceContext : ParserRuleContext {
		public IdContext create_service_name;
		public IdContext owner_name;
		public IdContext queue_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode[] DEFAULT() { return GetTokens(TSqlParser.DEFAULT); }
		public ITerminalNode DEFAULT(int i) {
			return GetToken(TSqlParser.DEFAULT, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Create_serviceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_service; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_service(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_service(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_service(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_serviceContext create_service() {
		Create_serviceContext _localctx = new Create_serviceContext(_ctx, State);
		EnterRule(_localctx, 392, RULE_create_service);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5079; Match(CREATE);
			State = 5080; Match(SERVICE);
			State = 5081; _localctx.create_service_name = id();
			State = 5084;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AUTHORIZATION) {
				{
				State = 5082; Match(AUTHORIZATION);
				State = 5083; _localctx.owner_name = id();
				}
			}

			State = 5086; Match(ON);
			State = 5087; Match(QUEUE);
			State = 5091;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,581,_ctx) ) {
			case 1:
				{
				State = 5088; schema_name();
				State = 5089; Match(DOT);
				}
				break;
			}
			State = 5093; _localctx.queue_name = id();
			State = 5107;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,585,_ctx) ) {
			case 1:
				{
				State = 5094; Match(LR_BRACKET);
				State = 5102;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 5096;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,582,_ctx) ) {
						case 1:
							{
							State = 5095; Match(COMMA);
							}
							break;
						}
						State = 5100;
						_errHandler.Sync(this);
						switch (_input.La(1)) {
						case ABSENT:
						case AES:
						case ALLOW_CONNECTIONS:
						case ALLOW_MULTIPLE_EVENT_LOSS:
						case ALLOW_SINGLE_EVENT_LOSS:
						case ANONYMOUS:
						case APPEND:
						case APPLICATION:
						case ASYMMETRIC:
						case ASYNCHRONOUS_COMMIT:
						case AUTHENTICATION:
						case AUTOMATED_BACKUP_PREFERENCE:
						case AUTOMATIC:
						case AVAILABILITY_MODE:
						case BACKSLASH:
						case BEFORE:
						case BLOCK:
						case BLOCKSIZE:
						case BLOCKING_HIERARCHY:
						case BUFFER:
						case BUFFERCOUNT:
						case CACHE:
						case CALLED:
						case CERTIFICATE:
						case CHANGETABLE:
						case CHANGES:
						case CHECK_POLICY:
						case CHECK_EXPIRATION:
						case CLASSIFIER_FUNCTION:
						case CLUSTER:
						case COMPRESSION:
						case CONNECTION_OPTIONS:
						case CONFIGURATION:
						case CONTAINMENT:
						case CONTEXT:
						case CONTINUE_AFTER_ERROR:
						case CONTRACT:
						case CONTRACT_NAME:
						case CONVERSATION:
						case COPY_ONLY:
						case CURRENT_TIMESTAMP:
						case CURRENT_USER:
						case CYCLE:
						case DATA_COMPRESSION:
						case DATA_SOURCE:
						case DATABASE_MIRRORING:
						case DEFAULT_DATABASE:
						case DEFAULT_SCHEMA:
						case DIAGNOSTICS:
						case DIFFERENTIAL:
						case DISK:
						case DOUBLE_BACK_SLASH:
						case DOUBLE_FORWARD_SLASH:
						case DTC_SUPPORT:
						case DUMP:
						case ENABLED:
						case ENDPOINT:
						case ERROR:
						case EVENT:
						case EVENTDATA:
						case EVENT_RETENTION_MODE:
						case EXECUTABLE_FILE:
						case EXPIREDATE:
						case EXTENSION:
						case EXTERNAL_ACCESS:
						case FAILOVER:
						case FAILURECONDITIONLEVEL:
						case FAN_IN:
						case FILENAME:
						case FILLFACTOR:
						case FILE_SNAPSHOT:
						case FORCESEEK:
						case FORCE_SERVICE_ALLOW_DATA_LOSS:
						case GET:
						case GOVERNOR:
						case HASHED:
						case HEALTHCHECKTIMEOUT:
						case IDENTITYCOL:
						case IIF:
						case INCLUDE:
						case INCREMENT:
						case INFINITE:
						case INIT:
						case INSTEAD:
						case IPV4_ADDR:
						case IPV6_ADDR:
						case ISNULL:
						case KERBEROS:
						case KEY:
						case KEY_PATH:
						case KEY_STORE_PROVIDER_NAME:
						case LANGUAGE:
						case LIBRARY:
						case LIFETIME:
						case LINUX:
						case LISTENER_IP:
						case LISTENER_PORT:
						case LOAD:
						case LOCAL_SERVICE_NAME:
						case LOG:
						case MATCHED:
						case MASTER:
						case MAX_MEMORY:
						case MAXTRANSFER:
						case MAXVALUE:
						case MAX_DISPATCH_LATENCY:
						case MAX_EVENT_SIZE:
						case MAX_SIZE:
						case MAX_OUTSTANDING_IO_PER_VOLUME:
						case MEDIADESCRIPTION:
						case MEDIANAME:
						case MEMBER:
						case MEMORY_PARTITION_MODE:
						case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
						case MESSAGE_FORWARDING:
						case MESSAGE_FORWARD_SIZE:
						case MINVALUE:
						case MIRROR:
						case MUST_CHANGE:
						case NATIVE_COMPILATION:
						case NEGOTIATE:
						case NOFORMAT:
						case NOINIT:
						case NONE:
						case NOREWIND:
						case NOSKIP:
						case NOUNLOAD:
						case NO_CHECKSUM:
						case NO_COMPRESSION:
						case NO_EVENT_LOSS:
						case NOTIFICATION:
						case NTLM:
						case NULL:
						case OFFSETS:
						case OLD_PASSWORD:
						case ON_FAILURE:
						case PAGE:
						case PARAM_NODE:
						case PARTIAL:
						case PASSWORD:
						case PERMISSION_SET:
						case PER_CPU:
						case PER_DB:
						case PER_NODE:
						case PLATFORM:
						case POLICY:
						case PRECISION:
						case PREDICATE:
						case PROCESS:
						case PUBLIC:
						case PUSHDOWN:
						case PYTHON:
						case R:
						case RAW:
						case READ_WRITE_FILEGROUPS:
						case REGENERATE:
						case RELATED_CONVERSATION:
						case RELATED_CONVERSATION_GROUP:
						case REQUIRED:
						case RESET:
						case RESTART:
						case RESULT_SETS:
						case RESUME:
						case RETAINDAYS:
						case RETURN:
						case RETURNS:
						case REWIND:
						case ROLE:
						case ROWCOUNT:
						case ROWGUIDCOL:
						case RSA_512:
						case RSA_1024:
						case RSA_2048:
						case RSA_3072:
						case RSA_4096:
						case SAFETY:
						case SAFE:
						case SCHEDULER:
						case SCHEME:
						case SECURITYAUDIT:
						case SERVER:
						case SERVICE:
						case SERVICE_BROKER:
						case SERVICE_NAME:
						case SESSION:
						case SESSION_USER:
						case SID:
						case SKIP_KEYWORD:
						case SOFTNUMA:
						case SOURCE:
						case SPECIFICATION:
						case SPLIT:
						case SQLDUMPERFLAGS:
						case SQLDUMPERPATH:
						case SQLDUMPERTIMEOUT:
						case STATE:
						case STATS:
						case START:
						case STARTED:
						case STARTUP_STATE:
						case STOP:
						case STOPPED:
						case STOP_ON_ERROR:
						case SUPPORTED:
						case SYSTEM_USER:
						case TAPE:
						case TARGET:
						case TCP:
						case TRACK_CAUSALITY:
						case TRANSFER:
						case UNCHECKED:
						case UNLOCK:
						case UNSAFE:
						case URL:
						case USED:
						case USER:
						case VERBOSELOGGING:
						case VISIBILITY:
						case WINDOWS:
						case WITHIN:
						case WITHOUT:
						case WITNESS:
						case ABSOLUTE:
						case ACCENT_SENSITIVITY:
						case ACTION:
						case ACTIVATION:
						case ACTIVE:
						case ADDRESS:
						case AES_128:
						case AES_192:
						case AES_256:
						case AFFINITY:
						case AFTER:
						case AGGREGATE:
						case ALGORITHM:
						case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
						case ALLOW_SNAPSHOT_ISOLATION:
						case ALLOWED:
						case ANSI_NULL_DEFAULT:
						case ANSI_NULLS:
						case ANSI_PADDING:
						case ANSI_WARNINGS:
						case APPLICATION_LOG:
						case APPLY:
						case ARITHABORT:
						case ASSEMBLY:
						case AUDIT:
						case AUDIT_GUID:
						case AUTO:
						case AUTO_CLEANUP:
						case AUTO_CLOSE:
						case AUTO_CREATE_STATISTICS:
						case AUTO_SHRINK:
						case AUTO_UPDATE_STATISTICS:
						case AUTO_UPDATE_STATISTICS_ASYNC:
						case AVAILABILITY:
						case AVG:
						case BACKUP_PRIORITY:
						case BEGIN_DIALOG:
						case BIGINT:
						case BINARY_BASE64:
						case BINARY_CHECKSUM:
						case BINDING:
						case BLOB_STORAGE:
						case BROKER:
						case BROKER_INSTANCE:
						case BUCKET_COUNT:
						case BULK_LOGGED:
						case CALLER:
						case CAP_CPU_PERCENT:
						case CAST:
						case CATALOG:
						case CATCH:
						case CHANGE_RETENTION:
						case CHANGE_TRACKING:
						case CHECKSUM:
						case CHECKSUM_AGG:
						case CLEANUP:
						case COLLECTION:
						case COLUMN_MASTER_KEY:
						case COMMITTED:
						case COMPATIBILITY_LEVEL:
						case CONCAT:
						case CONCAT_NULL_YIELDS_NULL:
						case CONTENT:
						case CONTROL:
						case COOKIE:
						case COUNT:
						case COUNT_BIG:
						case COUNTER:
						case CPU:
						case CREATE_NEW:
						case CREATION_DISPOSITION:
						case CREDENTIAL:
						case CRYPTOGRAPHIC:
						case CURSOR_CLOSE_ON_COMMIT:
						case CURSOR_DEFAULT:
						case DATA:
						case DATE_CORRELATION_OPTIMIZATION:
						case DATEADD:
						case DATEDIFF:
						case DATEFIRST:
						case DATEFORMAT:
						case DATENAME:
						case DATEPART:
						case DAYS:
						case DB_CHAINING:
						case DB_FAILOVER:
						case DECRYPTION:
						case DEFAULT_DOUBLE_QUOTE:
						case DEFAULT_FULLTEXT_LANGUAGE:
						case DEFAULT_LANGUAGE:
						case DELAY:
						case DELAYED_DURABILITY:
						case DELETED:
						case DENSE_RANK:
						case DEPENDENTS:
						case DES:
						case DESCRIPTION:
						case DESX:
						case DHCP:
						case DIALOG:
						case DIRECTORY_NAME:
						case DISABLE:
						case DISABLE_BROKER:
						case DISABLED:
						case DISK_DRIVE:
						case DOCUMENT:
						case DYNAMIC:
						case ELEMENTS:
						case EMERGENCY:
						case EMPTY:
						case ENABLE:
						case ENABLE_BROKER:
						case ENCRYPTED_VALUE:
						case ENCRYPTION:
						case ENDPOINT_URL:
						case ERROR_BROKER_CONVERSATIONS:
						case EXCLUSIVE:
						case EXECUTABLE:
						case EXIST:
						case EXPAND:
						case EXPIRY_DATE:
						case EXPLICIT:
						case FAIL_OPERATION:
						case FAILOVER_MODE:
						case FAILURE:
						case FAILURE_CONDITION_LEVEL:
						case FAST:
						case FAST_FORWARD:
						case FILEGROUP:
						case FILEGROWTH:
						case FILEPATH:
						case FILESTREAM:
						case FILTER:
						case FIRST:
						case FIRST_VALUE:
						case FOLLOWING:
						case FORCE:
						case FORCE_FAILOVER_ALLOW_DATA_LOSS:
						case FORCED:
						case FORMAT:
						case FORWARD_ONLY:
						case FULLSCAN:
						case FULLTEXT:
						case GB:
						case GETDATE:
						case GETUTCDATE:
						case GLOBAL:
						case GO:
						case GROUP_MAX_REQUESTS:
						case GROUPING:
						case GROUPING_ID:
						case HADOOP:
						case HADR:
						case HASH:
						case HEALTH_CHECK_TIMEOUT:
						case HIGH:
						case HONOR_BROKER_PRIORITY:
						case HOURS:
						case IDENTITY_VALUE:
						case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
						case IMMEDIATE:
						case IMPERSONATE:
						case IMPORTANCE:
						case INCLUDE_NULL_VALUES:
						case INCREMENTAL:
						case INITIATOR:
						case INPUT:
						case INSENSITIVE:
						case INSERTED:
						case INT:
						case IP:
						case ISOLATION:
						case JOB:
						case JSON:
						case KB:
						case KEEP:
						case KEEPFIXED:
						case KEY_SOURCE:
						case KEYS:
						case KEYSET:
						case LAG:
						case LAST:
						case LAST_VALUE:
						case LEAD:
						case LEVEL:
						case LIST:
						case LISTENER:
						case LISTENER_URL:
						case LOB_COMPACTION:
						case LOCAL:
						case LOCATION:
						case LOCK:
						case LOCK_ESCALATION:
						case LOGIN:
						case LOOP:
						case LOW:
						case MANUAL:
						case MARK:
						case MATERIALIZED:
						case MAX:
						case MAX_CPU_PERCENT:
						case MAX_DOP:
						case MAX_FILES:
						case MAX_IOPS_PER_VOLUME:
						case MAX_MEMORY_PERCENT:
						case MAX_PROCESSES:
						case MAX_QUEUE_READERS:
						case MAX_ROLLOVER_FILES:
						case MAXDOP:
						case MAXRECURSION:
						case MAXSIZE:
						case MB:
						case MEDIUM:
						case MEMORY_OPTIMIZED_DATA:
						case MESSAGE:
						case MIN:
						case MIN_ACTIVE_ROWVERSION:
						case MIN_CPU_PERCENT:
						case MIN_IOPS_PER_VOLUME:
						case MIN_MEMORY_PERCENT:
						case MINUTES:
						case MIRROR_ADDRESS:
						case MIXED_PAGE_ALLOCATION:
						case MODE:
						case MODIFY:
						case MOVE:
						case MULTI_USER:
						case NAME:
						case NESTED_TRIGGERS:
						case NEW_ACCOUNT:
						case NEW_BROKER:
						case NEW_PASSWORD:
						case NEXT:
						case NO:
						case NO_TRUNCATE:
						case NO_WAIT:
						case NOCOUNT:
						case NODES:
						case NOEXPAND:
						case NON_TRANSACTED_ACCESS:
						case NORECOMPUTE:
						case NORECOVERY:
						case NOWAIT:
						case NTILE:
						case NUMANODE:
						case NUMBER:
						case NUMERIC_ROUNDABORT:
						case OBJECT:
						case OFFLINE:
						case OFFSET:
						case OLD_ACCOUNT:
						case ONLINE:
						case ONLY:
						case OPEN_EXISTING:
						case OPTIMISTIC:
						case OPTIMIZE:
						case OUT:
						case OUTPUT:
						case OVERRIDE:
						case OWNER:
						case PAGE_VERIFY:
						case PARAMETERIZATION:
						case PARTITION:
						case PARTITIONS:
						case PARTNER:
						case PATH:
						case POISON_MESSAGE_HANDLING:
						case POOL:
						case PORT:
						case PRECEDING:
						case PRIMARY_ROLE:
						case PRIOR:
						case PRIORITY:
						case PRIORITY_LEVEL:
						case PRIVATE:
						case PRIVATE_KEY:
						case PRIVILEGES:
						case PROCEDURE_NAME:
						case PROPERTY:
						case PROVIDER:
						case PROVIDER_KEY_NAME:
						case QUERY:
						case QUEUE:
						case QUEUE_DELAY:
						case QUOTED_IDENTIFIER:
						case RANGE:
						case RANK:
						case RC2:
						case RC4:
						case RC4_128:
						case READ_COMMITTED_SNAPSHOT:
						case READ_ONLY:
						case READ_ONLY_ROUTING_LIST:
						case READ_WRITE:
						case READONLY:
						case REBUILD:
						case RECEIVE:
						case RECOMPILE:
						case RECOVERY:
						case RECURSIVE_TRIGGERS:
						case RELATIVE:
						case REMOTE:
						case REMOTE_SERVICE_NAME:
						case REMOVE:
						case REORGANIZE:
						case REPEATABLE:
						case REPLICA:
						case REQUEST_MAX_CPU_TIME_SEC:
						case REQUEST_MAX_MEMORY_GRANT_PERCENT:
						case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
						case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
						case RESERVE_DISK_SPACE:
						case RESOURCE:
						case RESOURCE_MANAGER_LOCATION:
						case RESTRICTED_USER:
						case RETENTION:
						case ROBUST:
						case ROOT:
						case ROUTE:
						case ROW:
						case ROW_NUMBER:
						case ROWGUID:
						case ROWS:
						case SAMPLE:
						case SCHEMABINDING:
						case SCOPED:
						case SCROLL:
						case SCROLL_LOCKS:
						case SEARCH:
						case SECONDARY:
						case SECONDARY_ONLY:
						case SECONDARY_ROLE:
						case SECONDS:
						case SECRET:
						case SECURITY:
						case SECURITY_LOG:
						case SEEDING_MODE:
						case SELF:
						case SEMI_SENSITIVE:
						case SEND:
						case SENT:
						case SEQUENCE:
						case SERIALIZABLE:
						case SESSION_TIMEOUT:
						case SETERROR:
						case SHARE:
						case SHOWPLAN:
						case SIGNATURE:
						case SIMPLE:
						case SINGLE_USER:
						case SIZE:
						case SMALLINT:
						case SNAPSHOT:
						case SPATIAL_WINDOW_MAX_CELLS:
						case STANDBY:
						case START_DATE:
						case STATIC:
						case STATS_STREAM:
						case STATUS:
						case STATUSONLY:
						case STDEV:
						case STDEVP:
						case STOPLIST:
						case STRING_AGG:
						case STUFF:
						case SUBJECT:
						case SUBSCRIPTION:
						case SUM:
						case SUSPEND:
						case SYMMETRIC:
						case SYNCHRONOUS_COMMIT:
						case SYNONYM:
						case SYSTEM:
						case TAKE:
						case TARGET_RECOVERY_TIME:
						case TB:
						case TEXTIMAGE_ON:
						case THROW:
						case TIES:
						case TIME:
						case TIMEOUT:
						case TIMER:
						case TINYINT:
						case TORN_PAGE_DETECTION:
						case TRANSFORM_NOISE_WORDS:
						case TRIPLE_DES:
						case TRIPLE_DES_3KEY:
						case TRUSTWORTHY:
						case TRY:
						case TSQL:
						case TWO_DIGIT_YEAR_CUTOFF:
						case TYPE:
						case TYPE_WARNING:
						case UNBOUNDED:
						case UNCOMMITTED:
						case UNDEFINED:
						case UNKNOWN:
						case UNLIMITED:
						case UOW:
						case USING:
						case VALID_XML:
						case VALIDATION:
						case VALUE:
						case VAR:
						case VARP:
						case VIEW_METADATA:
						case VIEWS:
						case WAIT:
						case WELL_FORMED_XML:
						case WITHOUT_ARRAY_WRAPPER:
						case WORK:
						case WORKLOAD:
						case XML:
						case XMLDATA:
						case XMLNAMESPACES:
						case XMLSCHEMA:
						case XSINIL:
						case DOLLAR_ACTION:
						case SPACE:
						case COMMENT:
						case LINE_COMMENT:
						case DOUBLE_QUOTE_ID:
						case SINGLE_QUOTE:
						case SQUARE_BRACKET_ID:
						case LOCAL_ID:
						case DECIMAL:
						case ID:
						case QUOTED_URL:
						case QUOTED_HOST_AND_PORT:
						case STRING:
						case BINARY:
						case FLOAT:
						case REAL:
						case EQUAL:
						case GREATER:
						case LESS:
						case EXCLAMATION:
						case PLUS_ASSIGN:
						case MINUS_ASSIGN:
						case MULT_ASSIGN:
						case DIV_ASSIGN:
						case MOD_ASSIGN:
						case AND_ASSIGN:
						case XOR_ASSIGN:
						case OR_ASSIGN:
						case DOUBLE_BAR:
						case DOT:
						case UNDERLINE:
						case AT:
						case SHARP:
						case DOLLAR:
						case LR_BRACKET:
						case RR_BRACKET:
						case COMMA:
						case SEMI:
						case COLON:
						case STAR:
						case DIVIDE:
						case MODULE:
						case PLUS:
						case MINUS:
						case BIT_NOT:
						case BIT_OR:
						case BIT_AND:
						case BIT_XOR:
						case MDY:
						case DMY:
						case YMD:
						case YDM:
						case MYD:
						case DYM:
						case IPV4_OCTECT:
							{
							State = 5098; id();
							}
							break;
						case DEFAULT:
							{
							State = 5099; Match(DEFAULT);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 5104;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,584,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 5106; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_service_master_keyContext : ParserRuleContext {
		public IToken acold_account_name;
		public IToken old_password;
		public IToken new_account_name;
		public IToken new_password;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode REGENERATE() { return GetToken(TSqlParser.REGENERATE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode FORCE() { return GetToken(TSqlParser.FORCE, 0); }
		public ITerminalNode OLD_ACCOUNT() { return GetToken(TSqlParser.OLD_ACCOUNT, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode OLD_PASSWORD() { return GetToken(TSqlParser.OLD_PASSWORD, 0); }
		public ITerminalNode NEW_ACCOUNT() { return GetToken(TSqlParser.NEW_ACCOUNT, 0); }
		public ITerminalNode NEW_PASSWORD() { return GetToken(TSqlParser.NEW_PASSWORD, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public Alter_service_master_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_service_master_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_service_master_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_service_master_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_service_master_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_service_master_keyContext alter_service_master_key() {
		Alter_service_master_keyContext _localctx = new Alter_service_master_keyContext(_ctx, State);
		EnterRule(_localctx, 394, RULE_alter_service_master_key);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5109; Match(ALTER);
			State = 5110; Match(SERVICE);
			State = 5111; Match(MASTER);
			State = 5112; Match(KEY);
			State = 5134;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case REGENERATE:
			case FORCE:
				{
				State = 5114;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==FORCE) {
					{
					State = 5113; Match(FORCE);
					}
				}

				State = 5116; Match(REGENERATE);
				}
				break;
			case WITH:
				{
				{
				State = 5117; Match(WITH);
				State = 5132;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,587,_ctx) ) {
				case 1:
					{
					State = 5118; Match(OLD_ACCOUNT);
					State = 5119; Match(EQUAL);
					State = 5120; _localctx.acold_account_name = Match(STRING);
					State = 5121; Match(COMMA);
					State = 5122; Match(OLD_PASSWORD);
					State = 5123; Match(EQUAL);
					State = 5124; _localctx.old_password = Match(STRING);
					}
					break;

				case 2:
					{
					State = 5125; Match(NEW_ACCOUNT);
					State = 5126; Match(EQUAL);
					State = 5127; _localctx.new_account_name = Match(STRING);
					State = 5128; Match(COMMA);
					State = 5129; Match(NEW_PASSWORD);
					State = 5130; Match(EQUAL);
					State = 5131; _localctx.new_password = Match(STRING);
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_symmetric_keyContext : ParserRuleContext {
		public IdContext key_name;
		public IdContext certificate_name;
		public IToken password;
		public IdContext symmetric_key_name;
		public IdContext Asym_key_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode[] SYMMETRIC() { return GetTokens(TSqlParser.SYMMETRIC); }
		public ITerminalNode SYMMETRIC(int i) {
			return GetToken(TSqlParser.SYMMETRIC, i);
		}
		public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Alter_symmetric_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_symmetric_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_symmetric_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_symmetric_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_symmetric_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_symmetric_keyContext alter_symmetric_key() {
		Alter_symmetric_keyContext _localctx = new Alter_symmetric_keyContext(_ctx, State);
		EnterRule(_localctx, 396, RULE_alter_symmetric_key);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5136; Match(ALTER);
			State = 5137; Match(SYMMETRIC);
			State = 5138; Match(KEY);
			State = 5139; _localctx.key_name = id();
			{
			State = 5140;
			_la = _input.La(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 5141; Match(ENCRYPTION);
			State = 5142; Match(BY);
			State = 5154;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case CERTIFICATE:
				{
				State = 5143; Match(CERTIFICATE);
				State = 5144; _localctx.certificate_name = id();
				}
				break;
			case PASSWORD:
				{
				State = 5145; Match(PASSWORD);
				State = 5146; Match(EQUAL);
				State = 5147; _localctx.password = Match(STRING);
				}
				break;
			case SYMMETRIC:
				{
				State = 5148; Match(SYMMETRIC);
				State = 5149; Match(KEY);
				State = 5150; _localctx.symmetric_key_name = id();
				}
				break;
			case ASYMMETRIC:
				{
				State = 5151; Match(ASYMMETRIC);
				State = 5152; Match(KEY);
				State = 5153; _localctx.Asym_key_name = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_symmetric_keyContext : ParserRuleContext {
		public IdContext key_name;
		public IdContext owner_name;
		public IdContext provider_name;
		public IToken key_pass_phrase;
		public IToken identity_phrase;
		public IToken provider_key_name;
		public IdContext certificate_name;
		public IToken password;
		public IdContext symmetric_key_name;
		public IdContext asym_key_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode[] SYMMETRIC() { return GetTokens(TSqlParser.SYMMETRIC); }
		public ITerminalNode SYMMETRIC(int i) {
			return GetToken(TSqlParser.SYMMETRIC, i);
		}
		public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode KEY_SOURCE() { return GetToken(TSqlParser.KEY_SOURCE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode ALGORITHM() { return GetToken(TSqlParser.ALGORITHM, 0); }
		public ITerminalNode IDENTITY_VALUE() { return GetToken(TSqlParser.IDENTITY_VALUE, 0); }
		public ITerminalNode PROVIDER_KEY_NAME() { return GetToken(TSqlParser.PROVIDER_KEY_NAME, 0); }
		public ITerminalNode CREATION_DISPOSITION() { return GetToken(TSqlParser.CREATION_DISPOSITION, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode DES() { return GetToken(TSqlParser.DES, 0); }
		public ITerminalNode TRIPLE_DES() { return GetToken(TSqlParser.TRIPLE_DES, 0); }
		public ITerminalNode TRIPLE_DES_3KEY() { return GetToken(TSqlParser.TRIPLE_DES_3KEY, 0); }
		public ITerminalNode RC2() { return GetToken(TSqlParser.RC2, 0); }
		public ITerminalNode RC4() { return GetToken(TSqlParser.RC4, 0); }
		public ITerminalNode RC4_128() { return GetToken(TSqlParser.RC4_128, 0); }
		public ITerminalNode DESX() { return GetToken(TSqlParser.DESX, 0); }
		public ITerminalNode AES_128() { return GetToken(TSqlParser.AES_128, 0); }
		public ITerminalNode AES_192() { return GetToken(TSqlParser.AES_192, 0); }
		public ITerminalNode AES_256() { return GetToken(TSqlParser.AES_256, 0); }
		public ITerminalNode CREATE_NEW() { return GetToken(TSqlParser.CREATE_NEW, 0); }
		public ITerminalNode OPEN_EXISTING() { return GetToken(TSqlParser.OPEN_EXISTING, 0); }
		public Create_symmetric_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_symmetric_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_symmetric_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_symmetric_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_symmetric_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_symmetric_keyContext create_symmetric_key() {
		Create_symmetric_keyContext _localctx = new Create_symmetric_keyContext(_ctx, State);
		EnterRule(_localctx, 398, RULE_create_symmetric_key);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5156; Match(ALTER);
			State = 5157; Match(SYMMETRIC);
			State = 5158; Match(KEY);
			State = 5159; _localctx.key_name = id();
			State = 5162;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AUTHORIZATION) {
				{
				State = 5160; Match(AUTHORIZATION);
				State = 5161; _localctx.owner_name = id();
				}
			}

			State = 5167;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==FROM) {
				{
				State = 5164; Match(FROM);
				State = 5165; Match(PROVIDER);
				State = 5166; _localctx.provider_name = id();
				}
			}

			{
			State = 5169; Match(WITH);
			State = 5202;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ALGORITHM:
			case CREATION_DISPOSITION:
			case IDENTITY_VALUE:
			case KEY_SOURCE:
			case PROVIDER_KEY_NAME:
				{
				State = 5185;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case KEY_SOURCE:
					{
					State = 5170; Match(KEY_SOURCE);
					State = 5171; Match(EQUAL);
					State = 5172; _localctx.key_pass_phrase = Match(STRING);
					}
					break;
				case ALGORITHM:
					{
					State = 5173; Match(ALGORITHM);
					State = 5174; Match(EQUAL);
					State = 5175;
					_la = _input.La(1);
					if ( !(((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (AES_128 - 392)) | (1L << (AES_192 - 392)) | (1L << (AES_256 - 392)))) != 0) || _la==DES || _la==DESX || ((((_la - 673)) & ~0x3f) == 0 && ((1L << (_la - 673)) & ((1L << (RC2 - 673)) | (1L << (RC4 - 673)) | (1L << (RC4_128 - 673)))) != 0) || _la==TRIPLE_DES || _la==TRIPLE_DES_3KEY) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				case IDENTITY_VALUE:
					{
					State = 5176; Match(IDENTITY_VALUE);
					State = 5177; Match(EQUAL);
					State = 5178; _localctx.identity_phrase = Match(STRING);
					}
					break;
				case PROVIDER_KEY_NAME:
					{
					State = 5179; Match(PROVIDER_KEY_NAME);
					State = 5180; Match(EQUAL);
					State = 5181; _localctx.provider_key_name = Match(STRING);
					}
					break;
				case CREATION_DISPOSITION:
					{
					State = 5182; Match(CREATION_DISPOSITION);
					State = 5183; Match(EQUAL);
					State = 5184;
					_la = _input.La(1);
					if ( !(_la==CREATE_NEW || _la==OPEN_EXISTING) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case ENCRYPTION:
				{
				State = 5187; Match(ENCRYPTION);
				State = 5188; Match(BY);
				State = 5200;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case CERTIFICATE:
					{
					State = 5189; Match(CERTIFICATE);
					State = 5190; _localctx.certificate_name = id();
					}
					break;
				case PASSWORD:
					{
					State = 5191; Match(PASSWORD);
					State = 5192; Match(EQUAL);
					State = 5193; _localctx.password = Match(STRING);
					}
					break;
				case SYMMETRIC:
					{
					State = 5194; Match(SYMMETRIC);
					State = 5195; Match(KEY);
					State = 5196; _localctx.symmetric_key_name = id();
					}
					break;
				case ASYMMETRIC:
					{
					State = 5197; Match(ASYMMETRIC);
					State = 5198; Match(KEY);
					State = 5199; _localctx.asym_key_name = id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_synonymContext : ParserRuleContext {
		public IdContext schema_name_1;
		public IdContext synonym_name;
		public IdContext schema_name_2;
		public IdContext object_name;
		public IdContext database_or_schema2;
		public IdContext schema_id_2_or_object_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode SYNONYM() { return GetToken(TSqlParser.SYNONYM, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public Server_nameContext server_name() {
			return GetRuleContext<Server_nameContext>(0);
		}
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Create_synonymContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_synonym; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_synonym(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_synonym(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_synonym(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_synonymContext create_synonym() {
		Create_synonymContext _localctx = new Create_synonymContext(_ctx, State);
		EnterRule(_localctx, 400, RULE_create_synonym);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5204; Match(CREATE);
			State = 5205; Match(SYNONYM);
			State = 5209;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,595,_ctx) ) {
			case 1:
				{
				State = 5206; _localctx.schema_name_1 = id();
				State = 5207; Match(DOT);
				}
				break;
			}
			State = 5211; _localctx.synonym_name = id();
			State = 5212; Match(FOR);
			State = 5239;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,601,_ctx) ) {
			case 1:
				{
				State = 5216;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,596,_ctx) ) {
				case 1:
					{
					State = 5213; server_name();
					State = 5214; Match(DOT);
					}
					break;
				}
				State = 5221;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,597,_ctx) ) {
				case 1:
					{
					State = 5218; database_name();
					State = 5219; Match(DOT);
					}
					break;
				}
				State = 5226;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,598,_ctx) ) {
				case 1:
					{
					State = 5223; _localctx.schema_name_2 = id();
					State = 5224; Match(DOT);
					}
					break;
				}
				State = 5228; _localctx.object_name = id();
				}
				break;

			case 2:
				{
				State = 5232;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,599,_ctx) ) {
				case 1:
					{
					State = 5229; _localctx.database_or_schema2 = id();
					State = 5230; Match(DOT);
					}
					break;
				}
				State = 5237;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,600,_ctx) ) {
				case 1:
					{
					State = 5234; _localctx.schema_id_2_or_object_name = id();
					State = 5235; Match(DOT);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_userContext : ParserRuleContext {
		public IdContext username;
		public IdContext newusername;
		public IdContext loginame;
		public IToken lcid;
		public IdContext language_name_or_alias;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] NAME() { return GetTokens(TSqlParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(TSqlParser.NAME, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] DEFAULT_SCHEMA() { return GetTokens(TSqlParser.DEFAULT_SCHEMA); }
		public ITerminalNode DEFAULT_SCHEMA(int i) {
			return GetToken(TSqlParser.DEFAULT_SCHEMA, i);
		}
		public ITerminalNode[] LOGIN() { return GetTokens(TSqlParser.LOGIN); }
		public ITerminalNode LOGIN(int i) {
			return GetToken(TSqlParser.LOGIN, i);
		}
		public ITerminalNode[] PASSWORD() { return GetTokens(TSqlParser.PASSWORD); }
		public ITerminalNode PASSWORD(int i) {
			return GetToken(TSqlParser.PASSWORD, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] DEFAULT_LANGUAGE() { return GetTokens(TSqlParser.DEFAULT_LANGUAGE); }
		public ITerminalNode DEFAULT_LANGUAGE(int i) {
			return GetToken(TSqlParser.DEFAULT_LANGUAGE, i);
		}
		public ITerminalNode[] ALLOW_ENCRYPTED_VALUE_MODIFICATIONS() { return GetTokens(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS); }
		public ITerminalNode ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(int i) {
			return GetToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public Schema_nameContext[] schema_name() {
			return GetRuleContexts<Schema_nameContext>();
		}
		public Schema_nameContext schema_name(int i) {
			return GetRuleContext<Schema_nameContext>(i);
		}
		public ITerminalNode[] NULL() { return GetTokens(TSqlParser.NULL); }
		public ITerminalNode NULL(int i) {
			return GetToken(TSqlParser.NULL, i);
		}
		public ITerminalNode[] NONE() { return GetTokens(TSqlParser.NONE); }
		public ITerminalNode NONE(int i) {
			return GetToken(TSqlParser.NONE, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] OLD_PASSWORD() { return GetTokens(TSqlParser.OLD_PASSWORD); }
		public ITerminalNode OLD_PASSWORD(int i) {
			return GetToken(TSqlParser.OLD_PASSWORD, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public Alter_userContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_user; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_user(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_user(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_user(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_userContext alter_user() {
		Alter_userContext _localctx = new Alter_userContext(_ctx, State);
		EnterRule(_localctx, 402, RULE_alter_user);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5241; Match(ALTER);
			State = 5242; Match(USER);
			State = 5243; _localctx.username = id();
			State = 5244; Match(WITH);
			State = 5295;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 5295;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,611,_ctx) ) {
					case 1:
						{
						State = 5246;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==COMMA) {
							{
							State = 5245; Match(COMMA);
							}
						}

						State = 5248; Match(NAME);
						State = 5249; Match(EQUAL);
						State = 5250; _localctx.newusername = id();
						}
						break;

					case 2:
						{
						State = 5252;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==COMMA) {
							{
							State = 5251; Match(COMMA);
							}
						}

						State = 5254; Match(DEFAULT_SCHEMA);
						State = 5255; Match(EQUAL);
						State = 5258;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,604,_ctx) ) {
						case 1:
							{
							State = 5256; schema_name();
							}
							break;

						case 2:
							{
							State = 5257; Match(NULL);
							}
							break;
						}
						}
						break;

					case 3:
						{
						State = 5261;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==COMMA) {
							{
							State = 5260; Match(COMMA);
							}
						}

						State = 5263; Match(LOGIN);
						State = 5264; Match(EQUAL);
						State = 5265; _localctx.loginame = id();
						}
						break;

					case 4:
						{
						State = 5267;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==COMMA) {
							{
							State = 5266; Match(COMMA);
							}
						}

						State = 5269; Match(PASSWORD);
						State = 5270; Match(EQUAL);
						State = 5271; Match(STRING);
						State = 5275;
						_errHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 5272; Match(OLD_PASSWORD);
								State = 5273; Match(EQUAL);
								State = 5274; Match(STRING);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 5277;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,607,_ctx);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
						}
						break;

					case 5:
						{
						State = 5280;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==COMMA) {
							{
							State = 5279; Match(COMMA);
							}
						}

						State = 5282; Match(DEFAULT_LANGUAGE);
						State = 5283; Match(EQUAL);
						State = 5287;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,609,_ctx) ) {
						case 1:
							{
							State = 5284; Match(NONE);
							}
							break;

						case 2:
							{
							State = 5285; _localctx.lcid = Match(DECIMAL);
							}
							break;

						case 3:
							{
							State = 5286; _localctx.language_name_or_alias = id();
							}
							break;
						}
						}
						break;

					case 6:
						{
						State = 5290;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==COMMA) {
							{
							State = 5289; Match(COMMA);
							}
						}

						State = 5292; Match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
						State = 5293; Match(EQUAL);
						State = 5294;
						_la = _input.La(1);
						if ( !(_la==OFF || _la==ON) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5297;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,612,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_userContext : ParserRuleContext {
		public IdContext user_name;
		public IdContext login_name;
		public IdContext windows_principal;
		public IdContext language_name_or_alias;
		public IToken password;
		public IdContext Azure_Active_Directory_principal;
		public IdContext cert_name;
		public IdContext asym_key_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode[] DEFAULT_SCHEMA() { return GetTokens(TSqlParser.DEFAULT_SCHEMA); }
		public ITerminalNode DEFAULT_SCHEMA(int i) {
			return GetToken(TSqlParser.DEFAULT_SCHEMA, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public Schema_nameContext[] schema_name() {
			return GetRuleContexts<Schema_nameContext>();
		}
		public Schema_nameContext schema_name(int i) {
			return GetRuleContext<Schema_nameContext>(i);
		}
		public ITerminalNode[] ALLOW_ENCRYPTED_VALUE_MODIFICATIONS() { return GetTokens(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS); }
		public ITerminalNode ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(int i) {
			return GetToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode[] DEFAULT_LANGUAGE() { return GetTokens(TSqlParser.DEFAULT_LANGUAGE); }
		public ITerminalNode DEFAULT_LANGUAGE(int i) {
			return GetToken(TSqlParser.DEFAULT_LANGUAGE, i);
		}
		public ITerminalNode[] SID() { return GetTokens(TSqlParser.SID); }
		public ITerminalNode SID(int i) {
			return GetToken(TSqlParser.SID, i);
		}
		public ITerminalNode[] BINARY() { return GetTokens(TSqlParser.BINARY); }
		public ITerminalNode BINARY(int i) {
			return GetToken(TSqlParser.BINARY, i);
		}
		public ITerminalNode[] NONE() { return GetTokens(TSqlParser.NONE); }
		public ITerminalNode NONE(int i) {
			return GetToken(TSqlParser.NONE, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode WITHOUT() { return GetToken(TSqlParser.WITHOUT, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public Create_userContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_user; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_user(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_user(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_user(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_userContext create_user() {
		Create_userContext _localctx = new Create_userContext(_ctx, State);
		EnterRule(_localctx, 404, RULE_create_user);
		int _la;
		try {
			int _alt;
			State = 5445;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,640,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5299; Match(CREATE);
				State = 5300; Match(USER);
				State = 5301; _localctx.user_name = id();
				State = 5305;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==FOR || _la==FROM) {
					{
					State = 5302;
					_la = _input.La(1);
					if ( !(_la==FOR || _la==FROM) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 5303; Match(LOGIN);
					State = 5304; _localctx.login_name = id();
					}
				}

				State = 5325;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,618,_ctx) ) {
				case 1:
					{
					State = 5307; Match(WITH);
					State = 5322;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,617,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							State = 5320;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,616,_ctx) ) {
							case 1:
								{
								State = 5309;
								_errHandler.Sync(this);
								_la = _input.La(1);
								if (_la==COMMA) {
									{
									State = 5308; Match(COMMA);
									}
								}

								State = 5311; Match(DEFAULT_SCHEMA);
								State = 5312; Match(EQUAL);
								State = 5313; schema_name();
								}
								break;

							case 2:
								{
								State = 5315;
								_errHandler.Sync(this);
								_la = _input.La(1);
								if (_la==COMMA) {
									{
									State = 5314; Match(COMMA);
									}
								}

								State = 5317; Match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
								State = 5318; Match(EQUAL);
								State = 5319;
								_la = _input.La(1);
								if ( !(_la==OFF || _la==ON) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								}
								break;
							}
							} 
						}
						State = 5324;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,617,_ctx);
					}
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5327; Match(CREATE);
				State = 5328; Match(USER);
				State = 5409;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,634,_ctx) ) {
				case 1:
					{
					State = 5329; _localctx.windows_principal = id();
					State = 5364;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,626,_ctx) ) {
					case 1:
						{
						State = 5330; Match(WITH);
						State = 5361;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,625,_ctx);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
							if ( _alt==1 ) {
								{
								State = 5359;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,624,_ctx) ) {
								case 1:
									{
									State = 5332;
									_errHandler.Sync(this);
									_la = _input.La(1);
									if (_la==COMMA) {
										{
										State = 5331; Match(COMMA);
										}
									}

									State = 5334; Match(DEFAULT_SCHEMA);
									State = 5335; Match(EQUAL);
									State = 5336; schema_name();
									}
									break;

								case 2:
									{
									State = 5338;
									_errHandler.Sync(this);
									_la = _input.La(1);
									if (_la==COMMA) {
										{
										State = 5337; Match(COMMA);
										}
									}

									State = 5340; Match(DEFAULT_LANGUAGE);
									State = 5341; Match(EQUAL);
									State = 5345;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,621,_ctx) ) {
									case 1:
										{
										State = 5342; Match(NONE);
										}
										break;

									case 2:
										{
										State = 5343; Match(DECIMAL);
										}
										break;

									case 3:
										{
										State = 5344; _localctx.language_name_or_alias = id();
										}
										break;
									}
									}
									break;

								case 3:
									{
									State = 5348;
									_errHandler.Sync(this);
									_la = _input.La(1);
									if (_la==COMMA) {
										{
										State = 5347; Match(COMMA);
										}
									}

									State = 5350; Match(SID);
									State = 5351; Match(EQUAL);
									State = 5352; Match(BINARY);
									}
									break;

								case 4:
									{
									State = 5354;
									_errHandler.Sync(this);
									_la = _input.La(1);
									if (_la==COMMA) {
										{
										State = 5353; Match(COMMA);
										}
									}

									State = 5356; Match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
									State = 5357; Match(EQUAL);
									State = 5358;
									_la = _input.La(1);
									if ( !(_la==OFF || _la==ON) ) {
									_errHandler.RecoverInline(this);
									} else {
										if (_input.La(1) == TokenConstants.Eof) {
											matchedEOF = true;
										}

										_errHandler.ReportMatch(this);
										Consume();
									}
									}
									break;
								}
								} 
							}
							State = 5363;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,625,_ctx);
						}
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 5366; _localctx.user_name = id();
					State = 5367; Match(WITH);
					State = 5368; Match(PASSWORD);
					State = 5369; Match(EQUAL);
					State = 5370; _localctx.password = Match(STRING);
					State = 5401;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,633,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							State = 5399;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,632,_ctx) ) {
							case 1:
								{
								State = 5372;
								_errHandler.Sync(this);
								_la = _input.La(1);
								if (_la==COMMA) {
									{
									State = 5371; Match(COMMA);
									}
								}

								State = 5374; Match(DEFAULT_SCHEMA);
								State = 5375; Match(EQUAL);
								State = 5376; schema_name();
								}
								break;

							case 2:
								{
								State = 5378;
								_errHandler.Sync(this);
								_la = _input.La(1);
								if (_la==COMMA) {
									{
									State = 5377; Match(COMMA);
									}
								}

								State = 5380; Match(DEFAULT_LANGUAGE);
								State = 5381; Match(EQUAL);
								State = 5385;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,629,_ctx) ) {
								case 1:
									{
									State = 5382; Match(NONE);
									}
									break;

								case 2:
									{
									State = 5383; Match(DECIMAL);
									}
									break;

								case 3:
									{
									State = 5384; _localctx.language_name_or_alias = id();
									}
									break;
								}
								}
								break;

							case 3:
								{
								State = 5388;
								_errHandler.Sync(this);
								_la = _input.La(1);
								if (_la==COMMA) {
									{
									State = 5387; Match(COMMA);
									}
								}

								State = 5390; Match(SID);
								State = 5391; Match(EQUAL);
								State = 5392; Match(BINARY);
								}
								break;

							case 4:
								{
								State = 5394;
								_errHandler.Sync(this);
								_la = _input.La(1);
								if (_la==COMMA) {
									{
									State = 5393; Match(COMMA);
									}
								}

								State = 5396; Match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
								State = 5397; Match(EQUAL);
								State = 5398;
								_la = _input.La(1);
								if ( !(_la==OFF || _la==ON) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								}
								break;
							}
							} 
						}
						State = 5403;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,633,_ctx);
					}
					}
					break;

				case 3:
					{
					State = 5404; _localctx.Azure_Active_Directory_principal = id();
					State = 5405; Match(FROM);
					State = 5406; Match(EXTERNAL);
					State = 5407; Match(PROVIDER);
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5411; Match(CREATE);
				State = 5412; Match(USER);
				State = 5413; _localctx.user_name = id();
				State = 5440;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,639,_ctx) ) {
				case 1:
					{
					State = 5414; Match(WITHOUT);
					State = 5415; Match(LOGIN);
					State = 5430;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,638,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							State = 5428;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,637,_ctx) ) {
							case 1:
								{
								State = 5417;
								_errHandler.Sync(this);
								_la = _input.La(1);
								if (_la==COMMA) {
									{
									State = 5416; Match(COMMA);
									}
								}

								State = 5419; Match(DEFAULT_SCHEMA);
								State = 5420; Match(EQUAL);
								State = 5421; schema_name();
								}
								break;

							case 2:
								{
								State = 5423;
								_errHandler.Sync(this);
								_la = _input.La(1);
								if (_la==COMMA) {
									{
									State = 5422; Match(COMMA);
									}
								}

								State = 5425; Match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
								State = 5426; Match(EQUAL);
								State = 5427;
								_la = _input.La(1);
								if ( !(_la==OFF || _la==ON) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								}
								break;
							}
							} 
						}
						State = 5432;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,638,_ctx);
					}
					}
					break;

				case 2:
					{
					State = 5433;
					_la = _input.La(1);
					if ( !(_la==FOR || _la==FROM) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 5434; Match(CERTIFICATE);
					State = 5435; _localctx.cert_name = id();
					}
					break;

				case 3:
					{
					State = 5436;
					_la = _input.La(1);
					if ( !(_la==FOR || _la==FROM) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 5437; Match(ASYMMETRIC);
					State = 5438; Match(KEY);
					State = 5439; _localctx.asym_key_name = id();
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5442; Match(CREATE);
				State = 5443; Match(USER);
				State = 5444; _localctx.user_name = id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_user_azure_sql_dwContext : ParserRuleContext {
		public IdContext user_name;
		public IdContext login_name;
		public IdContext Azure_Active_Directory_principal;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public ITerminalNode WITHOUT() { return GetToken(TSqlParser.WITHOUT, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode DEFAULT_SCHEMA() { return GetToken(TSqlParser.DEFAULT_SCHEMA, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public Create_user_azure_sql_dwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_user_azure_sql_dw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_user_azure_sql_dw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_user_azure_sql_dw(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_user_azure_sql_dw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_user_azure_sql_dwContext create_user_azure_sql_dw() {
		Create_user_azure_sql_dwContext _localctx = new Create_user_azure_sql_dwContext(_ctx, State);
		EnterRule(_localctx, 406, RULE_create_user_azure_sql_dw);
		int _la;
		try {
			State = 5475;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,644,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5447; Match(CREATE);
				State = 5448; Match(USER);
				State = 5449; _localctx.user_name = id();
				State = 5455;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,641,_ctx) ) {
				case 1:
					{
					State = 5450;
					_la = _input.La(1);
					if ( !(_la==FOR || _la==FROM) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 5451; Match(LOGIN);
					State = 5452; _localctx.login_name = id();
					}
					break;

				case 2:
					{
					State = 5453; Match(WITHOUT);
					State = 5454; Match(LOGIN);
					}
					break;
				}
				State = 5461;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,642,_ctx) ) {
				case 1:
					{
					State = 5457; Match(WITH);
					State = 5458; Match(DEFAULT_SCHEMA);
					State = 5459; Match(EQUAL);
					State = 5460; schema_name();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5463; Match(CREATE);
				State = 5464; Match(USER);
				State = 5465; _localctx.Azure_Active_Directory_principal = id();
				State = 5466; Match(FROM);
				State = 5467; Match(EXTERNAL);
				State = 5468; Match(PROVIDER);
				State = 5473;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,643,_ctx) ) {
				case 1:
					{
					State = 5469; Match(WITH);
					State = 5470; Match(DEFAULT_SCHEMA);
					State = 5471; Match(EQUAL);
					State = 5472; schema_name();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_user_azure_sqlContext : ParserRuleContext {
		public IdContext username;
		public IdContext newusername;
		public IdContext loginame;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] NAME() { return GetTokens(TSqlParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(TSqlParser.NAME, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] DEFAULT_SCHEMA() { return GetTokens(TSqlParser.DEFAULT_SCHEMA); }
		public ITerminalNode DEFAULT_SCHEMA(int i) {
			return GetToken(TSqlParser.DEFAULT_SCHEMA, i);
		}
		public Schema_nameContext[] schema_name() {
			return GetRuleContexts<Schema_nameContext>();
		}
		public Schema_nameContext schema_name(int i) {
			return GetRuleContext<Schema_nameContext>(i);
		}
		public ITerminalNode[] LOGIN() { return GetTokens(TSqlParser.LOGIN); }
		public ITerminalNode LOGIN(int i) {
			return GetToken(TSqlParser.LOGIN, i);
		}
		public ITerminalNode[] ALLOW_ENCRYPTED_VALUE_MODIFICATIONS() { return GetTokens(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS); }
		public ITerminalNode ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(int i) {
			return GetToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Alter_user_azure_sqlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_user_azure_sql; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_user_azure_sql(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_user_azure_sql(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_user_azure_sql(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_user_azure_sqlContext alter_user_azure_sql() {
		Alter_user_azure_sqlContext _localctx = new Alter_user_azure_sqlContext(_ctx, State);
		EnterRule(_localctx, 408, RULE_alter_user_azure_sql);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5477; Match(ALTER);
			State = 5478; Match(USER);
			State = 5479; _localctx.username = id();
			State = 5480; Match(WITH);
			State = 5505;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 5505;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,649,_ctx) ) {
					case 1:
						{
						State = 5482;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==COMMA) {
							{
							State = 5481; Match(COMMA);
							}
						}

						State = 5484; Match(NAME);
						State = 5485; Match(EQUAL);
						State = 5486; _localctx.newusername = id();
						}
						break;

					case 2:
						{
						State = 5488;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==COMMA) {
							{
							State = 5487; Match(COMMA);
							}
						}

						State = 5490; Match(DEFAULT_SCHEMA);
						State = 5491; Match(EQUAL);
						State = 5492; schema_name();
						}
						break;

					case 3:
						{
						State = 5494;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==COMMA) {
							{
							State = 5493; Match(COMMA);
							}
						}

						State = 5496; Match(LOGIN);
						State = 5497; Match(EQUAL);
						State = 5498; _localctx.loginame = id();
						}
						break;

					case 4:
						{
						State = 5500;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==COMMA) {
							{
							State = 5499; Match(COMMA);
							}
						}

						State = 5502; Match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
						State = 5503; Match(EQUAL);
						State = 5504;
						_la = _input.La(1);
						if ( !(_la==OFF || _la==ON) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5507;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,650,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_workload_groupContext : ParserRuleContext {
		public IdContext workload_group_group_name;
		public IToken request_max_memory_grant;
		public IToken request_max_cpu_time_sec;
		public IToken request_memory_grant_timeout_sec;
		public IToken max_dop;
		public IToken group_max_requests;
		public IdContext workload_group_pool_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode WORKLOAD() { return GetToken(TSqlParser.WORKLOAD, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public ITerminalNode[] DEFAULT_DOUBLE_QUOTE() { return GetTokens(TSqlParser.DEFAULT_DOUBLE_QUOTE); }
		public ITerminalNode DEFAULT_DOUBLE_QUOTE(int i) {
			return GetToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, i);
		}
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode USING() { return GetToken(TSqlParser.USING, 0); }
		public ITerminalNode[] IMPORTANCE() { return GetTokens(TSqlParser.IMPORTANCE); }
		public ITerminalNode IMPORTANCE(int i) {
			return GetToken(TSqlParser.IMPORTANCE, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] REQUEST_MAX_MEMORY_GRANT_PERCENT() { return GetTokens(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT); }
		public ITerminalNode REQUEST_MAX_MEMORY_GRANT_PERCENT(int i) {
			return GetToken(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, i);
		}
		public ITerminalNode[] REQUEST_MAX_CPU_TIME_SEC() { return GetTokens(TSqlParser.REQUEST_MAX_CPU_TIME_SEC); }
		public ITerminalNode REQUEST_MAX_CPU_TIME_SEC(int i) {
			return GetToken(TSqlParser.REQUEST_MAX_CPU_TIME_SEC, i);
		}
		public ITerminalNode[] REQUEST_MEMORY_GRANT_TIMEOUT_SEC() { return GetTokens(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC); }
		public ITerminalNode REQUEST_MEMORY_GRANT_TIMEOUT_SEC(int i) {
			return GetToken(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, i);
		}
		public ITerminalNode[] MAX_DOP() { return GetTokens(TSqlParser.MAX_DOP); }
		public ITerminalNode MAX_DOP(int i) {
			return GetToken(TSqlParser.MAX_DOP, i);
		}
		public ITerminalNode[] GROUP_MAX_REQUESTS() { return GetTokens(TSqlParser.GROUP_MAX_REQUESTS); }
		public ITerminalNode GROUP_MAX_REQUESTS(int i) {
			return GetToken(TSqlParser.GROUP_MAX_REQUESTS, i);
		}
		public ITerminalNode[] LOW() { return GetTokens(TSqlParser.LOW); }
		public ITerminalNode LOW(int i) {
			return GetToken(TSqlParser.LOW, i);
		}
		public ITerminalNode[] MEDIUM() { return GetTokens(TSqlParser.MEDIUM); }
		public ITerminalNode MEDIUM(int i) {
			return GetToken(TSqlParser.MEDIUM, i);
		}
		public ITerminalNode[] HIGH() { return GetTokens(TSqlParser.HIGH); }
		public ITerminalNode HIGH(int i) {
			return GetToken(TSqlParser.HIGH, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Alter_workload_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_workload_group; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_workload_group(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_workload_group(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_workload_group(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_workload_groupContext alter_workload_group() {
		Alter_workload_groupContext _localctx = new Alter_workload_groupContext(_ctx, State);
		EnterRule(_localctx, 410, RULE_alter_workload_group);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5509; Match(ALTER);
			State = 5510; Match(WORKLOAD);
			State = 5511; Match(GROUP);
			State = 5514;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,651,_ctx) ) {
			case 1:
				{
				State = 5512; _localctx.workload_group_group_name = id();
				}
				break;

			case 2:
				{
				State = 5513; Match(DEFAULT_DOUBLE_QUOTE);
				}
				break;
			}
			State = 5547;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,656,_ctx) ) {
			case 1:
				{
				State = 5516; Match(WITH);
				State = 5517; Match(LR_BRACKET);
				State = 5542;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					State = 5542;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,654,_ctx) ) {
					case 1:
						{
						State = 5518; Match(IMPORTANCE);
						State = 5519; Match(EQUAL);
						State = 5520;
						_la = _input.La(1);
						if ( !(((((_la - 541)) & ~0x3f) == 0 && ((1L << (_la - 541)) & ((1L << (HIGH - 541)) | (1L << (LOW - 541)) | (1L << (MEDIUM - 541)))) != 0)) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;

					case 2:
						{
						State = 5522;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==COMMA) {
							{
							State = 5521; Match(COMMA);
							}
						}

						State = 5524; Match(REQUEST_MAX_MEMORY_GRANT_PERCENT);
						State = 5525; Match(EQUAL);
						State = 5526; _localctx.request_max_memory_grant = Match(DECIMAL);
						}
						break;

					case 3:
						{
						State = 5528;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==COMMA) {
							{
							State = 5527; Match(COMMA);
							}
						}

						State = 5530; Match(REQUEST_MAX_CPU_TIME_SEC);
						State = 5531; Match(EQUAL);
						State = 5532; _localctx.request_max_cpu_time_sec = Match(DECIMAL);
						}
						break;

					case 4:
						{
						State = 5533; Match(REQUEST_MEMORY_GRANT_TIMEOUT_SEC);
						State = 5534; Match(EQUAL);
						State = 5535; _localctx.request_memory_grant_timeout_sec = Match(DECIMAL);
						}
						break;

					case 5:
						{
						State = 5536; Match(MAX_DOP);
						State = 5537; Match(EQUAL);
						State = 5538; _localctx.max_dop = Match(DECIMAL);
						}
						break;

					case 6:
						{
						State = 5539; Match(GROUP_MAX_REQUESTS);
						State = 5540; Match(EQUAL);
						State = 5541; _localctx.group_max_requests = Match(DECIMAL);
						}
						break;
					}
					}
					State = 5544;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( ((((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & ((1L << (GROUP_MAX_REQUESTS - 534)) | (1L << (IMPORTANCE - 534)) | (1L << (MAX_DOP - 534)))) != 0) || ((((_la - 693)) & ~0x3f) == 0 && ((1L << (_la - 693)) & ((1L << (REQUEST_MAX_CPU_TIME_SEC - 693)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 693)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 693)))) != 0) || _la==COMMA );
				State = 5546; Match(RR_BRACKET);
				}
				break;
			}
			State = 5554;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,658,_ctx) ) {
			case 1:
				{
				State = 5549; Match(USING);
				State = 5552;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,657,_ctx) ) {
				case 1:
					{
					State = 5550; _localctx.workload_group_pool_name = id();
					}
					break;

				case 2:
					{
					State = 5551; Match(DEFAULT_DOUBLE_QUOTE);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_workload_groupContext : ParserRuleContext {
		public IdContext workload_group_group_name;
		public IToken request_max_memory_grant;
		public IToken request_max_cpu_time_sec;
		public IToken request_memory_grant_timeout_sec;
		public IToken max_dop;
		public IToken group_max_requests;
		public IdContext workload_group_pool_name;
		public IdContext external_pool_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode WORKLOAD() { return GetToken(TSqlParser.WORKLOAD, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode USING() { return GetToken(TSqlParser.USING, 0); }
		public ITerminalNode[] IMPORTANCE() { return GetTokens(TSqlParser.IMPORTANCE); }
		public ITerminalNode IMPORTANCE(int i) {
			return GetToken(TSqlParser.IMPORTANCE, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] REQUEST_MAX_MEMORY_GRANT_PERCENT() { return GetTokens(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT); }
		public ITerminalNode REQUEST_MAX_MEMORY_GRANT_PERCENT(int i) {
			return GetToken(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, i);
		}
		public ITerminalNode[] REQUEST_MAX_CPU_TIME_SEC() { return GetTokens(TSqlParser.REQUEST_MAX_CPU_TIME_SEC); }
		public ITerminalNode REQUEST_MAX_CPU_TIME_SEC(int i) {
			return GetToken(TSqlParser.REQUEST_MAX_CPU_TIME_SEC, i);
		}
		public ITerminalNode[] REQUEST_MEMORY_GRANT_TIMEOUT_SEC() { return GetTokens(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC); }
		public ITerminalNode REQUEST_MEMORY_GRANT_TIMEOUT_SEC(int i) {
			return GetToken(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, i);
		}
		public ITerminalNode[] MAX_DOP() { return GetTokens(TSqlParser.MAX_DOP); }
		public ITerminalNode MAX_DOP(int i) {
			return GetToken(TSqlParser.MAX_DOP, i);
		}
		public ITerminalNode[] GROUP_MAX_REQUESTS() { return GetTokens(TSqlParser.GROUP_MAX_REQUESTS); }
		public ITerminalNode GROUP_MAX_REQUESTS(int i) {
			return GetToken(TSqlParser.GROUP_MAX_REQUESTS, i);
		}
		public ITerminalNode[] DEFAULT_DOUBLE_QUOTE() { return GetTokens(TSqlParser.DEFAULT_DOUBLE_QUOTE); }
		public ITerminalNode DEFAULT_DOUBLE_QUOTE(int i) {
			return GetToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, i);
		}
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode[] LOW() { return GetTokens(TSqlParser.LOW); }
		public ITerminalNode LOW(int i) {
			return GetToken(TSqlParser.LOW, i);
		}
		public ITerminalNode[] MEDIUM() { return GetTokens(TSqlParser.MEDIUM); }
		public ITerminalNode MEDIUM(int i) {
			return GetToken(TSqlParser.MEDIUM, i);
		}
		public ITerminalNode[] HIGH() { return GetTokens(TSqlParser.HIGH); }
		public ITerminalNode HIGH(int i) {
			return GetToken(TSqlParser.HIGH, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Create_workload_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_workload_group; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_workload_group(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_workload_group(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_workload_group(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_workload_groupContext create_workload_group() {
		Create_workload_groupContext _localctx = new Create_workload_groupContext(_ctx, State);
		EnterRule(_localctx, 412, RULE_create_workload_group);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5556; Match(CREATE);
			State = 5557; Match(WORKLOAD);
			State = 5558; Match(GROUP);
			State = 5559; _localctx.workload_group_group_name = id();
			State = 5591;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,663,_ctx) ) {
			case 1:
				{
				State = 5560; Match(WITH);
				State = 5561; Match(LR_BRACKET);
				State = 5586;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					State = 5586;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,661,_ctx) ) {
					case 1:
						{
						State = 5562; Match(IMPORTANCE);
						State = 5563; Match(EQUAL);
						State = 5564;
						_la = _input.La(1);
						if ( !(((((_la - 541)) & ~0x3f) == 0 && ((1L << (_la - 541)) & ((1L << (HIGH - 541)) | (1L << (LOW - 541)) | (1L << (MEDIUM - 541)))) != 0)) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;

					case 2:
						{
						State = 5566;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==COMMA) {
							{
							State = 5565; Match(COMMA);
							}
						}

						State = 5568; Match(REQUEST_MAX_MEMORY_GRANT_PERCENT);
						State = 5569; Match(EQUAL);
						State = 5570; _localctx.request_max_memory_grant = Match(DECIMAL);
						}
						break;

					case 3:
						{
						State = 5572;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==COMMA) {
							{
							State = 5571; Match(COMMA);
							}
						}

						State = 5574; Match(REQUEST_MAX_CPU_TIME_SEC);
						State = 5575; Match(EQUAL);
						State = 5576; _localctx.request_max_cpu_time_sec = Match(DECIMAL);
						}
						break;

					case 4:
						{
						State = 5577; Match(REQUEST_MEMORY_GRANT_TIMEOUT_SEC);
						State = 5578; Match(EQUAL);
						State = 5579; _localctx.request_memory_grant_timeout_sec = Match(DECIMAL);
						}
						break;

					case 5:
						{
						State = 5580; Match(MAX_DOP);
						State = 5581; Match(EQUAL);
						State = 5582; _localctx.max_dop = Match(DECIMAL);
						}
						break;

					case 6:
						{
						State = 5583; Match(GROUP_MAX_REQUESTS);
						State = 5584; Match(EQUAL);
						State = 5585; _localctx.group_max_requests = Match(DECIMAL);
						}
						break;
					}
					}
					State = 5588;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( ((((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & ((1L << (GROUP_MAX_REQUESTS - 534)) | (1L << (IMPORTANCE - 534)) | (1L << (MAX_DOP - 534)))) != 0) || ((((_la - 693)) & ~0x3f) == 0 && ((1L << (_la - 693)) & ((1L << (REQUEST_MAX_CPU_TIME_SEC - 693)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 693)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 693)))) != 0) || _la==COMMA );
				State = 5590; Match(RR_BRACKET);
				}
				break;
			}
			State = 5606;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,667,_ctx) ) {
			case 1:
				{
				State = 5593; Match(USING);
				State = 5596;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,664,_ctx) ) {
				case 1:
					{
					State = 5594; _localctx.workload_group_pool_name = id();
					}
					break;

				case 2:
					{
					State = 5595; Match(DEFAULT_DOUBLE_QUOTE);
					}
					break;
				}
				State = 5604;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,666,_ctx) ) {
				case 1:
					{
					State = 5599;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==COMMA) {
						{
						State = 5598; Match(COMMA);
						}
					}

					State = 5601; Match(EXTERNAL);
					State = 5602; _localctx.external_pool_name = id();
					}
					break;

				case 2:
					{
					State = 5603; Match(DEFAULT_DOUBLE_QUOTE);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_xml_schema_collectionContext : ParserRuleContext {
		public IdContext relational_schema;
		public IdContext sql_identifier;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Create_xml_schema_collectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_xml_schema_collection; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_xml_schema_collection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_xml_schema_collection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_xml_schema_collection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_xml_schema_collectionContext create_xml_schema_collection() {
		Create_xml_schema_collectionContext _localctx = new Create_xml_schema_collectionContext(_ctx, State);
		EnterRule(_localctx, 414, RULE_create_xml_schema_collection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5608; Match(CREATE);
			State = 5609; Match(XML);
			State = 5610; Match(SCHEMA);
			State = 5611; Match(COLLECTION);
			State = 5615;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,668,_ctx) ) {
			case 1:
				{
				State = 5612; _localctx.relational_schema = id();
				State = 5613; Match(DOT);
				}
				break;
			}
			State = 5617; _localctx.sql_identifier = id();
			State = 5618; Match(AS);
			State = 5622;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,669,_ctx) ) {
			case 1:
				{
				State = 5619; Match(STRING);
				}
				break;

			case 2:
				{
				State = 5620; id();
				}
				break;

			case 3:
				{
				State = 5621; Match(LOCAL_ID);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_queueContext : ParserRuleContext {
		public IdContext queue_name;
		public IdContext filegroup;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		public Schema_object_nameContext schema_object_name() {
			return GetRuleContext<Schema_object_nameContext>(0);
		}
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public Queue_settingsContext queue_settings() {
			return GetRuleContext<Queue_settingsContext>(0);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public Create_queueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_queue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_queue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_queue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_queue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_queueContext create_queue() {
		Create_queueContext _localctx = new Create_queueContext(_ctx, State);
		EnterRule(_localctx, 416, RULE_create_queue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5624; Match(CREATE);
			State = 5625; Match(QUEUE);
			State = 5628;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,670,_ctx) ) {
			case 1:
				{
				State = 5626; schema_object_name();
				}
				break;

			case 2:
				{
				State = 5627; _localctx.queue_name = id();
				}
				break;
			}
			State = 5631;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,671,_ctx) ) {
			case 1:
				{
				State = 5630; queue_settings();
				}
				break;
			}
			State = 5636;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,672,_ctx) ) {
			case 1:
				{
				State = 5633; Match(ON);
				State = 5634; _localctx.filegroup = id();
				}
				break;

			case 2:
				{
				State = 5635; Match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Queue_settingsContext : ParserRuleContext {
		public IToken max_readers;
		public IToken user_name;
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] STATUS() { return GetTokens(TSqlParser.STATUS); }
		public ITerminalNode STATUS(int i) {
			return GetToken(TSqlParser.STATUS, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode RETENTION() { return GetToken(TSqlParser.RETENTION, 0); }
		public ITerminalNode ACTIVATION() { return GetToken(TSqlParser.ACTIVATION, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode POISON_MESSAGE_HANDLING() { return GetToken(TSqlParser.POISON_MESSAGE_HANDLING, 0); }
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode PROCEDURE_NAME() { return GetToken(TSqlParser.PROCEDURE_NAME, 0); }
		public Func_proc_name_database_schemaContext func_proc_name_database_schema() {
			return GetRuleContext<Func_proc_name_database_schemaContext>(0);
		}
		public ITerminalNode MAX_QUEUE_READERS() { return GetToken(TSqlParser.MAX_QUEUE_READERS, 0); }
		public ITerminalNode EXECUTE() { return GetToken(TSqlParser.EXECUTE, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode SELF() { return GetToken(TSqlParser.SELF, 0); }
		public ITerminalNode OWNER() { return GetToken(TSqlParser.OWNER, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Queue_settingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queue_settings; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQueue_settings(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQueue_settings(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueue_settings(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Queue_settingsContext queue_settings() {
		Queue_settingsContext _localctx = new Queue_settingsContext(_ctx, State);
		EnterRule(_localctx, 418, RULE_queue_settings);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5638; Match(WITH);
			State = 5645;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,674,_ctx) ) {
			case 1:
				{
				State = 5639; Match(STATUS);
				State = 5640; Match(EQUAL);
				State = 5641;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 5643;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,673,_ctx) ) {
				case 1:
					{
					State = 5642; Match(COMMA);
					}
					break;
				}
				}
				break;
			}
			State = 5653;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,676,_ctx) ) {
			case 1:
				{
				State = 5647; Match(RETENTION);
				State = 5648; Match(EQUAL);
				State = 5649;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 5651;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,675,_ctx) ) {
				case 1:
					{
					State = 5650; Match(COMMA);
					}
					break;
				}
				}
				break;
			}
			State = 5700;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,688,_ctx) ) {
			case 1:
				{
				State = 5655; Match(ACTIVATION);
				State = 5656; Match(LR_BRACKET);
				State = 5694;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case EXECUTE:
				case MAX_QUEUE_READERS:
				case PROCEDURE_NAME:
				case STATUS:
				case RR_BRACKET:
					{
					{
					State = 5663;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==STATUS) {
						{
						State = 5657; Match(STATUS);
						State = 5658; Match(EQUAL);
						State = 5659;
						_la = _input.La(1);
						if ( !(_la==OFF || _la==ON) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 5661;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==COMMA) {
							{
							State = 5660; Match(COMMA);
							}
						}

						}
					}

					State = 5671;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==PROCEDURE_NAME) {
						{
						State = 5665; Match(PROCEDURE_NAME);
						State = 5666; Match(EQUAL);
						State = 5667; func_proc_name_database_schema();
						State = 5669;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==COMMA) {
							{
							State = 5668; Match(COMMA);
							}
						}

						}
					}

					State = 5679;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==MAX_QUEUE_READERS) {
						{
						State = 5673; Match(MAX_QUEUE_READERS);
						State = 5674; Match(EQUAL);
						State = 5675; _localctx.max_readers = Match(DECIMAL);
						State = 5677;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==COMMA) {
							{
							State = 5676; Match(COMMA);
							}
						}

						}
					}

					State = 5691;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==EXECUTE) {
						{
						State = 5681; Match(EXECUTE);
						State = 5682; Match(AS);
						State = 5686;
						_errHandler.Sync(this);
						switch (_input.La(1)) {
						case SELF:
							{
							State = 5683; Match(SELF);
							}
							break;
						case STRING:
							{
							State = 5684; _localctx.user_name = Match(STRING);
							}
							break;
						case OWNER:
							{
							State = 5685; Match(OWNER);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 5689;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==COMMA) {
							{
							State = 5688; Match(COMMA);
							}
						}

						}
					}

					}
					}
					break;
				case DROP:
					{
					State = 5693; Match(DROP);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5696; Match(RR_BRACKET);
				State = 5698;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,687,_ctx) ) {
				case 1:
					{
					State = 5697; Match(COMMA);
					}
					break;
				}
				}
				break;
			}
			State = 5709;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,689,_ctx) ) {
			case 1:
				{
				State = 5702; Match(POISON_MESSAGE_HANDLING);
				State = 5703; Match(LR_BRACKET);
				{
				State = 5704; Match(STATUS);
				State = 5705; Match(EQUAL);
				State = 5706;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				State = 5708; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_queueContext : ParserRuleContext {
		public IdContext queue_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		public Schema_object_nameContext schema_object_name() {
			return GetRuleContext<Schema_object_nameContext>(0);
		}
		public Queue_settingsContext queue_settings() {
			return GetRuleContext<Queue_settingsContext>(0);
		}
		public Queue_actionContext queue_action() {
			return GetRuleContext<Queue_actionContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Alter_queueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_queue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_queue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_queue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_queue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_queueContext alter_queue() {
		Alter_queueContext _localctx = new Alter_queueContext(_ctx, State);
		EnterRule(_localctx, 420, RULE_alter_queue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5711; Match(ALTER);
			State = 5712; Match(QUEUE);
			State = 5715;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,690,_ctx) ) {
			case 1:
				{
				State = 5713; schema_object_name();
				}
				break;

			case 2:
				{
				State = 5714; _localctx.queue_name = id();
				}
				break;
			}
			State = 5719;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case WITH:
				{
				State = 5717; queue_settings();
				}
				break;
			case MOVE:
			case REBUILD:
			case REORGANIZE:
				{
				State = 5718; queue_action();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Queue_actionContext : ParserRuleContext {
		public ITerminalNode REBUILD() { return GetToken(TSqlParser.REBUILD, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Queue_rebuild_optionsContext queue_rebuild_options() {
			return GetRuleContext<Queue_rebuild_optionsContext>(0);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode REORGANIZE() { return GetToken(TSqlParser.REORGANIZE, 0); }
		public ITerminalNode LOB_COMPACTION() { return GetToken(TSqlParser.LOB_COMPACTION, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode MOVE() { return GetToken(TSqlParser.MOVE, 0); }
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public Queue_actionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queue_action; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQueue_action(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQueue_action(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueue_action(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Queue_actionContext queue_action() {
		Queue_actionContext _localctx = new Queue_actionContext(_ctx, State);
		EnterRule(_localctx, 422, RULE_queue_action);
		int _la;
		try {
			State = 5742;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case REBUILD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5721; Match(REBUILD);
				State = 5727;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,692,_ctx) ) {
				case 1:
					{
					State = 5722; Match(WITH);
					State = 5723; Match(LR_BRACKET);
					State = 5724; queue_rebuild_options();
					State = 5725; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case REORGANIZE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5729; Match(REORGANIZE);
				State = 5734;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,693,_ctx) ) {
				case 1:
					{
					State = 5730; Match(WITH);
					State = 5731; Match(LOB_COMPACTION);
					State = 5732; Match(EQUAL);
					State = 5733;
					_la = _input.La(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;
			case MOVE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5736; Match(MOVE);
				State = 5737; Match(TO);
				State = 5740;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BACKSLASH:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONNECTION_OPTIONS:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DISK:
				case DOUBLE_BACK_SLASH:
				case DOUBLE_FORWARD_SLASH:
				case DTC_SUPPORT:
				case DUMP:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILENAME:
				case FILLFACTOR:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IDENTITYCOL:
				case IIF:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case IPV4_ADDR:
				case IPV6_ADDR:
				case ISNULL:
				case KERBEROS:
				case KEY:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOAD:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NATIVE_COMPILATION:
				case NEGOTIATE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case NULL:
				case OFFSETS:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PLATFORM:
				case POLICY:
				case PRECISION:
				case PREDICATE:
				case PROCESS:
				case PUBLIC:
				case PUSHDOWN:
				case PYTHON:
				case R:
				case RAW:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESULT_SETS:
				case RESUME:
				case RETAINDAYS:
				case RETURN:
				case RETURNS:
				case REWIND:
				case ROLE:
				case ROWCOUNT:
				case ROWGUIDCOL:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SECURITYAUDIT:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SESSION_USER:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case SYSTEM_USER:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case USER:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHIN:
				case WITHOUT:
				case WITNESS:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BUCKET_COUNT:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATEFIRST:
				case DATEFORMAT:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADOOP:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNDEFINED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case DOLLAR_ACTION:
				case SPACE:
				case COMMENT:
				case LINE_COMMENT:
				case DOUBLE_QUOTE_ID:
				case SINGLE_QUOTE:
				case SQUARE_BRACKET_ID:
				case LOCAL_ID:
				case DECIMAL:
				case ID:
				case QUOTED_URL:
				case QUOTED_HOST_AND_PORT:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case EQUAL:
				case GREATER:
				case LESS:
				case EXCLAMATION:
				case PLUS_ASSIGN:
				case MINUS_ASSIGN:
				case MULT_ASSIGN:
				case DIV_ASSIGN:
				case MOD_ASSIGN:
				case AND_ASSIGN:
				case XOR_ASSIGN:
				case OR_ASSIGN:
				case DOUBLE_BAR:
				case DOT:
				case UNDERLINE:
				case AT:
				case SHARP:
				case DOLLAR:
				case LR_BRACKET:
				case RR_BRACKET:
				case COMMA:
				case SEMI:
				case COLON:
				case STAR:
				case DIVIDE:
				case MODULE:
				case PLUS:
				case MINUS:
				case BIT_NOT:
				case BIT_OR:
				case BIT_AND:
				case BIT_XOR:
				case MDY:
				case DMY:
				case YMD:
				case YDM:
				case MYD:
				case DYM:
				case IPV4_OCTECT:
					{
					State = 5738; id();
					}
					break;
				case DEFAULT:
					{
					State = 5739; Match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Queue_rebuild_optionsContext : ParserRuleContext {
		public ITerminalNode MAXDOP() { return GetToken(TSqlParser.MAXDOP, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Queue_rebuild_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queue_rebuild_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQueue_rebuild_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQueue_rebuild_options(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueue_rebuild_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Queue_rebuild_optionsContext queue_rebuild_options() {
		Queue_rebuild_optionsContext _localctx = new Queue_rebuild_optionsContext(_ctx, State);
		EnterRule(_localctx, 424, RULE_queue_rebuild_options);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5744; Match(MAXDOP);
			State = 5745; Match(EQUAL);
			State = 5746; Match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_contractContext : ParserRuleContext {
		public IdContext owner_name;
		public IdContext message_type_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode CONTRACT() { return GetToken(TSqlParser.CONTRACT, 0); }
		public Contract_nameContext contract_name() {
			return GetRuleContext<Contract_nameContext>(0);
		}
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode[] SENT() { return GetTokens(TSqlParser.SENT); }
		public ITerminalNode SENT(int i) {
			return GetToken(TSqlParser.SENT, i);
		}
		public ITerminalNode[] BY() { return GetTokens(TSqlParser.BY); }
		public ITerminalNode BY(int i) {
			return GetToken(TSqlParser.BY, i);
		}
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] INITIATOR() { return GetTokens(TSqlParser.INITIATOR); }
		public ITerminalNode INITIATOR(int i) {
			return GetToken(TSqlParser.INITIATOR, i);
		}
		public ITerminalNode[] TARGET() { return GetTokens(TSqlParser.TARGET); }
		public ITerminalNode TARGET(int i) {
			return GetToken(TSqlParser.TARGET, i);
		}
		public ITerminalNode[] ANY() { return GetTokens(TSqlParser.ANY); }
		public ITerminalNode ANY(int i) {
			return GetToken(TSqlParser.ANY, i);
		}
		public ITerminalNode[] DEFAULT() { return GetTokens(TSqlParser.DEFAULT); }
		public ITerminalNode DEFAULT(int i) {
			return GetToken(TSqlParser.DEFAULT, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Create_contractContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_contract; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_contract(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_contract(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_contract(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_contractContext create_contract() {
		Create_contractContext _localctx = new Create_contractContext(_ctx, State);
		EnterRule(_localctx, 426, RULE_create_contract);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5748; Match(CREATE);
			State = 5749; Match(CONTRACT);
			State = 5750; contract_name();
			State = 5753;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AUTHORIZATION) {
				{
				State = 5751; Match(AUTHORIZATION);
				State = 5752; _localctx.owner_name = id();
				}
			}

			State = 5755; Match(LR_BRACKET);
			State = 5766;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 5758;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case ABSENT:
					case AES:
					case ALLOW_CONNECTIONS:
					case ALLOW_MULTIPLE_EVENT_LOSS:
					case ALLOW_SINGLE_EVENT_LOSS:
					case ANONYMOUS:
					case APPEND:
					case APPLICATION:
					case ASYMMETRIC:
					case ASYNCHRONOUS_COMMIT:
					case AUTHENTICATION:
					case AUTOMATED_BACKUP_PREFERENCE:
					case AUTOMATIC:
					case AVAILABILITY_MODE:
					case BACKSLASH:
					case BEFORE:
					case BLOCK:
					case BLOCKSIZE:
					case BLOCKING_HIERARCHY:
					case BUFFER:
					case BUFFERCOUNT:
					case CACHE:
					case CALLED:
					case CERTIFICATE:
					case CHANGETABLE:
					case CHANGES:
					case CHECK_POLICY:
					case CHECK_EXPIRATION:
					case CLASSIFIER_FUNCTION:
					case CLUSTER:
					case COMPRESSION:
					case CONNECTION_OPTIONS:
					case CONFIGURATION:
					case CONTAINMENT:
					case CONTEXT:
					case CONTINUE_AFTER_ERROR:
					case CONTRACT:
					case CONTRACT_NAME:
					case CONVERSATION:
					case COPY_ONLY:
					case CURRENT_TIMESTAMP:
					case CURRENT_USER:
					case CYCLE:
					case DATA_COMPRESSION:
					case DATA_SOURCE:
					case DATABASE_MIRRORING:
					case DEFAULT_DATABASE:
					case DEFAULT_SCHEMA:
					case DIAGNOSTICS:
					case DIFFERENTIAL:
					case DISK:
					case DOUBLE_BACK_SLASH:
					case DOUBLE_FORWARD_SLASH:
					case DTC_SUPPORT:
					case DUMP:
					case ENABLED:
					case ENDPOINT:
					case ERROR:
					case EVENT:
					case EVENTDATA:
					case EVENT_RETENTION_MODE:
					case EXECUTABLE_FILE:
					case EXPIREDATE:
					case EXTENSION:
					case EXTERNAL_ACCESS:
					case FAILOVER:
					case FAILURECONDITIONLEVEL:
					case FAN_IN:
					case FILENAME:
					case FILLFACTOR:
					case FILE_SNAPSHOT:
					case FORCESEEK:
					case FORCE_SERVICE_ALLOW_DATA_LOSS:
					case GET:
					case GOVERNOR:
					case HASHED:
					case HEALTHCHECKTIMEOUT:
					case IDENTITYCOL:
					case IIF:
					case INCLUDE:
					case INCREMENT:
					case INFINITE:
					case INIT:
					case INSTEAD:
					case IPV4_ADDR:
					case IPV6_ADDR:
					case ISNULL:
					case KERBEROS:
					case KEY:
					case KEY_PATH:
					case KEY_STORE_PROVIDER_NAME:
					case LANGUAGE:
					case LIBRARY:
					case LIFETIME:
					case LINUX:
					case LISTENER_IP:
					case LISTENER_PORT:
					case LOAD:
					case LOCAL_SERVICE_NAME:
					case LOG:
					case MATCHED:
					case MASTER:
					case MAX_MEMORY:
					case MAXTRANSFER:
					case MAXVALUE:
					case MAX_DISPATCH_LATENCY:
					case MAX_EVENT_SIZE:
					case MAX_SIZE:
					case MAX_OUTSTANDING_IO_PER_VOLUME:
					case MEDIADESCRIPTION:
					case MEDIANAME:
					case MEMBER:
					case MEMORY_PARTITION_MODE:
					case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
					case MESSAGE_FORWARDING:
					case MESSAGE_FORWARD_SIZE:
					case MINVALUE:
					case MIRROR:
					case MUST_CHANGE:
					case NATIVE_COMPILATION:
					case NEGOTIATE:
					case NOFORMAT:
					case NOINIT:
					case NONE:
					case NOREWIND:
					case NOSKIP:
					case NOUNLOAD:
					case NO_CHECKSUM:
					case NO_COMPRESSION:
					case NO_EVENT_LOSS:
					case NOTIFICATION:
					case NTLM:
					case NULL:
					case OFFSETS:
					case OLD_PASSWORD:
					case ON_FAILURE:
					case PAGE:
					case PARAM_NODE:
					case PARTIAL:
					case PASSWORD:
					case PERMISSION_SET:
					case PER_CPU:
					case PER_DB:
					case PER_NODE:
					case PLATFORM:
					case POLICY:
					case PRECISION:
					case PREDICATE:
					case PROCESS:
					case PUBLIC:
					case PUSHDOWN:
					case PYTHON:
					case R:
					case RAW:
					case READ_WRITE_FILEGROUPS:
					case REGENERATE:
					case RELATED_CONVERSATION:
					case RELATED_CONVERSATION_GROUP:
					case REQUIRED:
					case RESET:
					case RESTART:
					case RESULT_SETS:
					case RESUME:
					case RETAINDAYS:
					case RETURN:
					case RETURNS:
					case REWIND:
					case ROLE:
					case ROWCOUNT:
					case ROWGUIDCOL:
					case RSA_512:
					case RSA_1024:
					case RSA_2048:
					case RSA_3072:
					case RSA_4096:
					case SAFETY:
					case SAFE:
					case SCHEDULER:
					case SCHEME:
					case SECURITYAUDIT:
					case SERVER:
					case SERVICE:
					case SERVICE_BROKER:
					case SERVICE_NAME:
					case SESSION:
					case SESSION_USER:
					case SID:
					case SKIP_KEYWORD:
					case SOFTNUMA:
					case SOURCE:
					case SPECIFICATION:
					case SPLIT:
					case SQLDUMPERFLAGS:
					case SQLDUMPERPATH:
					case SQLDUMPERTIMEOUT:
					case STATE:
					case STATS:
					case START:
					case STARTED:
					case STARTUP_STATE:
					case STOP:
					case STOPPED:
					case STOP_ON_ERROR:
					case SUPPORTED:
					case SYSTEM_USER:
					case TAPE:
					case TARGET:
					case TCP:
					case TRACK_CAUSALITY:
					case TRANSFER:
					case UNCHECKED:
					case UNLOCK:
					case UNSAFE:
					case URL:
					case USED:
					case USER:
					case VERBOSELOGGING:
					case VISIBILITY:
					case WINDOWS:
					case WITHIN:
					case WITHOUT:
					case WITNESS:
					case ABSOLUTE:
					case ACCENT_SENSITIVITY:
					case ACTION:
					case ACTIVATION:
					case ACTIVE:
					case ADDRESS:
					case AES_128:
					case AES_192:
					case AES_256:
					case AFFINITY:
					case AFTER:
					case AGGREGATE:
					case ALGORITHM:
					case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
					case ALLOW_SNAPSHOT_ISOLATION:
					case ALLOWED:
					case ANSI_NULL_DEFAULT:
					case ANSI_NULLS:
					case ANSI_PADDING:
					case ANSI_WARNINGS:
					case APPLICATION_LOG:
					case APPLY:
					case ARITHABORT:
					case ASSEMBLY:
					case AUDIT:
					case AUDIT_GUID:
					case AUTO:
					case AUTO_CLEANUP:
					case AUTO_CLOSE:
					case AUTO_CREATE_STATISTICS:
					case AUTO_SHRINK:
					case AUTO_UPDATE_STATISTICS:
					case AUTO_UPDATE_STATISTICS_ASYNC:
					case AVAILABILITY:
					case AVG:
					case BACKUP_PRIORITY:
					case BEGIN_DIALOG:
					case BIGINT:
					case BINARY_BASE64:
					case BINARY_CHECKSUM:
					case BINDING:
					case BLOB_STORAGE:
					case BROKER:
					case BROKER_INSTANCE:
					case BUCKET_COUNT:
					case BULK_LOGGED:
					case CALLER:
					case CAP_CPU_PERCENT:
					case CAST:
					case CATALOG:
					case CATCH:
					case CHANGE_RETENTION:
					case CHANGE_TRACKING:
					case CHECKSUM:
					case CHECKSUM_AGG:
					case CLEANUP:
					case COLLECTION:
					case COLUMN_MASTER_KEY:
					case COMMITTED:
					case COMPATIBILITY_LEVEL:
					case CONCAT:
					case CONCAT_NULL_YIELDS_NULL:
					case CONTENT:
					case CONTROL:
					case COOKIE:
					case COUNT:
					case COUNT_BIG:
					case COUNTER:
					case CPU:
					case CREATE_NEW:
					case CREATION_DISPOSITION:
					case CREDENTIAL:
					case CRYPTOGRAPHIC:
					case CURSOR_CLOSE_ON_COMMIT:
					case CURSOR_DEFAULT:
					case DATA:
					case DATE_CORRELATION_OPTIMIZATION:
					case DATEADD:
					case DATEDIFF:
					case DATEFIRST:
					case DATEFORMAT:
					case DATENAME:
					case DATEPART:
					case DAYS:
					case DB_CHAINING:
					case DB_FAILOVER:
					case DECRYPTION:
					case DEFAULT_DOUBLE_QUOTE:
					case DEFAULT_FULLTEXT_LANGUAGE:
					case DEFAULT_LANGUAGE:
					case DELAY:
					case DELAYED_DURABILITY:
					case DELETED:
					case DENSE_RANK:
					case DEPENDENTS:
					case DES:
					case DESCRIPTION:
					case DESX:
					case DHCP:
					case DIALOG:
					case DIRECTORY_NAME:
					case DISABLE:
					case DISABLE_BROKER:
					case DISABLED:
					case DISK_DRIVE:
					case DOCUMENT:
					case DYNAMIC:
					case ELEMENTS:
					case EMERGENCY:
					case EMPTY:
					case ENABLE:
					case ENABLE_BROKER:
					case ENCRYPTED_VALUE:
					case ENCRYPTION:
					case ENDPOINT_URL:
					case ERROR_BROKER_CONVERSATIONS:
					case EXCLUSIVE:
					case EXECUTABLE:
					case EXIST:
					case EXPAND:
					case EXPIRY_DATE:
					case EXPLICIT:
					case FAIL_OPERATION:
					case FAILOVER_MODE:
					case FAILURE:
					case FAILURE_CONDITION_LEVEL:
					case FAST:
					case FAST_FORWARD:
					case FILEGROUP:
					case FILEGROWTH:
					case FILEPATH:
					case FILESTREAM:
					case FILTER:
					case FIRST:
					case FIRST_VALUE:
					case FOLLOWING:
					case FORCE:
					case FORCE_FAILOVER_ALLOW_DATA_LOSS:
					case FORCED:
					case FORMAT:
					case FORWARD_ONLY:
					case FULLSCAN:
					case FULLTEXT:
					case GB:
					case GETDATE:
					case GETUTCDATE:
					case GLOBAL:
					case GO:
					case GROUP_MAX_REQUESTS:
					case GROUPING:
					case GROUPING_ID:
					case HADOOP:
					case HADR:
					case HASH:
					case HEALTH_CHECK_TIMEOUT:
					case HIGH:
					case HONOR_BROKER_PRIORITY:
					case HOURS:
					case IDENTITY_VALUE:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMMEDIATE:
					case IMPERSONATE:
					case IMPORTANCE:
					case INCLUDE_NULL_VALUES:
					case INCREMENTAL:
					case INITIATOR:
					case INPUT:
					case INSENSITIVE:
					case INSERTED:
					case INT:
					case IP:
					case ISOLATION:
					case JOB:
					case JSON:
					case KB:
					case KEEP:
					case KEEPFIXED:
					case KEY_SOURCE:
					case KEYS:
					case KEYSET:
					case LAG:
					case LAST:
					case LAST_VALUE:
					case LEAD:
					case LEVEL:
					case LIST:
					case LISTENER:
					case LISTENER_URL:
					case LOB_COMPACTION:
					case LOCAL:
					case LOCATION:
					case LOCK:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case LOW:
					case MANUAL:
					case MARK:
					case MATERIALIZED:
					case MAX:
					case MAX_CPU_PERCENT:
					case MAX_DOP:
					case MAX_FILES:
					case MAX_IOPS_PER_VOLUME:
					case MAX_MEMORY_PERCENT:
					case MAX_PROCESSES:
					case MAX_QUEUE_READERS:
					case MAX_ROLLOVER_FILES:
					case MAXDOP:
					case MAXRECURSION:
					case MAXSIZE:
					case MB:
					case MEDIUM:
					case MEMORY_OPTIMIZED_DATA:
					case MESSAGE:
					case MIN:
					case MIN_ACTIVE_ROWVERSION:
					case MIN_CPU_PERCENT:
					case MIN_IOPS_PER_VOLUME:
					case MIN_MEMORY_PERCENT:
					case MINUTES:
					case MIRROR_ADDRESS:
					case MIXED_PAGE_ALLOCATION:
					case MODE:
					case MODIFY:
					case MOVE:
					case MULTI_USER:
					case NAME:
					case NESTED_TRIGGERS:
					case NEW_ACCOUNT:
					case NEW_BROKER:
					case NEW_PASSWORD:
					case NEXT:
					case NO:
					case NO_TRUNCATE:
					case NO_WAIT:
					case NOCOUNT:
					case NODES:
					case NOEXPAND:
					case NON_TRANSACTED_ACCESS:
					case NORECOMPUTE:
					case NORECOVERY:
					case NOWAIT:
					case NTILE:
					case NUMANODE:
					case NUMBER:
					case NUMERIC_ROUNDABORT:
					case OBJECT:
					case OFFLINE:
					case OFFSET:
					case OLD_ACCOUNT:
					case ONLINE:
					case ONLY:
					case OPEN_EXISTING:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OVERRIDE:
					case OWNER:
					case PAGE_VERIFY:
					case PARAMETERIZATION:
					case PARTITION:
					case PARTITIONS:
					case PARTNER:
					case PATH:
					case POISON_MESSAGE_HANDLING:
					case POOL:
					case PORT:
					case PRECEDING:
					case PRIMARY_ROLE:
					case PRIOR:
					case PRIORITY:
					case PRIORITY_LEVEL:
					case PRIVATE:
					case PRIVATE_KEY:
					case PRIVILEGES:
					case PROCEDURE_NAME:
					case PROPERTY:
					case PROVIDER:
					case PROVIDER_KEY_NAME:
					case QUERY:
					case QUEUE:
					case QUEUE_DELAY:
					case QUOTED_IDENTIFIER:
					case RANGE:
					case RANK:
					case RC2:
					case RC4:
					case RC4_128:
					case READ_COMMITTED_SNAPSHOT:
					case READ_ONLY:
					case READ_ONLY_ROUTING_LIST:
					case READ_WRITE:
					case READONLY:
					case REBUILD:
					case RECEIVE:
					case RECOMPILE:
					case RECOVERY:
					case RECURSIVE_TRIGGERS:
					case RELATIVE:
					case REMOTE:
					case REMOTE_SERVICE_NAME:
					case REMOVE:
					case REORGANIZE:
					case REPEATABLE:
					case REPLICA:
					case REQUEST_MAX_CPU_TIME_SEC:
					case REQUEST_MAX_MEMORY_GRANT_PERCENT:
					case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
					case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					case RESERVE_DISK_SPACE:
					case RESOURCE:
					case RESOURCE_MANAGER_LOCATION:
					case RESTRICTED_USER:
					case RETENTION:
					case ROBUST:
					case ROOT:
					case ROUTE:
					case ROW:
					case ROW_NUMBER:
					case ROWGUID:
					case ROWS:
					case SAMPLE:
					case SCHEMABINDING:
					case SCOPED:
					case SCROLL:
					case SCROLL_LOCKS:
					case SEARCH:
					case SECONDARY:
					case SECONDARY_ONLY:
					case SECONDARY_ROLE:
					case SECONDS:
					case SECRET:
					case SECURITY:
					case SECURITY_LOG:
					case SEEDING_MODE:
					case SELF:
					case SEMI_SENSITIVE:
					case SEND:
					case SENT:
					case SEQUENCE:
					case SERIALIZABLE:
					case SESSION_TIMEOUT:
					case SETERROR:
					case SHARE:
					case SHOWPLAN:
					case SIGNATURE:
					case SIMPLE:
					case SINGLE_USER:
					case SIZE:
					case SMALLINT:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STANDBY:
					case START_DATE:
					case STATIC:
					case STATS_STREAM:
					case STATUS:
					case STATUSONLY:
					case STDEV:
					case STDEVP:
					case STOPLIST:
					case STRING_AGG:
					case STUFF:
					case SUBJECT:
					case SUBSCRIPTION:
					case SUM:
					case SUSPEND:
					case SYMMETRIC:
					case SYNCHRONOUS_COMMIT:
					case SYNONYM:
					case SYSTEM:
					case TAKE:
					case TARGET_RECOVERY_TIME:
					case TB:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TIMEOUT:
					case TIMER:
					case TINYINT:
					case TORN_PAGE_DETECTION:
					case TRANSFORM_NOISE_WORDS:
					case TRIPLE_DES:
					case TRIPLE_DES_3KEY:
					case TRUSTWORTHY:
					case TRY:
					case TSQL:
					case TWO_DIGIT_YEAR_CUTOFF:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNDEFINED:
					case UNKNOWN:
					case UNLIMITED:
					case UOW:
					case USING:
					case VALID_XML:
					case VALIDATION:
					case VALUE:
					case VAR:
					case VARP:
					case VIEW_METADATA:
					case VIEWS:
					case WAIT:
					case WELL_FORMED_XML:
					case WITHOUT_ARRAY_WRAPPER:
					case WORK:
					case WORKLOAD:
					case XML:
					case XMLDATA:
					case XMLNAMESPACES:
					case XMLSCHEMA:
					case XSINIL:
					case DOLLAR_ACTION:
					case SPACE:
					case COMMENT:
					case LINE_COMMENT:
					case DOUBLE_QUOTE_ID:
					case SINGLE_QUOTE:
					case SQUARE_BRACKET_ID:
					case LOCAL_ID:
					case DECIMAL:
					case ID:
					case QUOTED_URL:
					case QUOTED_HOST_AND_PORT:
					case STRING:
					case BINARY:
					case FLOAT:
					case REAL:
					case EQUAL:
					case GREATER:
					case LESS:
					case EXCLAMATION:
					case PLUS_ASSIGN:
					case MINUS_ASSIGN:
					case MULT_ASSIGN:
					case DIV_ASSIGN:
					case MOD_ASSIGN:
					case AND_ASSIGN:
					case XOR_ASSIGN:
					case OR_ASSIGN:
					case DOUBLE_BAR:
					case DOT:
					case UNDERLINE:
					case AT:
					case SHARP:
					case DOLLAR:
					case LR_BRACKET:
					case RR_BRACKET:
					case COMMA:
					case SEMI:
					case COLON:
					case STAR:
					case DIVIDE:
					case MODULE:
					case PLUS:
					case MINUS:
					case BIT_NOT:
					case BIT_OR:
					case BIT_AND:
					case BIT_XOR:
					case MDY:
					case DMY:
					case YMD:
					case YDM:
					case MYD:
					case DYM:
					case IPV4_OCTECT:
						{
						State = 5756; _localctx.message_type_name = id();
						}
						break;
					case DEFAULT:
						{
						State = 5757; Match(DEFAULT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 5760; Match(SENT);
					State = 5761; Match(BY);
					State = 5762;
					_la = _input.La(1);
					if ( !(_la==ANY || _la==TARGET || _la==INITIATOR) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 5764;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,698,_ctx) ) {
					case 1:
						{
						State = 5763; Match(COMMA);
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5768;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,699,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 5770; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conversation_statementContext : ParserRuleContext {
		public Begin_conversation_timerContext begin_conversation_timer() {
			return GetRuleContext<Begin_conversation_timerContext>(0);
		}
		public Begin_conversation_dialogContext begin_conversation_dialog() {
			return GetRuleContext<Begin_conversation_dialogContext>(0);
		}
		public End_conversationContext end_conversation() {
			return GetRuleContext<End_conversationContext>(0);
		}
		public Get_conversationContext get_conversation() {
			return GetRuleContext<Get_conversationContext>(0);
		}
		public Send_conversationContext send_conversation() {
			return GetRuleContext<Send_conversationContext>(0);
		}
		public Conversation_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversation_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterConversation_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitConversation_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConversation_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conversation_statementContext conversation_statement() {
		Conversation_statementContext _localctx = new Conversation_statementContext(_ctx, State);
		EnterRule(_localctx, 428, RULE_conversation_statement);
		try {
			State = 5777;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,700,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5772; begin_conversation_timer();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5773; begin_conversation_dialog();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5774; end_conversation();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5775; get_conversation();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5776; send_conversation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Message_statementContext : ParserRuleContext {
		public IdContext message_type_name;
		public IdContext owner_name;
		public IdContext schema_collection_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode MESSAGE() { return GetToken(TSqlParser.MESSAGE, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode VALIDATION() { return GetToken(TSqlParser.VALIDATION, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode EMPTY() { return GetToken(TSqlParser.EMPTY, 0); }
		public ITerminalNode WELL_FORMED_XML() { return GetToken(TSqlParser.WELL_FORMED_XML, 0); }
		public ITerminalNode VALID_XML() { return GetToken(TSqlParser.VALID_XML, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public Message_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_message_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMessage_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMessage_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessage_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Message_statementContext message_statement() {
		Message_statementContext _localctx = new Message_statementContext(_ctx, State);
		EnterRule(_localctx, 430, RULE_message_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5779; Match(CREATE);
			State = 5780; Match(MESSAGE);
			State = 5781; Match(TYPE);
			State = 5782; _localctx.message_type_name = id();
			State = 5785;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AUTHORIZATION) {
				{
				State = 5783; Match(AUTHORIZATION);
				State = 5784; _localctx.owner_name = id();
				}
			}

			{
			State = 5787; Match(VALIDATION);
			State = 5788; Match(EQUAL);
			State = 5797;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NONE:
				{
				State = 5789; Match(NONE);
				}
				break;
			case EMPTY:
				{
				State = 5790; Match(EMPTY);
				}
				break;
			case WELL_FORMED_XML:
				{
				State = 5791; Match(WELL_FORMED_XML);
				}
				break;
			case VALID_XML:
				{
				State = 5792; Match(VALID_XML);
				State = 5793; Match(WITH);
				State = 5794; Match(SCHEMA);
				State = 5795; Match(COLLECTION);
				State = 5796; _localctx.schema_collection_name = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_statementContext : ParserRuleContext {
		public ITerminalNode MERGE() { return GetToken(TSqlParser.MERGE, 0); }
		public Ddl_objectContext ddl_object() {
			return GetRuleContext<Ddl_objectContext>(0);
		}
		public ITerminalNode USING() { return GetToken(TSqlParser.USING, 0); }
		public Table_sourcesContext table_sources() {
			return GetRuleContext<Table_sourcesContext>(0);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Search_conditionContext[] search_condition() {
			return GetRuleContexts<Search_conditionContext>();
		}
		public Search_conditionContext search_condition(int i) {
			return GetRuleContext<Search_conditionContext>(i);
		}
		public With_expressionContext with_expression() {
			return GetRuleContext<With_expressionContext>(0);
		}
		public ITerminalNode TOP() { return GetToken(TSqlParser.TOP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode INTO() { return GetToken(TSqlParser.INTO, 0); }
		public Insert_with_table_hintsContext insert_with_table_hints() {
			return GetRuleContext<Insert_with_table_hintsContext>(0);
		}
		public As_table_aliasContext as_table_alias() {
			return GetRuleContext<As_table_aliasContext>(0);
		}
		public ITerminalNode[] WHEN() { return GetTokens(TSqlParser.WHEN); }
		public ITerminalNode WHEN(int i) {
			return GetToken(TSqlParser.WHEN, i);
		}
		public ITerminalNode[] MATCHED() { return GetTokens(TSqlParser.MATCHED); }
		public ITerminalNode MATCHED(int i) {
			return GetToken(TSqlParser.MATCHED, i);
		}
		public ITerminalNode[] THEN() { return GetTokens(TSqlParser.THEN); }
		public ITerminalNode THEN(int i) {
			return GetToken(TSqlParser.THEN, i);
		}
		public Merge_matchedContext[] merge_matched() {
			return GetRuleContexts<Merge_matchedContext>();
		}
		public Merge_matchedContext merge_matched(int i) {
			return GetRuleContext<Merge_matchedContext>(i);
		}
		public ITerminalNode[] NOT() { return GetTokens(TSqlParser.NOT); }
		public ITerminalNode NOT(int i) {
			return GetToken(TSqlParser.NOT, i);
		}
		public Merge_not_matchedContext merge_not_matched() {
			return GetRuleContext<Merge_not_matchedContext>(0);
		}
		public ITerminalNode[] BY() { return GetTokens(TSqlParser.BY); }
		public ITerminalNode BY(int i) {
			return GetToken(TSqlParser.BY, i);
		}
		public ITerminalNode[] SOURCE() { return GetTokens(TSqlParser.SOURCE); }
		public ITerminalNode SOURCE(int i) {
			return GetToken(TSqlParser.SOURCE, i);
		}
		public Output_clauseContext output_clause() {
			return GetRuleContext<Output_clauseContext>(0);
		}
		public Option_clauseContext option_clause() {
			return GetRuleContext<Option_clauseContext>(0);
		}
		public ITerminalNode PERCENT() { return GetToken(TSqlParser.PERCENT, 0); }
		public ITerminalNode[] AND() { return GetTokens(TSqlParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(TSqlParser.AND, i);
		}
		public ITerminalNode TARGET() { return GetToken(TSqlParser.TARGET, 0); }
		public Merge_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMerge_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMerge_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMerge_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Merge_statementContext merge_statement() {
		Merge_statementContext _localctx = new Merge_statementContext(_ctx, State);
		EnterRule(_localctx, 432, RULE_merge_statement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5800;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WITH) {
				{
				State = 5799; with_expression();
				}
			}

			State = 5802; Match(MERGE);
			State = 5810;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==TOP) {
				{
				State = 5803; Match(TOP);
				State = 5804; Match(LR_BRACKET);
				State = 5805; expression(0);
				State = 5806; Match(RR_BRACKET);
				State = 5808;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==PERCENT) {
					{
					State = 5807; Match(PERCENT);
					}
				}

				}
			}

			State = 5813;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==INTO) {
				{
				State = 5812; Match(INTO);
				}
			}

			State = 5815; ddl_object();
			State = 5817;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WITH) {
				{
				State = 5816; insert_with_table_hints();
				}
			}

			State = 5820;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,708,_ctx) ) {
			case 1:
				{
				State = 5819; as_table_alias();
				}
				break;
			}
			State = 5822; Match(USING);
			State = 5823; table_sources();
			State = 5824; Match(ON);
			State = 5825; search_condition();
			State = 5836;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,710,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 5826; Match(WHEN);
					State = 5827; Match(MATCHED);
					State = 5830;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==AND) {
						{
						State = 5828; Match(AND);
						State = 5829; search_condition();
						}
					}

					State = 5832; Match(THEN);
					State = 5833; merge_matched();
					}
					} 
				}
				State = 5838;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,710,_ctx);
			}
			State = 5852;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,713,_ctx) ) {
			case 1:
				{
				State = 5839; Match(WHEN);
				State = 5840; Match(NOT);
				State = 5841; Match(MATCHED);
				State = 5844;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==BY) {
					{
					State = 5842; Match(BY);
					State = 5843; Match(TARGET);
					}
				}

				State = 5848;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AND) {
					{
					State = 5846; Match(AND);
					State = 5847; search_condition();
					}
				}

				State = 5850; Match(THEN);
				State = 5851; merge_not_matched();
				}
				break;
			}
			State = 5867;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WHEN) {
				{
				{
				State = 5854; Match(WHEN);
				State = 5855; Match(NOT);
				State = 5856; Match(MATCHED);
				State = 5857; Match(BY);
				State = 5858; Match(SOURCE);
				State = 5861;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AND) {
					{
					State = 5859; Match(AND);
					State = 5860; search_condition();
					}
				}

				State = 5863; Match(THEN);
				State = 5864; merge_matched();
				}
				}
				State = 5869;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 5871;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OUTPUT) {
				{
				State = 5870; output_clause();
				}
			}

			State = 5874;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OPTION) {
				{
				State = 5873; option_clause();
				}
			}

			State = 5876; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_matchedContext : ParserRuleContext {
		public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public Update_elemContext[] update_elem() {
			return GetRuleContexts<Update_elemContext>();
		}
		public Update_elemContext update_elem(int i) {
			return GetRuleContext<Update_elemContext>(i);
		}
		public ITerminalNode DELETE() { return GetToken(TSqlParser.DELETE, 0); }
		public Merge_matchedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_matched; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMerge_matched(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMerge_matched(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMerge_matched(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Merge_matchedContext merge_matched() {
		Merge_matchedContext _localctx = new Merge_matchedContext(_ctx, State);
		EnterRule(_localctx, 434, RULE_merge_matched);
		int _la;
		try {
			State = 5889;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case UPDATE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5878; Match(UPDATE);
				State = 5879; Match(SET);
				State = 5880; update_elem();
				State = 5885;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 5881; Match(COMMA);
					State = 5882; update_elem();
					}
					}
					State = 5887;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			case DELETE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5888; Match(DELETE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_not_matchedContext : ParserRuleContext {
		public ITerminalNode INSERT() { return GetToken(TSqlParser.INSERT, 0); }
		public Table_value_constructorContext table_value_constructor() {
			return GetRuleContext<Table_value_constructorContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode VALUES() { return GetToken(TSqlParser.VALUES, 0); }
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Merge_not_matchedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_not_matched; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMerge_not_matched(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMerge_not_matched(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMerge_not_matched(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Merge_not_matchedContext merge_not_matched() {
		Merge_not_matchedContext _localctx = new Merge_not_matchedContext(_ctx, State);
		EnterRule(_localctx, 436, RULE_merge_not_matched);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5891; Match(INSERT);
			State = 5896;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LR_BRACKET) {
				{
				State = 5892; Match(LR_BRACKET);
				State = 5893; column_name_list();
				State = 5894; Match(RR_BRACKET);
				}
			}

			State = 5901;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case VALUES:
				{
				State = 5898; table_value_constructor();
				}
				break;
			case DEFAULT:
				{
				State = 5899; Match(DEFAULT);
				State = 5900; Match(VALUES);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delete_statementContext : ParserRuleContext {
		public IToken cursor_var;
		public ITerminalNode DELETE() { return GetToken(TSqlParser.DELETE, 0); }
		public Delete_statement_fromContext delete_statement_from() {
			return GetRuleContext<Delete_statement_fromContext>(0);
		}
		public With_expressionContext with_expression() {
			return GetRuleContext<With_expressionContext>(0);
		}
		public ITerminalNode TOP() { return GetToken(TSqlParser.TOP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode[] FROM() { return GetTokens(TSqlParser.FROM); }
		public ITerminalNode FROM(int i) {
			return GetToken(TSqlParser.FROM, i);
		}
		public Insert_with_table_hintsContext insert_with_table_hints() {
			return GetRuleContext<Insert_with_table_hintsContext>(0);
		}
		public Output_clauseContext output_clause() {
			return GetRuleContext<Output_clauseContext>(0);
		}
		public Table_sourcesContext table_sources() {
			return GetRuleContext<Table_sourcesContext>(0);
		}
		public ITerminalNode WHERE() { return GetToken(TSqlParser.WHERE, 0); }
		public For_clauseContext for_clause() {
			return GetRuleContext<For_clauseContext>(0);
		}
		public Option_clauseContext option_clause() {
			return GetRuleContext<Option_clauseContext>(0);
		}
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public ITerminalNode CURRENT() { return GetToken(TSqlParser.CURRENT, 0); }
		public ITerminalNode OF() { return GetToken(TSqlParser.OF, 0); }
		public ITerminalNode PERCENT() { return GetToken(TSqlParser.PERCENT, 0); }
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode GLOBAL() { return GetToken(TSqlParser.GLOBAL, 0); }
		public Delete_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delete_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDelete_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDelete_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelete_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delete_statementContext delete_statement() {
		Delete_statementContext _localctx = new Delete_statementContext(_ctx, State);
		EnterRule(_localctx, 438, RULE_delete_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5904;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WITH) {
				{
				State = 5903; with_expression();
				}
			}

			State = 5906; Match(DELETE);
			State = 5916;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,724,_ctx) ) {
			case 1:
				{
				State = 5907; Match(TOP);
				State = 5908; Match(LR_BRACKET);
				State = 5909; expression(0);
				State = 5910; Match(RR_BRACKET);
				State = 5912;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==PERCENT) {
					{
					State = 5911; Match(PERCENT);
					}
				}

				}
				break;

			case 2:
				{
				State = 5914; Match(TOP);
				State = 5915; Match(DECIMAL);
				}
				break;
			}
			State = 5919;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==FROM) {
				{
				State = 5918; Match(FROM);
				}
			}

			State = 5921; delete_statement_from();
			State = 5923;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,726,_ctx) ) {
			case 1:
				{
				State = 5922; insert_with_table_hints();
				}
				break;
			}
			State = 5926;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,727,_ctx) ) {
			case 1:
				{
				State = 5925; output_clause();
				}
				break;
			}
			State = 5930;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==FROM) {
				{
				State = 5928; Match(FROM);
				State = 5929; table_sources();
				}
			}

			State = 5945;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WHERE) {
				{
				State = 5932; Match(WHERE);
				State = 5943;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BACKSLASH:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CASE:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COALESCE:
				case COMPRESSION:
				case CONNECTION_OPTIONS:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case CONVERT:
				case COPY_ONLY:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DISK:
				case DOUBLE_BACK_SLASH:
				case DOUBLE_FORWARD_SLASH:
				case DTC_SUPPORT:
				case DUMP:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXISTS:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILENAME:
				case FILLFACTOR:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IDENTITY:
				case IDENTITYCOL:
				case IIF:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case IPV4_ADDR:
				case IPV6_ADDR:
				case ISNULL:
				case KERBEROS:
				case KEY:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LEFT:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOAD:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NATIVE_COMPILATION:
				case NEGOTIATE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOT:
				case NOTIFICATION:
				case NTLM:
				case NULL:
				case NULLIF:
				case OFFSETS:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case OVER:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PLATFORM:
				case POLICY:
				case PRECISION:
				case PREDICATE:
				case PROCESS:
				case PUBLIC:
				case PUSHDOWN:
				case PYTHON:
				case R:
				case RAW:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESULT_SETS:
				case RESUME:
				case RETAINDAYS:
				case RETURN:
				case RETURNS:
				case REWIND:
				case RIGHT:
				case ROLE:
				case ROWCOUNT:
				case ROWGUIDCOL:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SECURITYAUDIT:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SESSION_USER:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case SYSTEM_USER:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case USER:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHIN:
				case WITHOUT:
				case WITNESS:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BUCKET_COUNT:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATEFIRST:
				case DATEFORMAT:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADOOP:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNDEFINED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case DOLLAR_ACTION:
				case SPACE:
				case COMMENT:
				case LINE_COMMENT:
				case DOUBLE_QUOTE_ID:
				case SINGLE_QUOTE:
				case SQUARE_BRACKET_ID:
				case LOCAL_ID:
				case DECIMAL:
				case ID:
				case QUOTED_URL:
				case QUOTED_HOST_AND_PORT:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case EQUAL:
				case GREATER:
				case LESS:
				case EXCLAMATION:
				case PLUS_ASSIGN:
				case MINUS_ASSIGN:
				case MULT_ASSIGN:
				case DIV_ASSIGN:
				case MOD_ASSIGN:
				case AND_ASSIGN:
				case XOR_ASSIGN:
				case OR_ASSIGN:
				case DOUBLE_BAR:
				case DOT:
				case UNDERLINE:
				case AT:
				case SHARP:
				case DOLLAR:
				case LR_BRACKET:
				case RR_BRACKET:
				case COMMA:
				case SEMI:
				case COLON:
				case STAR:
				case DIVIDE:
				case MODULE:
				case PLUS:
				case MINUS:
				case BIT_NOT:
				case BIT_OR:
				case BIT_AND:
				case BIT_XOR:
				case MDY:
				case DMY:
				case YMD:
				case YDM:
				case MYD:
				case DYM:
				case IPV4_OCTECT:
					{
					State = 5933; search_condition();
					}
					break;
				case CURRENT:
					{
					State = 5934; Match(CURRENT);
					State = 5935; Match(OF);
					State = 5941;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,730,_ctx) ) {
					case 1:
						{
						State = 5937;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,729,_ctx) ) {
						case 1:
							{
							State = 5936; Match(GLOBAL);
							}
							break;
						}
						State = 5939; cursor_name();
						}
						break;

					case 2:
						{
						State = 5940; _localctx.cursor_var = Match(LOCAL_ID);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			State = 5948;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==FOR) {
				{
				State = 5947; for_clause();
				}
			}

			State = 5951;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OPTION) {
				{
				State = 5950; option_clause();
				}
			}

			State = 5954;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,735,_ctx) ) {
			case 1:
				{
				State = 5953; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delete_statement_fromContext : ParserRuleContext {
		public IToken table_var;
		public Ddl_objectContext ddl_object() {
			return GetRuleContext<Ddl_objectContext>(0);
		}
		public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		public Rowset_function_limitedContext rowset_function_limited() {
			return GetRuleContext<Rowset_function_limitedContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Delete_statement_fromContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delete_statement_from; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDelete_statement_from(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDelete_statement_from(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelete_statement_from(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delete_statement_fromContext delete_statement_from() {
		Delete_statement_fromContext _localctx = new Delete_statement_fromContext(_ctx, State);
		EnterRule(_localctx, 440, RULE_delete_statement_from);
		try {
			State = 5960;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,736,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5956; ddl_object();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5957; table_alias();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5958; rowset_function_limited();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5959; _localctx.table_var = Match(LOCAL_ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_statementContext : ParserRuleContext {
		public ITerminalNode INSERT() { return GetToken(TSqlParser.INSERT, 0); }
		public Insert_statement_valueContext insert_statement_value() {
			return GetRuleContext<Insert_statement_valueContext>(0);
		}
		public Ddl_objectContext ddl_object() {
			return GetRuleContext<Ddl_objectContext>(0);
		}
		public Rowset_function_limitedContext rowset_function_limited() {
			return GetRuleContext<Rowset_function_limitedContext>(0);
		}
		public With_expressionContext with_expression() {
			return GetRuleContext<With_expressionContext>(0);
		}
		public ITerminalNode TOP() { return GetToken(TSqlParser.TOP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode INTO() { return GetToken(TSqlParser.INTO, 0); }
		public Insert_with_table_hintsContext insert_with_table_hints() {
			return GetRuleContext<Insert_with_table_hintsContext>(0);
		}
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Output_clauseContext output_clause() {
			return GetRuleContext<Output_clauseContext>(0);
		}
		public For_clauseContext for_clause() {
			return GetRuleContext<For_clauseContext>(0);
		}
		public Option_clauseContext option_clause() {
			return GetRuleContext<Option_clauseContext>(0);
		}
		public ITerminalNode PERCENT() { return GetToken(TSqlParser.PERCENT, 0); }
		public Insert_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterInsert_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitInsert_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsert_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Insert_statementContext insert_statement() {
		Insert_statementContext _localctx = new Insert_statementContext(_ctx, State);
		EnterRule(_localctx, 442, RULE_insert_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5963;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WITH) {
				{
				State = 5962; with_expression();
				}
			}

			State = 5965; Match(INSERT);
			State = 5973;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==TOP) {
				{
				State = 5966; Match(TOP);
				State = 5967; Match(LR_BRACKET);
				State = 5968; expression(0);
				State = 5969; Match(RR_BRACKET);
				State = 5971;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==PERCENT) {
					{
					State = 5970; Match(PERCENT);
					}
				}

				}
			}

			State = 5976;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==INTO) {
				{
				State = 5975; Match(INTO);
				}
			}

			State = 5980;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BACKSLASH:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONNECTION_OPTIONS:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DISK:
			case DOUBLE_BACK_SLASH:
			case DOUBLE_FORWARD_SLASH:
			case DTC_SUPPORT:
			case DUMP:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILENAME:
			case FILLFACTOR:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IDENTITYCOL:
			case IIF:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case IPV4_ADDR:
			case IPV6_ADDR:
			case ISNULL:
			case KERBEROS:
			case KEY:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOAD:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NATIVE_COMPILATION:
			case NEGOTIATE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case NULL:
			case OFFSETS:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PLATFORM:
			case POLICY:
			case PRECISION:
			case PREDICATE:
			case PROCESS:
			case PUBLIC:
			case PUSHDOWN:
			case PYTHON:
			case R:
			case RAW:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESULT_SETS:
			case RESUME:
			case RETAINDAYS:
			case RETURN:
			case RETURNS:
			case REWIND:
			case ROLE:
			case ROWCOUNT:
			case ROWGUIDCOL:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SECURITYAUDIT:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SESSION_USER:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case SYSTEM_USER:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case USER:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHIN:
			case WITHOUT:
			case WITNESS:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BUCKET_COUNT:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATEFIRST:
			case DATEFORMAT:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADOOP:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNDEFINED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case DOLLAR_ACTION:
			case SPACE:
			case COMMENT:
			case LINE_COMMENT:
			case DOUBLE_QUOTE_ID:
			case SINGLE_QUOTE:
			case SQUARE_BRACKET_ID:
			case LOCAL_ID:
			case DECIMAL:
			case ID:
			case QUOTED_URL:
			case QUOTED_HOST_AND_PORT:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case EQUAL:
			case GREATER:
			case LESS:
			case EXCLAMATION:
			case PLUS_ASSIGN:
			case MINUS_ASSIGN:
			case MULT_ASSIGN:
			case DIV_ASSIGN:
			case MOD_ASSIGN:
			case AND_ASSIGN:
			case XOR_ASSIGN:
			case OR_ASSIGN:
			case DOUBLE_BAR:
			case DOT:
			case UNDERLINE:
			case AT:
			case SHARP:
			case DOLLAR:
			case LR_BRACKET:
			case RR_BRACKET:
			case COMMA:
			case SEMI:
			case COLON:
			case STAR:
			case DIVIDE:
			case MODULE:
			case PLUS:
			case MINUS:
			case BIT_NOT:
			case BIT_OR:
			case BIT_AND:
			case BIT_XOR:
			case MDY:
			case DMY:
			case YMD:
			case YDM:
			case MYD:
			case DYM:
			case IPV4_OCTECT:
				{
				State = 5978; ddl_object();
				}
				break;
			case OPENDATASOURCE:
			case OPENQUERY:
				{
				State = 5979; rowset_function_limited();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 5983;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,742,_ctx) ) {
			case 1:
				{
				State = 5982; insert_with_table_hints();
				}
				break;
			}
			State = 5989;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,743,_ctx) ) {
			case 1:
				{
				State = 5985; Match(LR_BRACKET);
				State = 5986; column_name_list();
				State = 5987; Match(RR_BRACKET);
				}
				break;
			}
			State = 5992;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OUTPUT) {
				{
				State = 5991; output_clause();
				}
			}

			State = 5994; insert_statement_value();
			State = 5996;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==FOR) {
				{
				State = 5995; for_clause();
				}
			}

			State = 5999;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OPTION) {
				{
				State = 5998; option_clause();
				}
			}

			State = 6002;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,747,_ctx) ) {
			case 1:
				{
				State = 6001; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_statement_valueContext : ParserRuleContext {
		public Table_value_constructorContext table_value_constructor() {
			return GetRuleContext<Table_value_constructorContext>(0);
		}
		public Derived_tableContext derived_table() {
			return GetRuleContext<Derived_tableContext>(0);
		}
		public Execute_statementContext execute_statement() {
			return GetRuleContext<Execute_statementContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode VALUES() { return GetToken(TSqlParser.VALUES, 0); }
		public Insert_statement_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_statement_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterInsert_statement_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitInsert_statement_value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsert_statement_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Insert_statement_valueContext insert_statement_value() {
		Insert_statement_valueContext _localctx = new Insert_statement_valueContext(_ctx, State);
		EnterRule(_localctx, 444, RULE_insert_statement_value);
		try {
			State = 6009;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,748,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6004; table_value_constructor();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6005; derived_table();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6006; execute_statement();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6007; Match(DEFAULT);
				State = 6008; Match(VALUES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Receive_statementContext : ParserRuleContext {
		public IdContext table_variable;
		public Search_conditionContext where;
		public ITerminalNode RECEIVE() { return GetToken(TSqlParser.RECEIVE, 0); }
		public Select_listContext select_list() {
			return GetRuleContext<Select_listContext>(0);
		}
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public Schema_object_nameContext schema_object_name() {
			return GetRuleContext<Schema_object_nameContext>(0);
		}
		public Top_clauseContext top_clause() {
			return GetRuleContext<Top_clauseContext>(0);
		}
		public ITerminalNode INTO() { return GetToken(TSqlParser.INTO, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode DISTINCT() { return GetToken(TSqlParser.DISTINCT, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode WHERE() { return GetToken(TSqlParser.WHERE, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public Receive_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_receive_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterReceive_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitReceive_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReceive_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Receive_statementContext receive_statement() {
		Receive_statementContext _localctx = new Receive_statementContext(_ctx, State);
		EnterRule(_localctx, 446, RULE_receive_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6011; Match(RECEIVE);
			State = 6013;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				State = 6012;
				_la = _input.La(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 6016;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==TOP) {
				{
				State = 6015; top_clause();
				}
			}

			State = 6018; select_list();
			State = 6019; Match(FROM);
			State = 6020; schema_object_name();
			State = 6026;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==INTO) {
				{
				State = 6021; Match(INTO);
				State = 6022; _localctx.table_variable = id();
				{
				State = 6023; Match(WHERE);
				State = 6024; _localctx.where = search_condition();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_statementContext : ParserRuleContext {
		public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		public With_expressionContext with_expression() {
			return GetRuleContext<With_expressionContext>(0);
		}
		public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public For_clauseContext for_clause() {
			return GetRuleContext<For_clauseContext>(0);
		}
		public Option_clauseContext option_clause() {
			return GetRuleContext<Option_clauseContext>(0);
		}
		public Select_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSelect_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSelect_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_statementContext select_statement() {
		Select_statementContext _localctx = new Select_statementContext(_ctx, State);
		EnterRule(_localctx, 448, RULE_select_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6029;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WITH) {
				{
				State = 6028; with_expression();
				}
			}

			State = 6031; query_expression();
			State = 6033;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,753,_ctx) ) {
			case 1:
				{
				State = 6032; order_by_clause();
				}
				break;
			}
			State = 6036;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,754,_ctx) ) {
			case 1:
				{
				State = 6035; for_clause();
				}
				break;
			}
			State = 6039;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,755,_ctx) ) {
			case 1:
				{
				State = 6038; option_clause();
				}
				break;
			}
			State = 6042;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,756,_ctx) ) {
			case 1:
				{
				State = 6041; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeContext : ParserRuleContext {
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public TimeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_time; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTime(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTime(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTime(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeContext time() {
		TimeContext _localctx = new TimeContext(_ctx, State);
		EnterRule(_localctx, 450, RULE_time);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6046;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LOCAL_ID:
				{
				State = 6044; Match(LOCAL_ID);
				}
				break;
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				{
				State = 6045; constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_statementContext : ParserRuleContext {
		public IToken cursor_var;
		public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public Update_elemContext[] update_elem() {
			return GetRuleContexts<Update_elemContext>();
		}
		public Update_elemContext update_elem(int i) {
			return GetRuleContext<Update_elemContext>(i);
		}
		public Ddl_objectContext ddl_object() {
			return GetRuleContext<Ddl_objectContext>(0);
		}
		public Rowset_function_limitedContext rowset_function_limited() {
			return GetRuleContext<Rowset_function_limitedContext>(0);
		}
		public With_expressionContext with_expression() {
			return GetRuleContext<With_expressionContext>(0);
		}
		public ITerminalNode TOP() { return GetToken(TSqlParser.TOP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public With_table_hintsContext with_table_hints() {
			return GetRuleContext<With_table_hintsContext>(0);
		}
		public Output_clauseContext output_clause() {
			return GetRuleContext<Output_clauseContext>(0);
		}
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public Table_sourcesContext table_sources() {
			return GetRuleContext<Table_sourcesContext>(0);
		}
		public ITerminalNode WHERE() { return GetToken(TSqlParser.WHERE, 0); }
		public For_clauseContext for_clause() {
			return GetRuleContext<For_clauseContext>(0);
		}
		public Option_clauseContext option_clause() {
			return GetRuleContext<Option_clauseContext>(0);
		}
		public Search_condition_listContext search_condition_list() {
			return GetRuleContext<Search_condition_listContext>(0);
		}
		public ITerminalNode CURRENT() { return GetToken(TSqlParser.CURRENT, 0); }
		public ITerminalNode OF() { return GetToken(TSqlParser.OF, 0); }
		public ITerminalNode PERCENT() { return GetToken(TSqlParser.PERCENT, 0); }
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode GLOBAL() { return GetToken(TSqlParser.GLOBAL, 0); }
		public Update_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUpdate_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUpdate_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Update_statementContext update_statement() {
		Update_statementContext _localctx = new Update_statementContext(_ctx, State);
		EnterRule(_localctx, 452, RULE_update_statement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6049;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WITH) {
				{
				State = 6048; with_expression();
				}
			}

			State = 6051; Match(UPDATE);
			State = 6059;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==TOP) {
				{
				State = 6052; Match(TOP);
				State = 6053; Match(LR_BRACKET);
				State = 6054; expression(0);
				State = 6055; Match(RR_BRACKET);
				State = 6057;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==PERCENT) {
					{
					State = 6056; Match(PERCENT);
					}
				}

				}
			}

			State = 6063;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BACKSLASH:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONNECTION_OPTIONS:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DISK:
			case DOUBLE_BACK_SLASH:
			case DOUBLE_FORWARD_SLASH:
			case DTC_SUPPORT:
			case DUMP:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILENAME:
			case FILLFACTOR:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IDENTITYCOL:
			case IIF:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case IPV4_ADDR:
			case IPV6_ADDR:
			case ISNULL:
			case KERBEROS:
			case KEY:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOAD:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NATIVE_COMPILATION:
			case NEGOTIATE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case NULL:
			case OFFSETS:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PLATFORM:
			case POLICY:
			case PRECISION:
			case PREDICATE:
			case PROCESS:
			case PUBLIC:
			case PUSHDOWN:
			case PYTHON:
			case R:
			case RAW:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESULT_SETS:
			case RESUME:
			case RETAINDAYS:
			case RETURN:
			case RETURNS:
			case REWIND:
			case ROLE:
			case ROWCOUNT:
			case ROWGUIDCOL:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SECURITYAUDIT:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SESSION_USER:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case SYSTEM_USER:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case USER:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHIN:
			case WITHOUT:
			case WITNESS:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BUCKET_COUNT:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATEFIRST:
			case DATEFORMAT:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADOOP:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNDEFINED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case DOLLAR_ACTION:
			case SPACE:
			case COMMENT:
			case LINE_COMMENT:
			case DOUBLE_QUOTE_ID:
			case SINGLE_QUOTE:
			case SQUARE_BRACKET_ID:
			case LOCAL_ID:
			case DECIMAL:
			case ID:
			case QUOTED_URL:
			case QUOTED_HOST_AND_PORT:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case EQUAL:
			case GREATER:
			case LESS:
			case EXCLAMATION:
			case PLUS_ASSIGN:
			case MINUS_ASSIGN:
			case MULT_ASSIGN:
			case DIV_ASSIGN:
			case MOD_ASSIGN:
			case AND_ASSIGN:
			case XOR_ASSIGN:
			case OR_ASSIGN:
			case DOUBLE_BAR:
			case DOT:
			case UNDERLINE:
			case AT:
			case SHARP:
			case DOLLAR:
			case LR_BRACKET:
			case RR_BRACKET:
			case COMMA:
			case SEMI:
			case COLON:
			case STAR:
			case DIVIDE:
			case MODULE:
			case PLUS:
			case MINUS:
			case BIT_NOT:
			case BIT_OR:
			case BIT_AND:
			case BIT_XOR:
			case MDY:
			case DMY:
			case YMD:
			case YDM:
			case MYD:
			case DYM:
			case IPV4_OCTECT:
				{
				State = 6061; ddl_object();
				}
				break;
			case OPENDATASOURCE:
			case OPENQUERY:
				{
				State = 6062; rowset_function_limited();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 6066;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WITH || _la==LR_BRACKET) {
				{
				State = 6065; with_table_hints();
				}
			}

			State = 6068; Match(SET);
			State = 6069; update_elem();
			State = 6074;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,763,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 6070; Match(COMMA);
					State = 6071; update_elem();
					}
					} 
				}
				State = 6076;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,763,_ctx);
			}
			State = 6078;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,764,_ctx) ) {
			case 1:
				{
				State = 6077; output_clause();
				}
				break;
			}
			State = 6082;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==FROM) {
				{
				State = 6080; Match(FROM);
				State = 6081; table_sources();
				}
			}

			State = 6097;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WHERE) {
				{
				State = 6084; Match(WHERE);
				State = 6095;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BACKSLASH:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CASE:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COALESCE:
				case COMPRESSION:
				case CONNECTION_OPTIONS:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case CONVERT:
				case COPY_ONLY:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DISK:
				case DOUBLE_BACK_SLASH:
				case DOUBLE_FORWARD_SLASH:
				case DTC_SUPPORT:
				case DUMP:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXISTS:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILENAME:
				case FILLFACTOR:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IDENTITY:
				case IDENTITYCOL:
				case IIF:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case IPV4_ADDR:
				case IPV6_ADDR:
				case ISNULL:
				case KERBEROS:
				case KEY:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LEFT:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOAD:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NATIVE_COMPILATION:
				case NEGOTIATE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOT:
				case NOTIFICATION:
				case NTLM:
				case NULL:
				case NULLIF:
				case OFFSETS:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case OVER:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PLATFORM:
				case POLICY:
				case PRECISION:
				case PREDICATE:
				case PROCESS:
				case PUBLIC:
				case PUSHDOWN:
				case PYTHON:
				case R:
				case RAW:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESULT_SETS:
				case RESUME:
				case RETAINDAYS:
				case RETURN:
				case RETURNS:
				case REWIND:
				case RIGHT:
				case ROLE:
				case ROWCOUNT:
				case ROWGUIDCOL:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SECURITYAUDIT:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SESSION_USER:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case SYSTEM_USER:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case USER:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHIN:
				case WITHOUT:
				case WITNESS:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BUCKET_COUNT:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATEFIRST:
				case DATEFORMAT:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADOOP:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNDEFINED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case DOLLAR_ACTION:
				case SPACE:
				case COMMENT:
				case LINE_COMMENT:
				case DOUBLE_QUOTE_ID:
				case SINGLE_QUOTE:
				case SQUARE_BRACKET_ID:
				case LOCAL_ID:
				case DECIMAL:
				case ID:
				case QUOTED_URL:
				case QUOTED_HOST_AND_PORT:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case EQUAL:
				case GREATER:
				case LESS:
				case EXCLAMATION:
				case PLUS_ASSIGN:
				case MINUS_ASSIGN:
				case MULT_ASSIGN:
				case DIV_ASSIGN:
				case MOD_ASSIGN:
				case AND_ASSIGN:
				case XOR_ASSIGN:
				case OR_ASSIGN:
				case DOUBLE_BAR:
				case DOT:
				case UNDERLINE:
				case AT:
				case SHARP:
				case DOLLAR:
				case LR_BRACKET:
				case RR_BRACKET:
				case COMMA:
				case SEMI:
				case COLON:
				case STAR:
				case DIVIDE:
				case MODULE:
				case PLUS:
				case MINUS:
				case BIT_NOT:
				case BIT_OR:
				case BIT_AND:
				case BIT_XOR:
				case MDY:
				case DMY:
				case YMD:
				case YDM:
				case MYD:
				case DYM:
				case IPV4_OCTECT:
					{
					State = 6085; search_condition_list();
					}
					break;
				case CURRENT:
					{
					State = 6086; Match(CURRENT);
					State = 6087; Match(OF);
					State = 6093;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,767,_ctx) ) {
					case 1:
						{
						State = 6089;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,766,_ctx) ) {
						case 1:
							{
							State = 6088; Match(GLOBAL);
							}
							break;
						}
						State = 6091; cursor_name();
						}
						break;

					case 2:
						{
						State = 6092; _localctx.cursor_var = Match(LOCAL_ID);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			State = 6100;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==FOR) {
				{
				State = 6099; for_clause();
				}
			}

			State = 6103;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OPTION) {
				{
				State = 6102; option_clause();
				}
			}

			State = 6106;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,772,_ctx) ) {
			case 1:
				{
				State = 6105; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Output_clauseContext : ParserRuleContext {
		public Output_with_intoContext output_with_into() {
			return GetRuleContext<Output_with_intoContext>(0);
		}
		public Output_without_intoContext output_without_into() {
			return GetRuleContext<Output_without_intoContext>(0);
		}
		public Output_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOutput_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOutput_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutput_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Output_clauseContext output_clause() {
		Output_clauseContext _localctx = new Output_clauseContext(_ctx, State);
		EnterRule(_localctx, 454, RULE_output_clause);
		try {
			State = 6113;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,773,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6108; output_with_into();
				State = 6109; output_without_into();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6111; output_with_into();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6112; output_without_into();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Output_with_intoContext : ParserRuleContext {
		public ITerminalNode OUTPUT() { return GetToken(TSqlParser.OUTPUT, 0); }
		public Output_dml_list_elemContext[] output_dml_list_elem() {
			return GetRuleContexts<Output_dml_list_elemContext>();
		}
		public Output_dml_list_elemContext output_dml_list_elem(int i) {
			return GetRuleContext<Output_dml_list_elemContext>(i);
		}
		public ITerminalNode INTO() { return GetToken(TSqlParser.INTO, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Schema_object_nameContext schema_object_name() {
			return GetRuleContext<Schema_object_nameContext>(0);
		}
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Output_with_intoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output_with_into; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOutput_with_into(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOutput_with_into(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutput_with_into(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Output_with_intoContext output_with_into() {
		Output_with_intoContext _localctx = new Output_with_intoContext(_ctx, State);
		EnterRule(_localctx, 456, RULE_output_with_into);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6115; Match(OUTPUT);
			State = 6116; output_dml_list_elem();
			State = 6121;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 6117; Match(COMMA);
				State = 6118; output_dml_list_elem();
				}
				}
				State = 6123;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 6124; Match(INTO);
			State = 6127;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,775,_ctx) ) {
			case 1:
				{
				State = 6125; Match(LOCAL_ID);
				}
				break;

			case 2:
				{
				State = 6126; schema_object_name();
				}
				break;
			}
			State = 6133;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,776,_ctx) ) {
			case 1:
				{
				State = 6129; Match(LR_BRACKET);
				State = 6130; column_name_list();
				State = 6131; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Output_without_intoContext : ParserRuleContext {
		public ITerminalNode OUTPUT() { return GetToken(TSqlParser.OUTPUT, 0); }
		public Output_dml_list_elemContext[] output_dml_list_elem() {
			return GetRuleContexts<Output_dml_list_elemContext>();
		}
		public Output_dml_list_elemContext output_dml_list_elem(int i) {
			return GetRuleContext<Output_dml_list_elemContext>(i);
		}
		public Output_without_intoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output_without_into; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOutput_without_into(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOutput_without_into(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutput_without_into(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Output_without_intoContext output_without_into() {
		Output_without_intoContext _localctx = new Output_without_intoContext(_ctx, State);
		EnterRule(_localctx, 458, RULE_output_without_into);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6135; Match(OUTPUT);
			State = 6136; output_dml_list_elem();
			State = 6141;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,777,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 6137; Match(COMMA);
					State = 6138; output_dml_list_elem();
					}
					} 
				}
				State = 6143;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,777,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Output_dml_list_elemContext : ParserRuleContext {
		public Output_column_nameContext output_column_name() {
			return GetRuleContext<Output_column_nameContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public As_column_aliasContext as_column_alias() {
			return GetRuleContext<As_column_aliasContext>(0);
		}
		public Output_dml_list_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output_dml_list_elem; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOutput_dml_list_elem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOutput_dml_list_elem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutput_dml_list_elem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Output_dml_list_elemContext output_dml_list_elem() {
		Output_dml_list_elemContext _localctx = new Output_dml_list_elemContext(_ctx, State);
		EnterRule(_localctx, 460, RULE_output_dml_list_elem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6146;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,778,_ctx) ) {
			case 1:
				{
				State = 6144; output_column_name();
				}
				break;

			case 2:
				{
				State = 6145; expression(0);
				}
				break;
			}
			State = 6149;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,779,_ctx) ) {
			case 1:
				{
				State = 6148; as_column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Output_column_nameContext : ParserRuleContext {
		public ITerminalNode DELETED() { return GetToken(TSqlParser.DELETED, 0); }
		public ITerminalNode INSERTED() { return GetToken(TSqlParser.INSERTED, 0); }
		public Schema_object_nameContext schema_object_name() {
			return GetRuleContext<Schema_object_nameContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode DOLLAR_ACTION() { return GetToken(TSqlParser.DOLLAR_ACTION, 0); }
		public Output_column_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output_column_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOutput_column_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOutput_column_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutput_column_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Output_column_nameContext output_column_name() {
		Output_column_nameContext _localctx = new Output_column_nameContext(_ctx, State);
		EnterRule(_localctx, 462, RULE_output_column_name);
		try {
			State = 6162;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,782,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6154;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,780,_ctx) ) {
				case 1:
					{
					State = 6151; Match(DELETED);
					}
					break;

				case 2:
					{
					State = 6152; Match(INSERTED);
					}
					break;

				case 3:
					{
					State = 6153; schema_object_name();
					}
					break;
				}
				State = 6156; Match(DOT);
				State = 6159;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,781,_ctx) ) {
				case 1:
					{
					State = 6157; Match(STAR);
					}
					break;

				case 2:
					{
					State = 6158; id();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6161; Match(DOLLAR_ACTION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_databaseContext : ParserRuleContext {
		public IdContext collation_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public ITerminalNode CONTAINMENT() { return GetToken(TSqlParser.CONTAINMENT, 0); }
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public Database_file_specContext[] database_file_spec() {
			return GetRuleContexts<Database_file_specContext>();
		}
		public Database_file_specContext database_file_spec(int i) {
			return GetRuleContext<Database_file_specContext>(i);
		}
		public ITerminalNode LOG() { return GetToken(TSqlParser.LOG, 0); }
		public ITerminalNode COLLATE() { return GetToken(TSqlParser.COLLATE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Create_database_optionContext[] create_database_option() {
			return GetRuleContexts<Create_database_optionContext>();
		}
		public Create_database_optionContext create_database_option(int i) {
			return GetRuleContext<Create_database_optionContext>(i);
		}
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode PARTIAL() { return GetToken(TSqlParser.PARTIAL, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode PRIMARY() { return GetToken(TSqlParser.PRIMARY, 0); }
		public Create_databaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_database; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_database(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_database(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_database(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_databaseContext create_database() {
		Create_databaseContext _localctx = new Create_databaseContext(_ctx, State);
		EnterRule(_localctx, 464, RULE_create_database);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6164; Match(CREATE);
			State = 6165; Match(DATABASE);
			{
			State = 6166; database_name();
			}
			State = 6170;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,783,_ctx) ) {
			case 1:
				{
				State = 6167; Match(CONTAINMENT);
				State = 6168; Match(EQUAL);
				State = 6169;
				_la = _input.La(1);
				if ( !(_la==NONE || _la==PARTIAL) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 6184;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ON) {
				{
				State = 6172; Match(ON);
				State = 6174;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==PRIMARY) {
					{
					State = 6173; Match(PRIMARY);
					}
				}

				State = 6176; database_file_spec();
				State = 6181;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,785,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 6177; Match(COMMA);
						State = 6178; database_file_spec();
						}
						} 
					}
					State = 6183;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,785,_ctx);
				}
				}
			}

			State = 6196;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,788,_ctx) ) {
			case 1:
				{
				State = 6186; Match(LOG);
				State = 6187; Match(ON);
				State = 6188; database_file_spec();
				State = 6193;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,787,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 6189; Match(COMMA);
						State = 6190; database_file_spec();
						}
						} 
					}
					State = 6195;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,787,_ctx);
				}
				}
				break;
			}
			State = 6200;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COLLATE) {
				{
				State = 6198; Match(COLLATE);
				State = 6199; _localctx.collation_name = id();
				}
			}

			State = 6211;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,791,_ctx) ) {
			case 1:
				{
				State = 6202; Match(WITH);
				State = 6203; create_database_option();
				State = 6208;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,790,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 6204; Match(COMMA);
						State = 6205; create_database_option();
						}
						} 
					}
					State = 6210;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,790,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_indexContext : ParserRuleContext {
		public Search_conditionContext where;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public Table_name_with_hintContext table_name_with_hint() {
			return GetRuleContext<Table_name_with_hintContext>(0);
		}
		public Column_name_list_with_orderContext column_name_list_with_order() {
			return GetRuleContext<Column_name_list_with_orderContext>(0);
		}
		public ITerminalNode UNIQUE() { return GetToken(TSqlParser.UNIQUE, 0); }
		public ClusteredContext clustered() {
			return GetRuleContext<ClusteredContext>(0);
		}
		public ITerminalNode INCLUDE() { return GetToken(TSqlParser.INCLUDE, 0); }
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public ITerminalNode WHERE() { return GetToken(TSqlParser.WHERE, 0); }
		public Index_optionsContext index_options() {
			return GetRuleContext<Index_optionsContext>(0);
		}
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public Create_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_index; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_index(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_index(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_indexContext create_index() {
		Create_indexContext _localctx = new Create_indexContext(_ctx, State);
		EnterRule(_localctx, 466, RULE_create_index);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6213; Match(CREATE);
			State = 6215;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==UNIQUE) {
				{
				State = 6214; Match(UNIQUE);
				}
			}

			State = 6218;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CLUSTERED || _la==NONCLUSTERED) {
				{
				State = 6217; clustered();
				}
			}

			State = 6220; Match(INDEX);
			State = 6221; id();
			State = 6222; Match(ON);
			State = 6223; table_name_with_hint();
			State = 6224; Match(LR_BRACKET);
			State = 6225; column_name_list_with_order();
			State = 6226; Match(RR_BRACKET);
			State = 6232;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,794,_ctx) ) {
			case 1:
				{
				State = 6227; Match(INCLUDE);
				State = 6228; Match(LR_BRACKET);
				State = 6229; column_name_list();
				State = 6230; Match(RR_BRACKET);
				}
				break;
			}
			State = 6236;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WHERE) {
				{
				State = 6234; Match(WHERE);
				State = 6235; _localctx.where = search_condition();
				}
			}

			State = 6239;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,796,_ctx) ) {
			case 1:
				{
				State = 6238; index_options();
				}
				break;
			}
			State = 6243;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ON) {
				{
				State = 6241; Match(ON);
				State = 6242; id();
				}
			}

			State = 6246;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,798,_ctx) ) {
			case 1:
				{
				State = 6245; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_or_alter_procedureContext : ParserRuleContext {
		public IToken proc;
		public Func_proc_name_schemaContext func_proc_name_schema() {
			return GetRuleContext<Func_proc_name_schemaContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode PROC() { return GetToken(TSqlParser.PROC, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(TSqlParser.PROCEDURE, 0); }
		public Sql_clausesContext sql_clauses() {
			return GetRuleContext<Sql_clausesContext>(0);
		}
		public Atomic_blockContext atomic_block() {
			return GetRuleContext<Atomic_blockContext>(0);
		}
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Procedure_paramContext[] procedure_param() {
			return GetRuleContexts<Procedure_paramContext>();
		}
		public Procedure_paramContext procedure_param(int i) {
			return GetRuleContext<Procedure_paramContext>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Procedure_optionContext[] procedure_option() {
			return GetRuleContexts<Procedure_optionContext>();
		}
		public Procedure_optionContext procedure_option(int i) {
			return GetRuleContext<Procedure_optionContext>(i);
		}
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode REPLICATION() { return GetToken(TSqlParser.REPLICATION, 0); }
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode OR() { return GetToken(TSqlParser.OR, 0); }
		public Create_or_alter_procedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_or_alter_procedure; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_or_alter_procedure(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_or_alter_procedure(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_or_alter_procedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_or_alter_procedureContext create_or_alter_procedure() {
		Create_or_alter_procedureContext _localctx = new Create_or_alter_procedureContext(_ctx, State);
		EnterRule(_localctx, 468, RULE_create_or_alter_procedure);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6254;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case CREATE:
				{
				{
				State = 6248; Match(CREATE);
				State = 6251;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==OR) {
					{
					State = 6249; Match(OR);
					State = 6250; Match(ALTER);
					}
				}

				}
				}
				break;
			case ALTER:
				{
				State = 6253; Match(ALTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 6256;
			_localctx.proc = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==PROC || _la==PROCEDURE) ) {
				_localctx.proc = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 6257; func_proc_name_schema();
			State = 6260;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==SEMI) {
				{
				State = 6258; Match(SEMI);
				State = 6259; Match(DECIMAL);
				}
			}

			State = 6276;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LOCAL_ID || _la==LR_BRACKET) {
				{
				State = 6263;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LR_BRACKET) {
					{
					State = 6262; Match(LR_BRACKET);
					}
				}

				State = 6265; procedure_param();
				State = 6270;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 6266; Match(COMMA);
					State = 6267; procedure_param();
					}
					}
					State = 6272;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 6274;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==RR_BRACKET) {
					{
					State = 6273; Match(RR_BRACKET);
					}
				}

				}
			}

			State = 6287;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WITH) {
				{
				State = 6278; Match(WITH);
				State = 6279; procedure_option();
				State = 6284;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 6280; Match(COMMA);
					State = 6281; procedure_option();
					}
					}
					State = 6286;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 6291;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==FOR) {
				{
				State = 6289; Match(FOR);
				State = 6290; Match(REPLICATION);
				}
			}

			State = 6293; Match(AS);
			State = 6296;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,809,_ctx) ) {
			case 1:
				{
				State = 6294; sql_clauses();
				}
				break;

			case 2:
				{
				State = 6295; atomic_block();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Atomic_blockContext : ParserRuleContext {
		public ITerminalNode BEGIN() { return GetToken(TSqlParser.BEGIN, 0); }
		public ITerminalNode ATOMIC() { return GetToken(TSqlParser.ATOMIC, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Atomic_block_optionContext[] atomic_block_option() {
			return GetRuleContexts<Atomic_block_optionContext>();
		}
		public Atomic_block_optionContext atomic_block_option(int i) {
			return GetRuleContext<Atomic_block_optionContext>(i);
		}
		public Sql_clausesContext sql_clauses() {
			return GetRuleContext<Sql_clausesContext>(0);
		}
		public ITerminalNode END() { return GetToken(TSqlParser.END, 0); }
		public Atomic_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomic_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAtomic_block(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAtomic_block(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomic_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Atomic_blockContext atomic_block() {
		Atomic_blockContext _localctx = new Atomic_blockContext(_ctx, State);
		EnterRule(_localctx, 470, RULE_atomic_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6298; Match(BEGIN);
			State = 6299; Match(ATOMIC);
			State = 6300; Match(WITH);
			State = 6301; Match(LR_BRACKET);
			State = 6302; atomic_block_option();
			State = 6307;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 6303; Match(COMMA);
				State = 6304; atomic_block_option();
				}
				}
				State = 6309;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 6310; Match(RR_BRACKET);
			State = 6311; sql_clauses();
			State = 6312; Match(END);
			State = 6314;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,811,_ctx) ) {
			case 1:
				{
				State = 6313; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Atomic_block_optionContext : ParserRuleContext {
		public IToken language;
		public ITerminalNode TRANSACTION() { return GetToken(TSqlParser.TRANSACTION, 0); }
		public ITerminalNode ISOLATION() { return GetToken(TSqlParser.ISOLATION, 0); }
		public ITerminalNode LEVEL() { return GetToken(TSqlParser.LEVEL, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode READ() { return GetToken(TSqlParser.READ, 0); }
		public ITerminalNode UNCOMMITTED() { return GetToken(TSqlParser.UNCOMMITTED, 0); }
		public ITerminalNode COMMITTED() { return GetToken(TSqlParser.COMMITTED, 0); }
		public ITerminalNode REPEATABLE() { return GetToken(TSqlParser.REPEATABLE, 0); }
		public ITerminalNode SNAPSHOT() { return GetToken(TSqlParser.SNAPSHOT, 0); }
		public ITerminalNode SERIALIZABLE() { return GetToken(TSqlParser.SERIALIZABLE, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode LANGUAGE() { return GetToken(TSqlParser.LANGUAGE, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode DELAYED_DURABILITY() { return GetToken(TSqlParser.DELAYED_DURABILITY, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode DATEFORMAT() { return GetToken(TSqlParser.DATEFORMAT, 0); }
		public ITerminalNode MDY() { return GetToken(TSqlParser.MDY, 0); }
		public ITerminalNode DMY() { return GetToken(TSqlParser.DMY, 0); }
		public ITerminalNode YMD() { return GetToken(TSqlParser.YMD, 0); }
		public ITerminalNode YDM() { return GetToken(TSqlParser.YDM, 0); }
		public ITerminalNode MYD() { return GetToken(TSqlParser.MYD, 0); }
		public ITerminalNode DYM() { return GetToken(TSqlParser.DYM, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode DATEFIRST() { return GetToken(TSqlParser.DATEFIRST, 0); }
		public Atomic_block_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomic_block_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAtomic_block_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAtomic_block_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomic_block_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Atomic_block_optionContext atomic_block_option() {
		Atomic_block_optionContext _localctx = new Atomic_block_optionContext(_ctx, State);
		EnterRule(_localctx, 472, RULE_atomic_block_option);
		int _la;
		try {
			State = 6343;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case TRANSACTION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6316; Match(TRANSACTION);
				State = 6317; Match(ISOLATION);
				State = 6318; Match(LEVEL);
				State = 6319; Match(EQUAL);
				State = 6329;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,812,_ctx) ) {
				case 1:
					{
					State = 6320; Match(READ);
					State = 6321; Match(UNCOMMITTED);
					}
					break;

				case 2:
					{
					State = 6322; Match(READ);
					State = 6323; Match(COMMITTED);
					}
					break;

				case 3:
					{
					State = 6324; Match(REPEATABLE);
					State = 6325; Match(READ);
					}
					break;

				case 4:
					{
					State = 6326; Match(SNAPSHOT);
					}
					break;

				case 5:
					{
					State = 6327; Match(SERIALIZABLE);
					}
					break;

				case 6:
					{
					State = 6328; Match(DECIMAL);
					}
					break;
				}
				}
				break;
			case LANGUAGE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6331; Match(LANGUAGE);
				State = 6332; Match(EQUAL);
				State = 6333; _localctx.language = Match(STRING);
				}
				break;
			case DELAYED_DURABILITY:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6334; Match(DELAYED_DURABILITY);
				State = 6335; Match(EQUAL);
				State = 6336;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			case DATEFORMAT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6337; Match(DATEFORMAT);
				State = 6338; Match(EQUAL);
				State = 6339;
				_la = _input.La(1);
				if ( !(((((_la - 810)) & ~0x3f) == 0 && ((1L << (_la - 810)) & ((1L << (LOCAL_ID - 810)) | (1L << (MDY - 810)) | (1L << (DMY - 810)) | (1L << (YMD - 810)) | (1L << (YDM - 810)) | (1L << (MYD - 810)) | (1L << (DYM - 810)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			case DATEFIRST:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6340; Match(DATEFIRST);
				State = 6341; Match(EQUAL);
				State = 6342; Match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_or_alter_triggerContext : ParserRuleContext {
		public Create_or_alter_dml_triggerContext create_or_alter_dml_trigger() {
			return GetRuleContext<Create_or_alter_dml_triggerContext>(0);
		}
		public Create_or_alter_ddl_triggerContext create_or_alter_ddl_trigger() {
			return GetRuleContext<Create_or_alter_ddl_triggerContext>(0);
		}
		public Create_or_alter_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_or_alter_trigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_or_alter_trigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_or_alter_trigger(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_or_alter_trigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_or_alter_triggerContext create_or_alter_trigger() {
		Create_or_alter_triggerContext _localctx = new Create_or_alter_triggerContext(_ctx, State);
		EnterRule(_localctx, 474, RULE_create_or_alter_trigger);
		try {
			State = 6347;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,814,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6345; create_or_alter_dml_trigger();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6346; create_or_alter_ddl_trigger();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_or_alter_dml_triggerContext : ParserRuleContext {
		public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		public Simple_nameContext simple_name() {
			return GetRuleContext<Simple_nameContext>(0);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Schema_object_nameContext schema_object_name() {
			return GetRuleContext<Schema_object_nameContext>(0);
		}
		public Dml_trigger_operationContext[] dml_trigger_operation() {
			return GetRuleContexts<Dml_trigger_operationContext>();
		}
		public Dml_trigger_operationContext dml_trigger_operation(int i) {
			return GetRuleContext<Dml_trigger_operationContext>(i);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Sql_clausesContext sql_clauses() {
			return GetRuleContext<Sql_clausesContext>(0);
		}
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode[] FOR() { return GetTokens(TSqlParser.FOR); }
		public ITerminalNode FOR(int i) {
			return GetToken(TSqlParser.FOR, i);
		}
		public ITerminalNode AFTER() { return GetToken(TSqlParser.AFTER, 0); }
		public ITerminalNode INSTEAD() { return GetToken(TSqlParser.INSTEAD, 0); }
		public ITerminalNode OF() { return GetToken(TSqlParser.OF, 0); }
		public ITerminalNode[] WITH() { return GetTokens(TSqlParser.WITH); }
		public ITerminalNode WITH(int i) {
			return GetToken(TSqlParser.WITH, i);
		}
		public Dml_trigger_optionContext[] dml_trigger_option() {
			return GetRuleContexts<Dml_trigger_optionContext>();
		}
		public Dml_trigger_optionContext dml_trigger_option(int i) {
			return GetRuleContext<Dml_trigger_optionContext>(i);
		}
		public ITerminalNode APPEND() { return GetToken(TSqlParser.APPEND, 0); }
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public ITerminalNode REPLICATION() { return GetToken(TSqlParser.REPLICATION, 0); }
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode OR() { return GetToken(TSqlParser.OR, 0); }
		public Create_or_alter_dml_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_or_alter_dml_trigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_or_alter_dml_trigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_or_alter_dml_trigger(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_or_alter_dml_trigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_or_alter_dml_triggerContext create_or_alter_dml_trigger() {
		Create_or_alter_dml_triggerContext _localctx = new Create_or_alter_dml_triggerContext(_ctx, State);
		EnterRule(_localctx, 476, RULE_create_or_alter_dml_trigger);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6355;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case CREATE:
				{
				{
				State = 6349; Match(CREATE);
				State = 6352;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==OR) {
					{
					State = 6350; Match(OR);
					State = 6351; Match(ALTER);
					}
				}

				}
				}
				break;
			case ALTER:
				{
				State = 6354; Match(ALTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 6357; Match(TRIGGER);
			State = 6358; simple_name();
			State = 6359; Match(ON);
			State = 6360; schema_object_name();
			State = 6370;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WITH) {
				{
				State = 6361; Match(WITH);
				State = 6362; dml_trigger_option();
				State = 6367;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 6363; Match(COMMA);
					State = 6364; dml_trigger_option();
					}
					}
					State = 6369;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 6376;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case FOR:
				{
				State = 6372; Match(FOR);
				}
				break;
			case AFTER:
				{
				State = 6373; Match(AFTER);
				}
				break;
			case INSTEAD:
				{
				State = 6374; Match(INSTEAD);
				State = 6375; Match(OF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 6378; dml_trigger_operation();
			State = 6383;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 6379; Match(COMMA);
				State = 6380; dml_trigger_operation();
				}
				}
				State = 6385;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 6388;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WITH) {
				{
				State = 6386; Match(WITH);
				State = 6387; Match(APPEND);
				}
			}

			State = 6393;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==NOT) {
				{
				State = 6390; Match(NOT);
				State = 6391; Match(FOR);
				State = 6392; Match(REPLICATION);
				}
			}

			State = 6395; Match(AS);
			State = 6396; sql_clauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dml_trigger_optionContext : ParserRuleContext {
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public Execute_clauseContext execute_clause() {
			return GetRuleContext<Execute_clauseContext>(0);
		}
		public Dml_trigger_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dml_trigger_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDml_trigger_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDml_trigger_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDml_trigger_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dml_trigger_optionContext dml_trigger_option() {
		Dml_trigger_optionContext _localctx = new Dml_trigger_optionContext(_ctx, State);
		EnterRule(_localctx, 478, RULE_dml_trigger_option);
		try {
			State = 6400;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ENCRYPTION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6398; Match(ENCRYPTION);
				}
				break;
			case EXECUTE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6399; execute_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dml_trigger_operationContext : ParserRuleContext {
		public ITerminalNode INSERT() { return GetToken(TSqlParser.INSERT, 0); }
		public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		public ITerminalNode DELETE() { return GetToken(TSqlParser.DELETE, 0); }
		public Dml_trigger_operationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dml_trigger_operation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDml_trigger_operation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDml_trigger_operation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDml_trigger_operation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dml_trigger_operationContext dml_trigger_operation() {
		Dml_trigger_operationContext _localctx = new Dml_trigger_operationContext(_ctx, State);
		EnterRule(_localctx, 480, RULE_dml_trigger_operation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6402;
			_la = _input.La(1);
			if ( !(_la==DELETE || _la==INSERT || _la==UPDATE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_or_alter_ddl_triggerContext : ParserRuleContext {
		public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		public Simple_idContext simple_id() {
			return GetRuleContext<Simple_idContext>(0);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Ddl_trigger_operationContext ddl_trigger_operation() {
			return GetRuleContext<Ddl_trigger_operationContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Sql_clausesContext sql_clauses() {
			return GetRuleContext<Sql_clausesContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode AFTER() { return GetToken(TSqlParser.AFTER, 0); }
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Dml_trigger_optionContext[] dml_trigger_option() {
			return GetRuleContexts<Dml_trigger_optionContext>();
		}
		public Dml_trigger_optionContext dml_trigger_option(int i) {
			return GetRuleContext<Dml_trigger_optionContext>(i);
		}
		public Dml_trigger_operationContext[] dml_trigger_operation() {
			return GetRuleContexts<Dml_trigger_operationContext>();
		}
		public Dml_trigger_operationContext dml_trigger_operation(int i) {
			return GetRuleContext<Dml_trigger_operationContext>(i);
		}
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode OR() { return GetToken(TSqlParser.OR, 0); }
		public Create_or_alter_ddl_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_or_alter_ddl_trigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_or_alter_ddl_trigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_or_alter_ddl_trigger(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_or_alter_ddl_trigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_or_alter_ddl_triggerContext create_or_alter_ddl_trigger() {
		Create_or_alter_ddl_triggerContext _localctx = new Create_or_alter_ddl_triggerContext(_ctx, State);
		EnterRule(_localctx, 482, RULE_create_or_alter_ddl_trigger);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6410;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case CREATE:
				{
				{
				State = 6404; Match(CREATE);
				State = 6407;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==OR) {
					{
					State = 6405; Match(OR);
					State = 6406; Match(ALTER);
					}
				}

				}
				}
				break;
			case ALTER:
				{
				State = 6409; Match(ALTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 6412; Match(TRIGGER);
			State = 6413; simple_id();
			State = 6414; Match(ON);
			State = 6418;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ALL:
				{
				State = 6415; Match(ALL);
				State = 6416; Match(SERVER);
				}
				break;
			case DATABASE:
				{
				State = 6417; Match(DATABASE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 6429;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WITH) {
				{
				State = 6420; Match(WITH);
				State = 6421; dml_trigger_option();
				State = 6426;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 6422; Match(COMMA);
					State = 6423; dml_trigger_option();
					}
					}
					State = 6428;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 6431;
			_la = _input.La(1);
			if ( !(_la==FOR || _la==AFTER) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 6432; ddl_trigger_operation();
			State = 6437;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 6433; Match(COMMA);
				State = 6434; dml_trigger_operation();
				}
				}
				State = 6439;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 6440; Match(AS);
			State = 6441; sql_clauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ddl_trigger_operationContext : ParserRuleContext {
		public Simple_idContext simple_id() {
			return GetRuleContext<Simple_idContext>(0);
		}
		public Ddl_trigger_operationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ddl_trigger_operation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDdl_trigger_operation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDdl_trigger_operation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDdl_trigger_operation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ddl_trigger_operationContext ddl_trigger_operation() {
		Ddl_trigger_operationContext _localctx = new Ddl_trigger_operationContext(_ctx, State);
		EnterRule(_localctx, 484, RULE_ddl_trigger_operation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6443; simple_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_or_alter_functionContext : ParserRuleContext {
		public ITerminalNode FUNCTION() { return GetToken(TSqlParser.FUNCTION, 0); }
		public Func_proc_name_schemaContext func_proc_name_schema() {
			return GetRuleContext<Func_proc_name_schemaContext>(0);
		}
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public Func_body_returns_selectContext func_body_returns_select() {
			return GetRuleContext<Func_body_returns_selectContext>(0);
		}
		public Func_body_returns_tableContext func_body_returns_table() {
			return GetRuleContext<Func_body_returns_tableContext>(0);
		}
		public Func_body_returns_scalarContext func_body_returns_scalar() {
			return GetRuleContext<Func_body_returns_scalarContext>(0);
		}
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public Procedure_paramContext[] procedure_param() {
			return GetRuleContexts<Procedure_paramContext>();
		}
		public Procedure_paramContext procedure_param(int i) {
			return GetRuleContext<Procedure_paramContext>(i);
		}
		public ITerminalNode OR() { return GetToken(TSqlParser.OR, 0); }
		public Create_or_alter_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_or_alter_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_or_alter_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_or_alter_function(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_or_alter_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_or_alter_functionContext create_or_alter_function() {
		Create_or_alter_functionContext _localctx = new Create_or_alter_functionContext(_ctx, State);
		EnterRule(_localctx, 486, RULE_create_or_alter_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6451;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case CREATE:
				{
				{
				State = 6445; Match(CREATE);
				State = 6448;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==OR) {
					{
					State = 6446; Match(OR);
					State = 6447; Match(ALTER);
					}
				}

				}
				}
				break;
			case ALTER:
				{
				State = 6450; Match(ALTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 6453; Match(FUNCTION);
			State = 6454; func_proc_name_schema();
			State = 6468;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,833,_ctx) ) {
			case 1:
				{
				{
				State = 6455; Match(LR_BRACKET);
				State = 6456; procedure_param();
				State = 6461;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 6457; Match(COMMA);
					State = 6458; procedure_param();
					}
					}
					State = 6463;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 6464; Match(RR_BRACKET);
				}
				}
				break;

			case 2:
				{
				State = 6466; Match(LR_BRACKET);
				State = 6467; Match(RR_BRACKET);
				}
				break;
			}
			State = 6473;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,834,_ctx) ) {
			case 1:
				{
				State = 6470; func_body_returns_select();
				}
				break;

			case 2:
				{
				State = 6471; func_body_returns_table();
				}
				break;

			case 3:
				{
				State = 6472; func_body_returns_scalar();
				}
				break;
			}
			State = 6476;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,835,_ctx) ) {
			case 1:
				{
				State = 6475; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_body_returns_selectContext : ParserRuleContext {
		public ITerminalNode RETURNS() { return GetToken(TSqlParser.RETURNS, 0); }
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public ITerminalNode RETURN() { return GetToken(TSqlParser.RETURN, 0); }
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Function_optionContext[] function_option() {
			return GetRuleContexts<Function_optionContext>();
		}
		public Function_optionContext function_option(int i) {
			return GetRuleContext<Function_optionContext>(i);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Func_body_returns_selectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_body_returns_select; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFunc_body_returns_select(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFunc_body_returns_select(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_body_returns_select(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_body_returns_selectContext func_body_returns_select() {
		Func_body_returns_selectContext _localctx = new Func_body_returns_selectContext(_ctx, State);
		EnterRule(_localctx, 488, RULE_func_body_returns_select);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6478; Match(RETURNS);
			State = 6479; Match(TABLE);
			State = 6489;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WITH) {
				{
				State = 6480; Match(WITH);
				State = 6481; function_option();
				State = 6486;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 6482; Match(COMMA);
					State = 6483; function_option();
					}
					}
					State = 6488;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 6492;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 6491; Match(AS);
				}
			}

			State = 6494; Match(RETURN);
			State = 6500;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,839,_ctx) ) {
			case 1:
				{
				State = 6495; Match(LR_BRACKET);
				State = 6496; select_statement();
				State = 6497; Match(RR_BRACKET);
				}
				break;

			case 2:
				{
				State = 6499; select_statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_body_returns_tableContext : ParserRuleContext {
		public ITerminalNode RETURNS() { return GetToken(TSqlParser.RETURNS, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Table_type_definitionContext table_type_definition() {
			return GetRuleContext<Table_type_definitionContext>(0);
		}
		public ITerminalNode BEGIN() { return GetToken(TSqlParser.BEGIN, 0); }
		public ITerminalNode RETURN() { return GetToken(TSqlParser.RETURN, 0); }
		public ITerminalNode END() { return GetToken(TSqlParser.END, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Function_optionContext[] function_option() {
			return GetRuleContexts<Function_optionContext>();
		}
		public Function_optionContext function_option(int i) {
			return GetRuleContext<Function_optionContext>(i);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Sql_clauseContext[] sql_clause() {
			return GetRuleContexts<Sql_clauseContext>();
		}
		public Sql_clauseContext sql_clause(int i) {
			return GetRuleContext<Sql_clauseContext>(i);
		}
		public Func_body_returns_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_body_returns_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFunc_body_returns_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFunc_body_returns_table(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_body_returns_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_body_returns_tableContext func_body_returns_table() {
		Func_body_returns_tableContext _localctx = new Func_body_returns_tableContext(_ctx, State);
		EnterRule(_localctx, 490, RULE_func_body_returns_table);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6502; Match(RETURNS);
			State = 6503; Match(LOCAL_ID);
			State = 6504; table_type_definition();
			State = 6514;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WITH) {
				{
				State = 6505; Match(WITH);
				State = 6506; function_option();
				State = 6511;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 6507; Match(COMMA);
					State = 6508; function_option();
					}
					}
					State = 6513;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 6517;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 6516; Match(AS);
				}
			}

			State = 6519; Match(BEGIN);
			State = 6523;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,843,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 6520; sql_clause();
					}
					} 
				}
				State = 6525;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,843,_ctx);
			}
			State = 6526; Match(RETURN);
			State = 6528;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==SEMI) {
				{
				State = 6527; Match(SEMI);
				}
			}

			State = 6530; Match(END);
			State = 6532;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,845,_ctx) ) {
			case 1:
				{
				State = 6531; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_body_returns_scalarContext : ParserRuleContext {
		public ExpressionContext ret;
		public ITerminalNode RETURNS() { return GetToken(TSqlParser.RETURNS, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ITerminalNode BEGIN() { return GetToken(TSqlParser.BEGIN, 0); }
		public ITerminalNode RETURN() { return GetToken(TSqlParser.RETURN, 0); }
		public ITerminalNode END() { return GetToken(TSqlParser.END, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Function_optionContext[] function_option() {
			return GetRuleContexts<Function_optionContext>();
		}
		public Function_optionContext function_option(int i) {
			return GetRuleContext<Function_optionContext>(i);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Sql_clauseContext[] sql_clause() {
			return GetRuleContexts<Sql_clauseContext>();
		}
		public Sql_clauseContext sql_clause(int i) {
			return GetRuleContext<Sql_clauseContext>(i);
		}
		public Func_body_returns_scalarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_body_returns_scalar; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFunc_body_returns_scalar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFunc_body_returns_scalar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_body_returns_scalar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_body_returns_scalarContext func_body_returns_scalar() {
		Func_body_returns_scalarContext _localctx = new Func_body_returns_scalarContext(_ctx, State);
		EnterRule(_localctx, 492, RULE_func_body_returns_scalar);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6534; Match(RETURNS);
			State = 6535; data_type();
			State = 6545;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WITH) {
				{
				State = 6536; Match(WITH);
				State = 6537; function_option();
				State = 6542;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 6538; Match(COMMA);
					State = 6539; function_option();
					}
					}
					State = 6544;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 6548;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 6547; Match(AS);
				}
			}

			State = 6550; Match(BEGIN);
			State = 6554;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,849,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 6551; sql_clause();
					}
					} 
				}
				State = 6556;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,849,_ctx);
			}
			State = 6557; Match(RETURN);
			State = 6558; _localctx.ret = expression(0);
			State = 6560;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==SEMI) {
				{
				State = 6559; Match(SEMI);
				}
			}

			State = 6562; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_paramContext : ParserRuleContext {
		public Default_valueContext default_val;
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode VARYING() { return GetToken(TSqlParser.VARYING, 0); }
		public Null_notnullContext null_notnull() {
			return GetRuleContext<Null_notnullContext>(0);
		}
		public Default_valueContext default_value() {
			return GetRuleContext<Default_valueContext>(0);
		}
		public ITerminalNode OUT() { return GetToken(TSqlParser.OUT, 0); }
		public ITerminalNode OUTPUT() { return GetToken(TSqlParser.OUTPUT, 0); }
		public ITerminalNode READONLY() { return GetToken(TSqlParser.READONLY, 0); }
		public Procedure_paramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_param; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterProcedure_param(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitProcedure_param(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedure_param(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_paramContext procedure_param() {
		Procedure_paramContext _localctx = new Procedure_paramContext(_ctx, State);
		EnterRule(_localctx, 494, RULE_procedure_param);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6564; Match(LOCAL_ID);
			State = 6568;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,851,_ctx) ) {
			case 1:
				{
				State = 6565; id();
				State = 6566; Match(DOT);
				}
				break;
			}
			State = 6571;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 6570; Match(AS);
				}
			}

			State = 6573; data_type();
			State = 6575;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==VARYING) {
				{
				State = 6574; Match(VARYING);
				}
			}

			State = 6578;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==NOT || _la==NULL) {
				{
				State = 6577; null_notnull();
				}
			}

			State = 6582;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==EQUAL) {
				{
				State = 6580; Match(EQUAL);
				State = 6581; _localctx.default_val = default_value();
				}
			}

			State = 6585;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & ((1L << (OUT - 642)) | (1L << (OUTPUT - 642)) | (1L << (READONLY - 642)))) != 0)) {
				{
				State = 6584;
				_la = _input.La(1);
				if ( !(((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & ((1L << (OUT - 642)) | (1L << (OUTPUT - 642)) | (1L << (READONLY - 642)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_optionContext : ParserRuleContext {
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode RECOMPILE() { return GetToken(TSqlParser.RECOMPILE, 0); }
		public Execute_clauseContext execute_clause() {
			return GetRuleContext<Execute_clauseContext>(0);
		}
		public ITerminalNode NATIVE_COMPILATION() { return GetToken(TSqlParser.NATIVE_COMPILATION, 0); }
		public ITerminalNode SCHEMABINDING() { return GetToken(TSqlParser.SCHEMABINDING, 0); }
		public Procedure_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterProcedure_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitProcedure_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedure_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_optionContext procedure_option() {
		Procedure_optionContext _localctx = new Procedure_optionContext(_ctx, State);
		EnterRule(_localctx, 496, RULE_procedure_option);
		try {
			State = 6593;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ENCRYPTION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6587; Match(ENCRYPTION);
				}
				break;
			case RECOMPILE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6588; Match(RECOMPILE);
				}
				break;
			case EXECUTE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6589; execute_clause();
				}
				break;
			case NATIVE_COMPILATION:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6590; Match(NATIVE_COMPILATION);
				State = 6591; Match(COMMA);
				State = 6592; Match(SCHEMABINDING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_optionContext : ParserRuleContext {
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode SCHEMABINDING() { return GetToken(TSqlParser.SCHEMABINDING, 0); }
		public ITerminalNode RETURNS() { return GetToken(TSqlParser.RETURNS, 0); }
		public ITerminalNode[] NULL() { return GetTokens(TSqlParser.NULL); }
		public ITerminalNode NULL(int i) {
			return GetToken(TSqlParser.NULL, i);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode INPUT() { return GetToken(TSqlParser.INPUT, 0); }
		public ITerminalNode CALLED() { return GetToken(TSqlParser.CALLED, 0); }
		public Execute_clauseContext execute_clause() {
			return GetRuleContext<Execute_clauseContext>(0);
		}
		public Function_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFunction_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFunction_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_optionContext function_option() {
		Function_optionContext _localctx = new Function_optionContext(_ctx, State);
		EnterRule(_localctx, 498, RULE_function_option);
		try {
			State = 6607;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ENCRYPTION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6595; Match(ENCRYPTION);
				}
				break;
			case SCHEMABINDING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6596; Match(SCHEMABINDING);
				}
				break;
			case RETURNS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6597; Match(RETURNS);
				State = 6598; Match(NULL);
				State = 6599; Match(ON);
				State = 6600; Match(NULL);
				State = 6601; Match(INPUT);
				}
				break;
			case CALLED:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6602; Match(CALLED);
				State = 6603; Match(ON);
				State = 6604; Match(NULL);
				State = 6605; Match(INPUT);
				}
				break;
			case EXECUTE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6606; execute_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_statisticsContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode STATISTICS() { return GetToken(TSqlParser.STATISTICS, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Table_name_with_hintContext table_name_with_hint() {
			return GetRuleContext<Table_name_with_hintContext>(0);
		}
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode FULLSCAN() { return GetToken(TSqlParser.FULLSCAN, 0); }
		public ITerminalNode SAMPLE() { return GetToken(TSqlParser.SAMPLE, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode STATS_STREAM() { return GetToken(TSqlParser.STATS_STREAM, 0); }
		public ITerminalNode PERCENT() { return GetToken(TSqlParser.PERCENT, 0); }
		public ITerminalNode ROWS() { return GetToken(TSqlParser.ROWS, 0); }
		public ITerminalNode NORECOMPUTE() { return GetToken(TSqlParser.NORECOMPUTE, 0); }
		public ITerminalNode INCREMENTAL() { return GetToken(TSqlParser.INCREMENTAL, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public Create_statisticsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_statistics; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_statistics(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_statistics(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_statistics(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_statisticsContext create_statistics() {
		Create_statisticsContext _localctx = new Create_statisticsContext(_ctx, State);
		EnterRule(_localctx, 500, RULE_create_statistics);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6609; Match(CREATE);
			State = 6610; Match(STATISTICS);
			State = 6611; id();
			State = 6612; Match(ON);
			State = 6613; table_name_with_hint();
			State = 6614; Match(LR_BRACKET);
			State = 6615; column_name_list();
			State = 6616; Match(RR_BRACKET);
			State = 6635;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,862,_ctx) ) {
			case 1:
				{
				State = 6617; Match(WITH);
				State = 6623;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case FULLSCAN:
					{
					State = 6618; Match(FULLSCAN);
					}
					break;
				case SAMPLE:
					{
					State = 6619; Match(SAMPLE);
					State = 6620; Match(DECIMAL);
					State = 6621;
					_la = _input.La(1);
					if ( !(_la==PERCENT || _la==ROWS) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				case STATS_STREAM:
					{
					State = 6622; Match(STATS_STREAM);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 6627;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,860,_ctx) ) {
				case 1:
					{
					State = 6625; Match(COMMA);
					State = 6626; Match(NORECOMPUTE);
					}
					break;
				}
				State = 6633;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,861,_ctx) ) {
				case 1:
					{
					State = 6629; Match(COMMA);
					State = 6630; Match(INCREMENTAL);
					State = 6631; Match(EQUAL);
					State = 6632; on_off();
					}
					break;
				}
				}
				break;
			}
			State = 6638;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,863,_ctx) ) {
			case 1:
				{
				State = 6637; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_statisticsContext : ParserRuleContext {
		public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		public ITerminalNode STATISTICS() { return GetToken(TSqlParser.STATISTICS, 0); }
		public Schema_object_nameContext schema_object_name() {
			return GetRuleContext<Schema_object_nameContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode USING() { return GetToken(TSqlParser.USING, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode VALUES() { return GetToken(TSqlParser.VALUES, 0); }
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public Update_statisticsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_statistics; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUpdate_statistics(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUpdate_statistics(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate_statistics(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Update_statisticsContext update_statistics() {
		Update_statisticsContext _localctx = new Update_statisticsContext(_ctx, State);
		EnterRule(_localctx, 502, RULE_update_statistics);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6640; Match(UPDATE);
			State = 6642;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ALL || _la==INDEX) {
				{
				State = 6641;
				_la = _input.La(1);
				if ( !(_la==ALL || _la==INDEX) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 6644; Match(STATISTICS);
			State = 6645; schema_object_name();
			State = 6647;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,865,_ctx) ) {
			case 1:
				{
				State = 6646; id();
				}
				break;
			}
			State = 6652;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,866,_ctx) ) {
			case 1:
				{
				State = 6649; Match(USING);
				State = 6650; Match(DECIMAL);
				State = 6651; Match(VALUES);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_tableContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public Schema_object_nameContext schema_object_name() {
			return GetRuleContext<Schema_object_nameContext>(0);
		}
		public Column_def_table_constraints_indexContext column_def_table_constraints_index() {
			return GetRuleContext<Column_def_table_constraints_indexContext>(0);
		}
		public ITerminalNode LOCK() { return GetToken(TSqlParser.LOCK, 0); }
		public Simple_idContext simple_id() {
			return GetRuleContext<Simple_idContext>(0);
		}
		public Table_optionsContext[] table_options() {
			return GetRuleContexts<Table_optionsContext>();
		}
		public Table_optionsContext table_options(int i) {
			return GetRuleContext<Table_optionsContext>(i);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] DEFAULT() { return GetTokens(TSqlParser.DEFAULT); }
		public ITerminalNode DEFAULT(int i) {
			return GetToken(TSqlParser.DEFAULT, i);
		}
		public ITerminalNode TEXTIMAGE_ON() { return GetToken(TSqlParser.TEXTIMAGE_ON, 0); }
		public Create_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_table(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_tableContext create_table() {
		Create_tableContext _localctx = new Create_tableContext(_ctx, State);
		EnterRule(_localctx, 504, RULE_create_table);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6654; Match(CREATE);
			State = 6655; Match(TABLE);
			State = 6656; schema_object_name();
			State = 6657; Match(LR_BRACKET);
			State = 6658; column_def_table_constraints_index();
			State = 6660;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 6659; Match(COMMA);
				}
			}

			State = 6662; Match(RR_BRACKET);
			State = 6665;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,868,_ctx) ) {
			case 1:
				{
				State = 6663; Match(LOCK);
				State = 6664; simple_id();
				}
				break;
			}
			State = 6670;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,869,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 6667; table_options();
					}
					} 
				}
				State = 6672;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,869,_ctx);
			}
			State = 6676;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,870,_ctx) ) {
			case 1:
				{
				State = 6673; Match(ON);
				State = 6674; id();
				}
				break;

			case 2:
				{
				State = 6675; Match(DEFAULT);
				}
				break;
			}
			State = 6681;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,871,_ctx) ) {
			case 1:
				{
				State = 6678; Match(TEXTIMAGE_ON);
				State = 6679; id();
				}
				break;

			case 2:
				{
				State = 6680; Match(DEFAULT);
				}
				break;
			}
			State = 6684;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,872,_ctx) ) {
			case 1:
				{
				State = 6683; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_optionsContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Index_optionContext[] index_option() {
			return GetRuleContexts<Index_optionContext>();
		}
		public Index_optionContext index_option(int i) {
			return GetRuleContext<Index_optionContext>(i);
		}
		public Table_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_options(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_optionsContext table_options() {
		Table_optionsContext _localctx = new Table_optionsContext(_ctx, State);
		EnterRule(_localctx, 506, RULE_table_options);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6686; Match(WITH);
			State = 6706;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,875,_ctx) ) {
			case 1:
				{
				State = 6687; Match(LR_BRACKET);
				State = 6688; index_option();
				State = 6693;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 6689; Match(COMMA);
					State = 6690; index_option();
					}
					}
					State = 6695;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 6696; Match(RR_BRACKET);
				}
				break;

			case 2:
				{
				State = 6698; index_option();
				State = 6703;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,874,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 6699; Match(COMMA);
						State = 6700; index_option();
						}
						} 
					}
					State = 6705;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,874,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_indexContext : ParserRuleContext {
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Column_name_list_with_orderContext column_name_list_with_order() {
			return GetRuleContext<Column_name_list_with_orderContext>(0);
		}
		public ITerminalNode UNIQUE() { return GetToken(TSqlParser.UNIQUE, 0); }
		public ClusteredContext clustered() {
			return GetRuleContext<ClusteredContext>(0);
		}
		public Table_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_index; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_index(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_index(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_indexContext table_index() {
		Table_indexContext _localctx = new Table_indexContext(_ctx, State);
		EnterRule(_localctx, 508, RULE_table_index);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6708; Match(INDEX);
			State = 6709; id();
			State = 6711;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==UNIQUE) {
				{
				State = 6710; Match(UNIQUE);
				}
			}

			State = 6714;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CLUSTERED || _la==NONCLUSTERED) {
				{
				State = 6713; clustered();
				}
			}

			State = 6716; Match(LR_BRACKET);
			State = 6717; column_name_list_with_order();
			State = 6718; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_viewContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode VIEW() { return GetToken(TSqlParser.VIEW, 0); }
		public Simple_nameContext simple_name() {
			return GetRuleContext<Simple_nameContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public ITerminalNode[] WITH() { return GetTokens(TSqlParser.WITH); }
		public ITerminalNode WITH(int i) {
			return GetToken(TSqlParser.WITH, i);
		}
		public View_attributeContext[] view_attribute() {
			return GetRuleContexts<View_attributeContext>();
		}
		public View_attributeContext view_attribute(int i) {
			return GetRuleContext<View_attributeContext>(i);
		}
		public ITerminalNode CHECK() { return GetToken(TSqlParser.CHECK, 0); }
		public ITerminalNode OPTION() { return GetToken(TSqlParser.OPTION, 0); }
		public Create_viewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_view; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_view(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_view(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_view(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_viewContext create_view() {
		Create_viewContext _localctx = new Create_viewContext(_ctx, State);
		EnterRule(_localctx, 510, RULE_create_view);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6720; Match(CREATE);
			State = 6721; Match(VIEW);
			State = 6722; simple_name();
			State = 6727;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LR_BRACKET) {
				{
				State = 6723; Match(LR_BRACKET);
				State = 6724; column_name_list();
				State = 6725; Match(RR_BRACKET);
				}
			}

			State = 6738;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WITH) {
				{
				State = 6729; Match(WITH);
				State = 6730; view_attribute();
				State = 6735;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 6731; Match(COMMA);
					State = 6732; view_attribute();
					}
					}
					State = 6737;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 6740; Match(AS);
			State = 6741; select_statement();
			State = 6745;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,881,_ctx) ) {
			case 1:
				{
				State = 6742; Match(WITH);
				State = 6743; Match(CHECK);
				State = 6744; Match(OPTION);
				}
				break;
			}
			State = 6748;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,882,_ctx) ) {
			case 1:
				{
				State = 6747; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class View_attributeContext : ParserRuleContext {
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode SCHEMABINDING() { return GetToken(TSqlParser.SCHEMABINDING, 0); }
		public ITerminalNode VIEW_METADATA() { return GetToken(TSqlParser.VIEW_METADATA, 0); }
		public View_attributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_view_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterView_attribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitView_attribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitView_attribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public View_attributeContext view_attribute() {
		View_attributeContext _localctx = new View_attributeContext(_ctx, State);
		EnterRule(_localctx, 512, RULE_view_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6750;
			_la = _input.La(1);
			if ( !(_la==ENCRYPTION || _la==SCHEMABINDING || _la==VIEW_METADATA) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_tableContext : ParserRuleContext {
		public IdContext constraint;
		public Column_name_listContext fk;
		public Column_name_listContext pk;
		public ITerminalNode[] ALTER() { return GetTokens(TSqlParser.ALTER); }
		public ITerminalNode ALTER(int i) {
			return GetToken(TSqlParser.ALTER, i);
		}
		public ITerminalNode[] TABLE() { return GetTokens(TSqlParser.TABLE); }
		public ITerminalNode TABLE(int i) {
			return GetToken(TSqlParser.TABLE, i);
		}
		public Schema_object_nameContext[] schema_object_name() {
			return GetRuleContexts<Schema_object_nameContext>();
		}
		public Schema_object_nameContext schema_object_name(int i) {
			return GetRuleContext<Schema_object_nameContext>(i);
		}
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public ITerminalNode LOCK_ESCALATION() { return GetToken(TSqlParser.LOCK_ESCALATION, 0); }
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public Column_def_table_constraintContext column_def_table_constraint() {
			return GetRuleContext<Column_def_table_constraintContext>(0);
		}
		public ITerminalNode COLUMN() { return GetToken(TSqlParser.COLUMN, 0); }
		public Column_definitionContext column_definition() {
			return GetRuleContext<Column_definitionContext>(0);
		}
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode CONSTRAINT() { return GetToken(TSqlParser.CONSTRAINT, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode CHECK() { return GetToken(TSqlParser.CHECK, 0); }
		public ITerminalNode FOREIGN() { return GetToken(TSqlParser.FOREIGN, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode REFERENCES() { return GetToken(TSqlParser.REFERENCES, 0); }
		public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		public ITerminalNode REBUILD() { return GetToken(TSqlParser.REBUILD, 0); }
		public Table_optionsContext table_options() {
			return GetRuleContext<Table_optionsContext>(0);
		}
		public ITerminalNode AUTO() { return GetToken(TSqlParser.AUTO, 0); }
		public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		public Column_name_listContext[] column_name_list() {
			return GetRuleContexts<Column_name_listContext>();
		}
		public Column_name_listContext column_name_list(int i) {
			return GetRuleContext<Column_name_listContext>(i);
		}
		public ITerminalNode ENABLE() { return GetToken(TSqlParser.ENABLE, 0); }
		public Alter_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_table(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_tableContext alter_table() {
		Alter_tableContext _localctx = new Alter_tableContext(_ctx, State);
		EnterRule(_localctx, 514, RULE_alter_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6752; Match(ALTER);
			State = 6753; Match(TABLE);
			State = 6754; schema_object_name();
			State = 6798;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,884,_ctx) ) {
			case 1:
				{
				State = 6755; Match(SET);
				State = 6756; Match(LR_BRACKET);
				State = 6757; Match(LOCK_ESCALATION);
				State = 6758; Match(EQUAL);
				State = 6759;
				_la = _input.La(1);
				if ( !(_la==TABLE || _la==AUTO || _la==DISABLE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 6760; Match(RR_BRACKET);
				}
				break;

			case 2:
				{
				State = 6761; Match(ADD);
				State = 6762; column_def_table_constraint();
				}
				break;

			case 3:
				{
				State = 6763; Match(ALTER);
				State = 6764; Match(COLUMN);
				State = 6765; column_definition();
				}
				break;

			case 4:
				{
				State = 6766; Match(DROP);
				State = 6767; Match(COLUMN);
				State = 6768; id();
				}
				break;

			case 5:
				{
				State = 6769; Match(DROP);
				State = 6770; Match(CONSTRAINT);
				State = 6771; _localctx.constraint = id();
				}
				break;

			case 6:
				{
				State = 6772; Match(WITH);
				State = 6773; Match(CHECK);
				State = 6774; Match(ADD);
				State = 6775; Match(CONSTRAINT);
				State = 6776; _localctx.constraint = id();
				State = 6777; Match(FOREIGN);
				State = 6778; Match(KEY);
				State = 6779; Match(LR_BRACKET);
				State = 6780; _localctx.fk = column_name_list();
				State = 6781; Match(RR_BRACKET);
				State = 6782; Match(REFERENCES);
				State = 6783; schema_object_name();
				State = 6784; Match(LR_BRACKET);
				State = 6785; _localctx.pk = column_name_list();
				State = 6786; Match(RR_BRACKET);
				}
				break;

			case 7:
				{
				State = 6788; Match(CHECK);
				State = 6789; Match(CONSTRAINT);
				State = 6790; _localctx.constraint = id();
				}
				break;

			case 8:
				{
				State = 6791;
				_la = _input.La(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 6792; Match(TRIGGER);
				State = 6794;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,883,_ctx) ) {
				case 1:
					{
					State = 6793; id();
					}
					break;
				}
				}
				break;

			case 9:
				{
				State = 6796; Match(REBUILD);
				State = 6797; table_options();
				}
				break;
			}
			State = 6801;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,885,_ctx) ) {
			case 1:
				{
				State = 6800; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_databaseContext : ParserRuleContext {
		public IdContext new_name;
		public IdContext collation;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public ITerminalNode CURRENT() { return GetToken(TSqlParser.CURRENT, 0); }
		public ITerminalNode MODIFY() { return GetToken(TSqlParser.MODIFY, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode COLLATE() { return GetToken(TSqlParser.COLLATE, 0); }
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public Database_optionspecContext database_optionspec() {
			return GetRuleContext<Database_optionspecContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public TerminationContext termination() {
			return GetRuleContext<TerminationContext>(0);
		}
		public Alter_databaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_database; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_database(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_database(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_database(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_databaseContext alter_database() {
		Alter_databaseContext _localctx = new Alter_databaseContext(_ctx, State);
		EnterRule(_localctx, 516, RULE_alter_database);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6803; Match(ALTER);
			State = 6804; Match(DATABASE);
			State = 6807;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BACKSLASH:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONNECTION_OPTIONS:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DISK:
			case DOUBLE_BACK_SLASH:
			case DOUBLE_FORWARD_SLASH:
			case DTC_SUPPORT:
			case DUMP:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILENAME:
			case FILLFACTOR:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IDENTITYCOL:
			case IIF:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case IPV4_ADDR:
			case IPV6_ADDR:
			case ISNULL:
			case KERBEROS:
			case KEY:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOAD:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NATIVE_COMPILATION:
			case NEGOTIATE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case NULL:
			case OFFSETS:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PLATFORM:
			case POLICY:
			case PRECISION:
			case PREDICATE:
			case PROCESS:
			case PUBLIC:
			case PUSHDOWN:
			case PYTHON:
			case R:
			case RAW:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESULT_SETS:
			case RESUME:
			case RETAINDAYS:
			case RETURN:
			case RETURNS:
			case REWIND:
			case ROLE:
			case ROWCOUNT:
			case ROWGUIDCOL:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SECURITYAUDIT:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SESSION_USER:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case SYSTEM_USER:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case USER:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHIN:
			case WITHOUT:
			case WITNESS:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BUCKET_COUNT:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATEFIRST:
			case DATEFORMAT:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADOOP:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNDEFINED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case DOLLAR_ACTION:
			case SPACE:
			case COMMENT:
			case LINE_COMMENT:
			case DOUBLE_QUOTE_ID:
			case SINGLE_QUOTE:
			case SQUARE_BRACKET_ID:
			case LOCAL_ID:
			case DECIMAL:
			case ID:
			case QUOTED_URL:
			case QUOTED_HOST_AND_PORT:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case EQUAL:
			case GREATER:
			case LESS:
			case EXCLAMATION:
			case PLUS_ASSIGN:
			case MINUS_ASSIGN:
			case MULT_ASSIGN:
			case DIV_ASSIGN:
			case MOD_ASSIGN:
			case AND_ASSIGN:
			case XOR_ASSIGN:
			case OR_ASSIGN:
			case DOUBLE_BAR:
			case DOT:
			case UNDERLINE:
			case AT:
			case SHARP:
			case DOLLAR:
			case LR_BRACKET:
			case RR_BRACKET:
			case COMMA:
			case SEMI:
			case COLON:
			case STAR:
			case DIVIDE:
			case MODULE:
			case PLUS:
			case MINUS:
			case BIT_NOT:
			case BIT_OR:
			case BIT_AND:
			case BIT_XOR:
			case MDY:
			case DMY:
			case YMD:
			case YDM:
			case MYD:
			case DYM:
			case IPV4_OCTECT:
				{
				State = 6805; database_name();
				}
				break;
			case CURRENT:
				{
				State = 6806; Match(CURRENT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 6821;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case MODIFY:
				{
				State = 6809; Match(MODIFY);
				State = 6810; Match(NAME);
				State = 6811; Match(EQUAL);
				State = 6812; _localctx.new_name = id();
				}
				break;
			case COLLATE:
				{
				State = 6813; Match(COLLATE);
				State = 6814; _localctx.collation = id();
				}
				break;
			case SET:
				{
				State = 6815; Match(SET);
				State = 6816; database_optionspec();
				State = 6819;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,887,_ctx) ) {
				case 1:
					{
					State = 6817; Match(WITH);
					State = 6818; termination();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 6824;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,889,_ctx) ) {
			case 1:
				{
				State = 6823; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Database_optionspecContext : ParserRuleContext {
		public Auto_optionContext auto_option() {
			return GetRuleContext<Auto_optionContext>(0);
		}
		public Change_tracking_optionContext change_tracking_option() {
			return GetRuleContext<Change_tracking_optionContext>(0);
		}
		public Containment_optionContext containment_option() {
			return GetRuleContext<Containment_optionContext>(0);
		}
		public Cursor_optionContext cursor_option() {
			return GetRuleContext<Cursor_optionContext>(0);
		}
		public Database_mirroring_optionContext database_mirroring_option() {
			return GetRuleContext<Database_mirroring_optionContext>(0);
		}
		public Date_correlation_optimization_optionContext date_correlation_optimization_option() {
			return GetRuleContext<Date_correlation_optimization_optionContext>(0);
		}
		public Db_encryption_optionContext db_encryption_option() {
			return GetRuleContext<Db_encryption_optionContext>(0);
		}
		public Db_state_optionContext db_state_option() {
			return GetRuleContext<Db_state_optionContext>(0);
		}
		public Db_update_optionContext db_update_option() {
			return GetRuleContext<Db_update_optionContext>(0);
		}
		public Db_user_access_optionContext db_user_access_option() {
			return GetRuleContext<Db_user_access_optionContext>(0);
		}
		public Delayed_durability_optionContext delayed_durability_option() {
			return GetRuleContext<Delayed_durability_optionContext>(0);
		}
		public External_access_optionContext external_access_option() {
			return GetRuleContext<External_access_optionContext>(0);
		}
		public ITerminalNode FILESTREAM() { return GetToken(TSqlParser.FILESTREAM, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Database_filestream_optionContext[] database_filestream_option() {
			return GetRuleContexts<Database_filestream_optionContext>();
		}
		public Database_filestream_optionContext database_filestream_option(int i) {
			return GetRuleContext<Database_filestream_optionContext>(i);
		}
		public Hadr_optionsContext hadr_options() {
			return GetRuleContext<Hadr_optionsContext>(0);
		}
		public Mixed_page_allocation_optionContext mixed_page_allocation_option() {
			return GetRuleContext<Mixed_page_allocation_optionContext>(0);
		}
		public Parameterization_optionContext parameterization_option() {
			return GetRuleContext<Parameterization_optionContext>(0);
		}
		public Recovery_optionContext recovery_option() {
			return GetRuleContext<Recovery_optionContext>(0);
		}
		public Service_broker_optionContext service_broker_option() {
			return GetRuleContext<Service_broker_optionContext>(0);
		}
		public Snapshot_optionContext snapshot_option() {
			return GetRuleContext<Snapshot_optionContext>(0);
		}
		public Sql_optionContext sql_option() {
			return GetRuleContext<Sql_optionContext>(0);
		}
		public Target_recovery_time_optionContext target_recovery_time_option() {
			return GetRuleContext<Target_recovery_time_optionContext>(0);
		}
		public TerminationContext termination() {
			return GetRuleContext<TerminationContext>(0);
		}
		public Database_optionspecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_database_optionspec; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDatabase_optionspec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDatabase_optionspec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatabase_optionspec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Database_optionspecContext database_optionspec() {
		Database_optionspecContext _localctx = new Database_optionspecContext(_ctx, State);
		EnterRule(_localctx, 518, RULE_database_optionspec);
		int _la;
		try {
			State = 6859;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ON:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6826; auto_option();
				}
				break;
			case CHANGE_TRACKING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6827; change_tracking_option();
				}
				break;
			case CONTAINMENT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6828; containment_option();
				}
				break;
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6829; cursor_option();
				}
				break;
			case WITNESS:
			case PARTNER:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6830; database_mirroring_option();
				}
				break;
			case DATE_CORRELATION_OPTIMIZATION:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6831; date_correlation_optimization_option();
				}
				break;
			case ENCRYPTION:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6832; db_encryption_option();
				}
				break;
			case EMERGENCY:
			case OFFLINE:
			case ONLINE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 6833; db_state_option();
				}
				break;
			case READ_ONLY:
			case READ_WRITE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 6834; db_update_option();
				}
				break;
			case MULTI_USER:
			case RESTRICTED_USER:
			case SINGLE_USER:
				EnterOuterAlt(_localctx, 10);
				{
				State = 6835; db_user_access_option();
				}
				break;
			case DELAYED_DURABILITY:
				EnterOuterAlt(_localctx, 11);
				{
				State = 6836; delayed_durability_option();
				}
				break;
			case DB_CHAINING:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case NESTED_TRIGGERS:
			case TRANSFORM_NOISE_WORDS:
			case TRUSTWORTHY:
			case TWO_DIGIT_YEAR_CUTOFF:
				EnterOuterAlt(_localctx, 12);
				{
				State = 6837; external_access_option();
				}
				break;
			case FILESTREAM:
				EnterOuterAlt(_localctx, 13);
				{
				State = 6838; Match(FILESTREAM);
				State = 6839; Match(LR_BRACKET);
				{
				State = 6840; database_filestream_option();
				State = 6845;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 6841; Match(COMMA);
					State = 6842; database_filestream_option();
					}
					}
					State = 6847;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				State = 6848; Match(RR_BRACKET);
				}
				break;
			case HADR:
				EnterOuterAlt(_localctx, 14);
				{
				State = 6850; hadr_options();
				}
				break;
			case MIXED_PAGE_ALLOCATION:
				EnterOuterAlt(_localctx, 15);
				{
				State = 6851; mixed_page_allocation_option();
				}
				break;
			case PARAMETERIZATION:
				EnterOuterAlt(_localctx, 16);
				{
				State = 6852; parameterization_option();
				}
				break;
			case PAGE_VERIFY:
			case RECOVERY:
			case TORN_PAGE_DETECTION:
				EnterOuterAlt(_localctx, 17);
				{
				State = 6853; recovery_option();
				}
				break;
			case DISABLE_BROKER:
			case ENABLE_BROKER:
			case ERROR_BROKER_CONVERSATIONS:
			case HONOR_BROKER_PRIORITY:
			case NEW_BROKER:
				EnterOuterAlt(_localctx, 18);
				{
				State = 6854; service_broker_option();
				}
				break;
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case ALLOW_SNAPSHOT_ISOLATION:
			case READ_COMMITTED_SNAPSHOT:
				EnterOuterAlt(_localctx, 19);
				{
				State = 6855; snapshot_option();
				}
				break;
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case ARITHABORT:
			case COMPATIBILITY_LEVEL:
			case CONCAT_NULL_YIELDS_NULL:
			case NUMERIC_ROUNDABORT:
			case QUOTED_IDENTIFIER:
			case RECURSIVE_TRIGGERS:
				EnterOuterAlt(_localctx, 20);
				{
				State = 6856; sql_option();
				}
				break;
			case TARGET_RECOVERY_TIME:
				EnterOuterAlt(_localctx, 21);
				{
				State = 6857; target_recovery_time_option();
				}
				break;
			case ROLLBACK:
			case NO_WAIT:
				EnterOuterAlt(_localctx, 22);
				{
				State = 6858; termination();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Auto_optionContext : ParserRuleContext {
		public ITerminalNode AUTO_CLOSE() { return GetToken(TSqlParser.AUTO_CLOSE, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode AUTO_CREATE_STATISTICS() { return GetToken(TSqlParser.AUTO_CREATE_STATISTICS, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode INCREMENTAL() { return GetToken(TSqlParser.INCREMENTAL, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode AUTO_SHRINK() { return GetToken(TSqlParser.AUTO_SHRINK, 0); }
		public ITerminalNode AUTO_UPDATE_STATISTICS() { return GetToken(TSqlParser.AUTO_UPDATE_STATISTICS, 0); }
		public ITerminalNode AUTO_UPDATE_STATISTICS_ASYNC() { return GetToken(TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, 0); }
		public Auto_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_auto_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAuto_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAuto_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAuto_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Auto_optionContext auto_option() {
		Auto_optionContext _localctx = new Auto_optionContext(_ctx, State);
		EnterRule(_localctx, 520, RULE_auto_option);
		int _la;
		try {
			State = 6878;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case AUTO_CLOSE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6861; Match(AUTO_CLOSE);
				State = 6862; on_off();
				}
				break;
			case AUTO_CREATE_STATISTICS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6863; Match(AUTO_CREATE_STATISTICS);
				State = 6864; Match(OFF);
				}
				break;
			case ON:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6865; Match(ON);
				State = 6870;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case INCREMENTAL:
					{
					State = 6866; Match(INCREMENTAL);
					State = 6867; Match(EQUAL);
					State = 6868; Match(ON);
					}
					break;
				case OFF:
					{
					State = 6869; Match(OFF);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case AUTO_SHRINK:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6872; Match(AUTO_SHRINK);
				State = 6873; on_off();
				}
				break;
			case AUTO_UPDATE_STATISTICS:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6874; Match(AUTO_UPDATE_STATISTICS);
				State = 6875; on_off();
				}
				break;
			case AUTO_UPDATE_STATISTICS_ASYNC:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6876; Match(AUTO_UPDATE_STATISTICS_ASYNC);
				State = 6877;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Change_tracking_optionContext : ParserRuleContext {
		public ITerminalNode CHANGE_TRACKING() { return GetToken(TSqlParser.CHANGE_TRACKING, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Change_tracking_option_listContext[] change_tracking_option_list() {
			return GetRuleContexts<Change_tracking_option_listContext>();
		}
		public Change_tracking_option_listContext change_tracking_option_list(int i) {
			return GetRuleContext<Change_tracking_option_listContext>(i);
		}
		public Change_tracking_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_change_tracking_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterChange_tracking_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitChange_tracking_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChange_tracking_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Change_tracking_optionContext change_tracking_option() {
		Change_tracking_optionContext _localctx = new Change_tracking_optionContext(_ctx, State);
		EnterRule(_localctx, 522, RULE_change_tracking_option);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6880; Match(CHANGE_TRACKING);
			State = 6881; Match(EQUAL);
			State = 6897;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case OFF:
				{
				State = 6882; Match(OFF);
				}
				break;
			case ON:
				{
				State = 6883; Match(ON);
				State = 6894;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,895,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 6884; change_tracking_option_list();
						State = 6889;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,894,_ctx);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
							if ( _alt==1 ) {
								{
								{
								State = 6885; Match(COMMA);
								State = 6886; change_tracking_option_list();
								}
								} 
							}
							State = 6891;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,894,_ctx);
						}
						}
						} 
					}
					State = 6896;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,895,_ctx);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Change_tracking_option_listContext : ParserRuleContext {
		public ITerminalNode AUTO_CLEANUP() { return GetToken(TSqlParser.AUTO_CLEANUP, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode CHANGE_RETENTION() { return GetToken(TSqlParser.CHANGE_RETENTION, 0); }
		public ITerminalNode DAYS() { return GetToken(TSqlParser.DAYS, 0); }
		public ITerminalNode HOURS() { return GetToken(TSqlParser.HOURS, 0); }
		public ITerminalNode MINUTES() { return GetToken(TSqlParser.MINUTES, 0); }
		public Change_tracking_option_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_change_tracking_option_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterChange_tracking_option_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitChange_tracking_option_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChange_tracking_option_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Change_tracking_option_listContext change_tracking_option_list() {
		Change_tracking_option_listContext _localctx = new Change_tracking_option_listContext(_ctx, State);
		EnterRule(_localctx, 524, RULE_change_tracking_option_list);
		int _la;
		try {
			State = 6905;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case AUTO_CLEANUP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6899; Match(AUTO_CLEANUP);
				State = 6900; Match(EQUAL);
				State = 6901; on_off();
				}
				break;
			case CHANGE_RETENTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6902; Match(CHANGE_RETENTION);
				State = 6903; Match(EQUAL);
				State = 6904;
				_la = _input.La(1);
				if ( !(_la==DAYS || _la==HOURS || _la==MINUTES) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Containment_optionContext : ParserRuleContext {
		public ITerminalNode CONTAINMENT() { return GetToken(TSqlParser.CONTAINMENT, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode PARTIAL() { return GetToken(TSqlParser.PARTIAL, 0); }
		public Containment_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_containment_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterContainment_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitContainment_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContainment_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Containment_optionContext containment_option() {
		Containment_optionContext _localctx = new Containment_optionContext(_ctx, State);
		EnterRule(_localctx, 526, RULE_containment_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6907; Match(CONTAINMENT);
			State = 6908; Match(EQUAL);
			State = 6909;
			_la = _input.La(1);
			if ( !(_la==NONE || _la==PARTIAL) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cursor_optionContext : ParserRuleContext {
		public ITerminalNode CURSOR_CLOSE_ON_COMMIT() { return GetToken(TSqlParser.CURSOR_CLOSE_ON_COMMIT, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode CURSOR_DEFAULT() { return GetToken(TSqlParser.CURSOR_DEFAULT, 0); }
		public ITerminalNode LOCAL() { return GetToken(TSqlParser.LOCAL, 0); }
		public ITerminalNode GLOBAL() { return GetToken(TSqlParser.GLOBAL, 0); }
		public Cursor_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursor_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCursor_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCursor_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursor_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cursor_optionContext cursor_option() {
		Cursor_optionContext _localctx = new Cursor_optionContext(_ctx, State);
		EnterRule(_localctx, 528, RULE_cursor_option);
		int _la;
		try {
			State = 6915;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case CURSOR_CLOSE_ON_COMMIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6911; Match(CURSOR_CLOSE_ON_COMMIT);
				State = 6912; on_off();
				}
				break;
			case CURSOR_DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6913; Match(CURSOR_DEFAULT);
				State = 6914;
				_la = _input.La(1);
				if ( !(_la==GLOBAL || _la==LOCAL) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_endpointContext : ParserRuleContext {
		public IdContext endpointname;
		public IdContext login;
		public IToken state;
		public IToken port;
		public IdContext cert_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode ENDPOINT() { return GetToken(TSqlParser.ENDPOINT, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode TCP() { return GetToken(TSqlParser.TCP, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode LISTENER_PORT() { return GetToken(TSqlParser.LISTENER_PORT, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode TSQL() { return GetToken(TSqlParser.TSQL, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode SERVICE_BROKER() { return GetToken(TSqlParser.SERVICE_BROKER, 0); }
		public ITerminalNode AUTHENTICATION() { return GetToken(TSqlParser.AUTHENTICATION, 0); }
		public ITerminalNode DATABASE_MIRRORING() { return GetToken(TSqlParser.DATABASE_MIRRORING, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode LISTENER_IP() { return GetToken(TSqlParser.LISTENER_IP, 0); }
		public ITerminalNode WITNESS() { return GetToken(TSqlParser.WITNESS, 0); }
		public ITerminalNode PARTNER() { return GetToken(TSqlParser.PARTNER, 0); }
		public ITerminalNode[] ALL() { return GetTokens(TSqlParser.ALL); }
		public ITerminalNode ALL(int i) {
			return GetToken(TSqlParser.ALL, i);
		}
		public ITerminalNode IPV4_ADDR() { return GetToken(TSqlParser.IPV4_ADDR, 0); }
		public ITerminalNode IPV6_ADDR() { return GetToken(TSqlParser.IPV6_ADDR, 0); }
		public ITerminalNode WINDOWS() { return GetToken(TSqlParser.WINDOWS, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode MESSAGE_FORWARDING() { return GetToken(TSqlParser.MESSAGE_FORWARDING, 0); }
		public ITerminalNode MESSAGE_FORWARD_SIZE() { return GetToken(TSqlParser.MESSAGE_FORWARD_SIZE, 0); }
		public ITerminalNode STARTED() { return GetToken(TSqlParser.STARTED, 0); }
		public ITerminalNode STOPPED() { return GetToken(TSqlParser.STOPPED, 0); }
		public ITerminalNode[] DISABLED() { return GetTokens(TSqlParser.DISABLED); }
		public ITerminalNode DISABLED(int i) {
			return GetToken(TSqlParser.DISABLED, i);
		}
		public ITerminalNode SUPPORTED() { return GetToken(TSqlParser.SUPPORTED, 0); }
		public ITerminalNode REQUIRED() { return GetToken(TSqlParser.REQUIRED, 0); }
		public ITerminalNode ENABLED() { return GetToken(TSqlParser.ENABLED, 0); }
		public ITerminalNode NTLM() { return GetToken(TSqlParser.NTLM, 0); }
		public ITerminalNode KERBEROS() { return GetToken(TSqlParser.KERBEROS, 0); }
		public ITerminalNode NEGOTIATE() { return GetToken(TSqlParser.NEGOTIATE, 0); }
		public ITerminalNode ALGORITHM() { return GetToken(TSqlParser.ALGORITHM, 0); }
		public ITerminalNode AES() { return GetToken(TSqlParser.AES, 0); }
		public ITerminalNode RC4() { return GetToken(TSqlParser.RC4, 0); }
		public Alter_endpointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_endpoint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_endpoint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_endpoint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_endpoint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_endpointContext alter_endpoint() {
		Alter_endpointContext _localctx = new Alter_endpointContext(_ctx, State);
		EnterRule(_localctx, 530, RULE_alter_endpoint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6917; Match(ALTER);
			State = 6918; Match(ENDPOINT);
			State = 6919; _localctx.endpointname = id();
			State = 6922;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AUTHORIZATION) {
				{
				State = 6920; Match(AUTHORIZATION);
				State = 6921; _localctx.login = id();
				}
			}

			State = 6931;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==STATE) {
				{
				State = 6924; Match(STATE);
				State = 6925; Match(EQUAL);
				State = 6929;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case STARTED:
					{
					State = 6926; _localctx.state = Match(STARTED);
					}
					break;
				case STOPPED:
					{
					State = 6927; _localctx.state = Match(STOPPED);
					}
					break;
				case DISABLED:
					{
					State = 6928; _localctx.state = Match(DISABLED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			State = 6933; Match(AS);
			State = 6934; Match(TCP);
			State = 6935; Match(LR_BRACKET);
			State = 6936; Match(LISTENER_PORT);
			State = 6937; Match(EQUAL);
			State = 6938; _localctx.port = Match(DECIMAL);
			State = 6943;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 6939; Match(COMMA);
				State = 6940; Match(LISTENER_IP);
				State = 6941; Match(EQUAL);
				State = 6942;
				_la = _input.La(1);
				if ( !(_la==ALL || _la==IPV4_ADDR || _la==IPV6_ADDR) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 6945; Match(RR_BRACKET);
			State = 7055;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,926,_ctx) ) {
			case 1:
				{
				State = 6946; Match(TSQL);
				}
				break;

			case 2:
				{
				State = 6947; Match(FOR);
				State = 6948; Match(SERVICE_BROKER);
				State = 6949; Match(LR_BRACKET);
				State = 6950; Match(AUTHENTICATION);
				State = 6951; Match(EQUAL);
				State = 6968;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case WINDOWS:
					{
					State = 6952; Match(WINDOWS);
					State = 6954;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (((((_la - 171)) & ~0x3f) == 0 && ((1L << (_la - 171)) & ((1L << (KERBEROS - 171)) | (1L << (NEGOTIATE - 171)) | (1L << (NTLM - 171)))) != 0)) {
						{
						State = 6953;
						_la = _input.La(1);
						if ( !(((((_la - 171)) & ~0x3f) == 0 && ((1L << (_la - 171)) & ((1L << (KERBEROS - 171)) | (1L << (NEGOTIATE - 171)) | (1L << (NTLM - 171)))) != 0)) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
					}

					State = 6958;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==CERTIFICATE) {
						{
						State = 6956; Match(CERTIFICATE);
						State = 6957; _localctx.cert_name = id();
						}
					}

					}
					break;
				case CERTIFICATE:
					{
					State = 6960; Match(CERTIFICATE);
					State = 6961; _localctx.cert_name = id();
					State = 6963;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WINDOWS) {
						{
						State = 6962; Match(WINDOWS);
						}
					}

					State = 6966;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (((((_la - 171)) & ~0x3f) == 0 && ((1L << (_la - 171)) & ((1L << (KERBEROS - 171)) | (1L << (NEGOTIATE - 171)) | (1L << (NTLM - 171)))) != 0)) {
						{
						State = 6965;
						_la = _input.La(1);
						if ( !(((((_la - 171)) & ~0x3f) == 0 && ((1L << (_la - 171)) & ((1L << (KERBEROS - 171)) | (1L << (NEGOTIATE - 171)) | (1L << (NTLM - 171)))) != 0)) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 6987;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,911,_ctx) ) {
				case 1:
					{
					State = 6971;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==COMMA) {
						{
						State = 6970; Match(COMMA);
						}
					}

					State = 6973; Match(ENCRYPTION);
					State = 6974; Match(EQUAL);
					State = 6975;
					_la = _input.La(1);
					if ( !(_la==REQUIRED || _la==SUPPORTED || _la==DISABLED) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 6985;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==ALGORITHM) {
						{
						State = 6976; Match(ALGORITHM);
						State = 6983;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,909,_ctx) ) {
						case 1:
							{
							State = 6977; Match(AES);
							}
							break;

						case 2:
							{
							State = 6978; Match(RC4);
							}
							break;

						case 3:
							{
							State = 6979; Match(AES);
							State = 6980; Match(RC4);
							}
							break;

						case 4:
							{
							State = 6981; Match(RC4);
							State = 6982; Match(AES);
							}
							break;
						}
						}
					}

					}
					break;
				}
				State = 6995;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,913,_ctx) ) {
				case 1:
					{
					State = 6990;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==COMMA) {
						{
						State = 6989; Match(COMMA);
						}
					}

					State = 6992; Match(MESSAGE_FORWARDING);
					State = 6993; Match(EQUAL);
					State = 6994;
					_la = _input.La(1);
					if ( !(_la==ENABLED || _la==DISABLED) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 7003;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==MESSAGE_FORWARD_SIZE || _la==COMMA) {
					{
					State = 6998;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==COMMA) {
						{
						State = 6997; Match(COMMA);
						}
					}

					State = 7000; Match(MESSAGE_FORWARD_SIZE);
					State = 7001; Match(EQUAL);
					State = 7002; Match(DECIMAL);
					}
				}

				State = 7005; Match(RR_BRACKET);
				}
				break;

			case 3:
				{
				State = 7006; Match(FOR);
				State = 7007; Match(DATABASE_MIRRORING);
				State = 7008; Match(LR_BRACKET);
				State = 7009; Match(AUTHENTICATION);
				State = 7010; Match(EQUAL);
				State = 7027;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case WINDOWS:
					{
					State = 7011; Match(WINDOWS);
					State = 7013;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (((((_la - 171)) & ~0x3f) == 0 && ((1L << (_la - 171)) & ((1L << (KERBEROS - 171)) | (1L << (NEGOTIATE - 171)) | (1L << (NTLM - 171)))) != 0)) {
						{
						State = 7012;
						_la = _input.La(1);
						if ( !(((((_la - 171)) & ~0x3f) == 0 && ((1L << (_la - 171)) & ((1L << (KERBEROS - 171)) | (1L << (NEGOTIATE - 171)) | (1L << (NTLM - 171)))) != 0)) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
					}

					State = 7017;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==CERTIFICATE) {
						{
						State = 7015; Match(CERTIFICATE);
						State = 7016; _localctx.cert_name = id();
						}
					}

					}
					break;
				case CERTIFICATE:
					{
					State = 7019; Match(CERTIFICATE);
					State = 7020; _localctx.cert_name = id();
					State = 7022;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WINDOWS) {
						{
						State = 7021; Match(WINDOWS);
						}
					}

					State = 7025;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (((((_la - 171)) & ~0x3f) == 0 && ((1L << (_la - 171)) & ((1L << (KERBEROS - 171)) | (1L << (NEGOTIATE - 171)) | (1L << (NTLM - 171)))) != 0)) {
						{
						State = 7024;
						_la = _input.La(1);
						if ( !(((((_la - 171)) & ~0x3f) == 0 && ((1L << (_la - 171)) & ((1L << (KERBEROS - 171)) | (1L << (NEGOTIATE - 171)) | (1L << (NTLM - 171)))) != 0)) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 7046;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,924,_ctx) ) {
				case 1:
					{
					State = 7030;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==COMMA) {
						{
						State = 7029; Match(COMMA);
						}
					}

					State = 7032; Match(ENCRYPTION);
					State = 7033; Match(EQUAL);
					State = 7034;
					_la = _input.La(1);
					if ( !(_la==REQUIRED || _la==SUPPORTED || _la==DISABLED) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 7044;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==ALGORITHM) {
						{
						State = 7035; Match(ALGORITHM);
						State = 7042;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,922,_ctx) ) {
						case 1:
							{
							State = 7036; Match(AES);
							}
							break;

						case 2:
							{
							State = 7037; Match(RC4);
							}
							break;

						case 3:
							{
							State = 7038; Match(AES);
							State = 7039; Match(RC4);
							}
							break;

						case 4:
							{
							State = 7040; Match(RC4);
							State = 7041; Match(AES);
							}
							break;
						}
						}
					}

					}
					break;
				}
				State = 7049;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 7048; Match(COMMA);
					}
				}

				State = 7051; Match(ROLE);
				State = 7052; Match(EQUAL);
				State = 7053;
				_la = _input.La(1);
				if ( !(_la==ALL || _la==WITNESS || _la==PARTNER) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 7054; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Database_mirroring_optionContext : ParserRuleContext {
		public Mirroring_set_optionContext mirroring_set_option() {
			return GetRuleContext<Mirroring_set_optionContext>(0);
		}
		public Database_mirroring_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_database_mirroring_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDatabase_mirroring_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDatabase_mirroring_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatabase_mirroring_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Database_mirroring_optionContext database_mirroring_option() {
		Database_mirroring_optionContext _localctx = new Database_mirroring_optionContext(_ctx, State);
		EnterRule(_localctx, 532, RULE_database_mirroring_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7057; mirroring_set_option();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mirroring_set_optionContext : ParserRuleContext {
		public Mirroring_partnerContext mirroring_partner() {
			return GetRuleContext<Mirroring_partnerContext>(0);
		}
		public Partner_optionContext partner_option() {
			return GetRuleContext<Partner_optionContext>(0);
		}
		public Mirroring_witnessContext mirroring_witness() {
			return GetRuleContext<Mirroring_witnessContext>(0);
		}
		public Witness_optionContext witness_option() {
			return GetRuleContext<Witness_optionContext>(0);
		}
		public Mirroring_set_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mirroring_set_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMirroring_set_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMirroring_set_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMirroring_set_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Mirroring_set_optionContext mirroring_set_option() {
		Mirroring_set_optionContext _localctx = new Mirroring_set_optionContext(_ctx, State);
		EnterRule(_localctx, 534, RULE_mirroring_set_option);
		try {
			State = 7065;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case PARTNER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7059; mirroring_partner();
				State = 7060; partner_option();
				}
				break;
			case WITNESS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7062; mirroring_witness();
				State = 7063; witness_option();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mirroring_partnerContext : ParserRuleContext {
		public ITerminalNode PARTNER() { return GetToken(TSqlParser.PARTNER, 0); }
		public Mirroring_partnerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mirroring_partner; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMirroring_partner(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMirroring_partner(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMirroring_partner(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Mirroring_partnerContext mirroring_partner() {
		Mirroring_partnerContext _localctx = new Mirroring_partnerContext(_ctx, State);
		EnterRule(_localctx, 536, RULE_mirroring_partner);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7067; Match(PARTNER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mirroring_witnessContext : ParserRuleContext {
		public ITerminalNode WITNESS() { return GetToken(TSqlParser.WITNESS, 0); }
		public Mirroring_witnessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mirroring_witness; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMirroring_witness(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMirroring_witness(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMirroring_witness(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Mirroring_witnessContext mirroring_witness() {
		Mirroring_witnessContext _localctx = new Mirroring_witnessContext(_ctx, State);
		EnterRule(_localctx, 538, RULE_mirroring_witness);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7069; Match(WITNESS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Witness_partner_equalContext : ParserRuleContext {
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public Witness_partner_equalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_witness_partner_equal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWitness_partner_equal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWitness_partner_equal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWitness_partner_equal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Witness_partner_equalContext witness_partner_equal() {
		Witness_partner_equalContext _localctx = new Witness_partner_equalContext(_ctx, State);
		EnterRule(_localctx, 540, RULE_witness_partner_equal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7071; Match(EQUAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partner_optionContext : ParserRuleContext {
		public Witness_partner_equalContext witness_partner_equal() {
			return GetRuleContext<Witness_partner_equalContext>(0);
		}
		public Partner_serverContext partner_server() {
			return GetRuleContext<Partner_serverContext>(0);
		}
		public ITerminalNode FAILOVER() { return GetToken(TSqlParser.FAILOVER, 0); }
		public ITerminalNode FORCE_SERVICE_ALLOW_DATA_LOSS() { return GetToken(TSqlParser.FORCE_SERVICE_ALLOW_DATA_LOSS, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode RESUME() { return GetToken(TSqlParser.RESUME, 0); }
		public ITerminalNode SAFETY() { return GetToken(TSqlParser.SAFETY, 0); }
		public ITerminalNode FULL() { return GetToken(TSqlParser.FULL, 0); }
		public ITerminalNode SUSPEND() { return GetToken(TSqlParser.SUSPEND, 0); }
		public ITerminalNode TIMEOUT() { return GetToken(TSqlParser.TIMEOUT, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Partner_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partner_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPartner_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPartner_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartner_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Partner_optionContext partner_option() {
		Partner_optionContext _localctx = new Partner_optionContext(_ctx, State);
		EnterRule(_localctx, 542, RULE_partner_option);
		int _la;
		try {
			State = 7085;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case EQUAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7073; witness_partner_equal();
				State = 7074; partner_server();
				}
				break;
			case FAILOVER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7076; Match(FAILOVER);
				}
				break;
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7077; Match(FORCE_SERVICE_ALLOW_DATA_LOSS);
				}
				break;
			case OFF:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7078; Match(OFF);
				}
				break;
			case RESUME:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7079; Match(RESUME);
				}
				break;
			case SAFETY:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7080; Match(SAFETY);
				State = 7081;
				_la = _input.La(1);
				if ( !(_la==FULL || _la==OFF) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			case SUSPEND:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7082; Match(SUSPEND);
				}
				break;
			case TIMEOUT:
				EnterOuterAlt(_localctx, 8);
				{
				State = 7083; Match(TIMEOUT);
				State = 7084; Match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Witness_optionContext : ParserRuleContext {
		public Witness_partner_equalContext witness_partner_equal() {
			return GetRuleContext<Witness_partner_equalContext>(0);
		}
		public Witness_serverContext witness_server() {
			return GetRuleContext<Witness_serverContext>(0);
		}
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Witness_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_witness_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWitness_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWitness_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWitness_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Witness_optionContext witness_option() {
		Witness_optionContext _localctx = new Witness_optionContext(_ctx, State);
		EnterRule(_localctx, 544, RULE_witness_option);
		try {
			State = 7091;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case EQUAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7087; witness_partner_equal();
				State = 7088; witness_server();
				}
				break;
			case OFF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7090; Match(OFF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Witness_serverContext : ParserRuleContext {
		public Partner_serverContext partner_server() {
			return GetRuleContext<Partner_serverContext>(0);
		}
		public Witness_serverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_witness_server; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWitness_server(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWitness_server(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWitness_server(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Witness_serverContext witness_server() {
		Witness_serverContext _localctx = new Witness_serverContext(_ctx, State);
		EnterRule(_localctx, 546, RULE_witness_server);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7093; partner_server();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partner_serverContext : ParserRuleContext {
		public Partner_server_tcp_prefixContext partner_server_tcp_prefix() {
			return GetRuleContext<Partner_server_tcp_prefixContext>(0);
		}
		public HostContext host() {
			return GetRuleContext<HostContext>(0);
		}
		public Mirroring_host_port_seperatorContext mirroring_host_port_seperator() {
			return GetRuleContext<Mirroring_host_port_seperatorContext>(0);
		}
		public Port_numberContext port_number() {
			return GetRuleContext<Port_numberContext>(0);
		}
		public Partner_serverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partner_server; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPartner_server(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPartner_server(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartner_server(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Partner_serverContext partner_server() {
		Partner_serverContext _localctx = new Partner_serverContext(_ctx, State);
		EnterRule(_localctx, 548, RULE_partner_server);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7095; partner_server_tcp_prefix();
			State = 7096; host();
			State = 7097; mirroring_host_port_seperator();
			State = 7098; port_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mirroring_host_port_seperatorContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(TSqlParser.COLON, 0); }
		public Mirroring_host_port_seperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mirroring_host_port_seperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMirroring_host_port_seperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMirroring_host_port_seperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMirroring_host_port_seperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Mirroring_host_port_seperatorContext mirroring_host_port_seperator() {
		Mirroring_host_port_seperatorContext _localctx = new Mirroring_host_port_seperatorContext(_ctx, State);
		EnterRule(_localctx, 550, RULE_mirroring_host_port_seperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7100; Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partner_server_tcp_prefixContext : ParserRuleContext {
		public ITerminalNode TCP() { return GetToken(TSqlParser.TCP, 0); }
		public ITerminalNode COLON() { return GetToken(TSqlParser.COLON, 0); }
		public ITerminalNode DOUBLE_FORWARD_SLASH() { return GetToken(TSqlParser.DOUBLE_FORWARD_SLASH, 0); }
		public Partner_server_tcp_prefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partner_server_tcp_prefix; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPartner_server_tcp_prefix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPartner_server_tcp_prefix(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartner_server_tcp_prefix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Partner_server_tcp_prefixContext partner_server_tcp_prefix() {
		Partner_server_tcp_prefixContext _localctx = new Partner_server_tcp_prefixContext(_ctx, State);
		EnterRule(_localctx, 552, RULE_partner_server_tcp_prefix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7102; Match(TCP);
			State = 7103; Match(COLON);
			State = 7104; Match(DOUBLE_FORWARD_SLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Port_numberContext : ParserRuleContext {
		public IToken port;
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Port_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_port_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPort_number(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPort_number(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPort_number(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Port_numberContext port_number() {
		Port_numberContext _localctx = new Port_numberContext(_ctx, State);
		EnterRule(_localctx, 554, RULE_port_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7106; _localctx.port = Match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HostContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public HostContext host() {
			return GetRuleContext<HostContext>(0);
		}
		public HostContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_host; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterHost(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitHost(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHost(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HostContext host() {
		HostContext _localctx = new HostContext(_ctx, State);
		EnterRule(_localctx, 556, RULE_host);
		try {
			State = 7118;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,931,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7108; id();
				State = 7109; Match(DOT);
				State = 7110; host();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7116;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,930,_ctx) ) {
				case 1:
					{
					State = 7112; id();
					State = 7113; Match(DOT);
					}
					break;

				case 2:
					{
					State = 7115; id();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Date_correlation_optimization_optionContext : ParserRuleContext {
		public ITerminalNode DATE_CORRELATION_OPTIMIZATION() { return GetToken(TSqlParser.DATE_CORRELATION_OPTIMIZATION, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public Date_correlation_optimization_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_date_correlation_optimization_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDate_correlation_optimization_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDate_correlation_optimization_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDate_correlation_optimization_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Date_correlation_optimization_optionContext date_correlation_optimization_option() {
		Date_correlation_optimization_optionContext _localctx = new Date_correlation_optimization_optionContext(_ctx, State);
		EnterRule(_localctx, 558, RULE_date_correlation_optimization_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7120; Match(DATE_CORRELATION_OPTIMIZATION);
			State = 7121; on_off();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Db_encryption_optionContext : ParserRuleContext {
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public Db_encryption_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_db_encryption_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDb_encryption_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDb_encryption_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDb_encryption_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Db_encryption_optionContext db_encryption_option() {
		Db_encryption_optionContext _localctx = new Db_encryption_optionContext(_ctx, State);
		EnterRule(_localctx, 560, RULE_db_encryption_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7123; Match(ENCRYPTION);
			State = 7124; on_off();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Db_state_optionContext : ParserRuleContext {
		public ITerminalNode ONLINE() { return GetToken(TSqlParser.ONLINE, 0); }
		public ITerminalNode OFFLINE() { return GetToken(TSqlParser.OFFLINE, 0); }
		public ITerminalNode EMERGENCY() { return GetToken(TSqlParser.EMERGENCY, 0); }
		public Db_state_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_db_state_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDb_state_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDb_state_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDb_state_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Db_state_optionContext db_state_option() {
		Db_state_optionContext _localctx = new Db_state_optionContext(_ctx, State);
		EnterRule(_localctx, 562, RULE_db_state_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7126;
			_la = _input.La(1);
			if ( !(_la==EMERGENCY || _la==OFFLINE || _la==ONLINE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Db_update_optionContext : ParserRuleContext {
		public ITerminalNode READ_ONLY() { return GetToken(TSqlParser.READ_ONLY, 0); }
		public ITerminalNode READ_WRITE() { return GetToken(TSqlParser.READ_WRITE, 0); }
		public Db_update_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_db_update_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDb_update_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDb_update_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDb_update_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Db_update_optionContext db_update_option() {
		Db_update_optionContext _localctx = new Db_update_optionContext(_ctx, State);
		EnterRule(_localctx, 564, RULE_db_update_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7128;
			_la = _input.La(1);
			if ( !(_la==READ_ONLY || _la==READ_WRITE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Db_user_access_optionContext : ParserRuleContext {
		public ITerminalNode SINGLE_USER() { return GetToken(TSqlParser.SINGLE_USER, 0); }
		public ITerminalNode RESTRICTED_USER() { return GetToken(TSqlParser.RESTRICTED_USER, 0); }
		public ITerminalNode MULTI_USER() { return GetToken(TSqlParser.MULTI_USER, 0); }
		public Db_user_access_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_db_user_access_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDb_user_access_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDb_user_access_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDb_user_access_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Db_user_access_optionContext db_user_access_option() {
		Db_user_access_optionContext _localctx = new Db_user_access_optionContext(_ctx, State);
		EnterRule(_localctx, 566, RULE_db_user_access_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7130;
			_la = _input.La(1);
			if ( !(_la==MULTI_USER || _la==RESTRICTED_USER || _la==SINGLE_USER) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delayed_durability_optionContext : ParserRuleContext {
		public ITerminalNode DELAYED_DURABILITY() { return GetToken(TSqlParser.DELAYED_DURABILITY, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode DISABLED() { return GetToken(TSqlParser.DISABLED, 0); }
		public ITerminalNode ALLOWED() { return GetToken(TSqlParser.ALLOWED, 0); }
		public ITerminalNode FORCED() { return GetToken(TSqlParser.FORCED, 0); }
		public Delayed_durability_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delayed_durability_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDelayed_durability_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDelayed_durability_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelayed_durability_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delayed_durability_optionContext delayed_durability_option() {
		Delayed_durability_optionContext _localctx = new Delayed_durability_optionContext(_ctx, State);
		EnterRule(_localctx, 568, RULE_delayed_durability_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7132; Match(DELAYED_DURABILITY);
			State = 7133; Match(EQUAL);
			State = 7134;
			_la = _input.La(1);
			if ( !(_la==ALLOWED || _la==DISABLED || _la==FORCED) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class External_access_optionContext : ParserRuleContext {
		public ITerminalNode DB_CHAINING() { return GetToken(TSqlParser.DB_CHAINING, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode TRUSTWORTHY() { return GetToken(TSqlParser.TRUSTWORTHY, 0); }
		public ITerminalNode DEFAULT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode DEFAULT_FULLTEXT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0); }
		public ITerminalNode NESTED_TRIGGERS() { return GetToken(TSqlParser.NESTED_TRIGGERS, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode TRANSFORM_NOISE_WORDS() { return GetToken(TSqlParser.TRANSFORM_NOISE_WORDS, 0); }
		public ITerminalNode TWO_DIGIT_YEAR_CUTOFF() { return GetToken(TSqlParser.TWO_DIGIT_YEAR_CUTOFF, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public External_access_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_external_access_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExternal_access_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExternal_access_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternal_access_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public External_access_optionContext external_access_option() {
		External_access_optionContext _localctx = new External_access_optionContext(_ctx, State);
		EnterRule(_localctx, 570, RULE_external_access_option);
		int _la;
		try {
			State = 7161;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case DB_CHAINING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7136; Match(DB_CHAINING);
				State = 7137; on_off();
				}
				break;
			case TRUSTWORTHY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7138; Match(TRUSTWORTHY);
				State = 7139; on_off();
				}
				break;
			case DEFAULT_LANGUAGE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7140; Match(DEFAULT_LANGUAGE);
				State = 7141; Match(EQUAL);
				State = 7144;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,932,_ctx) ) {
				case 1:
					{
					State = 7142; id();
					}
					break;

				case 2:
					{
					State = 7143; Match(STRING);
					}
					break;
				}
				}
				break;
			case DEFAULT_FULLTEXT_LANGUAGE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7146; Match(DEFAULT_FULLTEXT_LANGUAGE);
				State = 7147; Match(EQUAL);
				State = 7150;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,933,_ctx) ) {
				case 1:
					{
					State = 7148; id();
					}
					break;

				case 2:
					{
					State = 7149; Match(STRING);
					}
					break;
				}
				}
				break;
			case NESTED_TRIGGERS:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7152; Match(NESTED_TRIGGERS);
				State = 7153; Match(EQUAL);
				State = 7154;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			case TRANSFORM_NOISE_WORDS:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7155; Match(TRANSFORM_NOISE_WORDS);
				State = 7156; Match(EQUAL);
				State = 7157;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			case TWO_DIGIT_YEAR_CUTOFF:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7158; Match(TWO_DIGIT_YEAR_CUTOFF);
				State = 7159; Match(EQUAL);
				State = 7160; Match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Hadr_optionsContext : ParserRuleContext {
		public IdContext availability_group_name;
		public ITerminalNode HADR() { return GetToken(TSqlParser.HADR, 0); }
		public ITerminalNode SUSPEND() { return GetToken(TSqlParser.SUSPEND, 0); }
		public ITerminalNode RESUME() { return GetToken(TSqlParser.RESUME, 0); }
		public ITerminalNode AVAILABILITY() { return GetToken(TSqlParser.AVAILABILITY, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Hadr_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hadr_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterHadr_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitHadr_options(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHadr_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Hadr_optionsContext hadr_options() {
		Hadr_optionsContext _localctx = new Hadr_optionsContext(_ctx, State);
		EnterRule(_localctx, 572, RULE_hadr_options);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7163; Match(HADR);
			State = 7172;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case OFF:
			case AVAILABILITY:
				{
				State = 7169;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case AVAILABILITY:
					{
					State = 7164; Match(AVAILABILITY);
					State = 7165; Match(GROUP);
					State = 7166; Match(EQUAL);
					State = 7167; _localctx.availability_group_name = id();
					}
					break;
				case OFF:
					{
					State = 7168; Match(OFF);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case RESUME:
			case SUSPEND:
				{
				State = 7171;
				_la = _input.La(1);
				if ( !(_la==RESUME || _la==SUSPEND) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mixed_page_allocation_optionContext : ParserRuleContext {
		public ITerminalNode MIXED_PAGE_ALLOCATION() { return GetToken(TSqlParser.MIXED_PAGE_ALLOCATION, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Mixed_page_allocation_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mixed_page_allocation_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMixed_page_allocation_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMixed_page_allocation_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMixed_page_allocation_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Mixed_page_allocation_optionContext mixed_page_allocation_option() {
		Mixed_page_allocation_optionContext _localctx = new Mixed_page_allocation_optionContext(_ctx, State);
		EnterRule(_localctx, 574, RULE_mixed_page_allocation_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7174; Match(MIXED_PAGE_ALLOCATION);
			State = 7175;
			_la = _input.La(1);
			if ( !(_la==OFF || _la==ON) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameterization_optionContext : ParserRuleContext {
		public ITerminalNode PARAMETERIZATION() { return GetToken(TSqlParser.PARAMETERIZATION, 0); }
		public ITerminalNode SIMPLE() { return GetToken(TSqlParser.SIMPLE, 0); }
		public ITerminalNode FORCED() { return GetToken(TSqlParser.FORCED, 0); }
		public Parameterization_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterization_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterParameterization_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitParameterization_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterization_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameterization_optionContext parameterization_option() {
		Parameterization_optionContext _localctx = new Parameterization_optionContext(_ctx, State);
		EnterRule(_localctx, 576, RULE_parameterization_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7177; Match(PARAMETERIZATION);
			State = 7178;
			_la = _input.La(1);
			if ( !(_la==FORCED || _la==SIMPLE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Recovery_optionContext : ParserRuleContext {
		public ITerminalNode RECOVERY() { return GetToken(TSqlParser.RECOVERY, 0); }
		public ITerminalNode FULL() { return GetToken(TSqlParser.FULL, 0); }
		public ITerminalNode BULK_LOGGED() { return GetToken(TSqlParser.BULK_LOGGED, 0); }
		public ITerminalNode SIMPLE() { return GetToken(TSqlParser.SIMPLE, 0); }
		public ITerminalNode TORN_PAGE_DETECTION() { return GetToken(TSqlParser.TORN_PAGE_DETECTION, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode PAGE_VERIFY() { return GetToken(TSqlParser.PAGE_VERIFY, 0); }
		public ITerminalNode CHECKSUM() { return GetToken(TSqlParser.CHECKSUM, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public Recovery_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recovery_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRecovery_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRecovery_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecovery_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Recovery_optionContext recovery_option() {
		Recovery_optionContext _localctx = new Recovery_optionContext(_ctx, State);
		EnterRule(_localctx, 578, RULE_recovery_option);
		int _la;
		try {
			State = 7186;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case RECOVERY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7180; Match(RECOVERY);
				State = 7181;
				_la = _input.La(1);
				if ( !(_la==FULL || _la==BULK_LOGGED || _la==SIMPLE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			case TORN_PAGE_DETECTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7182; Match(TORN_PAGE_DETECTION);
				State = 7183; on_off();
				}
				break;
			case PAGE_VERIFY:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7184; Match(PAGE_VERIFY);
				State = 7185;
				_la = _input.La(1);
				if ( !(_la==NONE || _la==CHECKSUM || _la==TORN_PAGE_DETECTION) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Service_broker_optionContext : ParserRuleContext {
		public ITerminalNode ENABLE_BROKER() { return GetToken(TSqlParser.ENABLE_BROKER, 0); }
		public ITerminalNode DISABLE_BROKER() { return GetToken(TSqlParser.DISABLE_BROKER, 0); }
		public ITerminalNode NEW_BROKER() { return GetToken(TSqlParser.NEW_BROKER, 0); }
		public ITerminalNode ERROR_BROKER_CONVERSATIONS() { return GetToken(TSqlParser.ERROR_BROKER_CONVERSATIONS, 0); }
		public ITerminalNode HONOR_BROKER_PRIORITY() { return GetToken(TSqlParser.HONOR_BROKER_PRIORITY, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public Service_broker_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_service_broker_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterService_broker_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitService_broker_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitService_broker_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Service_broker_optionContext service_broker_option() {
		Service_broker_optionContext _localctx = new Service_broker_optionContext(_ctx, State);
		EnterRule(_localctx, 580, RULE_service_broker_option);
		try {
			State = 7194;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ENABLE_BROKER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7188; Match(ENABLE_BROKER);
				}
				break;
			case DISABLE_BROKER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7189; Match(DISABLE_BROKER);
				}
				break;
			case NEW_BROKER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7190; Match(NEW_BROKER);
				}
				break;
			case ERROR_BROKER_CONVERSATIONS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7191; Match(ERROR_BROKER_CONVERSATIONS);
				}
				break;
			case HONOR_BROKER_PRIORITY:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7192; Match(HONOR_BROKER_PRIORITY);
				State = 7193; on_off();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Snapshot_optionContext : ParserRuleContext {
		public ITerminalNode ALLOW_SNAPSHOT_ISOLATION() { return GetToken(TSqlParser.ALLOW_SNAPSHOT_ISOLATION, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode READ_COMMITTED_SNAPSHOT() { return GetToken(TSqlParser.READ_COMMITTED_SNAPSHOT, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT() { return GetToken(TSqlParser.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public Snapshot_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_snapshot_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSnapshot_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSnapshot_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSnapshot_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Snapshot_optionContext snapshot_option() {
		Snapshot_optionContext _localctx = new Snapshot_optionContext(_ctx, State);
		EnterRule(_localctx, 582, RULE_snapshot_option);
		int _la;
		try {
			State = 7203;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ALLOW_SNAPSHOT_ISOLATION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7196; Match(ALLOW_SNAPSHOT_ISOLATION);
				State = 7197; on_off();
				}
				break;
			case READ_COMMITTED_SNAPSHOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7198; Match(READ_COMMITTED_SNAPSHOT);
				State = 7199;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7200; Match(MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT);
				State = 7201; Match(EQUAL);
				State = 7202;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_optionContext : ParserRuleContext {
		public ITerminalNode ANSI_NULL_DEFAULT() { return GetToken(TSqlParser.ANSI_NULL_DEFAULT, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode ANSI_NULLS() { return GetToken(TSqlParser.ANSI_NULLS, 0); }
		public ITerminalNode ANSI_PADDING() { return GetToken(TSqlParser.ANSI_PADDING, 0); }
		public ITerminalNode ANSI_WARNINGS() { return GetToken(TSqlParser.ANSI_WARNINGS, 0); }
		public ITerminalNode ARITHABORT() { return GetToken(TSqlParser.ARITHABORT, 0); }
		public ITerminalNode COMPATIBILITY_LEVEL() { return GetToken(TSqlParser.COMPATIBILITY_LEVEL, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode CONCAT_NULL_YIELDS_NULL() { return GetToken(TSqlParser.CONCAT_NULL_YIELDS_NULL, 0); }
		public ITerminalNode NUMERIC_ROUNDABORT() { return GetToken(TSqlParser.NUMERIC_ROUNDABORT, 0); }
		public ITerminalNode QUOTED_IDENTIFIER() { return GetToken(TSqlParser.QUOTED_IDENTIFIER, 0); }
		public ITerminalNode RECURSIVE_TRIGGERS() { return GetToken(TSqlParser.RECURSIVE_TRIGGERS, 0); }
		public Sql_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSql_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSql_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSql_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sql_optionContext sql_option() {
		Sql_optionContext _localctx = new Sql_optionContext(_ctx, State);
		EnterRule(_localctx, 584, RULE_sql_option);
		try {
			State = 7226;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ANSI_NULL_DEFAULT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7205; Match(ANSI_NULL_DEFAULT);
				State = 7206; on_off();
				}
				break;
			case ANSI_NULLS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7207; Match(ANSI_NULLS);
				State = 7208; on_off();
				}
				break;
			case ANSI_PADDING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7209; Match(ANSI_PADDING);
				State = 7210; on_off();
				}
				break;
			case ANSI_WARNINGS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7211; Match(ANSI_WARNINGS);
				State = 7212; on_off();
				}
				break;
			case ARITHABORT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7213; Match(ARITHABORT);
				State = 7214; on_off();
				}
				break;
			case COMPATIBILITY_LEVEL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7215; Match(COMPATIBILITY_LEVEL);
				State = 7216; Match(EQUAL);
				State = 7217; Match(DECIMAL);
				}
				break;
			case CONCAT_NULL_YIELDS_NULL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7218; Match(CONCAT_NULL_YIELDS_NULL);
				State = 7219; on_off();
				}
				break;
			case NUMERIC_ROUNDABORT:
				EnterOuterAlt(_localctx, 8);
				{
				State = 7220; Match(NUMERIC_ROUNDABORT);
				State = 7221; on_off();
				}
				break;
			case QUOTED_IDENTIFIER:
				EnterOuterAlt(_localctx, 9);
				{
				State = 7222; Match(QUOTED_IDENTIFIER);
				State = 7223; on_off();
				}
				break;
			case RECURSIVE_TRIGGERS:
				EnterOuterAlt(_localctx, 10);
				{
				State = 7224; Match(RECURSIVE_TRIGGERS);
				State = 7225; on_off();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Target_recovery_time_optionContext : ParserRuleContext {
		public ITerminalNode TARGET_RECOVERY_TIME() { return GetToken(TSqlParser.TARGET_RECOVERY_TIME, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode SECONDS() { return GetToken(TSqlParser.SECONDS, 0); }
		public ITerminalNode MINUTES() { return GetToken(TSqlParser.MINUTES, 0); }
		public Target_recovery_time_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_target_recovery_time_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTarget_recovery_time_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTarget_recovery_time_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTarget_recovery_time_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Target_recovery_time_optionContext target_recovery_time_option() {
		Target_recovery_time_optionContext _localctx = new Target_recovery_time_optionContext(_ctx, State);
		EnterRule(_localctx, 586, RULE_target_recovery_time_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7228; Match(TARGET_RECOVERY_TIME);
			State = 7229; Match(EQUAL);
			State = 7230; Match(DECIMAL);
			State = 7231;
			_la = _input.La(1);
			if ( !(_la==MINUTES || _la==SECONDS) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminationContext : ParserRuleContext {
		public IToken seconds;
		public ITerminalNode ROLLBACK() { return GetToken(TSqlParser.ROLLBACK, 0); }
		public ITerminalNode AFTER() { return GetToken(TSqlParser.AFTER, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode IMMEDIATE() { return GetToken(TSqlParser.IMMEDIATE, 0); }
		public ITerminalNode NO_WAIT() { return GetToken(TSqlParser.NO_WAIT, 0); }
		public TerminationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_termination; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTermination(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTermination(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermination(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TerminationContext termination() {
		TerminationContext _localctx = new TerminationContext(_ctx, State);
		EnterRule(_localctx, 588, RULE_termination);
		try {
			State = 7239;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,941,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7233; Match(ROLLBACK);
				State = 7234; Match(AFTER);
				State = 7235; _localctx.seconds = Match(DECIMAL);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7236; Match(ROLLBACK);
				State = 7237; Match(IMMEDIATE);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7238; Match(NO_WAIT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_indexContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public Drop_relational_or_xml_or_spatial_indexContext[] drop_relational_or_xml_or_spatial_index() {
			return GetRuleContexts<Drop_relational_or_xml_or_spatial_indexContext>();
		}
		public Drop_relational_or_xml_or_spatial_indexContext drop_relational_or_xml_or_spatial_index(int i) {
			return GetRuleContext<Drop_relational_or_xml_or_spatial_indexContext>(i);
		}
		public Drop_backward_compatible_indexContext[] drop_backward_compatible_index() {
			return GetRuleContexts<Drop_backward_compatible_indexContext>();
		}
		public Drop_backward_compatible_indexContext drop_backward_compatible_index(int i) {
			return GetRuleContext<Drop_backward_compatible_indexContext>(i);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_index; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_index(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_index(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_indexContext drop_index() {
		Drop_indexContext _localctx = new Drop_indexContext(_ctx, State);
		EnterRule(_localctx, 590, RULE_drop_index);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7241; Match(DROP);
			State = 7242; Match(INDEX);
			State = 7245;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IF) {
				{
				State = 7243; Match(IF);
				State = 7244; Match(EXISTS);
				}
			}

			State = 7263;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,945,_ctx) ) {
			case 1:
				{
				State = 7247; drop_relational_or_xml_or_spatial_index();
				State = 7252;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,943,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7248; Match(COMMA);
						State = 7249; drop_relational_or_xml_or_spatial_index();
						}
						} 
					}
					State = 7254;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,943,_ctx);
				}
				}
				break;

			case 2:
				{
				State = 7255; drop_backward_compatible_index();
				State = 7260;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,944,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7256; Match(COMMA);
						State = 7257; drop_backward_compatible_index();
						}
						} 
					}
					State = 7262;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,944,_ctx);
				}
				}
				break;
			}
			State = 7266;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,946,_ctx) ) {
			case 1:
				{
				State = 7265; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_relational_or_xml_or_spatial_indexContext : ParserRuleContext {
		public IdContext index_name;
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Schema_object_nameContext schema_object_name() {
			return GetRuleContext<Schema_object_nameContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_relational_or_xml_or_spatial_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_relational_or_xml_or_spatial_index; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_relational_or_xml_or_spatial_index(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_relational_or_xml_or_spatial_index(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_relational_or_xml_or_spatial_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_relational_or_xml_or_spatial_indexContext drop_relational_or_xml_or_spatial_index() {
		Drop_relational_or_xml_or_spatial_indexContext _localctx = new Drop_relational_or_xml_or_spatial_indexContext(_ctx, State);
		EnterRule(_localctx, 592, RULE_drop_relational_or_xml_or_spatial_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7268; _localctx.index_name = id();
			State = 7269; Match(ON);
			State = 7270; schema_object_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_backward_compatible_indexContext : ParserRuleContext {
		public IdContext owner_name;
		public IdContext table_or_view_name;
		public IdContext index_name;
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public Drop_backward_compatible_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_backward_compatible_index; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_backward_compatible_index(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_backward_compatible_index(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_backward_compatible_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_backward_compatible_indexContext drop_backward_compatible_index() {
		Drop_backward_compatible_indexContext _localctx = new Drop_backward_compatible_indexContext(_ctx, State);
		EnterRule(_localctx, 594, RULE_drop_backward_compatible_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7275;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,947,_ctx) ) {
			case 1:
				{
				State = 7272; _localctx.owner_name = id();
				State = 7273; Match(DOT);
				}
				break;
			}
			State = 7277; _localctx.table_or_view_name = id();
			State = 7278; Match(DOT);
			State = 7279; _localctx.index_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_procedureContext : ParserRuleContext {
		public IToken proc;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public Func_proc_name_schemaContext[] func_proc_name_schema() {
			return GetRuleContexts<Func_proc_name_schemaContext>();
		}
		public Func_proc_name_schemaContext func_proc_name_schema(int i) {
			return GetRuleContext<Func_proc_name_schemaContext>(i);
		}
		public ITerminalNode PROC() { return GetToken(TSqlParser.PROC, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(TSqlParser.PROCEDURE, 0); }
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_procedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_procedure; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_procedure(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_procedure(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_procedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_procedureContext drop_procedure() {
		Drop_procedureContext _localctx = new Drop_procedureContext(_ctx, State);
		EnterRule(_localctx, 596, RULE_drop_procedure);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7281; Match(DROP);
			State = 7282;
			_localctx.proc = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==PROC || _la==PROCEDURE) ) {
				_localctx.proc = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 7285;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IF) {
				{
				State = 7283; Match(IF);
				State = 7284; Match(EXISTS);
				}
			}

			State = 7287; func_proc_name_schema();
			State = 7292;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,949,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 7288; Match(COMMA);
					State = 7289; func_proc_name_schema();
					}
					} 
				}
				State = 7294;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,949,_ctx);
			}
			State = 7296;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,950,_ctx) ) {
			case 1:
				{
				State = 7295; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_triggerContext : ParserRuleContext {
		public Drop_dml_triggerContext drop_dml_trigger() {
			return GetRuleContext<Drop_dml_triggerContext>(0);
		}
		public Drop_ddl_triggerContext drop_ddl_trigger() {
			return GetRuleContext<Drop_ddl_triggerContext>(0);
		}
		public Drop_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_trigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_trigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_trigger(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_trigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_triggerContext drop_trigger() {
		Drop_triggerContext _localctx = new Drop_triggerContext(_ctx, State);
		EnterRule(_localctx, 598, RULE_drop_trigger);
		try {
			State = 7300;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,951,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7298; drop_dml_trigger();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7299; drop_ddl_trigger();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_dml_triggerContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		public Simple_nameContext[] simple_name() {
			return GetRuleContexts<Simple_nameContext>();
		}
		public Simple_nameContext simple_name(int i) {
			return GetRuleContext<Simple_nameContext>(i);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_dml_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_dml_trigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_dml_trigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_dml_trigger(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_dml_trigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_dml_triggerContext drop_dml_trigger() {
		Drop_dml_triggerContext _localctx = new Drop_dml_triggerContext(_ctx, State);
		EnterRule(_localctx, 600, RULE_drop_dml_trigger);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7302; Match(DROP);
			State = 7303; Match(TRIGGER);
			State = 7306;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IF) {
				{
				State = 7304; Match(IF);
				State = 7305; Match(EXISTS);
				}
			}

			State = 7308; simple_name();
			State = 7313;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,953,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 7309; Match(COMMA);
					State = 7310; simple_name();
					}
					} 
				}
				State = 7315;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,953,_ctx);
			}
			State = 7317;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,954,_ctx) ) {
			case 1:
				{
				State = 7316; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_ddl_triggerContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		public Simple_nameContext[] simple_name() {
			return GetRuleContexts<Simple_nameContext>();
		}
		public Simple_nameContext simple_name(int i) {
			return GetRuleContext<Simple_nameContext>(i);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_ddl_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_ddl_trigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_ddl_trigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_ddl_trigger(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_ddl_trigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_ddl_triggerContext drop_ddl_trigger() {
		Drop_ddl_triggerContext _localctx = new Drop_ddl_triggerContext(_ctx, State);
		EnterRule(_localctx, 602, RULE_drop_ddl_trigger);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7319; Match(DROP);
			State = 7320; Match(TRIGGER);
			State = 7323;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IF) {
				{
				State = 7321; Match(IF);
				State = 7322; Match(EXISTS);
				}
			}

			State = 7325; simple_name();
			State = 7330;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 7326; Match(COMMA);
				State = 7327; simple_name();
				}
				}
				State = 7332;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 7333; Match(ON);
			State = 7337;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case DATABASE:
				{
				State = 7334; Match(DATABASE);
				}
				break;
			case ALL:
				{
				State = 7335; Match(ALL);
				State = 7336; Match(SERVER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 7340;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,958,_ctx) ) {
			case 1:
				{
				State = 7339; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_functionContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode FUNCTION() { return GetToken(TSqlParser.FUNCTION, 0); }
		public Func_proc_name_schemaContext[] func_proc_name_schema() {
			return GetRuleContexts<Func_proc_name_schemaContext>();
		}
		public Func_proc_name_schemaContext func_proc_name_schema(int i) {
			return GetRuleContext<Func_proc_name_schemaContext>(i);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_function(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_functionContext drop_function() {
		Drop_functionContext _localctx = new Drop_functionContext(_ctx, State);
		EnterRule(_localctx, 604, RULE_drop_function);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7342; Match(DROP);
			State = 7343; Match(FUNCTION);
			State = 7346;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IF) {
				{
				State = 7344; Match(IF);
				State = 7345; Match(EXISTS);
				}
			}

			State = 7348; func_proc_name_schema();
			State = 7353;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,960,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 7349; Match(COMMA);
					State = 7350; func_proc_name_schema();
					}
					} 
				}
				State = 7355;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,960,_ctx);
			}
			State = 7357;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,961,_ctx) ) {
			case 1:
				{
				State = 7356; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_statisticsContext : ParserRuleContext {
		public IdContext name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode STATISTICS() { return GetToken(TSqlParser.STATISTICS, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Schema_object_nameContext[] schema_object_name() {
			return GetRuleContexts<Schema_object_nameContext>();
		}
		public Schema_object_nameContext schema_object_name(int i) {
			return GetRuleContext<Schema_object_nameContext>(i);
		}
		public Drop_statisticsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_statistics; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_statistics(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_statistics(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_statistics(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_statisticsContext drop_statistics() {
		Drop_statisticsContext _localctx = new Drop_statisticsContext(_ctx, State);
		EnterRule(_localctx, 606, RULE_drop_statistics);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7359; Match(DROP);
			State = 7360; Match(STATISTICS);
			State = 7370;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 7362;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,962,_ctx) ) {
					case 1:
						{
						State = 7361; Match(COMMA);
						}
						break;
					}
					State = 7367;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,963,_ctx) ) {
					case 1:
						{
						State = 7364; schema_object_name();
						State = 7365; Match(DOT);
						}
						break;
					}
					State = 7369; _localctx.name = id();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 7372;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,964,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 7374; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_tableContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public Schema_object_nameContext schema_object_name() {
			return GetRuleContext<Schema_object_nameContext>(0);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_table(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_tableContext drop_table() {
		Drop_tableContext _localctx = new Drop_tableContext(_ctx, State);
		EnterRule(_localctx, 608, RULE_drop_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7376; Match(DROP);
			State = 7377; Match(TABLE);
			State = 7380;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IF) {
				{
				State = 7378; Match(IF);
				State = 7379; Match(EXISTS);
				}
			}

			State = 7382; schema_object_name();
			State = 7384;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,966,_ctx) ) {
			case 1:
				{
				State = 7383; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_viewContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode VIEW() { return GetToken(TSqlParser.VIEW, 0); }
		public Simple_nameContext[] simple_name() {
			return GetRuleContexts<Simple_nameContext>();
		}
		public Simple_nameContext simple_name(int i) {
			return GetRuleContext<Simple_nameContext>(i);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_viewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_view; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_view(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_view(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_view(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_viewContext drop_view() {
		Drop_viewContext _localctx = new Drop_viewContext(_ctx, State);
		EnterRule(_localctx, 610, RULE_drop_view);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7386; Match(DROP);
			State = 7387; Match(VIEW);
			State = 7390;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IF) {
				{
				State = 7388; Match(IF);
				State = 7389; Match(EXISTS);
				}
			}

			State = 7392; simple_name();
			State = 7397;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,968,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 7393; Match(COMMA);
					State = 7394; simple_name();
					}
					} 
				}
				State = 7399;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,968,_ctx);
			}
			State = 7401;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,969,_ctx) ) {
			case 1:
				{
				State = 7400; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_typeContext : ParserRuleContext {
		public Simple_nameContext name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public Simple_nameContext simple_name() {
			return GetRuleContext<Simple_nameContext>(0);
		}
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public Null_notnullContext null_notnull() {
			return GetRuleContext<Null_notnullContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Column_def_table_constraintsContext column_def_table_constraints() {
			return GetRuleContext<Column_def_table_constraintsContext>(0);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Create_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_typeContext create_type() {
		Create_typeContext _localctx = new Create_typeContext(_ctx, State);
		EnterRule(_localctx, 612, RULE_create_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7403; Match(CREATE);
			State = 7404; Match(TYPE);
			State = 7405; _localctx.name = simple_name();
			State = 7410;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==FROM) {
				{
				State = 7406; Match(FROM);
				State = 7407; data_type();
				State = 7408; null_notnull();
				}
			}

			State = 7418;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 7412; Match(AS);
				State = 7413; Match(TABLE);
				State = 7414; Match(LR_BRACKET);
				State = 7415; column_def_table_constraints();
				State = 7416; Match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_typeContext : ParserRuleContext {
		public Simple_nameContext name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public Simple_nameContext simple_name() {
			return GetRuleContext<Simple_nameContext>(0);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_typeContext drop_type() {
		Drop_typeContext _localctx = new Drop_typeContext(_ctx, State);
		EnterRule(_localctx, 614, RULE_drop_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7420; Match(DROP);
			State = 7421; Match(TYPE);
			State = 7424;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IF) {
				{
				State = 7422; Match(IF);
				State = 7423; Match(EXISTS);
				}
			}

			State = 7426; _localctx.name = simple_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rowset_function_limitedContext : ParserRuleContext {
		public OpenqueryContext openquery() {
			return GetRuleContext<OpenqueryContext>(0);
		}
		public OpendatasourceContext opendatasource() {
			return GetRuleContext<OpendatasourceContext>(0);
		}
		public Rowset_function_limitedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowset_function_limited; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRowset_function_limited(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRowset_function_limited(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRowset_function_limited(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rowset_function_limitedContext rowset_function_limited() {
		Rowset_function_limitedContext _localctx = new Rowset_function_limitedContext(_ctx, State);
		EnterRule(_localctx, 616, RULE_rowset_function_limited);
		try {
			State = 7430;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case OPENQUERY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7428; openquery();
				}
				break;
			case OPENDATASOURCE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7429; opendatasource();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpenqueryContext : ParserRuleContext {
		public IdContext linked_server;
		public IToken query;
		public ITerminalNode OPENQUERY() { return GetToken(TSqlParser.OPENQUERY, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public OpenqueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_openquery; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOpenquery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOpenquery(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpenquery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpenqueryContext openquery() {
		OpenqueryContext _localctx = new OpenqueryContext(_ctx, State);
		EnterRule(_localctx, 618, RULE_openquery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7432; Match(OPENQUERY);
			State = 7433; Match(LR_BRACKET);
			State = 7434; _localctx.linked_server = id();
			State = 7435; Match(COMMA);
			State = 7436; _localctx.query = Match(STRING);
			State = 7437; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpendatasourceContext : ParserRuleContext {
		public IToken provider;
		public IToken init;
		public IdContext scheme;
		public ITerminalNode OPENDATASOURCE() { return GetToken(TSqlParser.OPENDATASOURCE, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public OpendatasourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opendatasource; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOpendatasource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOpendatasource(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpendatasource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpendatasourceContext opendatasource() {
		OpendatasourceContext _localctx = new OpendatasourceContext(_ctx, State);
		EnterRule(_localctx, 620, RULE_opendatasource);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7439; Match(OPENDATASOURCE);
			State = 7440; Match(LR_BRACKET);
			State = 7441; _localctx.provider = Match(STRING);
			State = 7442; Match(COMMA);
			State = 7443; _localctx.init = Match(STRING);
			State = 7444; Match(RR_BRACKET);
			State = 7445; Match(DOT);
			State = 7447;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,974,_ctx) ) {
			case 1:
				{
				State = 7446; database_name();
				}
				break;
			}
			State = 7449; Match(DOT);
			State = 7451;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,975,_ctx) ) {
			case 1:
				{
				State = 7450; _localctx.scheme = id();
				}
				break;
			}
			State = 7453; Match(DOT);
			{
			State = 7454; table_name();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_statementContext : ParserRuleContext {
		public IToken xml_namespace_uri;
		public ITerminalNode DECLARE() { return GetToken(TSqlParser.DECLARE, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Table_type_definitionContext table_type_definition() {
			return GetRuleContext<Table_type_definitionContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Declare_localContext[] declare_local() {
			return GetRuleContexts<Declare_localContext>();
		}
		public Declare_localContext declare_local(int i) {
			return GetRuleContext<Declare_localContext>(i);
		}
		public Xml_type_definitionContext xml_type_definition() {
			return GetRuleContext<Xml_type_definitionContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode XMLNAMESPACES() { return GetToken(TSqlParser.XMLNAMESPACES, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Declare_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDeclare_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDeclare_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declare_statementContext declare_statement() {
		Declare_statementContext _localctx = new Declare_statementContext(_ctx, State);
		EnterRule(_localctx, 622, RULE_declare_statement);
		int _la;
		try {
			int _alt;
			State = 7499;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,984,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7456; Match(DECLARE);
				State = 7457; Match(LOCAL_ID);
				State = 7459;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AS) {
					{
					State = 7458; Match(AS);
					}
				}

				State = 7461; table_type_definition();
				State = 7463;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,977,_ctx) ) {
				case 1:
					{
					State = 7462; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7465; Match(DECLARE);
				State = 7466; declare_local();
				State = 7471;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,978,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7467; Match(COMMA);
						State = 7468; declare_local();
						}
						} 
					}
					State = 7473;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,978,_ctx);
				}
				State = 7475;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,979,_ctx) ) {
				case 1:
					{
					State = 7474; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7477; Match(DECLARE);
				State = 7478; Match(LOCAL_ID);
				State = 7480;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AS) {
					{
					State = 7479; Match(AS);
					}
				}

				State = 7482; xml_type_definition();
				State = 7484;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,981,_ctx) ) {
				case 1:
					{
					State = 7483; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7486; Match(WITH);
				State = 7487; Match(XMLNAMESPACES);
				State = 7488; Match(LR_BRACKET);
				State = 7489; _localctx.xml_namespace_uri = Match(STRING);
				State = 7491;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 7490; Match(COMMA);
					}
				}

				State = 7493; Match(AS);
				State = 7494; id();
				State = 7495; Match(RR_BRACKET);
				State = 7497;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,983,_ctx) ) {
				case 1:
					{
					State = 7496; Match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cursor_statementContext : ParserRuleContext {
		public ITerminalNode CLOSE() { return GetToken(TSqlParser.CLOSE, 0); }
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public ITerminalNode GLOBAL() { return GetToken(TSqlParser.GLOBAL, 0); }
		public ITerminalNode DEALLOCATE() { return GetToken(TSqlParser.DEALLOCATE, 0); }
		public ITerminalNode CURSOR() { return GetToken(TSqlParser.CURSOR, 0); }
		public Declare_cursorContext declare_cursor() {
			return GetRuleContext<Declare_cursorContext>(0);
		}
		public Fetch_cursorContext fetch_cursor() {
			return GetRuleContext<Fetch_cursorContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(TSqlParser.OPEN, 0); }
		public Cursor_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursor_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCursor_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCursor_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursor_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cursor_statementContext cursor_statement() {
		Cursor_statementContext _localctx = new Cursor_statementContext(_ctx, State);
		EnterRule(_localctx, 624, RULE_cursor_statement);
		int _la;
		try {
			State = 7530;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case CLOSE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7501; Match(CLOSE);
				State = 7503;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,985,_ctx) ) {
				case 1:
					{
					State = 7502; Match(GLOBAL);
					}
					break;
				}
				State = 7505; cursor_name();
				State = 7507;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,986,_ctx) ) {
				case 1:
					{
					State = 7506; Match(SEMI);
					}
					break;
				}
				}
				break;
			case DEALLOCATE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7509; Match(DEALLOCATE);
				State = 7511;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,987,_ctx) ) {
				case 1:
					{
					State = 7510; Match(GLOBAL);
					}
					break;
				}
				State = 7514;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==CURSOR) {
					{
					State = 7513; Match(CURSOR);
					}
				}

				State = 7516; cursor_name();
				State = 7518;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,989,_ctx) ) {
				case 1:
					{
					State = 7517; Match(SEMI);
					}
					break;
				}
				}
				break;
			case DECLARE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7520; declare_cursor();
				}
				break;
			case FETCH:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7521; fetch_cursor();
				}
				break;
			case OPEN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7522; Match(OPEN);
				State = 7524;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,990,_ctx) ) {
				case 1:
					{
					State = 7523; Match(GLOBAL);
					}
					break;
				}
				State = 7526; cursor_name();
				State = 7528;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,991,_ctx) ) {
				case 1:
					{
					State = 7527; Match(SEMI);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Backup_databaseContext : ParserRuleContext {
		public IToken file_or_filegroup;
		public IdContext logical_device_name;
		public IToken backup_set_name;
		public IToken medianame;
		public IToken stats_percent;
		public IdContext encryptor_name;
		public ITerminalNode BACKUP() { return GetToken(TSqlParser.BACKUP, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		public ITerminalNode READ_WRITE_FILEGROUPS() { return GetToken(TSqlParser.READ_WRITE_FILEGROUPS, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] FILE() { return GetTokens(TSqlParser.FILE); }
		public ITerminalNode FILE(int i) {
			return GetToken(TSqlParser.FILE, i);
		}
		public ITerminalNode[] FILEGROUP() { return GetTokens(TSqlParser.FILEGROUP); }
		public ITerminalNode FILEGROUP(int i) {
			return GetToken(TSqlParser.FILEGROUP, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] DISK() { return GetTokens(TSqlParser.DISK); }
		public ITerminalNode DISK(int i) {
			return GetToken(TSqlParser.DISK, i);
		}
		public ITerminalNode[] TAPE() { return GetTokens(TSqlParser.TAPE); }
		public ITerminalNode TAPE(int i) {
			return GetToken(TSqlParser.TAPE, i);
		}
		public ITerminalNode[] URL() { return GetTokens(TSqlParser.URL); }
		public ITerminalNode URL(int i) {
			return GetToken(TSqlParser.URL, i);
		}
		public ITerminalNode[] MIRROR() { return GetTokens(TSqlParser.MIRROR); }
		public ITerminalNode MIRROR(int i) {
			return GetToken(TSqlParser.MIRROR, i);
		}
		public ITerminalNode[] DIFFERENTIAL() { return GetTokens(TSqlParser.DIFFERENTIAL); }
		public ITerminalNode DIFFERENTIAL(int i) {
			return GetToken(TSqlParser.DIFFERENTIAL, i);
		}
		public ITerminalNode[] COPY_ONLY() { return GetTokens(TSqlParser.COPY_ONLY); }
		public ITerminalNode COPY_ONLY(int i) {
			return GetToken(TSqlParser.COPY_ONLY, i);
		}
		public ITerminalNode[] DESCRIPTION() { return GetTokens(TSqlParser.DESCRIPTION); }
		public ITerminalNode DESCRIPTION(int i) {
			return GetToken(TSqlParser.DESCRIPTION, i);
		}
		public ITerminalNode[] NAME() { return GetTokens(TSqlParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(TSqlParser.NAME, i);
		}
		public ITerminalNode[] CREDENTIAL() { return GetTokens(TSqlParser.CREDENTIAL); }
		public ITerminalNode CREDENTIAL(int i) {
			return GetToken(TSqlParser.CREDENTIAL, i);
		}
		public ITerminalNode[] FILE_SNAPSHOT() { return GetTokens(TSqlParser.FILE_SNAPSHOT); }
		public ITerminalNode FILE_SNAPSHOT(int i) {
			return GetToken(TSqlParser.FILE_SNAPSHOT, i);
		}
		public ITerminalNode[] MEDIADESCRIPTION() { return GetTokens(TSqlParser.MEDIADESCRIPTION); }
		public ITerminalNode MEDIADESCRIPTION(int i) {
			return GetToken(TSqlParser.MEDIADESCRIPTION, i);
		}
		public ITerminalNode[] MEDIANAME() { return GetTokens(TSqlParser.MEDIANAME); }
		public ITerminalNode MEDIANAME(int i) {
			return GetToken(TSqlParser.MEDIANAME, i);
		}
		public ITerminalNode[] BLOCKSIZE() { return GetTokens(TSqlParser.BLOCKSIZE); }
		public ITerminalNode BLOCKSIZE(int i) {
			return GetToken(TSqlParser.BLOCKSIZE, i);
		}
		public ITerminalNode[] BUFFERCOUNT() { return GetTokens(TSqlParser.BUFFERCOUNT); }
		public ITerminalNode BUFFERCOUNT(int i) {
			return GetToken(TSqlParser.BUFFERCOUNT, i);
		}
		public ITerminalNode[] MAXTRANSFER() { return GetTokens(TSqlParser.MAXTRANSFER); }
		public ITerminalNode MAXTRANSFER(int i) {
			return GetToken(TSqlParser.MAXTRANSFER, i);
		}
		public ITerminalNode[] RESTART() { return GetTokens(TSqlParser.RESTART); }
		public ITerminalNode RESTART(int i) {
			return GetToken(TSqlParser.RESTART, i);
		}
		public ITerminalNode[] STATS() { return GetTokens(TSqlParser.STATS); }
		public ITerminalNode STATS(int i) {
			return GetToken(TSqlParser.STATS, i);
		}
		public ITerminalNode[] ENCRYPTION() { return GetTokens(TSqlParser.ENCRYPTION); }
		public ITerminalNode ENCRYPTION(int i) {
			return GetToken(TSqlParser.ENCRYPTION, i);
		}
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] ALGORITHM() { return GetTokens(TSqlParser.ALGORITHM); }
		public ITerminalNode ALGORITHM(int i) {
			return GetToken(TSqlParser.ALGORITHM, i);
		}
		public ITerminalNode[] SERVER() { return GetTokens(TSqlParser.SERVER); }
		public ITerminalNode SERVER(int i) {
			return GetToken(TSqlParser.SERVER, i);
		}
		public ITerminalNode[] CERTIFICATE() { return GetTokens(TSqlParser.CERTIFICATE); }
		public ITerminalNode CERTIFICATE(int i) {
			return GetToken(TSqlParser.CERTIFICATE, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode[] COMPRESSION() { return GetTokens(TSqlParser.COMPRESSION); }
		public ITerminalNode COMPRESSION(int i) {
			return GetToken(TSqlParser.COMPRESSION, i);
		}
		public ITerminalNode[] NO_COMPRESSION() { return GetTokens(TSqlParser.NO_COMPRESSION); }
		public ITerminalNode NO_COMPRESSION(int i) {
			return GetToken(TSqlParser.NO_COMPRESSION, i);
		}
		public ITerminalNode[] NOINIT() { return GetTokens(TSqlParser.NOINIT); }
		public ITerminalNode NOINIT(int i) {
			return GetToken(TSqlParser.NOINIT, i);
		}
		public ITerminalNode[] INIT() { return GetTokens(TSqlParser.INIT); }
		public ITerminalNode INIT(int i) {
			return GetToken(TSqlParser.INIT, i);
		}
		public ITerminalNode[] NOSKIP() { return GetTokens(TSqlParser.NOSKIP); }
		public ITerminalNode NOSKIP(int i) {
			return GetToken(TSqlParser.NOSKIP, i);
		}
		public ITerminalNode[] SKIP_KEYWORD() { return GetTokens(TSqlParser.SKIP_KEYWORD); }
		public ITerminalNode SKIP_KEYWORD(int i) {
			return GetToken(TSqlParser.SKIP_KEYWORD, i);
		}
		public ITerminalNode[] NOFORMAT() { return GetTokens(TSqlParser.NOFORMAT); }
		public ITerminalNode NOFORMAT(int i) {
			return GetToken(TSqlParser.NOFORMAT, i);
		}
		public ITerminalNode[] FORMAT() { return GetTokens(TSqlParser.FORMAT); }
		public ITerminalNode FORMAT(int i) {
			return GetToken(TSqlParser.FORMAT, i);
		}
		public ITerminalNode[] NO_CHECKSUM() { return GetTokens(TSqlParser.NO_CHECKSUM); }
		public ITerminalNode NO_CHECKSUM(int i) {
			return GetToken(TSqlParser.NO_CHECKSUM, i);
		}
		public ITerminalNode[] CHECKSUM() { return GetTokens(TSqlParser.CHECKSUM); }
		public ITerminalNode CHECKSUM(int i) {
			return GetToken(TSqlParser.CHECKSUM, i);
		}
		public ITerminalNode[] STOP_ON_ERROR() { return GetTokens(TSqlParser.STOP_ON_ERROR); }
		public ITerminalNode STOP_ON_ERROR(int i) {
			return GetToken(TSqlParser.STOP_ON_ERROR, i);
		}
		public ITerminalNode[] CONTINUE_AFTER_ERROR() { return GetTokens(TSqlParser.CONTINUE_AFTER_ERROR); }
		public ITerminalNode CONTINUE_AFTER_ERROR(int i) {
			return GetToken(TSqlParser.CONTINUE_AFTER_ERROR, i);
		}
		public ITerminalNode[] REWIND() { return GetTokens(TSqlParser.REWIND); }
		public ITerminalNode REWIND(int i) {
			return GetToken(TSqlParser.REWIND, i);
		}
		public ITerminalNode[] NOREWIND() { return GetTokens(TSqlParser.NOREWIND); }
		public ITerminalNode NOREWIND(int i) {
			return GetToken(TSqlParser.NOREWIND, i);
		}
		public ITerminalNode[] LOAD() { return GetTokens(TSqlParser.LOAD); }
		public ITerminalNode LOAD(int i) {
			return GetToken(TSqlParser.LOAD, i);
		}
		public ITerminalNode[] NOUNLOAD() { return GetTokens(TSqlParser.NOUNLOAD); }
		public ITerminalNode NOUNLOAD(int i) {
			return GetToken(TSqlParser.NOUNLOAD, i);
		}
		public ITerminalNode[] AES_128() { return GetTokens(TSqlParser.AES_128); }
		public ITerminalNode AES_128(int i) {
			return GetToken(TSqlParser.AES_128, i);
		}
		public ITerminalNode[] AES_192() { return GetTokens(TSqlParser.AES_192); }
		public ITerminalNode AES_192(int i) {
			return GetToken(TSqlParser.AES_192, i);
		}
		public ITerminalNode[] AES_256() { return GetTokens(TSqlParser.AES_256); }
		public ITerminalNode AES_256(int i) {
			return GetToken(TSqlParser.AES_256, i);
		}
		public ITerminalNode[] TRIPLE_DES_3KEY() { return GetTokens(TSqlParser.TRIPLE_DES_3KEY); }
		public ITerminalNode TRIPLE_DES_3KEY(int i) {
			return GetToken(TSqlParser.TRIPLE_DES_3KEY, i);
		}
		public ITerminalNode[] LOCAL_ID() { return GetTokens(TSqlParser.LOCAL_ID); }
		public ITerminalNode LOCAL_ID(int i) {
			return GetToken(TSqlParser.LOCAL_ID, i);
		}
		public ITerminalNode[] EXPIREDATE() { return GetTokens(TSqlParser.EXPIREDATE); }
		public ITerminalNode EXPIREDATE(int i) {
			return GetToken(TSqlParser.EXPIREDATE, i);
		}
		public ITerminalNode[] RETAINDAYS() { return GetTokens(TSqlParser.RETAINDAYS); }
		public ITerminalNode RETAINDAYS(int i) {
			return GetToken(TSqlParser.RETAINDAYS, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] ASYMMETRIC() { return GetTokens(TSqlParser.ASYMMETRIC); }
		public ITerminalNode ASYMMETRIC(int i) {
			return GetToken(TSqlParser.ASYMMETRIC, i);
		}
		public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		public Backup_databaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backup_database; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBackup_database(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBackup_database(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBackup_database(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Backup_databaseContext backup_database() {
		Backup_databaseContext _localctx = new Backup_databaseContext(_ctx, State);
		EnterRule(_localctx, 626, RULE_backup_database);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7532; Match(BACKUP);
			State = 7533; Match(DATABASE);
			{
			State = 7534; database_name();
			}
			State = 7547;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==READ_WRITE_FILEGROUPS) {
				{
				State = 7535; Match(READ_WRITE_FILEGROUPS);
				State = 7544;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,994,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7537;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==COMMA) {
							{
							State = 7536; Match(COMMA);
							}
						}

						State = 7539;
						_la = _input.La(1);
						if ( !(_la==FILE || _la==FILEGROUP) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 7540; Match(EQUAL);
						State = 7541; _localctx.file_or_filegroup = Match(STRING);
						}
						} 
					}
					State = 7546;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,994,_ctx);
				}
				}
			}

			State = 7557;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==FILE || _la==FILEGROUP || _la==COMMA) {
				{
				{
				State = 7550;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 7549; Match(COMMA);
					}
				}

				State = 7552;
				_la = _input.La(1);
				if ( !(_la==FILE || _la==FILEGROUP) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 7553; Match(EQUAL);
				State = 7554; _localctx.file_or_filegroup = Match(STRING);
				}
				}
				State = 7559;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 7583;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1003,_ctx) ) {
			case 1:
				{
				State = 7560; Match(TO);
				State = 7565;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 7562;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,998,_ctx) ) {
						case 1:
							{
							State = 7561; Match(COMMA);
							}
							break;
						}
						State = 7564; _localctx.logical_device_name = id();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 7567;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,999,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 2:
				{
				State = 7569; Match(TO);
				State = 7579;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 7571;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==COMMA) {
							{
							State = 7570; Match(COMMA);
							}
						}

						State = 7573;
						_la = _input.La(1);
						if ( !(_la==DISK || _la==TAPE || _la==URL) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 7574; Match(EQUAL);
						State = 7577;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1001,_ctx) ) {
						case 1:
							{
							State = 7575; Match(STRING);
							}
							break;

						case 2:
							{
							State = 7576; id();
							}
							break;
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 7581;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1002,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
			State = 7618;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1011,_ctx) ) {
			case 1:
				{
				State = 7595;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 7585; Match(MIRROR);
						State = 7586; Match(TO);
						State = 7591;
						_errHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 7588;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,1004,_ctx) ) {
								case 1:
									{
									State = 7587; Match(COMMA);
									}
									break;
								}
								State = 7590; _localctx.logical_device_name = id();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 7593;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,1005,_ctx);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 7597;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1006,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 2:
				{
				State = 7614;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 7599; Match(MIRROR);
						State = 7600; Match(TO);
						State = 7610;
						_errHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 7602;
								_errHandler.Sync(this);
								_la = _input.La(1);
								if (_la==COMMA) {
									{
									State = 7601; Match(COMMA);
									}
								}

								State = 7604;
								_la = _input.La(1);
								if ( !(_la==DISK || _la==TAPE || _la==URL) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								State = 7605; Match(EQUAL);
								State = 7608;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,1008,_ctx) ) {
								case 1:
									{
									State = 7606; Match(STRING);
									}
									break;

								case 2:
									{
									State = 7607; id();
									}
									break;
								}
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 7612;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,1009,_ctx);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 7616;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1010,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
			State = 7782;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1047,_ctx) ) {
			case 1:
				{
				State = 7620; Match(WITH);
				State = 7779;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1046,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						State = 7777;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1045,_ctx) ) {
						case 1:
							{
							State = 7622;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 7621; Match(COMMA);
								}
							}

							State = 7624; Match(DIFFERENTIAL);
							}
							break;

						case 2:
							{
							State = 7626;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 7625; Match(COMMA);
								}
							}

							State = 7628; Match(COPY_ONLY);
							}
							break;

						case 3:
							{
							State = 7630;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 7629; Match(COMMA);
								}
							}

							State = 7632;
							_la = _input.La(1);
							if ( !(_la==COMPRESSION || _la==NO_COMPRESSION) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 4:
							{
							State = 7634;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 7633; Match(COMMA);
								}
							}

							State = 7636; Match(DESCRIPTION);
							State = 7637; Match(EQUAL);
							State = 7640;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1016,_ctx) ) {
							case 1:
								{
								State = 7638; Match(STRING);
								}
								break;

							case 2:
								{
								State = 7639; id();
								}
								break;
							}
							}
							break;

						case 5:
							{
							State = 7643;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 7642; Match(COMMA);
								}
							}

							State = 7645; Match(NAME);
							State = 7646; Match(EQUAL);
							State = 7647;
							_localctx.backup_set_name = _input.Lt(1);
							_la = _input.La(1);
							if ( !(_la==LOCAL_ID || _la==STRING) ) {
								_localctx.backup_set_name = _errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 6:
							{
							State = 7649;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 7648; Match(COMMA);
								}
							}

							State = 7651; Match(CREDENTIAL);
							}
							break;

						case 7:
							{
							State = 7653;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 7652; Match(COMMA);
								}
							}

							State = 7655; Match(FILE_SNAPSHOT);
							}
							break;

						case 8:
							{
							State = 7657;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 7656; Match(COMMA);
								}
							}

							State = 7671;
							_errHandler.Sync(this);
							switch (_input.La(1)) {
							case EXPIREDATE:
								{
								State = 7659; Match(EXPIREDATE);
								State = 7660; Match(EQUAL);
								State = 7663;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,1021,_ctx) ) {
								case 1:
									{
									State = 7661; Match(STRING);
									}
									break;

								case 2:
									{
									State = 7662; id();
									}
									break;
								}
								}
								break;
							case RETAINDAYS:
								{
								State = 7665; Match(RETAINDAYS);
								State = 7666; Match(EQUAL);
								State = 7669;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,1022,_ctx) ) {
								case 1:
									{
									State = 7667; Match(DECIMAL);
									}
									break;

								case 2:
									{
									State = 7668; id();
									}
									break;
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;

						case 9:
							{
							State = 7674;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 7673; Match(COMMA);
								}
							}

							State = 7676;
							_la = _input.La(1);
							if ( !(_la==INIT || _la==NOINIT) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 10:
							{
							State = 7678;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 7677; Match(COMMA);
								}
							}

							State = 7680;
							_la = _input.La(1);
							if ( !(_la==NOSKIP || _la==SKIP_KEYWORD) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 11:
							{
							State = 7682;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 7681; Match(COMMA);
								}
							}

							State = 7684;
							_la = _input.La(1);
							if ( !(_la==NOFORMAT || _la==FORMAT) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 12:
							{
							State = 7686;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 7685; Match(COMMA);
								}
							}

							State = 7688; Match(MEDIADESCRIPTION);
							State = 7689; Match(EQUAL);
							State = 7692;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1028,_ctx) ) {
							case 1:
								{
								State = 7690; Match(STRING);
								}
								break;

							case 2:
								{
								State = 7691; id();
								}
								break;
							}
							}
							break;

						case 13:
							{
							State = 7695;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 7694; Match(COMMA);
								}
							}

							State = 7697; Match(MEDIANAME);
							State = 7698; Match(EQUAL);
							{
							State = 7699; _localctx.medianame = Match(STRING);
							}
							}
							break;

						case 14:
							{
							State = 7701;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 7700; Match(COMMA);
								}
							}

							State = 7703; Match(BLOCKSIZE);
							State = 7704; Match(EQUAL);
							State = 7707;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1031,_ctx) ) {
							case 1:
								{
								State = 7705; Match(DECIMAL);
								}
								break;

							case 2:
								{
								State = 7706; id();
								}
								break;
							}
							}
							break;

						case 15:
							{
							State = 7710;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 7709; Match(COMMA);
								}
							}

							State = 7712; Match(BUFFERCOUNT);
							State = 7713; Match(EQUAL);
							State = 7716;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1033,_ctx) ) {
							case 1:
								{
								State = 7714; Match(DECIMAL);
								}
								break;

							case 2:
								{
								State = 7715; id();
								}
								break;
							}
							}
							break;

						case 16:
							{
							State = 7719;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 7718; Match(COMMA);
								}
							}

							State = 7721; Match(MAXTRANSFER);
							State = 7722; Match(EQUAL);
							State = 7725;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1035,_ctx) ) {
							case 1:
								{
								State = 7723; Match(DECIMAL);
								}
								break;

							case 2:
								{
								State = 7724; id();
								}
								break;
							}
							}
							break;

						case 17:
							{
							State = 7728;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 7727; Match(COMMA);
								}
							}

							State = 7730;
							_la = _input.La(1);
							if ( !(_la==NO_CHECKSUM || _la==CHECKSUM) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 18:
							{
							State = 7732;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 7731; Match(COMMA);
								}
							}

							State = 7734;
							_la = _input.La(1);
							if ( !(_la==CONTINUE_AFTER_ERROR || _la==STOP_ON_ERROR) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 19:
							{
							State = 7736;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 7735; Match(COMMA);
								}
							}

							State = 7738; Match(RESTART);
							}
							break;

						case 20:
							{
							State = 7740;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 7739; Match(COMMA);
								}
							}

							State = 7742; Match(STATS);
							State = 7745;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1040,_ctx) ) {
							case 1:
								{
								State = 7743; Match(EQUAL);
								State = 7744; _localctx.stats_percent = Match(DECIMAL);
								}
								break;
							}
							}
							break;

						case 21:
							{
							State = 7748;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 7747; Match(COMMA);
								}
							}

							State = 7750;
							_la = _input.La(1);
							if ( !(_la==NOREWIND || _la==REWIND) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 22:
							{
							State = 7752;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 7751; Match(COMMA);
								}
							}

							State = 7754;
							_la = _input.La(1);
							if ( !(_la==LOAD || _la==NOUNLOAD) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 23:
							{
							State = 7756;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 7755; Match(COMMA);
								}
							}

							State = 7758; Match(ENCRYPTION);
							State = 7759; Match(LR_BRACKET);
							State = 7760; Match(ALGORITHM);
							State = 7761; Match(EQUAL);
							State = 7762;
							_la = _input.La(1);
							if ( !(((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (AES_128 - 392)) | (1L << (AES_192 - 392)) | (1L << (AES_256 - 392)))) != 0) || _la==TRIPLE_DES_3KEY) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							State = 7763; Match(COMMA);
							State = 7764; Match(SERVER);
							State = 7765; Match(CERTIFICATE);
							State = 7766; Match(EQUAL);
							State = 7773;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1044,_ctx) ) {
							case 1:
								{
								State = 7767; _localctx.encryptor_name = id();
								}
								break;

							case 2:
								{
								State = 7768; Match(SERVER);
								State = 7769; Match(ASYMMETRIC);
								State = 7770; Match(KEY);
								State = 7771; Match(EQUAL);
								State = 7772; _localctx.encryptor_name = id();
								}
								break;
							}
							State = 7775; Match(RR_BRACKET);
							}
							break;
						}
						} 
					}
					State = 7781;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1046,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Backup_logContext : ParserRuleContext {
		public IdContext logical_device_name;
		public IdContext backup_set_name;
		public IToken medianame;
		public IToken stats_percent;
		public IToken undo_file_name;
		public IdContext encryptor_name;
		public ITerminalNode BACKUP() { return GetToken(TSqlParser.BACKUP, 0); }
		public ITerminalNode LOG() { return GetToken(TSqlParser.LOG, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] DISK() { return GetTokens(TSqlParser.DISK); }
		public ITerminalNode DISK(int i) {
			return GetToken(TSqlParser.DISK, i);
		}
		public ITerminalNode[] TAPE() { return GetTokens(TSqlParser.TAPE); }
		public ITerminalNode TAPE(int i) {
			return GetToken(TSqlParser.TAPE, i);
		}
		public ITerminalNode[] URL() { return GetTokens(TSqlParser.URL); }
		public ITerminalNode URL(int i) {
			return GetToken(TSqlParser.URL, i);
		}
		public ITerminalNode[] MIRROR() { return GetTokens(TSqlParser.MIRROR); }
		public ITerminalNode MIRROR(int i) {
			return GetToken(TSqlParser.MIRROR, i);
		}
		public ITerminalNode[] DIFFERENTIAL() { return GetTokens(TSqlParser.DIFFERENTIAL); }
		public ITerminalNode DIFFERENTIAL(int i) {
			return GetToken(TSqlParser.DIFFERENTIAL, i);
		}
		public ITerminalNode[] COPY_ONLY() { return GetTokens(TSqlParser.COPY_ONLY); }
		public ITerminalNode COPY_ONLY(int i) {
			return GetToken(TSqlParser.COPY_ONLY, i);
		}
		public ITerminalNode[] DESCRIPTION() { return GetTokens(TSqlParser.DESCRIPTION); }
		public ITerminalNode DESCRIPTION(int i) {
			return GetToken(TSqlParser.DESCRIPTION, i);
		}
		public ITerminalNode[] NAME() { return GetTokens(TSqlParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(TSqlParser.NAME, i);
		}
		public ITerminalNode[] CREDENTIAL() { return GetTokens(TSqlParser.CREDENTIAL); }
		public ITerminalNode CREDENTIAL(int i) {
			return GetToken(TSqlParser.CREDENTIAL, i);
		}
		public ITerminalNode[] FILE_SNAPSHOT() { return GetTokens(TSqlParser.FILE_SNAPSHOT); }
		public ITerminalNode FILE_SNAPSHOT(int i) {
			return GetToken(TSqlParser.FILE_SNAPSHOT, i);
		}
		public ITerminalNode[] MEDIADESCRIPTION() { return GetTokens(TSqlParser.MEDIADESCRIPTION); }
		public ITerminalNode MEDIADESCRIPTION(int i) {
			return GetToken(TSqlParser.MEDIADESCRIPTION, i);
		}
		public ITerminalNode[] MEDIANAME() { return GetTokens(TSqlParser.MEDIANAME); }
		public ITerminalNode MEDIANAME(int i) {
			return GetToken(TSqlParser.MEDIANAME, i);
		}
		public ITerminalNode[] BLOCKSIZE() { return GetTokens(TSqlParser.BLOCKSIZE); }
		public ITerminalNode BLOCKSIZE(int i) {
			return GetToken(TSqlParser.BLOCKSIZE, i);
		}
		public ITerminalNode[] BUFFERCOUNT() { return GetTokens(TSqlParser.BUFFERCOUNT); }
		public ITerminalNode BUFFERCOUNT(int i) {
			return GetToken(TSqlParser.BUFFERCOUNT, i);
		}
		public ITerminalNode[] MAXTRANSFER() { return GetTokens(TSqlParser.MAXTRANSFER); }
		public ITerminalNode MAXTRANSFER(int i) {
			return GetToken(TSqlParser.MAXTRANSFER, i);
		}
		public ITerminalNode[] RESTART() { return GetTokens(TSqlParser.RESTART); }
		public ITerminalNode RESTART(int i) {
			return GetToken(TSqlParser.RESTART, i);
		}
		public ITerminalNode[] STATS() { return GetTokens(TSqlParser.STATS); }
		public ITerminalNode STATS(int i) {
			return GetToken(TSqlParser.STATS, i);
		}
		public ITerminalNode[] NO_TRUNCATE() { return GetTokens(TSqlParser.NO_TRUNCATE); }
		public ITerminalNode NO_TRUNCATE(int i) {
			return GetToken(TSqlParser.NO_TRUNCATE, i);
		}
		public ITerminalNode[] ENCRYPTION() { return GetTokens(TSqlParser.ENCRYPTION); }
		public ITerminalNode ENCRYPTION(int i) {
			return GetToken(TSqlParser.ENCRYPTION, i);
		}
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] ALGORITHM() { return GetTokens(TSqlParser.ALGORITHM); }
		public ITerminalNode ALGORITHM(int i) {
			return GetToken(TSqlParser.ALGORITHM, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] SERVER() { return GetTokens(TSqlParser.SERVER); }
		public ITerminalNode SERVER(int i) {
			return GetToken(TSqlParser.SERVER, i);
		}
		public ITerminalNode[] CERTIFICATE() { return GetTokens(TSqlParser.CERTIFICATE); }
		public ITerminalNode CERTIFICATE(int i) {
			return GetToken(TSqlParser.CERTIFICATE, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] COMPRESSION() { return GetTokens(TSqlParser.COMPRESSION); }
		public ITerminalNode COMPRESSION(int i) {
			return GetToken(TSqlParser.COMPRESSION, i);
		}
		public ITerminalNode[] NO_COMPRESSION() { return GetTokens(TSqlParser.NO_COMPRESSION); }
		public ITerminalNode NO_COMPRESSION(int i) {
			return GetToken(TSqlParser.NO_COMPRESSION, i);
		}
		public ITerminalNode[] NOINIT() { return GetTokens(TSqlParser.NOINIT); }
		public ITerminalNode NOINIT(int i) {
			return GetToken(TSqlParser.NOINIT, i);
		}
		public ITerminalNode[] INIT() { return GetTokens(TSqlParser.INIT); }
		public ITerminalNode INIT(int i) {
			return GetToken(TSqlParser.INIT, i);
		}
		public ITerminalNode[] NOSKIP() { return GetTokens(TSqlParser.NOSKIP); }
		public ITerminalNode NOSKIP(int i) {
			return GetToken(TSqlParser.NOSKIP, i);
		}
		public ITerminalNode[] SKIP_KEYWORD() { return GetTokens(TSqlParser.SKIP_KEYWORD); }
		public ITerminalNode SKIP_KEYWORD(int i) {
			return GetToken(TSqlParser.SKIP_KEYWORD, i);
		}
		public ITerminalNode[] NOFORMAT() { return GetTokens(TSqlParser.NOFORMAT); }
		public ITerminalNode NOFORMAT(int i) {
			return GetToken(TSqlParser.NOFORMAT, i);
		}
		public ITerminalNode[] FORMAT() { return GetTokens(TSqlParser.FORMAT); }
		public ITerminalNode FORMAT(int i) {
			return GetToken(TSqlParser.FORMAT, i);
		}
		public ITerminalNode[] NO_CHECKSUM() { return GetTokens(TSqlParser.NO_CHECKSUM); }
		public ITerminalNode NO_CHECKSUM(int i) {
			return GetToken(TSqlParser.NO_CHECKSUM, i);
		}
		public ITerminalNode[] CHECKSUM() { return GetTokens(TSqlParser.CHECKSUM); }
		public ITerminalNode CHECKSUM(int i) {
			return GetToken(TSqlParser.CHECKSUM, i);
		}
		public ITerminalNode[] STOP_ON_ERROR() { return GetTokens(TSqlParser.STOP_ON_ERROR); }
		public ITerminalNode STOP_ON_ERROR(int i) {
			return GetToken(TSqlParser.STOP_ON_ERROR, i);
		}
		public ITerminalNode[] CONTINUE_AFTER_ERROR() { return GetTokens(TSqlParser.CONTINUE_AFTER_ERROR); }
		public ITerminalNode CONTINUE_AFTER_ERROR(int i) {
			return GetToken(TSqlParser.CONTINUE_AFTER_ERROR, i);
		}
		public ITerminalNode[] REWIND() { return GetTokens(TSqlParser.REWIND); }
		public ITerminalNode REWIND(int i) {
			return GetToken(TSqlParser.REWIND, i);
		}
		public ITerminalNode[] NOREWIND() { return GetTokens(TSqlParser.NOREWIND); }
		public ITerminalNode NOREWIND(int i) {
			return GetToken(TSqlParser.NOREWIND, i);
		}
		public ITerminalNode[] LOAD() { return GetTokens(TSqlParser.LOAD); }
		public ITerminalNode LOAD(int i) {
			return GetToken(TSqlParser.LOAD, i);
		}
		public ITerminalNode[] NOUNLOAD() { return GetTokens(TSqlParser.NOUNLOAD); }
		public ITerminalNode NOUNLOAD(int i) {
			return GetToken(TSqlParser.NOUNLOAD, i);
		}
		public ITerminalNode[] AES_128() { return GetTokens(TSqlParser.AES_128); }
		public ITerminalNode AES_128(int i) {
			return GetToken(TSqlParser.AES_128, i);
		}
		public ITerminalNode[] AES_192() { return GetTokens(TSqlParser.AES_192); }
		public ITerminalNode AES_192(int i) {
			return GetToken(TSqlParser.AES_192, i);
		}
		public ITerminalNode[] AES_256() { return GetTokens(TSqlParser.AES_256); }
		public ITerminalNode AES_256(int i) {
			return GetToken(TSqlParser.AES_256, i);
		}
		public ITerminalNode[] TRIPLE_DES_3KEY() { return GetTokens(TSqlParser.TRIPLE_DES_3KEY); }
		public ITerminalNode TRIPLE_DES_3KEY(int i) {
			return GetToken(TSqlParser.TRIPLE_DES_3KEY, i);
		}
		public ITerminalNode[] EXPIREDATE() { return GetTokens(TSqlParser.EXPIREDATE); }
		public ITerminalNode EXPIREDATE(int i) {
			return GetToken(TSqlParser.EXPIREDATE, i);
		}
		public ITerminalNode[] RETAINDAYS() { return GetTokens(TSqlParser.RETAINDAYS); }
		public ITerminalNode RETAINDAYS(int i) {
			return GetToken(TSqlParser.RETAINDAYS, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] NORECOVERY() { return GetTokens(TSqlParser.NORECOVERY); }
		public ITerminalNode NORECOVERY(int i) {
			return GetToken(TSqlParser.NORECOVERY, i);
		}
		public ITerminalNode[] STANDBY() { return GetTokens(TSqlParser.STANDBY); }
		public ITerminalNode STANDBY(int i) {
			return GetToken(TSqlParser.STANDBY, i);
		}
		public ITerminalNode[] ASYMMETRIC() { return GetTokens(TSqlParser.ASYMMETRIC); }
		public ITerminalNode ASYMMETRIC(int i) {
			return GetToken(TSqlParser.ASYMMETRIC, i);
		}
		public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		public Backup_logContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backup_log; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBackup_log(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBackup_log(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBackup_log(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Backup_logContext backup_log() {
		Backup_logContext _localctx = new Backup_logContext(_ctx, State);
		EnterRule(_localctx, 628, RULE_backup_log);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7784; Match(BACKUP);
			State = 7785; Match(LOG);
			{
			State = 7786; database_name();
			}
			State = 7810;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1053,_ctx) ) {
			case 1:
				{
				State = 7787; Match(TO);
				State = 7792;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 7789;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1048,_ctx) ) {
						case 1:
							{
							State = 7788; Match(COMMA);
							}
							break;
						}
						State = 7791; _localctx.logical_device_name = id();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 7794;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1049,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 2:
				{
				State = 7796; Match(TO);
				State = 7806;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 7798;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==COMMA) {
							{
							State = 7797; Match(COMMA);
							}
						}

						State = 7800;
						_la = _input.La(1);
						if ( !(_la==DISK || _la==TAPE || _la==URL) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 7801; Match(EQUAL);
						State = 7804;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1051,_ctx) ) {
						case 1:
							{
							State = 7802; Match(STRING);
							}
							break;

						case 2:
							{
							State = 7803; id();
							}
							break;
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 7808;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1052,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
			State = 7845;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1061,_ctx) ) {
			case 1:
				{
				State = 7822;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 7812; Match(MIRROR);
						State = 7813; Match(TO);
						State = 7818;
						_errHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 7815;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,1054,_ctx) ) {
								case 1:
									{
									State = 7814; Match(COMMA);
									}
									break;
								}
								State = 7817; _localctx.logical_device_name = id();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 7820;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,1055,_ctx);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 7824;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1056,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 2:
				{
				State = 7841;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 7826; Match(MIRROR);
						State = 7827; Match(TO);
						State = 7837;
						_errHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 7829;
								_errHandler.Sync(this);
								_la = _input.La(1);
								if (_la==COMMA) {
									{
									State = 7828; Match(COMMA);
									}
								}

								State = 7831;
								_la = _input.La(1);
								if ( !(_la==DISK || _la==TAPE || _la==URL) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								State = 7832; Match(EQUAL);
								State = 7835;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,1058,_ctx) ) {
								case 1:
									{
									State = 7833; Match(STRING);
									}
									break;

								case 2:
									{
									State = 7834; id();
									}
									break;
								}
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 7839;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,1059,_ctx);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 7843;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1060,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
			State = 8020;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1100,_ctx) ) {
			case 1:
				{
				State = 7847; Match(WITH);
				State = 8017;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1099,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						State = 8015;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1098,_ctx) ) {
						case 1:
							{
							State = 7849;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 7848; Match(COMMA);
								}
							}

							State = 7851; Match(DIFFERENTIAL);
							}
							break;

						case 2:
							{
							State = 7853;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 7852; Match(COMMA);
								}
							}

							State = 7855; Match(COPY_ONLY);
							}
							break;

						case 3:
							{
							State = 7857;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 7856; Match(COMMA);
								}
							}

							State = 7859;
							_la = _input.La(1);
							if ( !(_la==COMPRESSION || _la==NO_COMPRESSION) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 4:
							{
							State = 7861;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 7860; Match(COMMA);
								}
							}

							State = 7863; Match(DESCRIPTION);
							State = 7864; Match(EQUAL);
							State = 7867;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1066,_ctx) ) {
							case 1:
								{
								State = 7865; Match(STRING);
								}
								break;

							case 2:
								{
								State = 7866; id();
								}
								break;
							}
							}
							break;

						case 5:
							{
							State = 7870;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 7869; Match(COMMA);
								}
							}

							State = 7872; Match(NAME);
							State = 7873; Match(EQUAL);
							State = 7874; _localctx.backup_set_name = id();
							}
							break;

						case 6:
							{
							State = 7876;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 7875; Match(COMMA);
								}
							}

							State = 7878; Match(CREDENTIAL);
							}
							break;

						case 7:
							{
							State = 7880;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 7879; Match(COMMA);
								}
							}

							State = 7882; Match(FILE_SNAPSHOT);
							}
							break;

						case 8:
							{
							State = 7884;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 7883; Match(COMMA);
								}
							}

							State = 7898;
							_errHandler.Sync(this);
							switch (_input.La(1)) {
							case EXPIREDATE:
								{
								State = 7886; Match(EXPIREDATE);
								State = 7887; Match(EQUAL);
								State = 7890;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,1071,_ctx) ) {
								case 1:
									{
									State = 7888; Match(STRING);
									}
									break;

								case 2:
									{
									State = 7889; id();
									}
									break;
								}
								}
								break;
							case RETAINDAYS:
								{
								State = 7892; Match(RETAINDAYS);
								State = 7893; Match(EQUAL);
								State = 7896;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,1072,_ctx) ) {
								case 1:
									{
									State = 7894; Match(DECIMAL);
									}
									break;

								case 2:
									{
									State = 7895; id();
									}
									break;
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;

						case 9:
							{
							State = 7901;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 7900; Match(COMMA);
								}
							}

							State = 7903;
							_la = _input.La(1);
							if ( !(_la==INIT || _la==NOINIT) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 10:
							{
							State = 7905;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 7904; Match(COMMA);
								}
							}

							State = 7907;
							_la = _input.La(1);
							if ( !(_la==NOSKIP || _la==SKIP_KEYWORD) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 11:
							{
							State = 7909;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 7908; Match(COMMA);
								}
							}

							State = 7911;
							_la = _input.La(1);
							if ( !(_la==NOFORMAT || _la==FORMAT) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 12:
							{
							State = 7913;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 7912; Match(COMMA);
								}
							}

							State = 7915; Match(MEDIADESCRIPTION);
							State = 7916; Match(EQUAL);
							State = 7919;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1078,_ctx) ) {
							case 1:
								{
								State = 7917; Match(STRING);
								}
								break;

							case 2:
								{
								State = 7918; id();
								}
								break;
							}
							}
							break;

						case 13:
							{
							State = 7922;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 7921; Match(COMMA);
								}
							}

							State = 7924; Match(MEDIANAME);
							State = 7925; Match(EQUAL);
							{
							State = 7926; _localctx.medianame = Match(STRING);
							}
							}
							break;

						case 14:
							{
							State = 7928;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 7927; Match(COMMA);
								}
							}

							State = 7930; Match(BLOCKSIZE);
							State = 7931; Match(EQUAL);
							State = 7934;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1081,_ctx) ) {
							case 1:
								{
								State = 7932; Match(DECIMAL);
								}
								break;

							case 2:
								{
								State = 7933; id();
								}
								break;
							}
							}
							break;

						case 15:
							{
							State = 7937;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 7936; Match(COMMA);
								}
							}

							State = 7939; Match(BUFFERCOUNT);
							State = 7940; Match(EQUAL);
							State = 7943;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1083,_ctx) ) {
							case 1:
								{
								State = 7941; Match(DECIMAL);
								}
								break;

							case 2:
								{
								State = 7942; id();
								}
								break;
							}
							}
							break;

						case 16:
							{
							State = 7946;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 7945; Match(COMMA);
								}
							}

							State = 7948; Match(MAXTRANSFER);
							State = 7949; Match(EQUAL);
							State = 7952;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1085,_ctx) ) {
							case 1:
								{
								State = 7950; Match(DECIMAL);
								}
								break;

							case 2:
								{
								State = 7951; id();
								}
								break;
							}
							}
							break;

						case 17:
							{
							State = 7955;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 7954; Match(COMMA);
								}
							}

							State = 7957;
							_la = _input.La(1);
							if ( !(_la==NO_CHECKSUM || _la==CHECKSUM) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 18:
							{
							State = 7959;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 7958; Match(COMMA);
								}
							}

							State = 7961;
							_la = _input.La(1);
							if ( !(_la==CONTINUE_AFTER_ERROR || _la==STOP_ON_ERROR) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 19:
							{
							State = 7963;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 7962; Match(COMMA);
								}
							}

							State = 7965; Match(RESTART);
							}
							break;

						case 20:
							{
							State = 7967;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 7966; Match(COMMA);
								}
							}

							State = 7969; Match(STATS);
							State = 7972;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1090,_ctx) ) {
							case 1:
								{
								State = 7970; Match(EQUAL);
								State = 7971; _localctx.stats_percent = Match(DECIMAL);
								}
								break;
							}
							}
							break;

						case 21:
							{
							State = 7975;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 7974; Match(COMMA);
								}
							}

							State = 7977;
							_la = _input.La(1);
							if ( !(_la==NOREWIND || _la==REWIND) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 22:
							{
							State = 7979;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 7978; Match(COMMA);
								}
							}

							State = 7981;
							_la = _input.La(1);
							if ( !(_la==LOAD || _la==NOUNLOAD) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 23:
							{
							State = 7983;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 7982; Match(COMMA);
								}
							}

							State = 7989;
							_errHandler.Sync(this);
							switch (_input.La(1)) {
							case NORECOVERY:
								{
								State = 7985; Match(NORECOVERY);
								}
								break;
							case STANDBY:
								{
								State = 7986; Match(STANDBY);
								State = 7987; Match(EQUAL);
								State = 7988; _localctx.undo_file_name = Match(STRING);
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;

						case 24:
							{
							State = 7992;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 7991; Match(COMMA);
								}
							}

							State = 7994; Match(NO_TRUNCATE);
							}
							break;

						case 25:
							{
							State = 7996;
							_errHandler.Sync(this);
							_la = _input.La(1);
							if (_la==COMMA) {
								{
								State = 7995; Match(COMMA);
								}
							}

							State = 7998; Match(ENCRYPTION);
							State = 7999; Match(LR_BRACKET);
							State = 8000; Match(ALGORITHM);
							State = 8001; Match(EQUAL);
							State = 8002;
							_la = _input.La(1);
							if ( !(((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (AES_128 - 392)) | (1L << (AES_192 - 392)) | (1L << (AES_256 - 392)))) != 0) || _la==TRIPLE_DES_3KEY) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							State = 8003; Match(COMMA);
							State = 8004; Match(SERVER);
							State = 8005; Match(CERTIFICATE);
							State = 8006; Match(EQUAL);
							State = 8013;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1097,_ctx) ) {
							case 1:
								{
								State = 8007; _localctx.encryptor_name = id();
								}
								break;

							case 2:
								{
								State = 8008; Match(SERVER);
								State = 8009; Match(ASYMMETRIC);
								State = 8010; Match(KEY);
								State = 8011; Match(EQUAL);
								State = 8012; _localctx.encryptor_name = id();
								}
								break;
							}
							}
							break;
						}
						} 
					}
					State = 8019;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1099,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Backup_certificateContext : ParserRuleContext {
		public IdContext certname;
		public IToken cert_file;
		public IToken private_key_file;
		public IToken encryption_password;
		public IToken decryption_pasword;
		public ITerminalNode BACKUP() { return GetToken(TSqlParser.BACKUP, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public ITerminalNode[] FILE() { return GetTokens(TSqlParser.FILE); }
		public ITerminalNode FILE(int i) {
			return GetToken(TSqlParser.FILE, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode PRIVATE() { return GetToken(TSqlParser.PRIVATE, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode[] ENCRYPTION() { return GetTokens(TSqlParser.ENCRYPTION); }
		public ITerminalNode ENCRYPTION(int i) {
			return GetToken(TSqlParser.ENCRYPTION, i);
		}
		public ITerminalNode[] BY() { return GetTokens(TSqlParser.BY); }
		public ITerminalNode BY(int i) {
			return GetToken(TSqlParser.BY, i);
		}
		public ITerminalNode[] PASSWORD() { return GetTokens(TSqlParser.PASSWORD); }
		public ITerminalNode PASSWORD(int i) {
			return GetToken(TSqlParser.PASSWORD, i);
		}
		public ITerminalNode[] DECRYPTION() { return GetTokens(TSqlParser.DECRYPTION); }
		public ITerminalNode DECRYPTION(int i) {
			return GetToken(TSqlParser.DECRYPTION, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Backup_certificateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backup_certificate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBackup_certificate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBackup_certificate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBackup_certificate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Backup_certificateContext backup_certificate() {
		Backup_certificateContext _localctx = new Backup_certificateContext(_ctx, State);
		EnterRule(_localctx, 630, RULE_backup_certificate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8022; Match(BACKUP);
			State = 8023; Match(CERTIFICATE);
			State = 8024; _localctx.certname = id();
			State = 8025; Match(TO);
			State = 8026; Match(FILE);
			State = 8027; Match(EQUAL);
			State = 8028; _localctx.cert_file = Match(STRING);
			State = 8060;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1106,_ctx) ) {
			case 1:
				{
				State = 8029; Match(WITH);
				State = 8030; Match(PRIVATE);
				State = 8031; Match(KEY);
				State = 8032; Match(LR_BRACKET);
				State = 8055;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					State = 8055;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1104,_ctx) ) {
					case 1:
						{
						State = 8034;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==COMMA) {
							{
							State = 8033; Match(COMMA);
							}
						}

						State = 8036; Match(FILE);
						State = 8037; Match(EQUAL);
						State = 8038; _localctx.private_key_file = Match(STRING);
						}
						break;

					case 2:
						{
						State = 8040;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==COMMA) {
							{
							State = 8039; Match(COMMA);
							}
						}

						State = 8042; Match(ENCRYPTION);
						State = 8043; Match(BY);
						State = 8044; Match(PASSWORD);
						State = 8045; Match(EQUAL);
						State = 8046; _localctx.encryption_password = Match(STRING);
						}
						break;

					case 3:
						{
						State = 8048;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==COMMA) {
							{
							State = 8047; Match(COMMA);
							}
						}

						State = 8050; Match(DECRYPTION);
						State = 8051; Match(BY);
						State = 8052; Match(PASSWORD);
						State = 8053; Match(EQUAL);
						State = 8054; _localctx.decryption_pasword = Match(STRING);
						}
						break;
					}
					}
					State = 8057;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==FILE || _la==DECRYPTION || _la==ENCRYPTION || _la==COMMA );
				State = 8059; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Backup_master_keyContext : ParserRuleContext {
		public IToken master_key_backup_file;
		public IToken encryption_password;
		public ITerminalNode BACKUP() { return GetToken(TSqlParser.BACKUP, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public Backup_master_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backup_master_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBackup_master_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBackup_master_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBackup_master_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Backup_master_keyContext backup_master_key() {
		Backup_master_keyContext _localctx = new Backup_master_keyContext(_ctx, State);
		EnterRule(_localctx, 632, RULE_backup_master_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8062; Match(BACKUP);
			State = 8063; Match(MASTER);
			State = 8064; Match(KEY);
			State = 8065; Match(TO);
			State = 8066; Match(FILE);
			State = 8067; Match(EQUAL);
			State = 8068; _localctx.master_key_backup_file = Match(STRING);
			State = 8069; Match(ENCRYPTION);
			State = 8070; Match(BY);
			State = 8071; Match(PASSWORD);
			State = 8072; Match(EQUAL);
			State = 8073; _localctx.encryption_password = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Backup_service_master_keyContext : ParserRuleContext {
		public IToken service_master_key_backup_file;
		public IToken encryption_password;
		public ITerminalNode BACKUP() { return GetToken(TSqlParser.BACKUP, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public Backup_service_master_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backup_service_master_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBackup_service_master_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBackup_service_master_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBackup_service_master_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Backup_service_master_keyContext backup_service_master_key() {
		Backup_service_master_keyContext _localctx = new Backup_service_master_keyContext(_ctx, State);
		EnterRule(_localctx, 634, RULE_backup_service_master_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8075; Match(BACKUP);
			State = 8076; Match(SERVICE);
			State = 8077; Match(MASTER);
			State = 8078; Match(KEY);
			State = 8079; Match(TO);
			State = 8080; Match(FILE);
			State = 8081; Match(EQUAL);
			State = 8082; _localctx.service_master_key_backup_file = Match(STRING);
			State = 8083; Match(ENCRYPTION);
			State = 8084; Match(BY);
			State = 8085; Match(PASSWORD);
			State = 8086; Match(EQUAL);
			State = 8087; _localctx.encryption_password = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Kill_statementContext : ParserRuleContext {
		public ITerminalNode KILL() { return GetToken(TSqlParser.KILL, 0); }
		public Kill_processContext kill_process() {
			return GetRuleContext<Kill_processContext>(0);
		}
		public Kill_query_notificationContext kill_query_notification() {
			return GetRuleContext<Kill_query_notificationContext>(0);
		}
		public Kill_stats_jobContext kill_stats_job() {
			return GetRuleContext<Kill_stats_jobContext>(0);
		}
		public Kill_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kill_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterKill_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitKill_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKill_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Kill_statementContext kill_statement() {
		Kill_statementContext _localctx = new Kill_statementContext(_ctx, State);
		EnterRule(_localctx, 636, RULE_kill_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8089; Match(KILL);
			State = 8093;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case UOW:
			case DECIMAL:
			case STRING:
				{
				State = 8090; kill_process();
				}
				break;
			case QUERY:
				{
				State = 8091; kill_query_notification();
				}
				break;
			case STATS:
				{
				State = 8092; kill_stats_job();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Kill_processContext : ParserRuleContext {
		public IToken session_id;
		public ITerminalNode UOW() { return GetToken(TSqlParser.UOW, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode STATUSONLY() { return GetToken(TSqlParser.STATUSONLY, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Kill_processContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kill_process; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterKill_process(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitKill_process(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKill_process(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Kill_processContext kill_process() {
		Kill_processContext _localctx = new Kill_processContext(_ctx, State);
		EnterRule(_localctx, 638, RULE_kill_process);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8097;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case DECIMAL:
			case STRING:
				{
				State = 8095;
				_localctx.session_id = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==DECIMAL || _la==STRING) ) {
					_localctx.session_id = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			case UOW:
				{
				State = 8096; Match(UOW);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 8101;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1109,_ctx) ) {
			case 1:
				{
				State = 8099; Match(WITH);
				State = 8100; Match(STATUSONLY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Kill_query_notificationContext : ParserRuleContext {
		public IToken subscription_id;
		public ITerminalNode QUERY() { return GetToken(TSqlParser.QUERY, 0); }
		public ITerminalNode NOTIFICATION() { return GetToken(TSqlParser.NOTIFICATION, 0); }
		public ITerminalNode SUBSCRIPTION() { return GetToken(TSqlParser.SUBSCRIPTION, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Kill_query_notificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kill_query_notification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterKill_query_notification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitKill_query_notification(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKill_query_notification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Kill_query_notificationContext kill_query_notification() {
		Kill_query_notificationContext _localctx = new Kill_query_notificationContext(_ctx, State);
		EnterRule(_localctx, 640, RULE_kill_query_notification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8103; Match(QUERY);
			State = 8104; Match(NOTIFICATION);
			State = 8105; Match(SUBSCRIPTION);
			State = 8108;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ALL:
				{
				State = 8106; Match(ALL);
				}
				break;
			case DECIMAL:
				{
				State = 8107; _localctx.subscription_id = Match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Kill_stats_jobContext : ParserRuleContext {
		public IToken job_id;
		public ITerminalNode STATS() { return GetToken(TSqlParser.STATS, 0); }
		public ITerminalNode JOB() { return GetToken(TSqlParser.JOB, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Kill_stats_jobContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kill_stats_job; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterKill_stats_job(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitKill_stats_job(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKill_stats_job(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Kill_stats_jobContext kill_stats_job() {
		Kill_stats_jobContext _localctx = new Kill_stats_jobContext(_ctx, State);
		EnterRule(_localctx, 642, RULE_kill_stats_job);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8110; Match(STATS);
			State = 8111; Match(JOB);
			State = 8112; _localctx.job_id = Match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_statementContext : ParserRuleContext {
		public ITerminalNode EXECUTE() { return GetToken(TSqlParser.EXECUTE, 0); }
		public Execute_bodyContext execute_body() {
			return GetRuleContext<Execute_bodyContext>(0);
		}
		public Execute_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecute_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Execute_statementContext execute_statement() {
		Execute_statementContext _localctx = new Execute_statementContext(_ctx, State);
		EnterRule(_localctx, 644, RULE_execute_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8114; Match(EXECUTE);
			State = 8115; execute_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_bodyContext : ParserRuleContext {
		public IToken return_status;
		public Func_proc_name_server_database_schemaContext func_proc_name_server_database_schema() {
			return GetRuleContext<Func_proc_name_server_database_schemaContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Execute_statement_argContext[] execute_statement_arg() {
			return GetRuleContexts<Execute_statement_argContext>();
		}
		public Execute_statement_argContext execute_statement_arg(int i) {
			return GetRuleContext<Execute_statement_argContext>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Execute_optionContext execute_option() {
			return GetRuleContext<Execute_optionContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Execute_var_stringContext[] execute_var_string() {
			return GetRuleContexts<Execute_var_stringContext>();
		}
		public Execute_var_stringContext execute_var_string(int i) {
			return GetRuleContext<Execute_var_stringContext>(i);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Execute_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecute_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Execute_bodyContext execute_body() {
		Execute_bodyContext _localctx = new Execute_bodyContext(_ctx, State);
		EnterRule(_localctx, 646, RULE_execute_body);
		int _la;
		try {
			int _alt;
			State = 8163;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1121,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8119;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1111,_ctx) ) {
				case 1:
					{
					State = 8117; _localctx.return_status = Match(LOCAL_ID);
					State = 8118; Match(EQUAL);
					}
					break;
				}
				State = 8123;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1112,_ctx) ) {
				case 1:
					{
					State = 8121; func_proc_name_server_database_schema();
					}
					break;

				case 2:
					{
					State = 8122; expression(0);
					}
					break;
				}
				State = 8133;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1114,_ctx) ) {
				case 1:
					{
					State = 8125; execute_statement_arg();
					State = 8130;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1113,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 8126; Match(COMMA);
							State = 8127; execute_statement_arg();
							}
							} 
						}
						State = 8132;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,1113,_ctx);
					}
					}
					break;
				}
				State = 8137;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1115,_ctx) ) {
				case 1:
					{
					State = 8135; Match(WITH);
					State = 8136; execute_option();
					}
					break;
				}
				State = 8140;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1116,_ctx) ) {
				case 1:
					{
					State = 8139; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8142; Match(LR_BRACKET);
				State = 8143; execute_var_string();
				State = 8148;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==PLUS) {
					{
					{
					State = 8144; Match(PLUS);
					State = 8145; execute_var_string();
					}
					}
					State = 8150;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 8151; Match(RR_BRACKET);
				State = 8158;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1119,_ctx) ) {
				case 1:
					{
					State = 8153;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==AS) {
						{
						State = 8152; Match(AS);
						}
					}

					State = 8155;
					_la = _input.La(1);
					if ( !(_la==USER || _la==LOGIN) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 8156; Match(EQUAL);
					State = 8157; Match(STRING);
					}
					break;
				}
				State = 8161;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1120,_ctx) ) {
				case 1:
					{
					State = 8160; Match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_statement_argContext : ParserRuleContext {
		public IToken parameter;
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode NULL() { return GetToken(TSqlParser.NULL, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Constant_LOCAL_IDContext constant_LOCAL_ID() {
			return GetRuleContext<Constant_LOCAL_IDContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode OUTPUT() { return GetToken(TSqlParser.OUTPUT, 0); }
		public ITerminalNode OUT() { return GetToken(TSqlParser.OUT, 0); }
		public Execute_statement_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_statement_arg; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_statement_arg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_statement_arg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecute_statement_arg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Execute_statement_argContext execute_statement_arg() {
		Execute_statement_argContext _localctx = new Execute_statement_argContext(_ctx, State);
		EnterRule(_localctx, 648, RULE_execute_statement_arg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8167;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1122,_ctx) ) {
			case 1:
				{
				State = 8165; _localctx.parameter = Match(LOCAL_ID);
				State = 8166; Match(EQUAL);
				}
				break;
			}
			State = 8178;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1125,_ctx) ) {
			case 1:
				{
				State = 8171;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1123,_ctx) ) {
				case 1:
					{
					State = 8169; constant_LOCAL_ID();
					}
					break;

				case 2:
					{
					State = 8170; id();
					}
					break;
				}
				State = 8174;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1124,_ctx) ) {
				case 1:
					{
					State = 8173;
					_la = _input.La(1);
					if ( !(_la==OUT || _la==OUTPUT) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 8176; Match(DEFAULT);
				}
				break;

			case 3:
				{
				State = 8177; Match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_var_stringContext : ParserRuleContext {
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Execute_var_stringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_var_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_var_string(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_var_string(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecute_var_string(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Execute_var_stringContext execute_var_string() {
		Execute_var_stringContext _localctx = new Execute_var_stringContext(_ctx, State);
		EnterRule(_localctx, 650, RULE_execute_var_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8180;
			_la = _input.La(1);
			if ( !(_la==LOCAL_ID || _la==STRING) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_optionContext : ParserRuleContext {
		public ITerminalNode RECOMPILE() { return GetToken(TSqlParser.RECOMPILE, 0); }
		public ITerminalNode RESULT_SETS() { return GetToken(TSqlParser.RESULT_SETS, 0); }
		public ITerminalNode UNDEFINED() { return GetToken(TSqlParser.UNDEFINED, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public Execute_option_columns_defContext[] execute_option_columns_def() {
			return GetRuleContexts<Execute_option_columns_defContext>();
		}
		public Execute_option_columns_defContext execute_option_columns_def(int i) {
			return GetRuleContext<Execute_option_columns_defContext>(i);
		}
		public Execute_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecute_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Execute_optionContext execute_option() {
		Execute_optionContext _localctx = new Execute_optionContext(_ctx, State);
		EnterRule(_localctx, 652, RULE_execute_option);
		int _la;
		try {
			State = 8204;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1127,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8182; Match(RECOMPILE);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8183; Match(RESULT_SETS);
				State = 8184; Match(UNDEFINED);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8185; Match(RESULT_SETS);
				State = 8186; Match(NONE);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8187; Match(RESULT_SETS);
				State = 8188; Match(LR_BRACKET);
				State = 8189; Match(LR_BRACKET);
				State = 8190; execute_option_columns_def();
				State = 8191; Match(RR_BRACKET);
				State = 8199;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 8192; Match(COMMA);
					State = 8193; Match(LR_BRACKET);
					State = 8194; execute_option_columns_def();
					State = 8195; Match(RR_BRACKET);
					}
					}
					State = 8201;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 8202; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_option_columns_defContext : ParserRuleContext {
		public Execute_option_column_definitionContext[] execute_option_column_definition() {
			return GetRuleContexts<Execute_option_column_definitionContext>();
		}
		public Execute_option_column_definitionContext execute_option_column_definition(int i) {
			return GetRuleContext<Execute_option_column_definitionContext>(i);
		}
		public Execute_option_columns_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_option_columns_def; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_option_columns_def(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_option_columns_def(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecute_option_columns_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Execute_option_columns_defContext execute_option_columns_def() {
		Execute_option_columns_defContext _localctx = new Execute_option_columns_defContext(_ctx, State);
		EnterRule(_localctx, 654, RULE_execute_option_columns_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8206; execute_option_column_definition();
			State = 8211;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 8207; Match(COMMA);
				State = 8208; execute_option_column_definition();
				}
				}
				State = 8213;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_option_column_definitionContext : ParserRuleContext {
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode COLLATE() { return GetToken(TSqlParser.COLLATE, 0); }
		public Null_notnullContext null_notnull() {
			return GetRuleContext<Null_notnullContext>(0);
		}
		public Execute_option_column_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_option_column_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_option_column_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_option_column_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecute_option_column_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Execute_option_column_definitionContext execute_option_column_definition() {
		Execute_option_column_definitionContext _localctx = new Execute_option_column_definitionContext(_ctx, State);
		EnterRule(_localctx, 656, RULE_execute_option_column_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8214; id();
			State = 8218;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BACKSLASH:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONNECTION_OPTIONS:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DISK:
			case DOUBLE:
			case DOUBLE_BACK_SLASH:
			case DOUBLE_FORWARD_SLASH:
			case DTC_SUPPORT:
			case DUMP:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILENAME:
			case FILLFACTOR:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IDENTITYCOL:
			case IIF:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case IPV4_ADDR:
			case IPV6_ADDR:
			case ISNULL:
			case KERBEROS:
			case KEY:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOAD:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NATIVE_COMPILATION:
			case NEGOTIATE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case NULL:
			case OFFSETS:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PLATFORM:
			case POLICY:
			case PRECISION:
			case PREDICATE:
			case PROCESS:
			case PUBLIC:
			case PUSHDOWN:
			case PYTHON:
			case R:
			case RAW:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESULT_SETS:
			case RESUME:
			case RETAINDAYS:
			case RETURN:
			case RETURNS:
			case REWIND:
			case ROLE:
			case ROWCOUNT:
			case ROWGUIDCOL:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SECURITYAUDIT:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SESSION_USER:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case SYSTEM_USER:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case USER:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHIN:
			case WITHOUT:
			case WITNESS:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BUCKET_COUNT:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATEFIRST:
			case DATEFORMAT:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADOOP:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNDEFINED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case DOLLAR_ACTION:
			case SPACE:
			case COMMENT:
			case LINE_COMMENT:
			case DOUBLE_QUOTE_ID:
			case SINGLE_QUOTE:
			case SQUARE_BRACKET_ID:
			case LOCAL_ID:
			case DECIMAL:
			case ID:
			case QUOTED_URL:
			case QUOTED_HOST_AND_PORT:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case EQUAL:
			case GREATER:
			case LESS:
			case EXCLAMATION:
			case PLUS_ASSIGN:
			case MINUS_ASSIGN:
			case MULT_ASSIGN:
			case DIV_ASSIGN:
			case MOD_ASSIGN:
			case AND_ASSIGN:
			case XOR_ASSIGN:
			case OR_ASSIGN:
			case DOUBLE_BAR:
			case DOT:
			case UNDERLINE:
			case AT:
			case SHARP:
			case DOLLAR:
			case LR_BRACKET:
			case RR_BRACKET:
			case COMMA:
			case SEMI:
			case COLON:
			case STAR:
			case DIVIDE:
			case MODULE:
			case PLUS:
			case MINUS:
			case BIT_NOT:
			case BIT_OR:
			case BIT_AND:
			case BIT_XOR:
			case MDY:
			case DMY:
			case YMD:
			case YDM:
			case MYD:
			case DYM:
			case IPV4_OCTECT:
				{
				State = 8215; data_type();
				}
				break;
			case AS:
				{
				State = 8216; Match(AS);
				State = 8217; expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 8222;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COLLATE) {
				{
				State = 8220; Match(COLLATE);
				State = 8221; id();
				}
			}

			State = 8225;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==NOT || _la==NULL) {
				{
				State = 8224; null_notnull();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Security_statementContext : ParserRuleContext {
		public Schema_object_nameContext on_id;
		public IdContext _id;
		public IList<IdContext> _to_principal = new List<IdContext>();
		public IdContext as_principal;
		public Execute_clauseContext execute_clause() {
			return GetRuleContext<Execute_clauseContext>(0);
		}
		public ITerminalNode[] GRANT() { return GetTokens(TSqlParser.GRANT); }
		public ITerminalNode GRANT(int i) {
			return GetToken(TSqlParser.GRANT, i);
		}
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public Grant_permissionContext grant_permission() {
			return GetRuleContext<Grant_permissionContext>(0);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode OPTION() { return GetToken(TSqlParser.OPTION, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Schema_object_nameContext schema_object_name() {
			return GetRuleContext<Schema_object_nameContext>(0);
		}
		public ITerminalNode PRIVILEGES() { return GetToken(TSqlParser.PRIVILEGES, 0); }
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public ITerminalNode REVERT() { return GetToken(TSqlParser.REVERT, 0); }
		public ITerminalNode COOKIE() { return GetToken(TSqlParser.COOKIE, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Open_keyContext open_key() {
			return GetRuleContext<Open_keyContext>(0);
		}
		public Close_keyContext close_key() {
			return GetRuleContext<Close_keyContext>(0);
		}
		public Create_keyContext create_key() {
			return GetRuleContext<Create_keyContext>(0);
		}
		public Create_certificateContext create_certificate() {
			return GetRuleContext<Create_certificateContext>(0);
		}
		public Security_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_security_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSecurity_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSecurity_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSecurity_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Security_statementContext security_statement() {
		Security_statementContext _localctx = new Security_statementContext(_ctx, State);
		EnterRule(_localctx, 658, RULE_security_statement);
		int _la;
		try {
			int _alt;
			State = 8286;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1143,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8227; execute_clause();
				State = 8229;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1132,_ctx) ) {
				case 1:
					{
					State = 8228; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8231; Match(GRANT);
				State = 8243;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case ALL:
					{
					State = 8232; Match(ALL);
					State = 8234;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==PRIVILEGES) {
						{
						State = 8233; Match(PRIVILEGES);
						}
					}

					}
					break;
				case ALTER:
				case CREATE:
				case EXECUTE:
				case INSERT:
				case REFERENCES:
				case SELECT:
				case VIEW:
				case CONTROL:
				case IMPERSONATE:
				case SHOWPLAN:
				case TAKE:
					{
					State = 8236; grant_permission();
					State = 8241;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==LR_BRACKET) {
						{
						State = 8237; Match(LR_BRACKET);
						State = 8238; column_name_list();
						State = 8239; Match(RR_BRACKET);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 8247;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ON) {
					{
					State = 8245; Match(ON);
					State = 8246; _localctx.on_id = schema_object_name();
					}
				}

				State = 8249; Match(TO);
				{
				State = 8250; _localctx._id = id();
				_localctx._to_principal.Add(_localctx._id);
				}
				State = 8255;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1137,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 8251; Match(COMMA);
						State = 8252; _localctx._id = id();
						_localctx._to_principal.Add(_localctx._id);
						}
						} 
					}
					State = 8257;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1137,_ctx);
				}
				State = 8261;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1138,_ctx) ) {
				case 1:
					{
					State = 8258; Match(WITH);
					State = 8259; Match(GRANT);
					State = 8260; Match(OPTION);
					}
					break;
				}
				State = 8265;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AS) {
					{
					State = 8263; Match(AS);
					State = 8264; _localctx.as_principal = id();
					}
				}

				State = 8268;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1140,_ctx) ) {
				case 1:
					{
					State = 8267; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8270; Match(REVERT);
				State = 8277;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1141,_ctx) ) {
				case 1:
					{
					State = 8271; Match(LR_BRACKET);
					State = 8272; Match(WITH);
					State = 8273; Match(COOKIE);
					State = 8274; Match(EQUAL);
					State = 8275; Match(LOCAL_ID);
					State = 8276; Match(RR_BRACKET);
					}
					break;
				}
				State = 8280;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1142,_ctx) ) {
				case 1:
					{
					State = 8279; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8282; open_key();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8283; close_key();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 8284; create_key();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 8285; create_certificate();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_certificateContext : ParserRuleContext {
		public IdContext certificate_name;
		public IdContext user_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public Existing_keysContext existing_keys() {
			return GetRuleContext<Existing_keysContext>(0);
		}
		public Generate_new_keysContext generate_new_keys() {
			return GetRuleContext<Generate_new_keysContext>(0);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode ACTIVE() { return GetToken(TSqlParser.ACTIVE, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode BEGIN() { return GetToken(TSqlParser.BEGIN, 0); }
		public ITerminalNode DIALOG() { return GetToken(TSqlParser.DIALOG, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Create_certificateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_certificate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_certificate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_certificate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_certificate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_certificateContext create_certificate() {
		Create_certificateContext _localctx = new Create_certificateContext(_ctx, State);
		EnterRule(_localctx, 660, RULE_create_certificate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8288; Match(CREATE);
			State = 8289; Match(CERTIFICATE);
			State = 8290; _localctx.certificate_name = id();
			State = 8293;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AUTHORIZATION) {
				{
				State = 8291; Match(AUTHORIZATION);
				State = 8292; _localctx.user_name = id();
				}
			}

			State = 8298;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case FROM:
				{
				State = 8295; Match(FROM);
				State = 8296; existing_keys();
				}
				break;
			case WITH:
			case ENCRYPTION:
				{
				State = 8297; generate_new_keys();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 8306;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1146,_ctx) ) {
			case 1:
				{
				State = 8300; Match(ACTIVE);
				State = 8301; Match(FOR);
				State = 8302; Match(BEGIN);
				State = 8303; Match(DIALOG);
				State = 8304; Match(EQUAL);
				State = 8305;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Existing_keysContext : ParserRuleContext {
		public IdContext assembly_name;
		public IToken path_to_file;
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode EXECUTABLE() { return GetToken(TSqlParser.EXECUTABLE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode PRIVATE() { return GetToken(TSqlParser.PRIVATE, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public Private_key_optionsContext private_key_options() {
			return GetRuleContext<Private_key_optionsContext>(0);
		}
		public Existing_keysContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_existing_keys; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExisting_keys(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExisting_keys(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExisting_keys(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Existing_keysContext existing_keys() {
		Existing_keysContext _localctx = new Existing_keysContext(_ctx, State);
		EnterRule(_localctx, 662, RULE_existing_keys);
		int _la;
		try {
			State = 8325;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ASSEMBLY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8308; Match(ASSEMBLY);
				State = 8309; _localctx.assembly_name = id();
				}
				break;
			case FILE:
			case EXECUTABLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8311;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==EXECUTABLE) {
					{
					State = 8310; Match(EXECUTABLE);
					}
				}

				State = 8313; Match(FILE);
				State = 8314; Match(EQUAL);
				State = 8315; _localctx.path_to_file = Match(STRING);
				State = 8323;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1148,_ctx) ) {
				case 1:
					{
					State = 8316; Match(WITH);
					State = 8317; Match(PRIVATE);
					State = 8318; Match(KEY);
					State = 8319; Match(LR_BRACKET);
					State = 8320; private_key_options();
					State = 8321; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Private_key_optionsContext : ParserRuleContext {
		public IToken path;
		public IToken password;
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode DECRYPTION() { return GetToken(TSqlParser.DECRYPTION, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public Private_key_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_private_key_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPrivate_key_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPrivate_key_options(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrivate_key_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Private_key_optionsContext private_key_options() {
		Private_key_optionsContext _localctx = new Private_key_optionsContext(_ctx, State);
		EnterRule(_localctx, 664, RULE_private_key_options);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8327;
			_la = _input.La(1);
			if ( !(_la==FILE || _la==BINARY) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 8328; Match(EQUAL);
			State = 8329; _localctx.path = Match(STRING);
			State = 8336;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 8330; Match(COMMA);
				State = 8331;
				_la = _input.La(1);
				if ( !(_la==DECRYPTION || _la==ENCRYPTION) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 8332; Match(BY);
				State = 8333; Match(PASSWORD);
				State = 8334; Match(EQUAL);
				State = 8335; _localctx.password = Match(STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generate_new_keysContext : ParserRuleContext {
		public IToken password;
		public IToken certificate_subject_name;
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode SUBJECT() { return GetToken(TSqlParser.SUBJECT, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public Date_optionsContext[] date_options() {
			return GetRuleContexts<Date_optionsContext>();
		}
		public Date_optionsContext date_options(int i) {
			return GetRuleContext<Date_optionsContext>(i);
		}
		public Generate_new_keysContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generate_new_keys; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGenerate_new_keys(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGenerate_new_keys(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenerate_new_keys(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Generate_new_keysContext generate_new_keys() {
		Generate_new_keysContext _localctx = new Generate_new_keysContext(_ctx, State);
		EnterRule(_localctx, 666, RULE_generate_new_keys);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8343;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ENCRYPTION) {
				{
				State = 8338; Match(ENCRYPTION);
				State = 8339; Match(BY);
				State = 8340; Match(PASSWORD);
				State = 8341; Match(EQUAL);
				State = 8342; _localctx.password = Match(STRING);
				}
			}

			State = 8345; Match(WITH);
			State = 8346; Match(SUBJECT);
			State = 8347; Match(EQUAL);
			State = 8348; _localctx.certificate_subject_name = Match(STRING);
			State = 8353;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1152,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 8349; Match(COMMA);
					State = 8350; date_options();
					}
					} 
				}
				State = 8355;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1152,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Date_optionsContext : ParserRuleContext {
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode START_DATE() { return GetToken(TSqlParser.START_DATE, 0); }
		public ITerminalNode EXPIRY_DATE() { return GetToken(TSqlParser.EXPIRY_DATE, 0); }
		public Date_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_date_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDate_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDate_options(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDate_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Date_optionsContext date_options() {
		Date_optionsContext _localctx = new Date_optionsContext(_ctx, State);
		EnterRule(_localctx, 668, RULE_date_options);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8356;
			_la = _input.La(1);
			if ( !(_la==EXPIRY_DATE || _la==START_DATE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 8357; Match(EQUAL);
			State = 8358; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Open_keyContext : ParserRuleContext {
		public IdContext key_name;
		public IToken password;
		public ITerminalNode OPEN() { return GetToken(TSqlParser.OPEN, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode DECRYPTION() { return GetToken(TSqlParser.DECRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public Decryption_mechanismContext decryption_mechanism() {
			return GetRuleContext<Decryption_mechanismContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Open_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_open_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOpen_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOpen_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpen_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Open_keyContext open_key() {
		Open_keyContext _localctx = new Open_keyContext(_ctx, State);
		EnterRule(_localctx, 670, RULE_open_key);
		try {
			State = 8376;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1153,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8360; Match(OPEN);
				State = 8361; Match(SYMMETRIC);
				State = 8362; Match(KEY);
				State = 8363; _localctx.key_name = id();
				State = 8364; Match(DECRYPTION);
				State = 8365; Match(BY);
				State = 8366; decryption_mechanism();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8368; Match(OPEN);
				State = 8369; Match(MASTER);
				State = 8370; Match(KEY);
				State = 8371; Match(DECRYPTION);
				State = 8372; Match(BY);
				State = 8373; Match(PASSWORD);
				State = 8374; Match(EQUAL);
				State = 8375; _localctx.password = Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Close_keyContext : ParserRuleContext {
		public IdContext key_name;
		public ITerminalNode CLOSE() { return GetToken(TSqlParser.CLOSE, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode KEYS() { return GetToken(TSqlParser.KEYS, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public Close_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_close_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterClose_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitClose_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClose_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Close_keyContext close_key() {
		Close_keyContext _localctx = new Close_keyContext(_ctx, State);
		EnterRule(_localctx, 672, RULE_close_key);
		try {
			State = 8389;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1154,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8378; Match(CLOSE);
				State = 8379; Match(SYMMETRIC);
				State = 8380; Match(KEY);
				State = 8381; _localctx.key_name = id();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8382; Match(CLOSE);
				State = 8383; Match(ALL);
				State = 8384; Match(SYMMETRIC);
				State = 8385; Match(KEYS);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8386; Match(CLOSE);
				State = 8387; Match(MASTER);
				State = 8388; Match(KEY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_keyContext : ParserRuleContext {
		public IToken password;
		public IdContext key_name;
		public IdContext user_name;
		public IdContext provider_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode[] ENCRYPTION() { return GetTokens(TSqlParser.ENCRYPTION); }
		public ITerminalNode ENCRYPTION(int i) {
			return GetToken(TSqlParser.ENCRYPTION, i);
		}
		public ITerminalNode[] BY() { return GetTokens(TSqlParser.BY); }
		public ITerminalNode BY(int i) {
			return GetToken(TSqlParser.BY, i);
		}
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public Key_optionsContext[] key_options() {
			return GetRuleContexts<Key_optionsContext>();
		}
		public Key_optionsContext key_options(int i) {
			return GetRuleContext<Key_optionsContext>(i);
		}
		public Encryption_mechanismContext[] encryption_mechanism() {
			return GetRuleContexts<Encryption_mechanismContext>();
		}
		public Encryption_mechanismContext encryption_mechanism(int i) {
			return GetRuleContext<Encryption_mechanismContext>(i);
		}
		public Create_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_keyContext create_key() {
		Create_keyContext _localctx = new Create_keyContext(_ctx, State);
		EnterRule(_localctx, 674, RULE_create_key);
		int _la;
		try {
			int _alt;
			State = 8426;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1160,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8391; Match(CREATE);
				State = 8392; Match(MASTER);
				State = 8393; Match(KEY);
				State = 8394; Match(ENCRYPTION);
				State = 8395; Match(BY);
				State = 8396; Match(PASSWORD);
				State = 8397; Match(EQUAL);
				State = 8398; _localctx.password = Match(STRING);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8399; Match(CREATE);
				State = 8400; Match(SYMMETRIC);
				State = 8401; Match(KEY);
				State = 8402; _localctx.key_name = id();
				State = 8405;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AUTHORIZATION) {
					{
					State = 8403; Match(AUTHORIZATION);
					State = 8404; _localctx.user_name = id();
					}
				}

				State = 8410;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==FROM) {
					{
					State = 8407; Match(FROM);
					State = 8408; Match(PROVIDER);
					State = 8409; _localctx.provider_name = id();
					}
				}

				State = 8412; Match(WITH);
				State = 8422;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 8417;
						_errHandler.Sync(this);
						switch (_input.La(1)) {
						case ALGORITHM:
						case CREATION_DISPOSITION:
						case IDENTITY_VALUE:
						case KEY_SOURCE:
						case PROVIDER_KEY_NAME:
							{
							State = 8413; key_options();
							}
							break;
						case ENCRYPTION:
							{
							State = 8414; Match(ENCRYPTION);
							State = 8415; Match(BY);
							State = 8416; encryption_mechanism();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 8420;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1158,_ctx) ) {
						case 1:
							{
							State = 8419; Match(COMMA);
							}
							break;
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 8424;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1159,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Key_optionsContext : ParserRuleContext {
		public IToken pass_phrase;
		public IToken identity_phrase;
		public IToken key_name_in_provider;
		public ITerminalNode KEY_SOURCE() { return GetToken(TSqlParser.KEY_SOURCE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode ALGORITHM() { return GetToken(TSqlParser.ALGORITHM, 0); }
		public AlgorithmContext algorithm() {
			return GetRuleContext<AlgorithmContext>(0);
		}
		public ITerminalNode IDENTITY_VALUE() { return GetToken(TSqlParser.IDENTITY_VALUE, 0); }
		public ITerminalNode PROVIDER_KEY_NAME() { return GetToken(TSqlParser.PROVIDER_KEY_NAME, 0); }
		public ITerminalNode CREATION_DISPOSITION() { return GetToken(TSqlParser.CREATION_DISPOSITION, 0); }
		public ITerminalNode CREATE_NEW() { return GetToken(TSqlParser.CREATE_NEW, 0); }
		public ITerminalNode OPEN_EXISTING() { return GetToken(TSqlParser.OPEN_EXISTING, 0); }
		public Key_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterKey_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitKey_options(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKey_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Key_optionsContext key_options() {
		Key_optionsContext _localctx = new Key_optionsContext(_ctx, State);
		EnterRule(_localctx, 676, RULE_key_options);
		int _la;
		try {
			State = 8443;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case KEY_SOURCE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8428; Match(KEY_SOURCE);
				State = 8429; Match(EQUAL);
				State = 8430; _localctx.pass_phrase = Match(STRING);
				}
				break;
			case ALGORITHM:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8431; Match(ALGORITHM);
				State = 8432; Match(EQUAL);
				State = 8433; algorithm();
				}
				break;
			case IDENTITY_VALUE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8434; Match(IDENTITY_VALUE);
				State = 8435; Match(EQUAL);
				State = 8436; _localctx.identity_phrase = Match(STRING);
				}
				break;
			case PROVIDER_KEY_NAME:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8437; Match(PROVIDER_KEY_NAME);
				State = 8438; Match(EQUAL);
				State = 8439; _localctx.key_name_in_provider = Match(STRING);
				}
				break;
			case CREATION_DISPOSITION:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8440; Match(CREATION_DISPOSITION);
				State = 8441; Match(EQUAL);
				State = 8442;
				_la = _input.La(1);
				if ( !(_la==CREATE_NEW || _la==OPEN_EXISTING) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlgorithmContext : ParserRuleContext {
		public ITerminalNode DES() { return GetToken(TSqlParser.DES, 0); }
		public ITerminalNode TRIPLE_DES() { return GetToken(TSqlParser.TRIPLE_DES, 0); }
		public ITerminalNode TRIPLE_DES_3KEY() { return GetToken(TSqlParser.TRIPLE_DES_3KEY, 0); }
		public ITerminalNode RC2() { return GetToken(TSqlParser.RC2, 0); }
		public ITerminalNode RC4() { return GetToken(TSqlParser.RC4, 0); }
		public ITerminalNode RC4_128() { return GetToken(TSqlParser.RC4_128, 0); }
		public ITerminalNode DESX() { return GetToken(TSqlParser.DESX, 0); }
		public ITerminalNode AES_128() { return GetToken(TSqlParser.AES_128, 0); }
		public ITerminalNode AES_192() { return GetToken(TSqlParser.AES_192, 0); }
		public ITerminalNode AES_256() { return GetToken(TSqlParser.AES_256, 0); }
		public AlgorithmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_algorithm; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlgorithm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlgorithm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlgorithm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlgorithmContext algorithm() {
		AlgorithmContext _localctx = new AlgorithmContext(_ctx, State);
		EnterRule(_localctx, 678, RULE_algorithm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8445;
			_la = _input.La(1);
			if ( !(((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (AES_128 - 392)) | (1L << (AES_192 - 392)) | (1L << (AES_256 - 392)))) != 0) || _la==DES || _la==DESX || ((((_la - 673)) & ~0x3f) == 0 && ((1L << (_la - 673)) & ((1L << (RC2 - 673)) | (1L << (RC4 - 673)) | (1L << (RC4_128 - 673)))) != 0) || _la==TRIPLE_DES || _la==TRIPLE_DES_3KEY) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Encryption_mechanismContext : ParserRuleContext {
		public IdContext certificate_name;
		public IdContext asym_key_name;
		public IdContext decrypting_Key_name;
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Encryption_mechanismContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_encryption_mechanism; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEncryption_mechanism(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEncryption_mechanism(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEncryption_mechanism(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Encryption_mechanismContext encryption_mechanism() {
		Encryption_mechanismContext _localctx = new Encryption_mechanismContext(_ctx, State);
		EnterRule(_localctx, 680, RULE_encryption_mechanism);
		try {
			State = 8458;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case CERTIFICATE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8447; Match(CERTIFICATE);
				State = 8448; _localctx.certificate_name = id();
				}
				break;
			case ASYMMETRIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8449; Match(ASYMMETRIC);
				State = 8450; Match(KEY);
				State = 8451; _localctx.asym_key_name = id();
				}
				break;
			case SYMMETRIC:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8452; Match(SYMMETRIC);
				State = 8453; Match(KEY);
				State = 8454; _localctx.decrypting_Key_name = id();
				}
				break;
			case PASSWORD:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8455; Match(PASSWORD);
				State = 8456; Match(EQUAL);
				State = 8457; Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decryption_mechanismContext : ParserRuleContext {
		public IdContext certificate_name;
		public IdContext asym_key_name;
		public IdContext decrypting_Key_name;
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public Decryption_mechanismContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decryption_mechanism; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDecryption_mechanism(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDecryption_mechanism(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecryption_mechanism(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Decryption_mechanismContext decryption_mechanism() {
		Decryption_mechanismContext _localctx = new Decryption_mechanismContext(_ctx, State);
		EnterRule(_localctx, 682, RULE_decryption_mechanism);
		try {
			State = 8483;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case CERTIFICATE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8460; Match(CERTIFICATE);
				State = 8461; _localctx.certificate_name = id();
				State = 8466;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1163,_ctx) ) {
				case 1:
					{
					State = 8462; Match(WITH);
					State = 8463; Match(PASSWORD);
					State = 8464; Match(EQUAL);
					State = 8465; Match(STRING);
					}
					break;
				}
				}
				break;
			case ASYMMETRIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8468; Match(ASYMMETRIC);
				State = 8469; Match(KEY);
				State = 8470; _localctx.asym_key_name = id();
				State = 8475;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1164,_ctx) ) {
				case 1:
					{
					State = 8471; Match(WITH);
					State = 8472; Match(PASSWORD);
					State = 8473; Match(EQUAL);
					State = 8474; Match(STRING);
					}
					break;
				}
				}
				break;
			case SYMMETRIC:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8477; Match(SYMMETRIC);
				State = 8478; Match(KEY);
				State = 8479; _localctx.decrypting_Key_name = id();
				}
				break;
			case PASSWORD:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8480; Match(PASSWORD);
				State = 8481; Match(EQUAL);
				State = 8482; Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grant_permissionContext : ParserRuleContext {
		public ITerminalNode EXECUTE() { return GetToken(TSqlParser.EXECUTE, 0); }
		public ITerminalNode VIEW() { return GetToken(TSqlParser.VIEW, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode TAKE() { return GetToken(TSqlParser.TAKE, 0); }
		public ITerminalNode CONTROL() { return GetToken(TSqlParser.CONTROL, 0); }
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public ITerminalNode SHOWPLAN() { return GetToken(TSqlParser.SHOWPLAN, 0); }
		public ITerminalNode IMPERSONATE() { return GetToken(TSqlParser.IMPERSONATE, 0); }
		public ITerminalNode SELECT() { return GetToken(TSqlParser.SELECT, 0); }
		public ITerminalNode REFERENCES() { return GetToken(TSqlParser.REFERENCES, 0); }
		public ITerminalNode INSERT() { return GetToken(TSqlParser.INSERT, 0); }
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode ANY() { return GetToken(TSqlParser.ANY, 0); }
		public Grant_permissionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grant_permission; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGrant_permission(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGrant_permission(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrant_permission(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Grant_permissionContext grant_permission() {
		Grant_permissionContext _localctx = new Grant_permissionContext(_ctx, State);
		EnterRule(_localctx, 684, RULE_grant_permission);
		int _la;
		try {
			State = 8511;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case EXECUTE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8485; Match(EXECUTE);
				}
				break;
			case VIEW:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8486; Match(VIEW);
				State = 8487; id();
				}
				break;
			case TAKE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8488; Match(TAKE);
				State = 8489; id();
				}
				break;
			case CONTROL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8490; Match(CONTROL);
				State = 8492;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1166,_ctx) ) {
				case 1:
					{
					State = 8491; id();
					}
					break;
				}
				}
				break;
			case CREATE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8494; Match(CREATE);
				State = 8495;
				_la = _input.La(1);
				if ( !(_la==TABLE || _la==VIEW) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			case SHOWPLAN:
				EnterOuterAlt(_localctx, 6);
				{
				State = 8496; Match(SHOWPLAN);
				}
				break;
			case IMPERSONATE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 8497; Match(IMPERSONATE);
				}
				break;
			case SELECT:
				EnterOuterAlt(_localctx, 8);
				{
				State = 8498; Match(SELECT);
				}
				break;
			case REFERENCES:
				EnterOuterAlt(_localctx, 9);
				{
				State = 8499; Match(REFERENCES);
				}
				break;
			case INSERT:
				EnterOuterAlt(_localctx, 10);
				{
				State = 8500; Match(INSERT);
				}
				break;
			case ALTER:
				EnterOuterAlt(_localctx, 11);
				{
				State = 8501; Match(ALTER);
				State = 8509;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1169,_ctx) ) {
				case 1:
					{
					State = 8503;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==ANY) {
						{
						State = 8502; Match(ANY);
						}
					}

					State = 8507;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case ABSENT:
					case AES:
					case ALLOW_CONNECTIONS:
					case ALLOW_MULTIPLE_EVENT_LOSS:
					case ALLOW_SINGLE_EVENT_LOSS:
					case ANONYMOUS:
					case APPEND:
					case APPLICATION:
					case ASYMMETRIC:
					case ASYNCHRONOUS_COMMIT:
					case AUTHENTICATION:
					case AUTOMATED_BACKUP_PREFERENCE:
					case AUTOMATIC:
					case AVAILABILITY_MODE:
					case BACKSLASH:
					case BEFORE:
					case BLOCK:
					case BLOCKSIZE:
					case BLOCKING_HIERARCHY:
					case BUFFER:
					case BUFFERCOUNT:
					case CACHE:
					case CALLED:
					case CERTIFICATE:
					case CHANGETABLE:
					case CHANGES:
					case CHECK_POLICY:
					case CHECK_EXPIRATION:
					case CLASSIFIER_FUNCTION:
					case CLUSTER:
					case COMPRESSION:
					case CONNECTION_OPTIONS:
					case CONFIGURATION:
					case CONTAINMENT:
					case CONTEXT:
					case CONTINUE_AFTER_ERROR:
					case CONTRACT:
					case CONTRACT_NAME:
					case CONVERSATION:
					case COPY_ONLY:
					case CURRENT_TIMESTAMP:
					case CURRENT_USER:
					case CYCLE:
					case DATA_COMPRESSION:
					case DATA_SOURCE:
					case DATABASE_MIRRORING:
					case DEFAULT_DATABASE:
					case DEFAULT_SCHEMA:
					case DIAGNOSTICS:
					case DIFFERENTIAL:
					case DISK:
					case DOUBLE_BACK_SLASH:
					case DOUBLE_FORWARD_SLASH:
					case DTC_SUPPORT:
					case DUMP:
					case ENABLED:
					case ENDPOINT:
					case ERROR:
					case EVENT:
					case EVENTDATA:
					case EVENT_RETENTION_MODE:
					case EXECUTABLE_FILE:
					case EXPIREDATE:
					case EXTENSION:
					case EXTERNAL_ACCESS:
					case FAILOVER:
					case FAILURECONDITIONLEVEL:
					case FAN_IN:
					case FILENAME:
					case FILLFACTOR:
					case FILE_SNAPSHOT:
					case FORCESEEK:
					case FORCE_SERVICE_ALLOW_DATA_LOSS:
					case GET:
					case GOVERNOR:
					case HASHED:
					case HEALTHCHECKTIMEOUT:
					case IDENTITYCOL:
					case IIF:
					case INCLUDE:
					case INCREMENT:
					case INFINITE:
					case INIT:
					case INSTEAD:
					case IPV4_ADDR:
					case IPV6_ADDR:
					case ISNULL:
					case KERBEROS:
					case KEY:
					case KEY_PATH:
					case KEY_STORE_PROVIDER_NAME:
					case LANGUAGE:
					case LIBRARY:
					case LIFETIME:
					case LINUX:
					case LISTENER_IP:
					case LISTENER_PORT:
					case LOAD:
					case LOCAL_SERVICE_NAME:
					case LOG:
					case MATCHED:
					case MASTER:
					case MAX_MEMORY:
					case MAXTRANSFER:
					case MAXVALUE:
					case MAX_DISPATCH_LATENCY:
					case MAX_EVENT_SIZE:
					case MAX_SIZE:
					case MAX_OUTSTANDING_IO_PER_VOLUME:
					case MEDIADESCRIPTION:
					case MEDIANAME:
					case MEMBER:
					case MEMORY_PARTITION_MODE:
					case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
					case MESSAGE_FORWARDING:
					case MESSAGE_FORWARD_SIZE:
					case MINVALUE:
					case MIRROR:
					case MUST_CHANGE:
					case NATIVE_COMPILATION:
					case NEGOTIATE:
					case NOFORMAT:
					case NOINIT:
					case NONE:
					case NOREWIND:
					case NOSKIP:
					case NOUNLOAD:
					case NO_CHECKSUM:
					case NO_COMPRESSION:
					case NO_EVENT_LOSS:
					case NOTIFICATION:
					case NTLM:
					case NULL:
					case OFFSETS:
					case OLD_PASSWORD:
					case ON_FAILURE:
					case PAGE:
					case PARAM_NODE:
					case PARTIAL:
					case PASSWORD:
					case PERMISSION_SET:
					case PER_CPU:
					case PER_DB:
					case PER_NODE:
					case PLATFORM:
					case POLICY:
					case PRECISION:
					case PREDICATE:
					case PROCESS:
					case PUBLIC:
					case PUSHDOWN:
					case PYTHON:
					case R:
					case RAW:
					case READ_WRITE_FILEGROUPS:
					case REGENERATE:
					case RELATED_CONVERSATION:
					case RELATED_CONVERSATION_GROUP:
					case REQUIRED:
					case RESET:
					case RESTART:
					case RESULT_SETS:
					case RESUME:
					case RETAINDAYS:
					case RETURN:
					case RETURNS:
					case REWIND:
					case ROLE:
					case ROWCOUNT:
					case ROWGUIDCOL:
					case RSA_512:
					case RSA_1024:
					case RSA_2048:
					case RSA_3072:
					case RSA_4096:
					case SAFETY:
					case SAFE:
					case SCHEDULER:
					case SCHEME:
					case SECURITYAUDIT:
					case SERVER:
					case SERVICE:
					case SERVICE_BROKER:
					case SERVICE_NAME:
					case SESSION:
					case SESSION_USER:
					case SID:
					case SKIP_KEYWORD:
					case SOFTNUMA:
					case SOURCE:
					case SPECIFICATION:
					case SPLIT:
					case SQLDUMPERFLAGS:
					case SQLDUMPERPATH:
					case SQLDUMPERTIMEOUT:
					case STATE:
					case STATS:
					case START:
					case STARTED:
					case STARTUP_STATE:
					case STOP:
					case STOPPED:
					case STOP_ON_ERROR:
					case SUPPORTED:
					case SYSTEM_USER:
					case TAPE:
					case TARGET:
					case TCP:
					case TRACK_CAUSALITY:
					case TRANSFER:
					case UNCHECKED:
					case UNLOCK:
					case UNSAFE:
					case URL:
					case USED:
					case USER:
					case VERBOSELOGGING:
					case VISIBILITY:
					case WINDOWS:
					case WITHIN:
					case WITHOUT:
					case WITNESS:
					case ABSOLUTE:
					case ACCENT_SENSITIVITY:
					case ACTION:
					case ACTIVATION:
					case ACTIVE:
					case ADDRESS:
					case AES_128:
					case AES_192:
					case AES_256:
					case AFFINITY:
					case AFTER:
					case AGGREGATE:
					case ALGORITHM:
					case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
					case ALLOW_SNAPSHOT_ISOLATION:
					case ALLOWED:
					case ANSI_NULL_DEFAULT:
					case ANSI_NULLS:
					case ANSI_PADDING:
					case ANSI_WARNINGS:
					case APPLICATION_LOG:
					case APPLY:
					case ARITHABORT:
					case ASSEMBLY:
					case AUDIT:
					case AUDIT_GUID:
					case AUTO:
					case AUTO_CLEANUP:
					case AUTO_CLOSE:
					case AUTO_CREATE_STATISTICS:
					case AUTO_SHRINK:
					case AUTO_UPDATE_STATISTICS:
					case AUTO_UPDATE_STATISTICS_ASYNC:
					case AVAILABILITY:
					case AVG:
					case BACKUP_PRIORITY:
					case BEGIN_DIALOG:
					case BIGINT:
					case BINARY_BASE64:
					case BINARY_CHECKSUM:
					case BINDING:
					case BLOB_STORAGE:
					case BROKER:
					case BROKER_INSTANCE:
					case BUCKET_COUNT:
					case BULK_LOGGED:
					case CALLER:
					case CAP_CPU_PERCENT:
					case CAST:
					case CATALOG:
					case CATCH:
					case CHANGE_RETENTION:
					case CHANGE_TRACKING:
					case CHECKSUM:
					case CHECKSUM_AGG:
					case CLEANUP:
					case COLLECTION:
					case COLUMN_MASTER_KEY:
					case COMMITTED:
					case COMPATIBILITY_LEVEL:
					case CONCAT:
					case CONCAT_NULL_YIELDS_NULL:
					case CONTENT:
					case CONTROL:
					case COOKIE:
					case COUNT:
					case COUNT_BIG:
					case COUNTER:
					case CPU:
					case CREATE_NEW:
					case CREATION_DISPOSITION:
					case CREDENTIAL:
					case CRYPTOGRAPHIC:
					case CURSOR_CLOSE_ON_COMMIT:
					case CURSOR_DEFAULT:
					case DATA:
					case DATE_CORRELATION_OPTIMIZATION:
					case DATEADD:
					case DATEDIFF:
					case DATEFIRST:
					case DATEFORMAT:
					case DATENAME:
					case DATEPART:
					case DAYS:
					case DB_CHAINING:
					case DB_FAILOVER:
					case DECRYPTION:
					case DEFAULT_DOUBLE_QUOTE:
					case DEFAULT_FULLTEXT_LANGUAGE:
					case DEFAULT_LANGUAGE:
					case DELAY:
					case DELAYED_DURABILITY:
					case DELETED:
					case DENSE_RANK:
					case DEPENDENTS:
					case DES:
					case DESCRIPTION:
					case DESX:
					case DHCP:
					case DIALOG:
					case DIRECTORY_NAME:
					case DISABLE:
					case DISABLE_BROKER:
					case DISABLED:
					case DISK_DRIVE:
					case DOCUMENT:
					case DYNAMIC:
					case ELEMENTS:
					case EMERGENCY:
					case EMPTY:
					case ENABLE:
					case ENABLE_BROKER:
					case ENCRYPTED_VALUE:
					case ENCRYPTION:
					case ENDPOINT_URL:
					case ERROR_BROKER_CONVERSATIONS:
					case EXCLUSIVE:
					case EXECUTABLE:
					case EXIST:
					case EXPAND:
					case EXPIRY_DATE:
					case EXPLICIT:
					case FAIL_OPERATION:
					case FAILOVER_MODE:
					case FAILURE:
					case FAILURE_CONDITION_LEVEL:
					case FAST:
					case FAST_FORWARD:
					case FILEGROUP:
					case FILEGROWTH:
					case FILEPATH:
					case FILESTREAM:
					case FILTER:
					case FIRST:
					case FIRST_VALUE:
					case FOLLOWING:
					case FORCE:
					case FORCE_FAILOVER_ALLOW_DATA_LOSS:
					case FORCED:
					case FORMAT:
					case FORWARD_ONLY:
					case FULLSCAN:
					case FULLTEXT:
					case GB:
					case GETDATE:
					case GETUTCDATE:
					case GLOBAL:
					case GO:
					case GROUP_MAX_REQUESTS:
					case GROUPING:
					case GROUPING_ID:
					case HADOOP:
					case HADR:
					case HASH:
					case HEALTH_CHECK_TIMEOUT:
					case HIGH:
					case HONOR_BROKER_PRIORITY:
					case HOURS:
					case IDENTITY_VALUE:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMMEDIATE:
					case IMPERSONATE:
					case IMPORTANCE:
					case INCLUDE_NULL_VALUES:
					case INCREMENTAL:
					case INITIATOR:
					case INPUT:
					case INSENSITIVE:
					case INSERTED:
					case INT:
					case IP:
					case ISOLATION:
					case JOB:
					case JSON:
					case KB:
					case KEEP:
					case KEEPFIXED:
					case KEY_SOURCE:
					case KEYS:
					case KEYSET:
					case LAG:
					case LAST:
					case LAST_VALUE:
					case LEAD:
					case LEVEL:
					case LIST:
					case LISTENER:
					case LISTENER_URL:
					case LOB_COMPACTION:
					case LOCAL:
					case LOCATION:
					case LOCK:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case LOW:
					case MANUAL:
					case MARK:
					case MATERIALIZED:
					case MAX:
					case MAX_CPU_PERCENT:
					case MAX_DOP:
					case MAX_FILES:
					case MAX_IOPS_PER_VOLUME:
					case MAX_MEMORY_PERCENT:
					case MAX_PROCESSES:
					case MAX_QUEUE_READERS:
					case MAX_ROLLOVER_FILES:
					case MAXDOP:
					case MAXRECURSION:
					case MAXSIZE:
					case MB:
					case MEDIUM:
					case MEMORY_OPTIMIZED_DATA:
					case MESSAGE:
					case MIN:
					case MIN_ACTIVE_ROWVERSION:
					case MIN_CPU_PERCENT:
					case MIN_IOPS_PER_VOLUME:
					case MIN_MEMORY_PERCENT:
					case MINUTES:
					case MIRROR_ADDRESS:
					case MIXED_PAGE_ALLOCATION:
					case MODE:
					case MODIFY:
					case MOVE:
					case MULTI_USER:
					case NAME:
					case NESTED_TRIGGERS:
					case NEW_ACCOUNT:
					case NEW_BROKER:
					case NEW_PASSWORD:
					case NEXT:
					case NO:
					case NO_TRUNCATE:
					case NO_WAIT:
					case NOCOUNT:
					case NODES:
					case NOEXPAND:
					case NON_TRANSACTED_ACCESS:
					case NORECOMPUTE:
					case NORECOVERY:
					case NOWAIT:
					case NTILE:
					case NUMANODE:
					case NUMBER:
					case NUMERIC_ROUNDABORT:
					case OBJECT:
					case OFFLINE:
					case OFFSET:
					case OLD_ACCOUNT:
					case ONLINE:
					case ONLY:
					case OPEN_EXISTING:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OVERRIDE:
					case OWNER:
					case PAGE_VERIFY:
					case PARAMETERIZATION:
					case PARTITION:
					case PARTITIONS:
					case PARTNER:
					case PATH:
					case POISON_MESSAGE_HANDLING:
					case POOL:
					case PORT:
					case PRECEDING:
					case PRIMARY_ROLE:
					case PRIOR:
					case PRIORITY:
					case PRIORITY_LEVEL:
					case PRIVATE:
					case PRIVATE_KEY:
					case PRIVILEGES:
					case PROCEDURE_NAME:
					case PROPERTY:
					case PROVIDER:
					case PROVIDER_KEY_NAME:
					case QUERY:
					case QUEUE:
					case QUEUE_DELAY:
					case QUOTED_IDENTIFIER:
					case RANGE:
					case RANK:
					case RC2:
					case RC4:
					case RC4_128:
					case READ_COMMITTED_SNAPSHOT:
					case READ_ONLY:
					case READ_ONLY_ROUTING_LIST:
					case READ_WRITE:
					case READONLY:
					case REBUILD:
					case RECEIVE:
					case RECOMPILE:
					case RECOVERY:
					case RECURSIVE_TRIGGERS:
					case RELATIVE:
					case REMOTE:
					case REMOTE_SERVICE_NAME:
					case REMOVE:
					case REORGANIZE:
					case REPEATABLE:
					case REPLICA:
					case REQUEST_MAX_CPU_TIME_SEC:
					case REQUEST_MAX_MEMORY_GRANT_PERCENT:
					case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
					case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					case RESERVE_DISK_SPACE:
					case RESOURCE:
					case RESOURCE_MANAGER_LOCATION:
					case RESTRICTED_USER:
					case RETENTION:
					case ROBUST:
					case ROOT:
					case ROUTE:
					case ROW:
					case ROW_NUMBER:
					case ROWGUID:
					case ROWS:
					case SAMPLE:
					case SCHEMABINDING:
					case SCOPED:
					case SCROLL:
					case SCROLL_LOCKS:
					case SEARCH:
					case SECONDARY:
					case SECONDARY_ONLY:
					case SECONDARY_ROLE:
					case SECONDS:
					case SECRET:
					case SECURITY:
					case SECURITY_LOG:
					case SEEDING_MODE:
					case SELF:
					case SEMI_SENSITIVE:
					case SEND:
					case SENT:
					case SEQUENCE:
					case SERIALIZABLE:
					case SESSION_TIMEOUT:
					case SETERROR:
					case SHARE:
					case SHOWPLAN:
					case SIGNATURE:
					case SIMPLE:
					case SINGLE_USER:
					case SIZE:
					case SMALLINT:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STANDBY:
					case START_DATE:
					case STATIC:
					case STATS_STREAM:
					case STATUS:
					case STATUSONLY:
					case STDEV:
					case STDEVP:
					case STOPLIST:
					case STRING_AGG:
					case STUFF:
					case SUBJECT:
					case SUBSCRIPTION:
					case SUM:
					case SUSPEND:
					case SYMMETRIC:
					case SYNCHRONOUS_COMMIT:
					case SYNONYM:
					case SYSTEM:
					case TAKE:
					case TARGET_RECOVERY_TIME:
					case TB:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TIMEOUT:
					case TIMER:
					case TINYINT:
					case TORN_PAGE_DETECTION:
					case TRANSFORM_NOISE_WORDS:
					case TRIPLE_DES:
					case TRIPLE_DES_3KEY:
					case TRUSTWORTHY:
					case TRY:
					case TSQL:
					case TWO_DIGIT_YEAR_CUTOFF:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNDEFINED:
					case UNKNOWN:
					case UNLIMITED:
					case UOW:
					case USING:
					case VALID_XML:
					case VALIDATION:
					case VALUE:
					case VAR:
					case VARP:
					case VIEW_METADATA:
					case VIEWS:
					case WAIT:
					case WELL_FORMED_XML:
					case WITHOUT_ARRAY_WRAPPER:
					case WORK:
					case WORKLOAD:
					case XML:
					case XMLDATA:
					case XMLNAMESPACES:
					case XMLSCHEMA:
					case XSINIL:
					case DOLLAR_ACTION:
					case SPACE:
					case COMMENT:
					case LINE_COMMENT:
					case DOUBLE_QUOTE_ID:
					case SINGLE_QUOTE:
					case SQUARE_BRACKET_ID:
					case LOCAL_ID:
					case DECIMAL:
					case ID:
					case QUOTED_URL:
					case QUOTED_HOST_AND_PORT:
					case STRING:
					case BINARY:
					case FLOAT:
					case REAL:
					case EQUAL:
					case GREATER:
					case LESS:
					case EXCLAMATION:
					case PLUS_ASSIGN:
					case MINUS_ASSIGN:
					case MULT_ASSIGN:
					case DIV_ASSIGN:
					case MOD_ASSIGN:
					case AND_ASSIGN:
					case XOR_ASSIGN:
					case OR_ASSIGN:
					case DOUBLE_BAR:
					case DOT:
					case UNDERLINE:
					case AT:
					case SHARP:
					case DOLLAR:
					case LR_BRACKET:
					case RR_BRACKET:
					case COMMA:
					case SEMI:
					case COLON:
					case STAR:
					case DIVIDE:
					case MODULE:
					case PLUS:
					case MINUS:
					case BIT_NOT:
					case BIT_OR:
					case BIT_AND:
					case BIT_XOR:
					case MDY:
					case DMY:
					case YMD:
					case YDM:
					case MYD:
					case DYM:
					case IPV4_OCTECT:
						{
						State = 8505; id();
						}
						break;
					case DATABASE:
						{
						State = 8506; Match(DATABASE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_statementContext : ParserRuleContext {
		public IdContext member_name;
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public ITerminalNode CURSOR() { return GetToken(TSqlParser.CURSOR, 0); }
		public Declare_set_cursor_commonContext declare_set_cursor_common() {
			return GetRuleContext<Declare_set_cursor_commonContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode READ() { return GetToken(TSqlParser.READ, 0); }
		public ITerminalNode ONLY() { return GetToken(TSqlParser.ONLY, 0); }
		public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		public ITerminalNode OF() { return GetToken(TSqlParser.OF, 0); }
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Set_specialContext set_special() {
			return GetRuleContext<Set_specialContext>(0);
		}
		public Set_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSet_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSet_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_statementContext set_statement() {
		Set_statementContext _localctx = new Set_statementContext(_ctx, State);
		EnterRule(_localctx, 686, RULE_set_statement);
		int _la;
		try {
			State = 8552;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1178,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8513; Match(SET);
				State = 8514; Match(LOCAL_ID);
				State = 8517;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==DOT) {
					{
					State = 8515; Match(DOT);
					State = 8516; _localctx.member_name = id();
					}
				}

				State = 8519; Match(EQUAL);
				State = 8520; expression(0);
				State = 8522;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1172,_ctx) ) {
				case 1:
					{
					State = 8521; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8524; Match(SET);
				State = 8525; Match(LOCAL_ID);
				State = 8526; assignment_operator();
				State = 8527; expression(0);
				State = 8529;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1173,_ctx) ) {
				case 1:
					{
					State = 8528; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8531; Match(SET);
				State = 8532; Match(LOCAL_ID);
				State = 8533; Match(EQUAL);
				State = 8534; Match(CURSOR);
				State = 8535; declare_set_cursor_common();
				State = 8546;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==FOR) {
					{
					State = 8536; Match(FOR);
					State = 8544;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case READ:
						{
						State = 8537; Match(READ);
						State = 8538; Match(ONLY);
						}
						break;
					case UPDATE:
						{
						State = 8539; Match(UPDATE);
						State = 8542;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==OF) {
							{
							State = 8540; Match(OF);
							State = 8541; column_name_list();
							}
						}

						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				State = 8549;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1177,_ctx) ) {
				case 1:
					{
					State = 8548; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8551; set_special();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transaction_statementContext : ParserRuleContext {
		public ITerminalNode BEGIN() { return GetToken(TSqlParser.BEGIN, 0); }
		public ITerminalNode DISTRIBUTED() { return GetToken(TSqlParser.DISTRIBUTED, 0); }
		public ITerminalNode TRAN() { return GetToken(TSqlParser.TRAN, 0); }
		public ITerminalNode TRANSACTION() { return GetToken(TSqlParser.TRANSACTION, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode MARK() { return GetToken(TSqlParser.MARK, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode COMMIT() { return GetToken(TSqlParser.COMMIT, 0); }
		public ITerminalNode DELAYED_DURABILITY() { return GetToken(TSqlParser.DELAYED_DURABILITY, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode WORK() { return GetToken(TSqlParser.WORK, 0); }
		public ITerminalNode ROLLBACK() { return GetToken(TSqlParser.ROLLBACK, 0); }
		public ITerminalNode SAVE() { return GetToken(TSqlParser.SAVE, 0); }
		public Transaction_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transaction_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTransaction_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTransaction_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransaction_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Transaction_statementContext transaction_statement() {
		Transaction_statementContext _localctx = new Transaction_statementContext(_ctx, State);
		EnterRule(_localctx, 688, RULE_transaction_statement);
		int _la;
		try {
			State = 8635;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1197,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8554; Match(BEGIN);
				State = 8555; Match(DISTRIBUTED);
				State = 8556;
				_la = _input.La(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 8559;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1179,_ctx) ) {
				case 1:
					{
					State = 8557; id();
					}
					break;

				case 2:
					{
					State = 8558; Match(LOCAL_ID);
					}
					break;
				}
				State = 8562;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1180,_ctx) ) {
				case 1:
					{
					State = 8561; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8564; Match(BEGIN);
				State = 8565;
				_la = _input.La(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 8575;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1183,_ctx) ) {
				case 1:
					{
					State = 8568;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1181,_ctx) ) {
					case 1:
						{
						State = 8566; id();
						}
						break;

					case 2:
						{
						State = 8567; Match(LOCAL_ID);
						}
						break;
					}
					State = 8573;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1182,_ctx) ) {
					case 1:
						{
						State = 8570; Match(WITH);
						State = 8571; Match(MARK);
						State = 8572; Match(STRING);
						}
						break;
					}
					}
					break;
				}
				State = 8578;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1184,_ctx) ) {
				case 1:
					{
					State = 8577; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8580; Match(COMMIT);
				State = 8581;
				_la = _input.La(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 8594;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1187,_ctx) ) {
				case 1:
					{
					State = 8584;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1185,_ctx) ) {
					case 1:
						{
						State = 8582; id();
						}
						break;

					case 2:
						{
						State = 8583; Match(LOCAL_ID);
						}
						break;
					}
					State = 8592;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1186,_ctx) ) {
					case 1:
						{
						State = 8586; Match(WITH);
						State = 8587; Match(LR_BRACKET);
						State = 8588; Match(DELAYED_DURABILITY);
						State = 8589; Match(EQUAL);
						State = 8590;
						_la = _input.La(1);
						if ( !(_la==OFF || _la==ON) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 8591; Match(RR_BRACKET);
						}
						break;
					}
					}
					break;
				}
				State = 8597;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1188,_ctx) ) {
				case 1:
					{
					State = 8596; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8599; Match(COMMIT);
				State = 8601;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1189,_ctx) ) {
				case 1:
					{
					State = 8600; Match(WORK);
					}
					break;
				}
				State = 8604;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1190,_ctx) ) {
				case 1:
					{
					State = 8603; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8606; Match(COMMIT);
				State = 8607; id();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 8608; Match(ROLLBACK);
				State = 8609; id();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 8610; Match(ROLLBACK);
				State = 8611;
				_la = _input.La(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 8614;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1191,_ctx) ) {
				case 1:
					{
					State = 8612; id();
					}
					break;

				case 2:
					{
					State = 8613; Match(LOCAL_ID);
					}
					break;
				}
				State = 8617;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1192,_ctx) ) {
				case 1:
					{
					State = 8616; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 8619; Match(ROLLBACK);
				State = 8621;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1193,_ctx) ) {
				case 1:
					{
					State = 8620; Match(WORK);
					}
					break;
				}
				State = 8624;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1194,_ctx) ) {
				case 1:
					{
					State = 8623; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 8626; Match(SAVE);
				State = 8627;
				_la = _input.La(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 8630;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1195,_ctx) ) {
				case 1:
					{
					State = 8628; id();
					}
					break;

				case 2:
					{
					State = 8629; Match(LOCAL_ID);
					}
					break;
				}
				State = 8633;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1196,_ctx) ) {
				case 1:
					{
					State = 8632; Match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Go_statementContext : ParserRuleContext {
		public IToken count;
		public ITerminalNode GO() { return GetToken(TSqlParser.GO, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Go_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_go_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGo_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGo_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGo_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Go_statementContext go_statement() {
		Go_statementContext _localctx = new Go_statementContext(_ctx, State);
		EnterRule(_localctx, 690, RULE_go_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8637; Match(GO);
			State = 8639;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1198,_ctx) ) {
			case 1:
				{
				State = 8638; _localctx.count = Match(DECIMAL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Use_statementContext : ParserRuleContext {
		public ITerminalNode USE() { return GetToken(TSqlParser.USE, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Use_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_use_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUse_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUse_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUse_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Use_statementContext use_statement() {
		Use_statementContext _localctx = new Use_statementContext(_ctx, State);
		EnterRule(_localctx, 692, RULE_use_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8641; Match(USE);
			State = 8642; database_name();
			State = 8644;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1199,_ctx) ) {
			case 1:
				{
				State = 8643; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Setuser_statementContext : ParserRuleContext {
		public IToken user;
		public ITerminalNode SETUSER() { return GetToken(TSqlParser.SETUSER, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Setuser_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setuser_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSetuser_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSetuser_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetuser_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Setuser_statementContext setuser_statement() {
		Setuser_statementContext _localctx = new Setuser_statementContext(_ctx, State);
		EnterRule(_localctx, 694, RULE_setuser_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8646; Match(SETUSER);
			State = 8648;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1200,_ctx) ) {
			case 1:
				{
				State = 8647; _localctx.user = Match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reconfigure_statementContext : ParserRuleContext {
		public ITerminalNode RECONFIGURE() { return GetToken(TSqlParser.RECONFIGURE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode OVERRIDE() { return GetToken(TSqlParser.OVERRIDE, 0); }
		public Reconfigure_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reconfigure_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterReconfigure_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitReconfigure_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReconfigure_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reconfigure_statementContext reconfigure_statement() {
		Reconfigure_statementContext _localctx = new Reconfigure_statementContext(_ctx, State);
		EnterRule(_localctx, 696, RULE_reconfigure_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8650; Match(RECONFIGURE);
			State = 8653;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1201,_ctx) ) {
			case 1:
				{
				State = 8651; Match(WITH);
				State = 8652; Match(OVERRIDE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shutdown_statementContext : ParserRuleContext {
		public ITerminalNode SHUTDOWN() { return GetToken(TSqlParser.SHUTDOWN, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode NOWAIT() { return GetToken(TSqlParser.NOWAIT, 0); }
		public Shutdown_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shutdown_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterShutdown_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitShutdown_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShutdown_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Shutdown_statementContext shutdown_statement() {
		Shutdown_statementContext _localctx = new Shutdown_statementContext(_ctx, State);
		EnterRule(_localctx, 698, RULE_shutdown_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8655; Match(SHUTDOWN);
			State = 8658;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1202,_ctx) ) {
			case 1:
				{
				State = 8656; Match(WITH);
				State = 8657; Match(NOWAIT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_clauseContext : ParserRuleContext {
		public Simple_idContext name;
		public ITerminalNode DBCC() { return GetToken(TSqlParser.DBCC, 0); }
		public Simple_idContext simple_id() {
			return GetRuleContext<Simple_idContext>(0);
		}
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Dbcc_optionsContext dbcc_options() {
			return GetRuleContext<Dbcc_optionsContext>(0);
		}
		public Dbcc_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDbcc_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_clauseContext dbcc_clause() {
		Dbcc_clauseContext _localctx = new Dbcc_clauseContext(_ctx, State);
		EnterRule(_localctx, 700, RULE_dbcc_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8660; Match(DBCC);
			State = 8661; _localctx.name = simple_id();
			State = 8666;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1203,_ctx) ) {
			case 1:
				{
				State = 8662; Match(LR_BRACKET);
				State = 8663; expression_list();
				State = 8664; Match(RR_BRACKET);
				}
				break;
			}
			State = 8670;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1204,_ctx) ) {
			case 1:
				{
				State = 8668; Match(WITH);
				State = 8669; dbcc_options();
				}
				break;
			}
			State = 8673;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1205,_ctx) ) {
			case 1:
				{
				State = 8672; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_optionsContext : ParserRuleContext {
		public Simple_idContext[] simple_id() {
			return GetRuleContexts<Simple_idContext>();
		}
		public Simple_idContext simple_id(int i) {
			return GetRuleContext<Simple_idContext>(i);
		}
		public Dbcc_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_options(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDbcc_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_optionsContext dbcc_options() {
		Dbcc_optionsContext _localctx = new Dbcc_optionsContext(_ctx, State);
		EnterRule(_localctx, 702, RULE_dbcc_options);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8675; simple_id();
			State = 8678;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1206,_ctx) ) {
			case 1:
				{
				State = 8676; Match(COMMA);
				State = 8677; simple_id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_clauseContext : ParserRuleContext {
		public IToken clause;
		public ITerminalNode EXECUTE() { return GetToken(TSqlParser.EXECUTE, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode CALLER() { return GetToken(TSqlParser.CALLER, 0); }
		public ITerminalNode SELF() { return GetToken(TSqlParser.SELF, 0); }
		public ITerminalNode OWNER() { return GetToken(TSqlParser.OWNER, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Execute_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecute_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Execute_clauseContext execute_clause() {
		Execute_clauseContext _localctx = new Execute_clauseContext(_ctx, State);
		EnterRule(_localctx, 704, RULE_execute_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8680; Match(EXECUTE);
			State = 8681; Match(AS);
			State = 8682;
			_localctx.clause = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==CALLER || _la==OWNER || _la==SELF || _la==STRING) ) {
				_localctx.clause = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_localContext : ParserRuleContext {
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Declare_localContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_local; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDeclare_local(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDeclare_local(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare_local(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declare_localContext declare_local() {
		Declare_localContext _localctx = new Declare_localContext(_ctx, State);
		EnterRule(_localctx, 706, RULE_declare_local);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8684; Match(LOCAL_ID);
			State = 8686;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 8685; Match(AS);
				}
			}

			State = 8688; data_type();
			State = 8691;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1208,_ctx) ) {
			case 1:
				{
				State = 8689; Match(EQUAL);
				State = 8690; expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_type_definitionContext : ParserRuleContext {
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public Column_def_table_constraintsContext column_def_table_constraints() {
			return GetRuleContext<Column_def_table_constraintsContext>(0);
		}
		public Table_type_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_type_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_type_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_type_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_type_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_type_definitionContext table_type_definition() {
		Table_type_definitionContext _localctx = new Table_type_definitionContext(_ctx, State);
		EnterRule(_localctx, 708, RULE_table_type_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8693; Match(TABLE);
			State = 8694; Match(LR_BRACKET);
			State = 8695; column_def_table_constraints();
			State = 8696; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_type_definitionContext : ParserRuleContext {
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public Xml_schema_collectionContext xml_schema_collection() {
			return GetRuleContext<Xml_schema_collectionContext>(0);
		}
		public ITerminalNode CONTENT() { return GetToken(TSqlParser.CONTENT, 0); }
		public ITerminalNode DOCUMENT() { return GetToken(TSqlParser.DOCUMENT, 0); }
		public Xml_type_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_type_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterXml_type_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitXml_type_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXml_type_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xml_type_definitionContext xml_type_definition() {
		Xml_type_definitionContext _localctx = new Xml_type_definitionContext(_ctx, State);
		EnterRule(_localctx, 710, RULE_xml_type_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8698; Match(XML);
			State = 8699; Match(LR_BRACKET);
			State = 8701;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CONTENT || _la==DOCUMENT) {
				{
				State = 8700;
				_la = _input.La(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 8703; xml_schema_collection();
			State = 8704; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_schema_collectionContext : ParserRuleContext {
		public ITerminalNode[] ID() { return GetTokens(TSqlParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(TSqlParser.ID, i);
		}
		public Xml_schema_collectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_schema_collection; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterXml_schema_collection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitXml_schema_collection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXml_schema_collection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xml_schema_collectionContext xml_schema_collection() {
		Xml_schema_collectionContext _localctx = new Xml_schema_collectionContext(_ctx, State);
		EnterRule(_localctx, 712, RULE_xml_schema_collection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8706; Match(ID);
			State = 8707; Match(DOT);
			State = 8708; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_def_table_constraintsContext : ParserRuleContext {
		public Column_def_table_constraintContext[] column_def_table_constraint() {
			return GetRuleContexts<Column_def_table_constraintContext>();
		}
		public Column_def_table_constraintContext column_def_table_constraint(int i) {
			return GetRuleContext<Column_def_table_constraintContext>(i);
		}
		public Column_def_table_constraintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_def_table_constraints; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_def_table_constraints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_def_table_constraints(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_def_table_constraints(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_def_table_constraintsContext column_def_table_constraints() {
		Column_def_table_constraintsContext _localctx = new Column_def_table_constraintsContext(_ctx, State);
		EnterRule(_localctx, 714, RULE_column_def_table_constraints);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8710; column_def_table_constraint();
			State = 8717;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1211,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 8712;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1210,_ctx) ) {
					case 1:
						{
						State = 8711; Match(COMMA);
						}
						break;
					}
					State = 8714; column_def_table_constraint();
					}
					} 
				}
				State = 8719;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1211,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_def_table_constraintContext : ParserRuleContext {
		public Column_definitionContext column_definition() {
			return GetRuleContext<Column_definitionContext>(0);
		}
		public Materialized_column_definitionContext materialized_column_definition() {
			return GetRuleContext<Materialized_column_definitionContext>(0);
		}
		public Table_constraintContext table_constraint() {
			return GetRuleContext<Table_constraintContext>(0);
		}
		public Column_def_table_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_def_table_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_def_table_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_def_table_constraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_def_table_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_def_table_constraintContext column_def_table_constraint() {
		Column_def_table_constraintContext _localctx = new Column_def_table_constraintContext(_ctx, State);
		EnterRule(_localctx, 716, RULE_column_def_table_constraint);
		try {
			State = 8723;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1212,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8720; column_definition();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8721; materialized_column_definition();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8722; table_constraint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_def_table_constraints_indexContext : ParserRuleContext {
		public Column_def_table_constraint_indexContext[] column_def_table_constraint_index() {
			return GetRuleContexts<Column_def_table_constraint_indexContext>();
		}
		public Column_def_table_constraint_indexContext column_def_table_constraint_index(int i) {
			return GetRuleContext<Column_def_table_constraint_indexContext>(i);
		}
		public Column_def_table_constraints_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_def_table_constraints_index; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_def_table_constraints_index(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_def_table_constraints_index(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_def_table_constraints_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_def_table_constraints_indexContext column_def_table_constraints_index() {
		Column_def_table_constraints_indexContext _localctx = new Column_def_table_constraints_indexContext(_ctx, State);
		EnterRule(_localctx, 718, RULE_column_def_table_constraints_index);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8725; column_def_table_constraint_index();
			State = 8732;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1214,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 8727;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1213,_ctx) ) {
					case 1:
						{
						State = 8726; Match(COMMA);
						}
						break;
					}
					State = 8729; column_def_table_constraint_index();
					}
					} 
				}
				State = 8734;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1214,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_def_table_constraint_indexContext : ParserRuleContext {
		public Column_definitionContext column_definition() {
			return GetRuleContext<Column_definitionContext>(0);
		}
		public Materialized_column_definitionContext materialized_column_definition() {
			return GetRuleContext<Materialized_column_definitionContext>(0);
		}
		public Table_constraintContext table_constraint() {
			return GetRuleContext<Table_constraintContext>(0);
		}
		public Table_indexContext table_index() {
			return GetRuleContext<Table_indexContext>(0);
		}
		public Column_def_table_constraint_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_def_table_constraint_index; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_def_table_constraint_index(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_def_table_constraint_index(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_def_table_constraint_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_def_table_constraint_indexContext column_def_table_constraint_index() {
		Column_def_table_constraint_indexContext _localctx = new Column_def_table_constraint_indexContext(_ctx, State);
		EnterRule(_localctx, 720, RULE_column_def_table_constraint_index);
		try {
			State = 8739;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1215,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8735; column_definition();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8736; materialized_column_definition();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8737; table_constraint();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8738; table_index();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_definitionContext : ParserRuleContext {
		public IdContext constraint;
		public IToken seed;
		public IToken increment;
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode COLLATE() { return GetToken(TSqlParser.COLLATE, 0); }
		public Null_notnullContext null_notnull() {
			return GetRuleContext<Null_notnullContext>(0);
		}
		public Null_or_defaultContext[] null_or_default() {
			return GetRuleContexts<Null_or_defaultContext>();
		}
		public Null_or_defaultContext null_or_default(int i) {
			return GetRuleContext<Null_or_defaultContext>(i);
		}
		public ITerminalNode IDENTITY() { return GetToken(TSqlParser.IDENTITY, 0); }
		public ITerminalNode ROWGUIDCOL() { return GetToken(TSqlParser.ROWGUIDCOL, 0); }
		public Column_constraintContext[] column_constraint() {
			return GetRuleContexts<Column_constraintContext>();
		}
		public Column_constraintContext column_constraint(int i) {
			return GetRuleContext<Column_constraintContext>(i);
		}
		public ITerminalNode CONSTRAINT() { return GetToken(TSqlParser.CONSTRAINT, 0); }
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode REPLICATION() { return GetToken(TSqlParser.REPLICATION, 0); }
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public Column_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_definitionContext column_definition() {
		Column_definitionContext _localctx = new Column_definitionContext(_ctx, State);
		EnterRule(_localctx, 722, RULE_column_definition);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8741; id();
			State = 8745;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BACKSLASH:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONNECTION_OPTIONS:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DISK:
			case DOUBLE:
			case DOUBLE_BACK_SLASH:
			case DOUBLE_FORWARD_SLASH:
			case DTC_SUPPORT:
			case DUMP:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILENAME:
			case FILLFACTOR:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IDENTITYCOL:
			case IIF:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case IPV4_ADDR:
			case IPV6_ADDR:
			case ISNULL:
			case KERBEROS:
			case KEY:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOAD:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NATIVE_COMPILATION:
			case NEGOTIATE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case NULL:
			case OFFSETS:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PLATFORM:
			case POLICY:
			case PRECISION:
			case PREDICATE:
			case PROCESS:
			case PUBLIC:
			case PUSHDOWN:
			case PYTHON:
			case R:
			case RAW:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESULT_SETS:
			case RESUME:
			case RETAINDAYS:
			case RETURN:
			case RETURNS:
			case REWIND:
			case ROLE:
			case ROWCOUNT:
			case ROWGUIDCOL:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SECURITYAUDIT:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SESSION_USER:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case SYSTEM_USER:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case USER:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHIN:
			case WITHOUT:
			case WITNESS:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BUCKET_COUNT:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATEFIRST:
			case DATEFORMAT:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADOOP:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNDEFINED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case DOLLAR_ACTION:
			case SPACE:
			case COMMENT:
			case LINE_COMMENT:
			case DOUBLE_QUOTE_ID:
			case SINGLE_QUOTE:
			case SQUARE_BRACKET_ID:
			case LOCAL_ID:
			case DECIMAL:
			case ID:
			case QUOTED_URL:
			case QUOTED_HOST_AND_PORT:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case EQUAL:
			case GREATER:
			case LESS:
			case EXCLAMATION:
			case PLUS_ASSIGN:
			case MINUS_ASSIGN:
			case MULT_ASSIGN:
			case DIV_ASSIGN:
			case MOD_ASSIGN:
			case AND_ASSIGN:
			case XOR_ASSIGN:
			case OR_ASSIGN:
			case DOUBLE_BAR:
			case DOT:
			case UNDERLINE:
			case AT:
			case SHARP:
			case DOLLAR:
			case LR_BRACKET:
			case RR_BRACKET:
			case COMMA:
			case SEMI:
			case COLON:
			case STAR:
			case DIVIDE:
			case MODULE:
			case PLUS:
			case MINUS:
			case BIT_NOT:
			case BIT_OR:
			case BIT_AND:
			case BIT_XOR:
			case MDY:
			case DMY:
			case YMD:
			case YDM:
			case MYD:
			case DYM:
			case IPV4_OCTECT:
				{
				State = 8742; data_type();
				}
				break;
			case AS:
				{
				State = 8743; Match(AS);
				State = 8744; expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 8749;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COLLATE) {
				{
				State = 8747; Match(COLLATE);
				State = 8748; id();
				}
			}

			State = 8752;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1218,_ctx) ) {
			case 1:
				{
				State = 8751; null_notnull();
				}
				break;
			}
			State = 8775;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1223,_ctx) ) {
			case 1:
				{
				State = 8756;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==CONSTRAINT) {
					{
					State = 8754; Match(CONSTRAINT);
					State = 8755; _localctx.constraint = id();
					}
				}

				State = 8758; null_or_default();
				State = 8760;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1220,_ctx) ) {
				case 1:
					{
					State = 8759; null_or_default();
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 8762; Match(IDENTITY);
				State = 8768;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1221,_ctx) ) {
				case 1:
					{
					State = 8763; Match(LR_BRACKET);
					State = 8764; _localctx.seed = Match(DECIMAL);
					State = 8765; Match(COMMA);
					State = 8766; _localctx.increment = Match(DECIMAL);
					State = 8767; Match(RR_BRACKET);
					}
					break;
				}
				State = 8773;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1222,_ctx) ) {
				case 1:
					{
					State = 8770; Match(NOT);
					State = 8771; Match(FOR);
					State = 8772; Match(REPLICATION);
					}
					break;
				}
				}
				break;
			}
			State = 8778;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1224,_ctx) ) {
			case 1:
				{
				State = 8777; Match(ROWGUIDCOL);
				}
				break;
			}
			State = 8783;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1225,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 8780; column_constraint();
					}
					} 
				}
				State = 8785;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1225,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Materialized_column_definitionContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode COMPUTE() { return GetToken(TSqlParser.COMPUTE, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode MATERIALIZED() { return GetToken(TSqlParser.MATERIALIZED, 0); }
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public Materialized_column_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_materialized_column_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMaterialized_column_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMaterialized_column_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaterialized_column_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Materialized_column_definitionContext materialized_column_definition() {
		Materialized_column_definitionContext _localctx = new Materialized_column_definitionContext(_ctx, State);
		EnterRule(_localctx, 724, RULE_materialized_column_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8786; id();
			State = 8787;
			_la = _input.La(1);
			if ( !(_la==AS || _la==COMPUTE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 8788; expression(0);
			State = 8792;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1226,_ctx) ) {
			case 1:
				{
				State = 8789; Match(MATERIALIZED);
				}
				break;

			case 2:
				{
				State = 8790; Match(NOT);
				State = 8791; Match(MATERIALIZED);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_constraintContext : ParserRuleContext {
		public IdContext constraint;
		public Column_name_listContext pk;
		public ITerminalNode CHECK() { return GetToken(TSqlParser.CHECK, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public ITerminalNode REFERENCES() { return GetToken(TSqlParser.REFERENCES, 0); }
		public Schema_object_nameContext schema_object_name() {
			return GetRuleContext<Schema_object_nameContext>(0);
		}
		public Null_notnullContext null_notnull() {
			return GetRuleContext<Null_notnullContext>(0);
		}
		public ITerminalNode CONSTRAINT() { return GetToken(TSqlParser.CONSTRAINT, 0); }
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode PRIMARY() { return GetToken(TSqlParser.PRIMARY, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode UNIQUE() { return GetToken(TSqlParser.UNIQUE, 0); }
		public ClusteredContext clustered() {
			return GetRuleContext<ClusteredContext>(0);
		}
		public Index_optionsContext index_options() {
			return GetRuleContext<Index_optionsContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode REPLICATION() { return GetToken(TSqlParser.REPLICATION, 0); }
		public ITerminalNode FOREIGN() { return GetToken(TSqlParser.FOREIGN, 0); }
		public On_deleteContext on_delete() {
			return GetRuleContext<On_deleteContext>(0);
		}
		public On_updateContext on_update() {
			return GetRuleContext<On_updateContext>(0);
		}
		public Column_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_constraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_constraintContext column_constraint() {
		Column_constraintContext _localctx = new Column_constraintContext(_ctx, State);
		EnterRule(_localctx, 726, RULE_column_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8796;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CONSTRAINT) {
				{
				State = 8794; Match(CONSTRAINT);
				State = 8795; _localctx.constraint = id();
				}
			}

			State = 8835;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case PRIMARY:
			case UNIQUE:
				{
				State = 8801;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case PRIMARY:
					{
					State = 8798; Match(PRIMARY);
					State = 8799; Match(KEY);
					}
					break;
				case UNIQUE:
					{
					State = 8800; Match(UNIQUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 8804;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==CLUSTERED || _la==NONCLUSTERED) {
					{
					State = 8803; clustered();
					}
				}

				State = 8807;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1230,_ctx) ) {
				case 1:
					{
					State = 8806; index_options();
					}
					break;
				}
				}
				break;
			case CHECK:
				{
				State = 8809; Match(CHECK);
				State = 8813;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==NOT) {
					{
					State = 8810; Match(NOT);
					State = 8811; Match(FOR);
					State = 8812; Match(REPLICATION);
					}
				}

				State = 8815; Match(LR_BRACKET);
				State = 8816; search_condition();
				State = 8817; Match(RR_BRACKET);
				}
				break;
			case FOREIGN:
			case REFERENCES:
				{
				State = 8821;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==FOREIGN) {
					{
					State = 8819; Match(FOREIGN);
					State = 8820; Match(KEY);
					}
				}

				State = 8823; Match(REFERENCES);
				State = 8824; schema_object_name();
				State = 8825; Match(LR_BRACKET);
				State = 8826; _localctx.pk = column_name_list();
				State = 8827; Match(RR_BRACKET);
				State = 8829;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1233,_ctx) ) {
				case 1:
					{
					State = 8828; on_delete();
					}
					break;
				}
				State = 8832;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ON) {
					{
					State = 8831; on_update();
					}
				}

				}
				break;
			case NOT:
			case NULL:
				{
				State = 8834; null_notnull();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_constraintContext : ParserRuleContext {
		public IdContext constraint;
		public Column_name_listContext fk;
		public Column_name_listContext pk;
		public ITerminalNode CHECK() { return GetToken(TSqlParser.CHECK, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode FOREIGN() { return GetToken(TSqlParser.FOREIGN, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode REFERENCES() { return GetToken(TSqlParser.REFERENCES, 0); }
		public Schema_object_nameContext schema_object_name() {
			return GetRuleContext<Schema_object_nameContext>(0);
		}
		public ITerminalNode CONSTRAINT() { return GetToken(TSqlParser.CONSTRAINT, 0); }
		public Column_name_listContext[] column_name_list() {
			return GetRuleContexts<Column_name_listContext>();
		}
		public Column_name_listContext column_name_list(int i) {
			return GetRuleContext<Column_name_listContext>(i);
		}
		public ITerminalNode PRIMARY() { return GetToken(TSqlParser.PRIMARY, 0); }
		public ITerminalNode UNIQUE() { return GetToken(TSqlParser.UNIQUE, 0); }
		public Column_name_list_with_orderContext column_name_list_with_order() {
			return GetRuleContext<Column_name_list_with_orderContext>(0);
		}
		public ITerminalNode NONCLUSTERED() { return GetToken(TSqlParser.NONCLUSTERED, 0); }
		public ITerminalNode HASH() { return GetToken(TSqlParser.HASH, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode BUCKET_COUNT() { return GetToken(TSqlParser.BUCKET_COUNT, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public ITerminalNode REPLICATION() { return GetToken(TSqlParser.REPLICATION, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] PLUS() { return GetTokens(TSqlParser.PLUS); }
		public ITerminalNode PLUS(int i) {
			return GetToken(TSqlParser.PLUS, i);
		}
		public Function_callContext[] function_call() {
			return GetRuleContexts<Function_callContext>();
		}
		public Function_callContext function_call(int i) {
			return GetRuleContext<Function_callContext>(i);
		}
		public On_deleteContext on_delete() {
			return GetRuleContext<On_deleteContext>(0);
		}
		public On_updateContext on_update() {
			return GetRuleContext<On_updateContext>(0);
		}
		public ClusteredContext clustered() {
			return GetRuleContext<ClusteredContext>(0);
		}
		public Index_optionsContext index_options() {
			return GetRuleContext<Index_optionsContext>(0);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Table_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_constraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_constraintContext table_constraint() {
		Table_constraintContext _localctx = new Table_constraintContext(_ctx, State);
		EnterRule(_localctx, 728, RULE_table_constraint);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8839;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CONSTRAINT) {
				{
				State = 8837; Match(CONSTRAINT);
				State = 8838; _localctx.constraint = id();
				}
			}

			State = 8919;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case PRIMARY:
			case UNIQUE:
				{
				State = 8844;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case PRIMARY:
					{
					State = 8841; Match(PRIMARY);
					State = 8842; Match(KEY);
					}
					break;
				case UNIQUE:
					{
					State = 8843; Match(UNIQUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 8871;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1241,_ctx) ) {
				case 1:
					{
					State = 8847;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==CLUSTERED || _la==NONCLUSTERED) {
						{
						State = 8846; clustered();
						}
					}

					State = 8849; Match(LR_BRACKET);
					State = 8850; column_name_list_with_order();
					State = 8851; Match(RR_BRACKET);
					State = 8853;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1239,_ctx) ) {
					case 1:
						{
						State = 8852; index_options();
						}
						break;
					}
					State = 8857;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==ON) {
						{
						State = 8855; Match(ON);
						State = 8856; id();
						}
					}

					}
					break;

				case 2:
					{
					State = 8859; Match(NONCLUSTERED);
					State = 8860; Match(HASH);
					State = 8861; Match(LR_BRACKET);
					State = 8862; column_name_list_with_order();
					State = 8863; Match(RR_BRACKET);
					State = 8864; Match(WITH);
					State = 8865; Match(LR_BRACKET);
					State = 8866; Match(BUCKET_COUNT);
					State = 8867; Match(EQUAL);
					State = 8868; Match(DECIMAL);
					State = 8869; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case CHECK:
				{
				State = 8873; Match(CHECK);
				State = 8877;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==NOT) {
					{
					State = 8874; Match(NOT);
					State = 8875; Match(FOR);
					State = 8876; Match(REPLICATION);
					}
				}

				State = 8879; Match(LR_BRACKET);
				State = 8880; search_condition();
				State = 8881; Match(RR_BRACKET);
				}
				break;
			case DEFAULT:
				{
				State = 8883; Match(DEFAULT);
				State = 8885;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1243,_ctx) ) {
				case 1:
					{
					State = 8884; Match(LR_BRACKET);
					}
					break;
				}
				State = 8891;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 8891;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1244,_ctx) ) {
						case 1:
							{
							State = 8887; Match(STRING);
							}
							break;

						case 2:
							{
							State = 8888; Match(PLUS);
							}
							break;

						case 3:
							{
							State = 8889; function_call();
							}
							break;

						case 4:
							{
							State = 8890; Match(DECIMAL);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 8893;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1245,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 8896;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==RR_BRACKET) {
					{
					State = 8895; Match(RR_BRACKET);
					}
				}

				State = 8898; Match(FOR);
				State = 8899; id();
				}
				break;
			case FOREIGN:
				{
				State = 8900; Match(FOREIGN);
				State = 8901; Match(KEY);
				State = 8902; Match(LR_BRACKET);
				State = 8903; _localctx.fk = column_name_list();
				State = 8904; Match(RR_BRACKET);
				State = 8905; Match(REFERENCES);
				State = 8906; schema_object_name();
				State = 8911;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1247,_ctx) ) {
				case 1:
					{
					State = 8907; Match(LR_BRACKET);
					State = 8908; _localctx.pk = column_name_list();
					State = 8909; Match(RR_BRACKET);
					}
					break;
				}
				State = 8914;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1248,_ctx) ) {
				case 1:
					{
					State = 8913; on_delete();
					}
					break;
				}
				State = 8917;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ON) {
					{
					State = 8916; on_update();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class On_deleteContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode DELETE() { return GetToken(TSqlParser.DELETE, 0); }
		public ITerminalNode NO() { return GetToken(TSqlParser.NO, 0); }
		public ITerminalNode ACTION() { return GetToken(TSqlParser.ACTION, 0); }
		public ITerminalNode CASCADE() { return GetToken(TSqlParser.CASCADE, 0); }
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public ITerminalNode NULL() { return GetToken(TSqlParser.NULL, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public On_deleteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_on_delete; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOn_delete(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOn_delete(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOn_delete(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public On_deleteContext on_delete() {
		On_deleteContext _localctx = new On_deleteContext(_ctx, State);
		EnterRule(_localctx, 730, RULE_on_delete);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8921; Match(ON);
			State = 8922; Match(DELETE);
			State = 8930;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1251,_ctx) ) {
			case 1:
				{
				State = 8923; Match(NO);
				State = 8924; Match(ACTION);
				}
				break;

			case 2:
				{
				State = 8925; Match(CASCADE);
				}
				break;

			case 3:
				{
				State = 8926; Match(SET);
				State = 8927; Match(NULL);
				}
				break;

			case 4:
				{
				State = 8928; Match(SET);
				State = 8929; Match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class On_updateContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		public ITerminalNode NO() { return GetToken(TSqlParser.NO, 0); }
		public ITerminalNode ACTION() { return GetToken(TSqlParser.ACTION, 0); }
		public ITerminalNode CASCADE() { return GetToken(TSqlParser.CASCADE, 0); }
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public ITerminalNode NULL() { return GetToken(TSqlParser.NULL, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public On_updateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_on_update; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOn_update(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOn_update(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOn_update(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public On_updateContext on_update() {
		On_updateContext _localctx = new On_updateContext(_ctx, State);
		EnterRule(_localctx, 732, RULE_on_update);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8932; Match(ON);
			State = 8933; Match(UPDATE);
			State = 8941;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1252,_ctx) ) {
			case 1:
				{
				State = 8934; Match(NO);
				State = 8935; Match(ACTION);
				}
				break;

			case 2:
				{
				State = 8936; Match(CASCADE);
				}
				break;

			case 3:
				{
				State = 8937; Match(SET);
				State = 8938; Match(NULL);
				}
				break;

			case 4:
				{
				State = 8939; Match(SET);
				State = 8940; Match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_optionsContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Index_optionContext[] index_option() {
			return GetRuleContexts<Index_optionContext>();
		}
		public Index_optionContext index_option(int i) {
			return GetRuleContext<Index_optionContext>(i);
		}
		public Index_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIndex_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIndex_options(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Index_optionsContext index_options() {
		Index_optionsContext _localctx = new Index_optionsContext(_ctx, State);
		EnterRule(_localctx, 734, RULE_index_options);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8943; Match(WITH);
			State = 8944; Match(LR_BRACKET);
			State = 8945; index_option();
			State = 8950;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 8946; Match(COMMA);
				State = 8947; index_option();
				}
				}
				State = 8952;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 8953; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_optionContext : ParserRuleContext {
		public Simple_idContext[] simple_id() {
			return GetRuleContexts<Simple_idContext>();
		}
		public Simple_idContext simple_id(int i) {
			return GetRuleContext<Simple_idContext>(i);
		}
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Index_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIndex_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIndex_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Index_optionContext index_option() {
		Index_optionContext _localctx = new Index_optionContext(_ctx, State);
		EnterRule(_localctx, 736, RULE_index_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8955; simple_id();
			State = 8956; Match(EQUAL);
			State = 8960;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1254,_ctx) ) {
			case 1:
				{
				State = 8957; simple_id();
				}
				break;

			case 2:
				{
				State = 8958; on_off();
				}
				break;

			case 3:
				{
				State = 8959; Match(DECIMAL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_cursorContext : ParserRuleContext {
		public ITerminalNode DECLARE() { return GetToken(TSqlParser.DECLARE, 0); }
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public ITerminalNode CURSOR() { return GetToken(TSqlParser.CURSOR, 0); }
		public ITerminalNode[] FOR() { return GetTokens(TSqlParser.FOR); }
		public ITerminalNode FOR(int i) {
			return GetToken(TSqlParser.FOR, i);
		}
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public Declare_set_cursor_commonContext declare_set_cursor_common() {
			return GetRuleContext<Declare_set_cursor_commonContext>(0);
		}
		public ITerminalNode SCROLL() { return GetToken(TSqlParser.SCROLL, 0); }
		public ITerminalNode SEMI_SENSITIVE() { return GetToken(TSqlParser.SEMI_SENSITIVE, 0); }
		public ITerminalNode INSENSITIVE() { return GetToken(TSqlParser.INSENSITIVE, 0); }
		public ITerminalNode READ() { return GetToken(TSqlParser.READ, 0); }
		public ITerminalNode ONLY() { return GetToken(TSqlParser.ONLY, 0); }
		public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		public ITerminalNode OF() { return GetToken(TSqlParser.OF, 0); }
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Declare_cursorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_cursor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDeclare_cursor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDeclare_cursor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare_cursor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declare_cursorContext declare_cursor() {
		Declare_cursorContext _localctx = new Declare_cursorContext(_ctx, State);
		EnterRule(_localctx, 738, RULE_declare_cursor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8962; Match(DECLARE);
			State = 8963; cursor_name();
			State = 8995;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1262,_ctx) ) {
			case 1:
				{
				State = 8964; Match(CURSOR);
				State = 8974;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1257,_ctx) ) {
				case 1:
					{
					State = 8965; declare_set_cursor_common();
					State = 8972;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==FOR) {
						{
						State = 8966; Match(FOR);
						State = 8967; Match(UPDATE);
						State = 8970;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==OF) {
							{
							State = 8968; Match(OF);
							State = 8969; column_name_list();
							}
						}

						}
					}

					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 8977;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==INSENSITIVE || _la==SEMI_SENSITIVE) {
					{
					State = 8976;
					_la = _input.La(1);
					if ( !(_la==INSENSITIVE || _la==SEMI_SENSITIVE) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
				}

				State = 8980;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==SCROLL) {
					{
					State = 8979; Match(SCROLL);
					}
				}

				State = 8982; Match(CURSOR);
				State = 8983; Match(FOR);
				State = 8984; select_statement();
				State = 8993;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==FOR) {
					{
					State = 8985; Match(FOR);
					State = 8991;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case READ:
						{
						State = 8986; Match(READ);
						State = 8987; Match(ONLY);
						}
						break;
					case UPDATE:
						{
						State = 8988; Match(UPDATE);
						}
						break;
					case OF:
						{
						{
						State = 8989; Match(OF);
						State = 8990; column_name_list();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
				break;
			}
			State = 8998;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1263,_ctx) ) {
			case 1:
				{
				State = 8997; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_set_cursor_commonContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public Declare_set_cursor_common_partialContext[] declare_set_cursor_common_partial() {
			return GetRuleContexts<Declare_set_cursor_common_partialContext>();
		}
		public Declare_set_cursor_common_partialContext declare_set_cursor_common_partial(int i) {
			return GetRuleContext<Declare_set_cursor_common_partialContext>(i);
		}
		public Declare_set_cursor_commonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_set_cursor_common; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDeclare_set_cursor_common(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDeclare_set_cursor_common(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare_set_cursor_common(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declare_set_cursor_commonContext declare_set_cursor_common() {
		Declare_set_cursor_commonContext _localctx = new Declare_set_cursor_commonContext(_ctx, State);
		EnterRule(_localctx, 740, RULE_declare_set_cursor_common);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9003;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 492)) & ~0x3f) == 0 && ((1L << (_la - 492)) & ((1L << (DYNAMIC - 492)) | (1L << (FAST_FORWARD - 492)) | (1L << (FORWARD_ONLY - 492)) | (1L << (GLOBAL - 492)))) != 0) || _la==KEYSET || _la==LOCAL || _la==OPTIMISTIC || _la==READ_ONLY || ((((_la - 712)) & ~0x3f) == 0 && ((1L << (_la - 712)) & ((1L << (SCROLL - 712)) | (1L << (SCROLL_LOCKS - 712)) | (1L << (STATIC - 712)))) != 0) || _la==TYPE_WARNING) {
				{
				{
				State = 9000; declare_set_cursor_common_partial();
				}
				}
				State = 9005;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 9006; Match(FOR);
			State = 9007; select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_set_cursor_common_partialContext : ParserRuleContext {
		public ITerminalNode LOCAL() { return GetToken(TSqlParser.LOCAL, 0); }
		public ITerminalNode GLOBAL() { return GetToken(TSqlParser.GLOBAL, 0); }
		public ITerminalNode FORWARD_ONLY() { return GetToken(TSqlParser.FORWARD_ONLY, 0); }
		public ITerminalNode SCROLL() { return GetToken(TSqlParser.SCROLL, 0); }
		public ITerminalNode STATIC() { return GetToken(TSqlParser.STATIC, 0); }
		public ITerminalNode KEYSET() { return GetToken(TSqlParser.KEYSET, 0); }
		public ITerminalNode DYNAMIC() { return GetToken(TSqlParser.DYNAMIC, 0); }
		public ITerminalNode FAST_FORWARD() { return GetToken(TSqlParser.FAST_FORWARD, 0); }
		public ITerminalNode READ_ONLY() { return GetToken(TSqlParser.READ_ONLY, 0); }
		public ITerminalNode SCROLL_LOCKS() { return GetToken(TSqlParser.SCROLL_LOCKS, 0); }
		public ITerminalNode OPTIMISTIC() { return GetToken(TSqlParser.OPTIMISTIC, 0); }
		public ITerminalNode TYPE_WARNING() { return GetToken(TSqlParser.TYPE_WARNING, 0); }
		public Declare_set_cursor_common_partialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_set_cursor_common_partial; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDeclare_set_cursor_common_partial(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDeclare_set_cursor_common_partial(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare_set_cursor_common_partial(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declare_set_cursor_common_partialContext declare_set_cursor_common_partial() {
		Declare_set_cursor_common_partialContext _localctx = new Declare_set_cursor_common_partialContext(_ctx, State);
		EnterRule(_localctx, 742, RULE_declare_set_cursor_common_partial);
		int _la;
		try {
			State = 9014;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case GLOBAL:
			case LOCAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9009;
				_la = _input.La(1);
				if ( !(_la==GLOBAL || _la==LOCAL) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			case FORWARD_ONLY:
			case SCROLL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9010;
				_la = _input.La(1);
				if ( !(_la==FORWARD_ONLY || _la==SCROLL) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			case DYNAMIC:
			case FAST_FORWARD:
			case KEYSET:
			case STATIC:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9011;
				_la = _input.La(1);
				if ( !(_la==DYNAMIC || _la==FAST_FORWARD || _la==KEYSET || _la==STATIC) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			case OPTIMISTIC:
			case READ_ONLY:
			case SCROLL_LOCKS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9012;
				_la = _input.La(1);
				if ( !(_la==OPTIMISTIC || _la==READ_ONLY || _la==SCROLL_LOCKS) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			case TYPE_WARNING:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9013; Match(TYPE_WARNING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fetch_cursorContext : ParserRuleContext {
		public ITerminalNode FETCH() { return GetToken(TSqlParser.FETCH, 0); }
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode GLOBAL() { return GetToken(TSqlParser.GLOBAL, 0); }
		public ITerminalNode INTO() { return GetToken(TSqlParser.INTO, 0); }
		public ITerminalNode[] LOCAL_ID() { return GetTokens(TSqlParser.LOCAL_ID); }
		public ITerminalNode LOCAL_ID(int i) {
			return GetToken(TSqlParser.LOCAL_ID, i);
		}
		public ITerminalNode NEXT() { return GetToken(TSqlParser.NEXT, 0); }
		public ITerminalNode PRIOR() { return GetToken(TSqlParser.PRIOR, 0); }
		public ITerminalNode FIRST() { return GetToken(TSqlParser.FIRST, 0); }
		public ITerminalNode LAST() { return GetToken(TSqlParser.LAST, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ABSOLUTE() { return GetToken(TSqlParser.ABSOLUTE, 0); }
		public ITerminalNode RELATIVE() { return GetToken(TSqlParser.RELATIVE, 0); }
		public Fetch_cursorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fetch_cursor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFetch_cursor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFetch_cursor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFetch_cursor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fetch_cursorContext fetch_cursor() {
		Fetch_cursorContext _localctx = new Fetch_cursorContext(_ctx, State);
		EnterRule(_localctx, 744, RULE_fetch_cursor);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9016; Match(FETCH);
			State = 9026;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1267,_ctx) ) {
			case 1:
				{
				State = 9023;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case NEXT:
					{
					State = 9017; Match(NEXT);
					}
					break;
				case PRIOR:
					{
					State = 9018; Match(PRIOR);
					}
					break;
				case FIRST:
					{
					State = 9019; Match(FIRST);
					}
					break;
				case LAST:
					{
					State = 9020; Match(LAST);
					}
					break;
				case ABSOLUTE:
				case RELATIVE:
					{
					State = 9021;
					_la = _input.La(1);
					if ( !(_la==ABSOLUTE || _la==RELATIVE) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 9022; expression(0);
					}
					break;
				case FROM:
					break;
				default:
					break;
				}
				State = 9025; Match(FROM);
				}
				break;
			}
			State = 9029;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1268,_ctx) ) {
			case 1:
				{
				State = 9028; Match(GLOBAL);
				}
				break;
			}
			State = 9031; cursor_name();
			State = 9041;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==INTO) {
				{
				State = 9032; Match(INTO);
				State = 9033; Match(LOCAL_ID);
				State = 9038;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1269,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 9034; Match(COMMA);
						State = 9035; Match(LOCAL_ID);
						}
						} 
					}
					State = 9040;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1269,_ctx);
				}
				}
			}

			State = 9044;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1271,_ctx) ) {
			case 1:
				{
				State = 9043; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_specialContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public Constant_LOCAL_IDContext constant_LOCAL_ID() {
			return GetRuleContext<Constant_LOCAL_IDContext>(0);
		}
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode TRANSACTION() { return GetToken(TSqlParser.TRANSACTION, 0); }
		public ITerminalNode ISOLATION() { return GetToken(TSqlParser.ISOLATION, 0); }
		public ITerminalNode LEVEL() { return GetToken(TSqlParser.LEVEL, 0); }
		public ITerminalNode READ() { return GetToken(TSqlParser.READ, 0); }
		public ITerminalNode UNCOMMITTED() { return GetToken(TSqlParser.UNCOMMITTED, 0); }
		public ITerminalNode COMMITTED() { return GetToken(TSqlParser.COMMITTED, 0); }
		public ITerminalNode REPEATABLE() { return GetToken(TSqlParser.REPEATABLE, 0); }
		public ITerminalNode SNAPSHOT() { return GetToken(TSqlParser.SNAPSHOT, 0); }
		public ITerminalNode SERIALIZABLE() { return GetToken(TSqlParser.SERIALIZABLE, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode IDENTITY_INSERT() { return GetToken(TSqlParser.IDENTITY_INSERT, 0); }
		public Schema_object_nameContext schema_object_name() {
			return GetRuleContext<Schema_object_nameContext>(0);
		}
		public ITerminalNode ANSI_NULLS() { return GetToken(TSqlParser.ANSI_NULLS, 0); }
		public ITerminalNode QUOTED_IDENTIFIER() { return GetToken(TSqlParser.QUOTED_IDENTIFIER, 0); }
		public ITerminalNode ANSI_PADDING() { return GetToken(TSqlParser.ANSI_PADDING, 0); }
		public ITerminalNode ANSI_WARNINGS() { return GetToken(TSqlParser.ANSI_WARNINGS, 0); }
		public Modify_methodContext modify_method() {
			return GetRuleContext<Modify_methodContext>(0);
		}
		public Set_specialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_special; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSet_special(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSet_special(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_special(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_specialContext set_special() {
		Set_specialContext _localctx = new Set_specialContext(_ctx, State);
		EnterRule(_localctx, 746, RULE_set_special);
		try {
			State = 9095;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1277,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9046; Match(SET);
				State = 9047; id();
				State = 9051;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1272,_ctx) ) {
				case 1:
					{
					State = 9048; id();
					}
					break;

				case 2:
					{
					State = 9049; constant_LOCAL_ID();
					}
					break;

				case 3:
					{
					State = 9050; on_off();
					}
					break;
				}
				State = 9054;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1273,_ctx) ) {
				case 1:
					{
					State = 9053; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9056; Match(SET);
				State = 9057; Match(TRANSACTION);
				State = 9058; Match(ISOLATION);
				State = 9059; Match(LEVEL);
				State = 9069;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1274,_ctx) ) {
				case 1:
					{
					State = 9060; Match(READ);
					State = 9061; Match(UNCOMMITTED);
					}
					break;

				case 2:
					{
					State = 9062; Match(READ);
					State = 9063; Match(COMMITTED);
					}
					break;

				case 3:
					{
					State = 9064; Match(REPEATABLE);
					State = 9065; Match(READ);
					}
					break;

				case 4:
					{
					State = 9066; Match(SNAPSHOT);
					}
					break;

				case 5:
					{
					State = 9067; Match(SERIALIZABLE);
					}
					break;

				case 6:
					{
					State = 9068; Match(DECIMAL);
					}
					break;
				}
				State = 9072;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1275,_ctx) ) {
				case 1:
					{
					State = 9071; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9074; Match(SET);
				State = 9075; Match(IDENTITY_INSERT);
				State = 9076; schema_object_name();
				State = 9077; on_off();
				State = 9079;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1276,_ctx) ) {
				case 1:
					{
					State = 9078; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9081; Match(SET);
				State = 9082; Match(ANSI_NULLS);
				State = 9083; on_off();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9084; Match(SET);
				State = 9085; Match(QUOTED_IDENTIFIER);
				State = 9086; on_off();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 9087; Match(SET);
				State = 9088; Match(ANSI_PADDING);
				State = 9089; on_off();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 9090; Match(SET);
				State = 9091; Match(ANSI_WARNINGS);
				State = 9092; on_off();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 9093; Match(SET);
				State = 9094; modify_method();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_LOCAL_IDContext : ParserRuleContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Constant_LOCAL_IDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_LOCAL_ID; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterConstant_LOCAL_ID(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitConstant_LOCAL_ID(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant_LOCAL_ID(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constant_LOCAL_IDContext constant_LOCAL_ID() {
		Constant_LOCAL_IDContext _localctx = new Constant_LOCAL_IDContext(_ctx, State);
		EnterRule(_localctx, 748, RULE_constant_LOCAL_ID);
		try {
			State = 9099;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9097; constant();
				}
				break;
			case LOCAL_ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9098; Match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public IToken op;
		public Primitive_expressionContext primitive_expression() {
			return GetRuleContext<Primitive_expressionContext>(0);
		}
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode COLLATE() { return GetToken(TSqlParser.COLLATE, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Case_expressionContext case_expression() {
			return GetRuleContext<Case_expressionContext>(0);
		}
		public Full_column_nameContext full_column_name() {
			return GetRuleContext<Full_column_nameContext>(0);
		}
		public Bracket_expressionContext bracket_expression() {
			return GetRuleContext<Bracket_expressionContext>(0);
		}
		public Unary_operator_expressionContext unary_operator_expression() {
			return GetRuleContext<Unary_operator_expressionContext>(0);
		}
		public Comparison_operatorContext comparison_operator() {
			return GetRuleContext<Comparison_operatorContext>(0);
		}
		public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 750;
		EnterRecursionRule(_localctx, 750, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9109;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1279,_ctx) ) {
			case 1:
				{
				State = 9102; primitive_expression();
				}
				break;

			case 2:
				{
				State = 9103; function_call();
				}
				break;

			case 3:
				{
				State = 9104; case_expression();
				}
				break;

			case 4:
				{
				State = 9105; full_column_name();
				}
				break;

			case 5:
				{
				State = 9106; bracket_expression();
				}
				break;

			case 6:
				{
				State = 9107; unary_operator_expression();
				}
				break;

			case 7:
				{
				State = 9108; over_clause();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 9130;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1281,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 9128;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1280,_ctx) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 9111;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 9112;
						_localctx.op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(((((_la - 842)) & ~0x3f) == 0 && ((1L << (_la - 842)) & ((1L << (STAR - 842)) | (1L << (DIVIDE - 842)) | (1L << (MODULE - 842)))) != 0)) ) {
							_localctx.op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 9113; expression(6);
						}
						break;

					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 9114;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 9115;
						_localctx.op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(((((_la - 831)) & ~0x3f) == 0 && ((1L << (_la - 831)) & ((1L << (DOUBLE_BAR - 831)) | (1L << (PLUS - 831)) | (1L << (MINUS - 831)) | (1L << (BIT_OR - 831)) | (1L << (BIT_AND - 831)) | (1L << (BIT_XOR - 831)))) != 0)) ) {
							_localctx.op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 9116; expression(5);
						}
						break;

					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 9117;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 9118; comparison_operator();
						State = 9119; expression(4);
						}
						break;

					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 9121;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 9122; assignment_operator();
						State = 9123; expression(3);
						}
						break;

					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 9125;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 9126; Match(COLLATE);
						State = 9127; id();
						}
						break;
					}
					} 
				}
				State = 9132;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1281,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Primitive_expressionContext : ParserRuleContext {
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode NULL() { return GetToken(TSqlParser.NULL, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public Primitive_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitive_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPrimitive_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPrimitive_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitive_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primitive_expressionContext primitive_expression() {
		Primitive_expressionContext _localctx = new Primitive_expressionContext(_ctx, State);
		EnterRule(_localctx, 752, RULE_primitive_expression);
		try {
			State = 9137;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case DEFAULT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9133; Match(DEFAULT);
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9134; Match(NULL);
				}
				break;
			case LOCAL_ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9135; Match(LOCAL_ID);
				}
				break;
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9136; constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_expressionContext : ParserRuleContext {
		public ExpressionContext caseExpr;
		public ExpressionContext elseExpr;
		public ITerminalNode CASE() { return GetToken(TSqlParser.CASE, 0); }
		public ITerminalNode END() { return GetToken(TSqlParser.END, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Switch_sectionContext[] switch_section() {
			return GetRuleContexts<Switch_sectionContext>();
		}
		public Switch_sectionContext switch_section(int i) {
			return GetRuleContext<Switch_sectionContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(TSqlParser.ELSE, 0); }
		public Switch_search_condition_sectionContext[] switch_search_condition_section() {
			return GetRuleContexts<Switch_search_condition_sectionContext>();
		}
		public Switch_search_condition_sectionContext switch_search_condition_section(int i) {
			return GetRuleContext<Switch_search_condition_sectionContext>(i);
		}
		public Case_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCase_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCase_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Case_expressionContext case_expression() {
		Case_expressionContext _localctx = new Case_expressionContext(_ctx, State);
		EnterRule(_localctx, 754, RULE_case_expression);
		int _la;
		try {
			State = 9164;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1287,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9139; Match(CASE);
				State = 9140; _localctx.caseExpr = expression(0);
				State = 9142;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 9141; switch_section();
					}
					}
					State = 9144;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==WHEN );
				State = 9148;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ELSE) {
					{
					State = 9146; Match(ELSE);
					State = 9147; _localctx.elseExpr = expression(0);
					}
				}

				State = 9150; Match(END);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9152; Match(CASE);
				State = 9154;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 9153; switch_search_condition_section();
					}
					}
					State = 9156;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==WHEN );
				State = 9160;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ELSE) {
					{
					State = 9158; Match(ELSE);
					State = 9159; _localctx.elseExpr = expression(0);
					}
				}

				State = 9162; Match(END);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_operator_expressionContext : ParserRuleContext {
		public IToken op;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Unary_operator_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_operator_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUnary_operator_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUnary_operator_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_operator_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_operator_expressionContext unary_operator_expression() {
		Unary_operator_expressionContext _localctx = new Unary_operator_expressionContext(_ctx, State);
		EnterRule(_localctx, 756, RULE_unary_operator_expression);
		int _la;
		try {
			State = 9170;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case BIT_NOT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9166; Match(BIT_NOT);
				State = 9167; expression(0);
				}
				break;
			case PLUS:
			case MINUS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9168;
				_localctx.op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
					_localctx.op = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 9169; expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bracket_expressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public Bracket_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracket_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBracket_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBracket_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracket_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bracket_expressionContext bracket_expression() {
		Bracket_expressionContext _localctx = new Bracket_expressionContext(_ctx, State);
		EnterRule(_localctx, 758, RULE_bracket_expression);
		try {
			State = 9180;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1289,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9172; Match(LR_BRACKET);
				State = 9173; expression(0);
				State = 9174; Match(RR_BRACKET);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9176; Match(LR_BRACKET);
				State = 9177; subquery();
				State = 9178; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_expressionContext : ParserRuleContext {
		public ITerminalNode NULL() { return GetToken(TSqlParser.NULL, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Constant_expressionContext constant_expression() {
			return GetRuleContext<Constant_expressionContext>(0);
		}
		public Constant_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterConstant_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitConstant_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constant_expressionContext constant_expression() {
		Constant_expressionContext _localctx = new Constant_expressionContext(_ctx, State);
		EnterRule(_localctx, 760, RULE_constant_expression);
		try {
			State = 9190;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1290,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9182; Match(NULL);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9183; constant();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9184; function_call();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9185; Match(LOCAL_ID);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9186; Match(LR_BRACKET);
				State = 9187; constant_expression();
				State = 9188; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubqueryContext : ParserRuleContext {
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public SubqueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subquery; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSubquery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSubquery(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubquery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubqueryContext subquery() {
		SubqueryContext _localctx = new SubqueryContext(_ctx, State);
		EnterRule(_localctx, 762, RULE_subquery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9192; select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_expressionContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Common_table_expressionContext[] common_table_expression() {
			return GetRuleContexts<Common_table_expressionContext>();
		}
		public Common_table_expressionContext common_table_expression(int i) {
			return GetRuleContext<Common_table_expressionContext>(i);
		}
		public ITerminalNode XMLNAMESPACES() { return GetToken(TSqlParser.XMLNAMESPACES, 0); }
		public ITerminalNode BLOCKING_HIERARCHY() { return GetToken(TSqlParser.BLOCKING_HIERARCHY, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public Full_column_name_listContext full_column_name_list() {
			return GetRuleContext<Full_column_name_listContext>(0);
		}
		public With_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWith_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWith_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWith_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public With_expressionContext with_expression() {
		With_expressionContext _localctx = new With_expressionContext(_ctx, State);
		EnterRule(_localctx, 764, RULE_with_expression);
		int _la;
		try {
			State = 9220;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1294,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9194; Match(WITH);
				State = 9197;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1291,_ctx) ) {
				case 1:
					{
					State = 9195; Match(XMLNAMESPACES);
					State = 9196; Match(COMMA);
					}
					break;
				}
				State = 9199; common_table_expression();
				State = 9204;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 9200; Match(COMMA);
					State = 9201; common_table_expression();
					}
					}
					State = 9206;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9207; Match(WITH);
				State = 9208; Match(BLOCKING_HIERARCHY);
				State = 9213;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LR_BRACKET) {
					{
					State = 9209; Match(LR_BRACKET);
					State = 9210; full_column_name_list();
					State = 9211; Match(RR_BRACKET);
					}
				}

				State = 9215; Match(AS);
				State = 9216; Match(LR_BRACKET);
				State = 9217; select_statement();
				State = 9218; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Common_table_expressionContext : ParserRuleContext {
		public IdContext expression_name;
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Common_table_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_common_table_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCommon_table_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCommon_table_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommon_table_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Common_table_expressionContext common_table_expression() {
		Common_table_expressionContext _localctx = new Common_table_expressionContext(_ctx, State);
		EnterRule(_localctx, 766, RULE_common_table_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9222; _localctx.expression_name = id();
			State = 9227;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LR_BRACKET) {
				{
				State = 9223; Match(LR_BRACKET);
				State = 9224; column_name_list();
				State = 9225; Match(RR_BRACKET);
				}
			}

			State = 9229; Match(AS);
			State = 9230; Match(LR_BRACKET);
			State = 9231; select_statement();
			State = 9232; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_elemContext : ParserRuleContext {
		public IdContext udt_column_name;
		public IdContext method_name;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Full_column_nameContext full_column_name() {
			return GetRuleContext<Full_column_nameContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public Update_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_elem; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUpdate_elem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUpdate_elem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate_elem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Update_elemContext update_elem() {
		Update_elemContext _localctx = new Update_elemContext(_ctx, State);
		EnterRule(_localctx, 768, RULE_update_elem);
		try {
			State = 9250;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1298,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9236;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1296,_ctx) ) {
				case 1:
					{
					State = 9234; full_column_name();
					}
					break;

				case 2:
					{
					State = 9235; Match(LOCAL_ID);
					}
					break;
				}
				State = 9240;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case EQUAL:
					{
					State = 9238; Match(EQUAL);
					}
					break;
				case PLUS_ASSIGN:
				case MINUS_ASSIGN:
				case MULT_ASSIGN:
				case DIV_ASSIGN:
				case MOD_ASSIGN:
				case AND_ASSIGN:
				case XOR_ASSIGN:
				case OR_ASSIGN:
					{
					State = 9239; assignment_operator();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 9242; expression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9243; _localctx.udt_column_name = id();
				State = 9244; Match(DOT);
				State = 9245; _localctx.method_name = id();
				State = 9246; Match(LR_BRACKET);
				State = 9247; expression_list();
				State = 9248; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Search_condition_listContext : ParserRuleContext {
		public Search_conditionContext[] search_condition() {
			return GetRuleContexts<Search_conditionContext>();
		}
		public Search_conditionContext search_condition(int i) {
			return GetRuleContext<Search_conditionContext>(i);
		}
		public Search_condition_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_search_condition_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSearch_condition_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSearch_condition_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSearch_condition_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Search_condition_listContext search_condition_list() {
		Search_condition_listContext _localctx = new Search_condition_listContext(_ctx, State);
		EnterRule(_localctx, 770, RULE_search_condition_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9252; search_condition();
			State = 9257;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1299,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 9253; Match(COMMA);
					State = 9254; search_condition();
					}
					} 
				}
				State = 9259;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1299,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Search_conditionContext : ParserRuleContext {
		public Search_condition_andContext[] search_condition_and() {
			return GetRuleContexts<Search_condition_andContext>();
		}
		public Search_condition_andContext search_condition_and(int i) {
			return GetRuleContext<Search_condition_andContext>(i);
		}
		public ITerminalNode[] OR() { return GetTokens(TSqlParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(TSqlParser.OR, i);
		}
		public Search_conditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_search_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSearch_condition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSearch_condition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSearch_condition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Search_conditionContext search_condition() {
		Search_conditionContext _localctx = new Search_conditionContext(_ctx, State);
		EnterRule(_localctx, 772, RULE_search_condition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9260; search_condition_and();
			State = 9265;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==OR) {
				{
				{
				State = 9261; Match(OR);
				State = 9262; search_condition_and();
				}
				}
				State = 9267;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Search_condition_andContext : ParserRuleContext {
		public Search_condition_notContext[] search_condition_not() {
			return GetRuleContexts<Search_condition_notContext>();
		}
		public Search_condition_notContext search_condition_not(int i) {
			return GetRuleContext<Search_condition_notContext>(i);
		}
		public ITerminalNode[] AND() { return GetTokens(TSqlParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(TSqlParser.AND, i);
		}
		public Search_condition_andContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_search_condition_and; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSearch_condition_and(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSearch_condition_and(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSearch_condition_and(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Search_condition_andContext search_condition_and() {
		Search_condition_andContext _localctx = new Search_condition_andContext(_ctx, State);
		EnterRule(_localctx, 774, RULE_search_condition_and);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9268; search_condition_not();
			State = 9273;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AND) {
				{
				{
				State = 9269; Match(AND);
				State = 9270; search_condition_not();
				}
				}
				State = 9275;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Search_condition_notContext : ParserRuleContext {
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public Search_condition_notContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_search_condition_not; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSearch_condition_not(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSearch_condition_not(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSearch_condition_not(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Search_condition_notContext search_condition_not() {
		Search_condition_notContext _localctx = new Search_condition_notContext(_ctx, State);
		EnterRule(_localctx, 776, RULE_search_condition_not);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9277;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==NOT) {
				{
				State = 9276; Match(NOT);
				}
			}

			State = 9279; predicate();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Comparison_operatorContext comparison_operator() {
			return GetRuleContext<Comparison_operatorContext>(0);
		}
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode SOME() { return GetToken(TSqlParser.SOME, 0); }
		public ITerminalNode ANY() { return GetToken(TSqlParser.ANY, 0); }
		public ITerminalNode BETWEEN() { return GetToken(TSqlParser.BETWEEN, 0); }
		public ITerminalNode AND() { return GetToken(TSqlParser.AND, 0); }
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public ITerminalNode IN() { return GetToken(TSqlParser.IN, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public ITerminalNode LIKE() { return GetToken(TSqlParser.LIKE, 0); }
		public ITerminalNode ESCAPE() { return GetToken(TSqlParser.ESCAPE, 0); }
		public ITerminalNode IS() { return GetToken(TSqlParser.IS, 0); }
		public Null_notnullContext null_notnull() {
			return GetRuleContext<Null_notnullContext>(0);
		}
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPredicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPredicate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		PredicateContext _localctx = new PredicateContext(_ctx, State);
		EnterRule(_localctx, 778, RULE_predicate);
		int _la;
		try {
			State = 9336;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1308,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9281; Match(EXISTS);
				State = 9282; Match(LR_BRACKET);
				State = 9283; subquery();
				State = 9284; Match(RR_BRACKET);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9286; expression(0);
				State = 9287; comparison_operator();
				State = 9288; expression(0);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9290; expression(0);
				State = 9291; comparison_operator();
				State = 9292;
				_la = _input.La(1);
				if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 9293; Match(LR_BRACKET);
				State = 9294; subquery();
				State = 9295; Match(RR_BRACKET);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9297; expression(0);
				State = 9299;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==NOT) {
					{
					State = 9298; Match(NOT);
					}
				}

				State = 9301; Match(BETWEEN);
				State = 9302; expression(0);
				State = 9303; Match(AND);
				State = 9304; expression(0);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9306; expression(0);
				State = 9308;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==NOT) {
					{
					State = 9307; Match(NOT);
					}
				}

				State = 9310; Match(IN);
				State = 9311; Match(LR_BRACKET);
				State = 9314;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1305,_ctx) ) {
				case 1:
					{
					State = 9312; subquery();
					}
					break;

				case 2:
					{
					State = 9313; expression_list();
					}
					break;
				}
				State = 9316; Match(RR_BRACKET);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 9318; expression(0);
				State = 9320;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==NOT) {
					{
					State = 9319; Match(NOT);
					}
				}

				State = 9322; Match(LIKE);
				State = 9323; expression(0);
				State = 9326;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ESCAPE) {
					{
					State = 9324; Match(ESCAPE);
					State = 9325; expression(0);
					}
				}

				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 9328; expression(0);
				State = 9329; Match(IS);
				State = 9330; null_notnull();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 9332; Match(LR_BRACKET);
				State = 9333; search_condition();
				State = 9334; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_expressionContext : ParserRuleContext {
		public Query_specificationContext query_specification() {
			return GetRuleContext<Query_specificationContext>(0);
		}
		public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		public Sql_unionContext[] sql_union() {
			return GetRuleContexts<Sql_unionContext>();
		}
		public Sql_unionContext sql_union(int i) {
			return GetRuleContext<Sql_unionContext>(i);
		}
		public Query_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQuery_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQuery_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_expressionContext query_expression() {
		Query_expressionContext _localctx = new Query_expressionContext(_ctx, State);
		EnterRule(_localctx, 780, RULE_query_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9343;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case SELECT:
				{
				State = 9338; query_specification();
				}
				break;
			case LR_BRACKET:
				{
				State = 9339; Match(LR_BRACKET);
				State = 9340; query_expression();
				State = 9341; Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 9348;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1310,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 9345; sql_union();
					}
					} 
				}
				State = 9350;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1310,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_unionContext : ParserRuleContext {
		public ITerminalNode UNION() { return GetToken(TSqlParser.UNION, 0); }
		public ITerminalNode EXCEPT() { return GetToken(TSqlParser.EXCEPT, 0); }
		public ITerminalNode INTERSECT() { return GetToken(TSqlParser.INTERSECT, 0); }
		public Query_specificationContext query_specification() {
			return GetRuleContext<Query_specificationContext>(0);
		}
		public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public Sql_unionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_union; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSql_union(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSql_union(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSql_union(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sql_unionContext sql_union() {
		Sql_unionContext _localctx = new Sql_unionContext(_ctx, State);
		EnterRule(_localctx, 782, RULE_sql_union);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9357;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case UNION:
				{
				State = 9351; Match(UNION);
				State = 9353;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ALL) {
					{
					State = 9352; Match(ALL);
					}
				}

				}
				break;
			case EXCEPT:
				{
				State = 9355; Match(EXCEPT);
				}
				break;
			case INTERSECT:
				{
				State = 9356; Match(INTERSECT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 9364;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case SELECT:
				{
				State = 9359; query_specification();
				}
				break;
			case LR_BRACKET:
				{
				{
				State = 9360; Match(LR_BRACKET);
				State = 9361; query_expression();
				State = 9362; Match(RR_BRACKET);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_specificationContext : ParserRuleContext {
		public Search_conditionContext where;
		public Search_conditionContext having;
		public ITerminalNode SELECT() { return GetToken(TSqlParser.SELECT, 0); }
		public Select_listContext select_list() {
			return GetRuleContext<Select_listContext>(0);
		}
		public Top_clauseContext top_clause() {
			return GetRuleContext<Top_clauseContext>(0);
		}
		public ITerminalNode INTO() { return GetToken(TSqlParser.INTO, 0); }
		public Schema_object_nameContext schema_object_name() {
			return GetRuleContext<Schema_object_nameContext>(0);
		}
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public Table_sourcesContext table_sources() {
			return GetRuleContext<Table_sourcesContext>(0);
		}
		public ITerminalNode WHERE() { return GetToken(TSqlParser.WHERE, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public Group_by_itemContext[] group_by_item() {
			return GetRuleContexts<Group_by_itemContext>();
		}
		public Group_by_itemContext group_by_item(int i) {
			return GetRuleContext<Group_by_itemContext>(i);
		}
		public ITerminalNode HAVING() { return GetToken(TSqlParser.HAVING, 0); }
		public ITerminalNode[] ALL() { return GetTokens(TSqlParser.ALL); }
		public ITerminalNode ALL(int i) {
			return GetToken(TSqlParser.ALL, i);
		}
		public ITerminalNode DISTINCT() { return GetToken(TSqlParser.DISTINCT, 0); }
		public Search_conditionContext[] search_condition() {
			return GetRuleContexts<Search_conditionContext>();
		}
		public Search_conditionContext search_condition(int i) {
			return GetRuleContext<Search_conditionContext>(i);
		}
		public Query_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQuery_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQuery_specification(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_specificationContext query_specification() {
		Query_specificationContext _localctx = new Query_specificationContext(_ctx, State);
		EnterRule(_localctx, 784, RULE_query_specification);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9366; Match(SELECT);
			State = 9368;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				State = 9367;
				_la = _input.La(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 9371;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==TOP) {
				{
				State = 9370; top_clause();
				}
			}

			State = 9373; select_list();
			State = 9376;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==INTO) {
				{
				State = 9374; Match(INTO);
				State = 9375; schema_object_name();
				}
			}

			State = 9380;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==FROM) {
				{
				State = 9378; Match(FROM);
				State = 9379; table_sources();
				}
			}

			State = 9384;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1318,_ctx) ) {
			case 1:
				{
				State = 9382; Match(WHERE);
				State = 9383; _localctx.where = search_condition();
				}
				break;
			}
			State = 9399;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1321,_ctx) ) {
			case 1:
				{
				State = 9386; Match(GROUP);
				State = 9387; Match(BY);
				State = 9389;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ALL) {
					{
					State = 9388; Match(ALL);
					}
				}

				State = 9391; group_by_item();
				State = 9396;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1320,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 9392; Match(COMMA);
						State = 9393; group_by_item();
						}
						} 
					}
					State = 9398;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1320,_ctx);
				}
				}
				break;
			}
			State = 9403;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1322,_ctx) ) {
			case 1:
				{
				State = 9401; Match(HAVING);
				State = 9402; _localctx.having = search_condition();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_clauseContext : ParserRuleContext {
		public ITerminalNode TOP() { return GetToken(TSqlParser.TOP, 0); }
		public Top_percentContext top_percent() {
			return GetRuleContext<Top_percentContext>(0);
		}
		public Top_countContext top_count() {
			return GetRuleContext<Top_countContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode TIES() { return GetToken(TSqlParser.TIES, 0); }
		public Top_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTop_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTop_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_clauseContext top_clause() {
		Top_clauseContext _localctx = new Top_clauseContext(_ctx, State);
		EnterRule(_localctx, 786, RULE_top_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9405; Match(TOP);
			State = 9408;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1323,_ctx) ) {
			case 1:
				{
				State = 9406; top_percent();
				}
				break;

			case 2:
				{
				State = 9407; top_count();
				}
				break;
			}
			State = 9412;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WITH) {
				{
				State = 9410; Match(WITH);
				State = 9411; Match(TIES);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_percentContext : ParserRuleContext {
		public ITerminalNode PERCENT() { return GetToken(TSqlParser.PERCENT, 0); }
		public ITerminalNode REAL() { return GetToken(TSqlParser.REAL, 0); }
		public ITerminalNode FLOAT() { return GetToken(TSqlParser.FLOAT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Top_percentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_percent; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTop_percent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTop_percent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_percent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_percentContext top_percent() {
		Top_percentContext _localctx = new Top_percentContext(_ctx, State);
		EnterRule(_localctx, 788, RULE_top_percent);
		int _la;
		try {
			State = 9421;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case FLOAT:
			case REAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9414;
				_la = _input.La(1);
				if ( !(_la==FLOAT || _la==REAL) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 9415; Match(PERCENT);
				}
				break;
			case LR_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9416; Match(LR_BRACKET);
				State = 9417; expression(0);
				State = 9418; Match(RR_BRACKET);
				State = 9419; Match(PERCENT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_countContext : ParserRuleContext {
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Top_countContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_count; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTop_count(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTop_count(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_count(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_countContext top_count() {
		Top_countContext _localctx = new Top_countContext(_ctx, State);
		EnterRule(_localctx, 790, RULE_top_count);
		try {
			State = 9428;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case DECIMAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9423; Match(DECIMAL);
				}
				break;
			case LR_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9424; Match(LR_BRACKET);
				State = 9425; expression(0);
				State = 9426; Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_clauseContext : ParserRuleContext {
		public ITerminalNode ORDER() { return GetToken(TSqlParser.ORDER, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public Order_by_expressionContext[] order_by_expression() {
			return GetRuleContexts<Order_by_expressionContext>();
		}
		public Order_by_expressionContext order_by_expression(int i) {
			return GetRuleContext<Order_by_expressionContext>(i);
		}
		public ITerminalNode OFFSET() { return GetToken(TSqlParser.OFFSET, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] ROW() { return GetTokens(TSqlParser.ROW); }
		public ITerminalNode ROW(int i) {
			return GetToken(TSqlParser.ROW, i);
		}
		public ITerminalNode[] ROWS() { return GetTokens(TSqlParser.ROWS); }
		public ITerminalNode ROWS(int i) {
			return GetToken(TSqlParser.ROWS, i);
		}
		public ITerminalNode FETCH() { return GetToken(TSqlParser.FETCH, 0); }
		public ITerminalNode ONLY() { return GetToken(TSqlParser.ONLY, 0); }
		public ITerminalNode FIRST() { return GetToken(TSqlParser.FIRST, 0); }
		public ITerminalNode NEXT() { return GetToken(TSqlParser.NEXT, 0); }
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOrder_by_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOrder_by_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_by_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_clauseContext order_by_clause() {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(_ctx, State);
		EnterRule(_localctx, 792, RULE_order_by_clause);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9430; Match(ORDER);
			State = 9431; Match(BY);
			State = 9432; order_by_expression();
			State = 9437;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1327,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 9433; Match(COMMA);
					State = 9434; order_by_expression();
					}
					} 
				}
				State = 9439;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1327,_ctx);
			}
			State = 9451;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1329,_ctx) ) {
			case 1:
				{
				State = 9440; Match(OFFSET);
				State = 9441; expression(0);
				State = 9442;
				_la = _input.La(1);
				if ( !(_la==ROW || _la==ROWS) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 9449;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1328,_ctx) ) {
				case 1:
					{
					State = 9443; Match(FETCH);
					State = 9444;
					_la = _input.La(1);
					if ( !(_la==FIRST || _la==NEXT) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 9445; expression(0);
					State = 9446;
					_la = _input.La(1);
					if ( !(_la==ROW || _la==ROWS) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 9447; Match(ONLY);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_clauseContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode BROWSE() { return GetToken(TSqlParser.BROWSE, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode RAW() { return GetToken(TSqlParser.RAW, 0); }
		public ITerminalNode AUTO() { return GetToken(TSqlParser.AUTO, 0); }
		public Xml_common_directivesContext[] xml_common_directives() {
			return GetRuleContexts<Xml_common_directivesContext>();
		}
		public Xml_common_directivesContext xml_common_directives(int i) {
			return GetRuleContext<Xml_common_directivesContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode ELEMENTS() { return GetToken(TSqlParser.ELEMENTS, 0); }
		public ITerminalNode XSINIL() { return GetToken(TSqlParser.XSINIL, 0); }
		public ITerminalNode ABSENT() { return GetToken(TSqlParser.ABSENT, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode XMLDATA() { return GetToken(TSqlParser.XMLDATA, 0); }
		public ITerminalNode XMLSCHEMA() { return GetToken(TSqlParser.XMLSCHEMA, 0); }
		public ITerminalNode EXPLICIT() { return GetToken(TSqlParser.EXPLICIT, 0); }
		public ITerminalNode PATH() { return GetToken(TSqlParser.PATH, 0); }
		public ITerminalNode JSON() { return GetToken(TSqlParser.JSON, 0); }
		public ITerminalNode ROOT() { return GetToken(TSqlParser.ROOT, 0); }
		public ITerminalNode INCLUDE_NULL_VALUES() { return GetToken(TSqlParser.INCLUDE_NULL_VALUES, 0); }
		public ITerminalNode WITHOUT_ARRAY_WRAPPER() { return GetToken(TSqlParser.WITHOUT_ARRAY_WRAPPER, 0); }
		public For_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFor_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFor_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_clauseContext for_clause() {
		For_clauseContext _localctx = new For_clauseContext(_ctx, State);
		EnterRule(_localctx, 794, RULE_for_clause);
		int _la;
		try {
			int _alt;
			State = 9541;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1346,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9453; Match(FOR);
				State = 9454; Match(BROWSE);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9455; Match(FOR);
				State = 9456; Match(XML);
				State = 9464;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case RAW:
					{
					State = 9457; Match(RAW);
					State = 9461;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1330,_ctx) ) {
					case 1:
						{
						State = 9458; Match(LR_BRACKET);
						State = 9459; Match(STRING);
						State = 9460; Match(RR_BRACKET);
						}
						break;
					}
					}
					break;
				case AUTO:
					{
					State = 9463; Match(AUTO);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 9469;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1332,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 9466; xml_common_directives();
						}
						} 
					}
					State = 9471;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1332,_ctx);
				}
				State = 9482;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1335,_ctx) ) {
				case 1:
					{
					State = 9472; Match(COMMA);
					State = 9480;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case XMLDATA:
						{
						State = 9473; Match(XMLDATA);
						}
						break;
					case XMLSCHEMA:
						{
						State = 9474; Match(XMLSCHEMA);
						State = 9478;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1333,_ctx) ) {
						case 1:
							{
							State = 9475; Match(LR_BRACKET);
							State = 9476; Match(STRING);
							State = 9477; Match(RR_BRACKET);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				State = 9487;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1336,_ctx) ) {
				case 1:
					{
					State = 9484; Match(COMMA);
					State = 9485; Match(ELEMENTS);
					State = 9486;
					_la = _input.La(1);
					if ( !(_la==ABSENT || _la==XSINIL) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9489; Match(FOR);
				State = 9490; Match(XML);
				State = 9491; Match(EXPLICIT);
				State = 9495;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1337,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 9492; xml_common_directives();
						}
						} 
					}
					State = 9497;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1337,_ctx);
				}
				State = 9500;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1338,_ctx) ) {
				case 1:
					{
					State = 9498; Match(COMMA);
					State = 9499; Match(XMLDATA);
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9502; Match(FOR);
				State = 9503; Match(XML);
				State = 9504; Match(PATH);
				State = 9508;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1339,_ctx) ) {
				case 1:
					{
					State = 9505; Match(LR_BRACKET);
					State = 9506; Match(STRING);
					State = 9507; Match(RR_BRACKET);
					}
					break;
				}
				State = 9513;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1340,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 9510; xml_common_directives();
						}
						} 
					}
					State = 9515;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1340,_ctx);
				}
				State = 9519;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1341,_ctx) ) {
				case 1:
					{
					State = 9516; Match(COMMA);
					State = 9517; Match(ELEMENTS);
					State = 9518;
					_la = _input.La(1);
					if ( !(_la==ABSENT || _la==XSINIL) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9521; Match(FOR);
				State = 9522; Match(JSON);
				State = 9523;
				_la = _input.La(1);
				if ( !(_la==AUTO || _la==PATH) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 9531;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1343,_ctx) ) {
				case 1:
					{
					State = 9524; Match(COMMA);
					State = 9525; Match(ROOT);
					State = 9529;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1342,_ctx) ) {
					case 1:
						{
						State = 9526; Match(LR_BRACKET);
						State = 9527; Match(STRING);
						State = 9528; Match(RR_BRACKET);
						}
						break;
					}
					}
					break;
				}
				State = 9535;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1344,_ctx) ) {
				case 1:
					{
					State = 9533; Match(COMMA);
					State = 9534; Match(INCLUDE_NULL_VALUES);
					}
					break;
				}
				State = 9539;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1345,_ctx) ) {
				case 1:
					{
					State = 9537; Match(COMMA);
					State = 9538; Match(WITHOUT_ARRAY_WRAPPER);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_common_directivesContext : ParserRuleContext {
		public ITerminalNode BINARY_BASE64() { return GetToken(TSqlParser.BINARY_BASE64, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ITerminalNode ROOT() { return GetToken(TSqlParser.ROOT, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Xml_common_directivesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_common_directives; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterXml_common_directives(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitXml_common_directives(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXml_common_directives(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xml_common_directivesContext xml_common_directives() {
		Xml_common_directivesContext _localctx = new Xml_common_directivesContext(_ctx, State);
		EnterRule(_localctx, 796, RULE_xml_common_directives);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9543; Match(COMMA);
			State = 9552;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case BINARY_BASE64:
				{
				State = 9544; Match(BINARY_BASE64);
				}
				break;
			case TYPE:
				{
				State = 9545; Match(TYPE);
				}
				break;
			case ROOT:
				{
				State = 9546; Match(ROOT);
				State = 9550;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1347,_ctx) ) {
				case 1:
					{
					State = 9547; Match(LR_BRACKET);
					State = 9548; Match(STRING);
					State = 9549; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_expressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ASC() { return GetToken(TSqlParser.ASC, 0); }
		public ITerminalNode DESC() { return GetToken(TSqlParser.DESC, 0); }
		public Order_by_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOrder_by_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOrder_by_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_by_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_expressionContext order_by_expression() {
		Order_by_expressionContext _localctx = new Order_by_expressionContext(_ctx, State);
		EnterRule(_localctx, 798, RULE_order_by_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9554; expression(0);
			State = 9556;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ASC || _la==DESC) {
				{
				State = 9555;
				_la = _input.La(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_by_itemContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Group_by_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_by_item; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGroup_by_item(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGroup_by_item(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroup_by_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Group_by_itemContext group_by_item() {
		Group_by_itemContext _localctx = new Group_by_itemContext(_ctx, State);
		EnterRule(_localctx, 800, RULE_group_by_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9558; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Option_clauseContext : ParserRuleContext {
		public ITerminalNode OPTION() { return GetToken(TSqlParser.OPTION, 0); }
		public OptionContext[] option() {
			return GetRuleContexts<OptionContext>();
		}
		public OptionContext option(int i) {
			return GetRuleContext<OptionContext>(i);
		}
		public Option_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOption_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOption_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOption_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Option_clauseContext option_clause() {
		Option_clauseContext _localctx = new Option_clauseContext(_ctx, State);
		EnterRule(_localctx, 802, RULE_option_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9560; Match(OPTION);
			State = 9561; Match(LR_BRACKET);
			State = 9562; option();
			State = 9567;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 9563; Match(COMMA);
				State = 9564; option();
				}
				}
				State = 9569;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 9570; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionContext : ParserRuleContext {
		public IToken number_rows;
		public IToken number_of_processors;
		public IToken number_recursion;
		public ITerminalNode FAST() { return GetToken(TSqlParser.FAST, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public ITerminalNode HASH() { return GetToken(TSqlParser.HASH, 0); }
		public ITerminalNode ORDER() { return GetToken(TSqlParser.ORDER, 0); }
		public ITerminalNode UNION() { return GetToken(TSqlParser.UNION, 0); }
		public ITerminalNode MERGE() { return GetToken(TSqlParser.MERGE, 0); }
		public ITerminalNode CONCAT() { return GetToken(TSqlParser.CONCAT, 0); }
		public ITerminalNode JOIN() { return GetToken(TSqlParser.JOIN, 0); }
		public ITerminalNode LOOP() { return GetToken(TSqlParser.LOOP, 0); }
		public ITerminalNode EXPAND() { return GetToken(TSqlParser.EXPAND, 0); }
		public ITerminalNode VIEWS() { return GetToken(TSqlParser.VIEWS, 0); }
		public ITerminalNode FORCE() { return GetToken(TSqlParser.FORCE, 0); }
		public ITerminalNode IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX() { return GetToken(TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0); }
		public ITerminalNode KEEP() { return GetToken(TSqlParser.KEEP, 0); }
		public ITerminalNode PLAN() { return GetToken(TSqlParser.PLAN, 0); }
		public ITerminalNode KEEPFIXED() { return GetToken(TSqlParser.KEEPFIXED, 0); }
		public ITerminalNode MAXDOP() { return GetToken(TSqlParser.MAXDOP, 0); }
		public ITerminalNode MAXRECURSION() { return GetToken(TSqlParser.MAXRECURSION, 0); }
		public ITerminalNode OPTIMIZE() { return GetToken(TSqlParser.OPTIMIZE, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public Optimize_for_argContext[] optimize_for_arg() {
			return GetRuleContexts<Optimize_for_argContext>();
		}
		public Optimize_for_argContext optimize_for_arg(int i) {
			return GetRuleContext<Optimize_for_argContext>(i);
		}
		public ITerminalNode UNKNOWN() { return GetToken(TSqlParser.UNKNOWN, 0); }
		public ITerminalNode PARAMETERIZATION() { return GetToken(TSqlParser.PARAMETERIZATION, 0); }
		public ITerminalNode SIMPLE() { return GetToken(TSqlParser.SIMPLE, 0); }
		public ITerminalNode FORCED() { return GetToken(TSqlParser.FORCED, 0); }
		public ITerminalNode RECOMPILE() { return GetToken(TSqlParser.RECOMPILE, 0); }
		public ITerminalNode ROBUST() { return GetToken(TSqlParser.ROBUST, 0); }
		public ITerminalNode USE() { return GetToken(TSqlParser.USE, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public OptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionContext option() {
		OptionContext _localctx = new OptionContext(_ctx, State);
		EnterRule(_localctx, 804, RULE_option);
		int _la;
		try {
			State = 9617;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1352,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9572; Match(FAST);
				State = 9573; _localctx.number_rows = Match(DECIMAL);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9574;
				_la = _input.La(1);
				if ( !(_la==ORDER || _la==HASH) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 9575; Match(GROUP);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9576;
				_la = _input.La(1);
				if ( !(_la==MERGE || _la==CONCAT || _la==HASH) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 9577; Match(UNION);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9578;
				_la = _input.La(1);
				if ( !(_la==MERGE || _la==HASH || _la==LOOP) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 9579; Match(JOIN);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9580; Match(EXPAND);
				State = 9581; Match(VIEWS);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 9582; Match(FORCE);
				State = 9583; Match(ORDER);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 9584; Match(IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 9585; Match(KEEP);
				State = 9586; Match(PLAN);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 9587; Match(KEEPFIXED);
				State = 9588; Match(PLAN);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 9589; Match(MAXDOP);
				State = 9590; _localctx.number_of_processors = Match(DECIMAL);
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 9591; Match(MAXRECURSION);
				State = 9592; _localctx.number_recursion = Match(DECIMAL);
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 9593; Match(OPTIMIZE);
				State = 9594; Match(FOR);
				State = 9595; Match(LR_BRACKET);
				State = 9596; optimize_for_arg();
				State = 9601;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 9597; Match(COMMA);
					State = 9598; optimize_for_arg();
					}
					}
					State = 9603;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 9604; Match(RR_BRACKET);
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 9606; Match(OPTIMIZE);
				State = 9607; Match(FOR);
				State = 9608; Match(UNKNOWN);
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 9609; Match(PARAMETERIZATION);
				State = 9610;
				_la = _input.La(1);
				if ( !(_la==FORCED || _la==SIMPLE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 9611; Match(RECOMPILE);
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 9612; Match(ROBUST);
				State = 9613; Match(PLAN);
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 9614; Match(USE);
				State = 9615; Match(PLAN);
				State = 9616; Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Optimize_for_argContext : ParserRuleContext {
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode UNKNOWN() { return GetToken(TSqlParser.UNKNOWN, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ITerminalNode NULL() { return GetToken(TSqlParser.NULL, 0); }
		public Optimize_for_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optimize_for_arg; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOptimize_for_arg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOptimize_for_arg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptimize_for_arg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Optimize_for_argContext optimize_for_arg() {
		Optimize_for_argContext _localctx = new Optimize_for_argContext(_ctx, State);
		EnterRule(_localctx, 806, RULE_optimize_for_arg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9619; Match(LOCAL_ID);
			State = 9626;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case UNKNOWN:
				{
				State = 9620; Match(UNKNOWN);
				}
				break;
			case EQUAL:
				{
				State = 9621; Match(EQUAL);
				State = 9624;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case DECIMAL:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case PLUS:
				case MINUS:
					{
					State = 9622; constant();
					}
					break;
				case NULL:
					{
					State = 9623; Match(NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_listContext : ParserRuleContext {
		public Select_list_elemContext[] select_list_elem() {
			return GetRuleContexts<Select_list_elemContext>();
		}
		public Select_list_elemContext select_list_elem(int i) {
			return GetRuleContext<Select_list_elemContext>(i);
		}
		public Select_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSelect_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSelect_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_listContext select_list() {
		Select_listContext _localctx = new Select_listContext(_ctx, State);
		EnterRule(_localctx, 808, RULE_select_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9628; select_list_elem();
			State = 9633;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1355,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 9629; Match(COMMA);
					State = 9630; select_list_elem();
					}
					} 
				}
				State = 9635;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1355,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Udt_method_argumentsContext : ParserRuleContext {
		public Execute_var_stringContext[] execute_var_string() {
			return GetRuleContexts<Execute_var_stringContext>();
		}
		public Execute_var_stringContext execute_var_string(int i) {
			return GetRuleContext<Execute_var_stringContext>(i);
		}
		public Udt_method_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_udt_method_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUdt_method_arguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUdt_method_arguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUdt_method_arguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Udt_method_argumentsContext udt_method_arguments() {
		Udt_method_argumentsContext _localctx = new Udt_method_argumentsContext(_ctx, State);
		EnterRule(_localctx, 810, RULE_udt_method_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9636; Match(LR_BRACKET);
			State = 9637; execute_var_string();
			State = 9642;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 9638; Match(COMMA);
				State = 9639; execute_var_string();
				}
				}
				State = 9644;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 9645; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsteriskContext : ParserRuleContext {
		public Schema_object_nameContext schema_object_name() {
			return GetRuleContext<Schema_object_nameContext>(0);
		}
		public AsteriskContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asterisk; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAsterisk(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAsterisk(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsterisk(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsteriskContext asterisk() {
		AsteriskContext _localctx = new AsteriskContext(_ctx, State);
		EnterRule(_localctx, 812, RULE_asterisk);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9650;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1357,_ctx) ) {
			case 1:
				{
				State = 9647; schema_object_name();
				State = 9648; Match(DOT);
				}
				break;
			}
			State = 9652; Match(STAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_elemContext : ParserRuleContext {
		public IdContext column_name;
		public ITerminalNode NULL() { return GetToken(TSqlParser.NULL, 0); }
		public As_column_aliasContext as_column_alias() {
			return GetRuleContext<As_column_aliasContext>(0);
		}
		public ITerminalNode IDENTITY() { return GetToken(TSqlParser.IDENTITY, 0); }
		public ITerminalNode ROWGUID() { return GetToken(TSqlParser.ROWGUID, 0); }
		public Schema_object_nameContext schema_object_name() {
			return GetRuleContext<Schema_object_nameContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Column_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_elem; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_elem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_elem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_elem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_elemContext column_elem() {
		Column_elemContext _localctx = new Column_elemContext(_ctx, State);
		EnterRule(_localctx, 814, RULE_column_elem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9667;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1360,_ctx) ) {
			case 1:
				{
				State = 9657;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1358,_ctx) ) {
				case 1:
					{
					State = 9654; schema_object_name();
					State = 9655; Match(DOT);
					}
					break;
				}
				State = 9664;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1359,_ctx) ) {
				case 1:
					{
					State = 9659; _localctx.column_name = id();
					}
					break;

				case 2:
					{
					State = 9660; Match(DOLLAR);
					State = 9661; Match(IDENTITY);
					}
					break;

				case 3:
					{
					State = 9662; Match(DOLLAR);
					State = 9663; Match(ROWGUID);
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 9666; Match(NULL);
				}
				break;
			}
			State = 9670;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1361,_ctx) ) {
			case 1:
				{
				State = 9669; as_column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Udt_elemContext : ParserRuleContext {
		public IdContext udt_column_name;
		public IdContext non_static_attr;
		public IdContext static_attr;
		public Udt_method_argumentsContext udt_method_arguments() {
			return GetRuleContext<Udt_method_argumentsContext>(0);
		}
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public As_column_aliasContext as_column_alias() {
			return GetRuleContext<As_column_aliasContext>(0);
		}
		public Udt_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_udt_elem; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUdt_elem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUdt_elem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUdt_elem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Udt_elemContext udt_elem() {
		Udt_elemContext _localctx = new Udt_elemContext(_ctx, State);
		EnterRule(_localctx, 816, RULE_udt_elem);
		try {
			State = 9689;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1365,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9672; _localctx.udt_column_name = id();
				State = 9673; Match(DOT);
				State = 9674; _localctx.non_static_attr = id();
				State = 9675; udt_method_arguments();
				State = 9677;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1362,_ctx) ) {
				case 1:
					{
					State = 9676; as_column_alias();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9679; _localctx.udt_column_name = id();
				State = 9680; Match(COLON);
				State = 9681; Match(COLON);
				State = 9682; _localctx.static_attr = id();
				State = 9684;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1363,_ctx) ) {
				case 1:
					{
					State = 9683; udt_method_arguments();
					}
					break;
				}
				State = 9687;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1364,_ctx) ) {
				case 1:
					{
					State = 9686; as_column_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_elemContext : ParserRuleContext {
		public IToken eq;
		public Column_aliasContext column_alias() {
			return GetRuleContext<Column_aliasContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public As_column_aliasContext as_column_alias() {
			return GetRuleContext<As_column_aliasContext>(0);
		}
		public Expression_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_elem; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExpression_elem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExpression_elem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_elem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_elemContext expression_elem() {
		Expression_elemContext _localctx = new Expression_elemContext(_ctx, State);
		EnterRule(_localctx, 818, RULE_expression_elem);
		try {
			State = 9699;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1367,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9691; column_alias();
				State = 9692; _localctx.eq = Match(EQUAL);
				State = 9693; expression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9695; expression(0);
				State = 9697;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1366,_ctx) ) {
				case 1:
					{
					State = 9696; as_column_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_list_elemContext : ParserRuleContext {
		public AsteriskContext asterisk() {
			return GetRuleContext<AsteriskContext>(0);
		}
		public Column_elemContext column_elem() {
			return GetRuleContext<Column_elemContext>(0);
		}
		public Udt_elemContext udt_elem() {
			return GetRuleContext<Udt_elemContext>(0);
		}
		public Expression_elemContext expression_elem() {
			return GetRuleContext<Expression_elemContext>(0);
		}
		public Select_list_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_list_elem; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSelect_list_elem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSelect_list_elem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_list_elem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_list_elemContext select_list_elem() {
		Select_list_elemContext _localctx = new Select_list_elemContext(_ctx, State);
		EnterRule(_localctx, 820, RULE_select_list_elem);
		try {
			State = 9705;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1368,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9701; asterisk();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9702; column_elem();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9703; udt_elem();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9704; expression_elem();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_sourcesContext : ParserRuleContext {
		public Table_sourceContext[] table_source() {
			return GetRuleContexts<Table_sourceContext>();
		}
		public Table_sourceContext table_source(int i) {
			return GetRuleContext<Table_sourceContext>(i);
		}
		public Table_sourcesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_sources; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_sources(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_sources(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_sources(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_sourcesContext table_sources() {
		Table_sourcesContext _localctx = new Table_sourcesContext(_ctx, State);
		EnterRule(_localctx, 822, RULE_table_sources);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9707; table_source();
			State = 9712;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1369,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 9708; Match(COMMA);
					State = 9709; table_source();
					}
					} 
				}
				State = 9714;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1369,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_sourceContext : ParserRuleContext {
		public Table_source_item_joinedContext table_source_item_joined() {
			return GetRuleContext<Table_source_item_joinedContext>(0);
		}
		public Table_sourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_source; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_source(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_source(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_source(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_sourceContext table_source() {
		Table_sourceContext _localctx = new Table_sourceContext(_ctx, State);
		EnterRule(_localctx, 824, RULE_table_source);
		try {
			State = 9720;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1370,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9715; table_source_item_joined();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9716; Match(LR_BRACKET);
				State = 9717; table_source_item_joined();
				State = 9718; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_source_item_joinedContext : ParserRuleContext {
		public Table_source_itemContext table_source_item() {
			return GetRuleContext<Table_source_itemContext>(0);
		}
		public Join_partContext[] join_part() {
			return GetRuleContexts<Join_partContext>();
		}
		public Join_partContext join_part(int i) {
			return GetRuleContext<Join_partContext>(i);
		}
		public Table_source_item_joinedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_source_item_joined; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_source_item_joined(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_source_item_joined(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_source_item_joined(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_source_item_joinedContext table_source_item_joined() {
		Table_source_item_joinedContext _localctx = new Table_source_item_joinedContext(_ctx, State);
		EnterRule(_localctx, 826, RULE_table_source_item_joined);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9722; table_source_item();
			State = 9726;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1371,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 9723; join_part();
					}
					} 
				}
				State = 9728;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1371,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_source_itemContext : ParserRuleContext {
		public Schema_object_nameContext schema_object_name() {
			return GetRuleContext<Schema_object_nameContext>(0);
		}
		public As_table_aliasContext as_table_alias() {
			return GetRuleContext<As_table_aliasContext>(0);
		}
		public Tablesample_clauseContext tablesample_clause() {
			return GetRuleContext<Tablesample_clauseContext>(0);
		}
		public With_table_hintsContext with_table_hints() {
			return GetRuleContext<With_table_hintsContext>(0);
		}
		public Rowset_functionContext rowset_function() {
			return GetRuleContext<Rowset_functionContext>(0);
		}
		public Derived_tableContext derived_table() {
			return GetRuleContext<Derived_tableContext>(0);
		}
		public Column_alias_listContext column_alias_list() {
			return GetRuleContext<Column_alias_listContext>(0);
		}
		public Change_tableContext change_table() {
			return GetRuleContext<Change_tableContext>(0);
		}
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Open_xmlContext open_xml() {
			return GetRuleContext<Open_xmlContext>(0);
		}
		public Table_source_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_source_item; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_source_item(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_source_item(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_source_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_source_itemContext table_source_item() {
		Table_source_itemContext _localctx = new Table_source_itemContext(_ctx, State);
		EnterRule(_localctx, 828, RULE_table_source_item);
		int _la;
		try {
			State = 9780;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1384,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9729; schema_object_name();
				State = 9731;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1372,_ctx) ) {
				case 1:
					{
					State = 9730; as_table_alias();
					}
					break;
				}
				State = 9734;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==TABLESAMPLE) {
					{
					State = 9733; tablesample_clause();
					}
				}

				State = 9737;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1374,_ctx) ) {
				case 1:
					{
					State = 9736; with_table_hints();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9739; rowset_function();
				State = 9741;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1375,_ctx) ) {
				case 1:
					{
					State = 9740; as_table_alias();
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9743; derived_table();
				State = 9748;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1377,_ctx) ) {
				case 1:
					{
					State = 9744; as_table_alias();
					State = 9746;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1376,_ctx) ) {
					case 1:
						{
						State = 9745; column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9750; change_table();
				State = 9751; as_table_alias();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9753; function_call();
				State = 9758;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1379,_ctx) ) {
				case 1:
					{
					State = 9754; as_table_alias();
					State = 9756;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1378,_ctx) ) {
					case 1:
						{
						State = 9755; column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 9760; Match(LOCAL_ID);
				State = 9762;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1380,_ctx) ) {
				case 1:
					{
					State = 9761; as_table_alias();
					}
					break;
				}
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 9764; Match(LOCAL_ID);
				State = 9765; Match(DOT);
				State = 9766; function_call();
				State = 9771;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1382,_ctx) ) {
				case 1:
					{
					State = 9767; as_table_alias();
					State = 9769;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1381,_ctx) ) {
					case 1:
						{
						State = 9768; column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 9773; open_xml();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 9774; Match(COLON);
				State = 9775; Match(COLON);
				State = 9776; function_call();
				State = 9778;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1383,_ctx) ) {
				case 1:
					{
					State = 9777; as_table_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tablesample_clauseContext : ParserRuleContext {
		public IToken sample_number;
		public IToken repeat_seed;
		public ITerminalNode TABLESAMPLE() { return GetToken(TSqlParser.TABLESAMPLE, 0); }
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode PERCENT() { return GetToken(TSqlParser.PERCENT, 0); }
		public ITerminalNode ROWS() { return GetToken(TSqlParser.ROWS, 0); }
		public ITerminalNode SYSTEM() { return GetToken(TSqlParser.SYSTEM, 0); }
		public ITerminalNode REPEATABLE() { return GetToken(TSqlParser.REPEATABLE, 0); }
		public Tablesample_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablesample_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTablesample_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTablesample_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTablesample_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tablesample_clauseContext tablesample_clause() {
		Tablesample_clauseContext _localctx = new Tablesample_clauseContext(_ctx, State);
		EnterRule(_localctx, 830, RULE_tablesample_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9782; Match(TABLESAMPLE);
			State = 9784;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==SYSTEM) {
				{
				State = 9783; Match(SYSTEM);
				}
			}

			State = 9786; Match(LR_BRACKET);
			State = 9787; _localctx.sample_number = Match(DECIMAL);
			State = 9788;
			_la = _input.La(1);
			if ( !(_la==PERCENT || _la==ROWS) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 9789; Match(RR_BRACKET);
			State = 9794;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1386,_ctx) ) {
			case 1:
				{
				State = 9790; Match(REPEATABLE);
				State = 9791; Match(LR_BRACKET);
				State = 9792; _localctx.repeat_seed = Match(DECIMAL);
				State = 9793; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Open_xmlContext : ParserRuleContext {
		public ITerminalNode OPENXML() { return GetToken(TSqlParser.OPENXML, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Schema_declarationContext schema_declaration() {
			return GetRuleContext<Schema_declarationContext>(0);
		}
		public Open_xmlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_open_xml; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOpen_xml(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOpen_xml(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpen_xml(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Open_xmlContext open_xml() {
		Open_xmlContext _localctx = new Open_xmlContext(_ctx, State);
		EnterRule(_localctx, 832, RULE_open_xml);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9796; Match(OPENXML);
			State = 9797; Match(LR_BRACKET);
			State = 9798; expression(0);
			State = 9799; Match(COMMA);
			State = 9800; expression(0);
			State = 9803;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 9801; Match(COMMA);
				State = 9802; expression(0);
				}
			}

			State = 9805; Match(RR_BRACKET);
			State = 9811;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1388,_ctx) ) {
			case 1:
				{
				State = 9806; Match(WITH);
				State = 9807; Match(LR_BRACKET);
				State = 9808; schema_declaration();
				State = 9809; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Schema_declarationContext : ParserRuleContext {
		public Column_declarationContext[] column_declaration() {
			return GetRuleContexts<Column_declarationContext>();
		}
		public Column_declarationContext column_declaration(int i) {
			return GetRuleContext<Column_declarationContext>(i);
		}
		public Schema_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schema_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSchema_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSchema_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSchema_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Schema_declarationContext schema_declaration() {
		Schema_declarationContext _localctx = new Schema_declarationContext(_ctx, State);
		EnterRule(_localctx, 834, RULE_schema_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9813; column_declaration();
			State = 9818;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 9814; Match(COMMA);
				State = 9815; column_declaration();
				}
				}
				State = 9820;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_declarationContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(TSqlParser.ID, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Column_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_declarationContext column_declaration() {
		Column_declarationContext _localctx = new Column_declarationContext(_ctx, State);
		EnterRule(_localctx, 836, RULE_column_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9821; Match(ID);
			State = 9822; data_type();
			State = 9824;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==STRING) {
				{
				State = 9823; Match(STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Change_tableContext : ParserRuleContext {
		public ITerminalNode CHANGETABLE() { return GetToken(TSqlParser.CHANGETABLE, 0); }
		public ITerminalNode CHANGES() { return GetToken(TSqlParser.CHANGES, 0); }
		public Schema_object_nameContext schema_object_name() {
			return GetRuleContext<Schema_object_nameContext>(0);
		}
		public ITerminalNode NULL() { return GetToken(TSqlParser.NULL, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Change_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_change_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterChange_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitChange_table(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChange_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Change_tableContext change_table() {
		Change_tableContext _localctx = new Change_tableContext(_ctx, State);
		EnterRule(_localctx, 838, RULE_change_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9826; Match(CHANGETABLE);
			State = 9827; Match(LR_BRACKET);
			State = 9828; Match(CHANGES);
			State = 9829; schema_object_name();
			State = 9830; Match(COMMA);
			State = 9831;
			_la = _input.La(1);
			if ( !(_la==NULL || _la==LOCAL_ID || _la==DECIMAL) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 9832; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_partContext : ParserRuleContext {
		public IToken join_type;
		public IToken join_hint;
		public ITerminalNode JOIN() { return GetToken(TSqlParser.JOIN, 0); }
		public Table_sourceContext table_source() {
			return GetRuleContext<Table_sourceContext>(0);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public ITerminalNode LEFT() { return GetToken(TSqlParser.LEFT, 0); }
		public ITerminalNode RIGHT() { return GetToken(TSqlParser.RIGHT, 0); }
		public ITerminalNode FULL() { return GetToken(TSqlParser.FULL, 0); }
		public ITerminalNode INNER() { return GetToken(TSqlParser.INNER, 0); }
		public ITerminalNode OUTER() { return GetToken(TSqlParser.OUTER, 0); }
		public ITerminalNode LOOP() { return GetToken(TSqlParser.LOOP, 0); }
		public ITerminalNode HASH() { return GetToken(TSqlParser.HASH, 0); }
		public ITerminalNode MERGE() { return GetToken(TSqlParser.MERGE, 0); }
		public ITerminalNode REMOTE() { return GetToken(TSqlParser.REMOTE, 0); }
		public ITerminalNode CROSS() { return GetToken(TSqlParser.CROSS, 0); }
		public ITerminalNode APPLY() { return GetToken(TSqlParser.APPLY, 0); }
		public ITerminalNode PIVOT() { return GetToken(TSqlParser.PIVOT, 0); }
		public Pivot_clauseContext pivot_clause() {
			return GetRuleContext<Pivot_clauseContext>(0);
		}
		public As_table_aliasContext as_table_alias() {
			return GetRuleContext<As_table_aliasContext>(0);
		}
		public ITerminalNode UNPIVOT() { return GetToken(TSqlParser.UNPIVOT, 0); }
		public Unpivot_clauseContext unpivot_clause() {
			return GetRuleContext<Unpivot_clauseContext>(0);
		}
		public Join_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_part; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterJoin_part(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitJoin_part(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_partContext join_part() {
		Join_partContext _localctx = new Join_partContext(_ctx, State);
		EnterRule(_localctx, 840, RULE_join_part);
		int _la;
		try {
			State = 9868;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1395,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9841;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case INNER:
				case JOIN:
				case MERGE:
				case HASH:
				case LOOP:
				case REMOTE:
					{
					State = 9835;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==INNER) {
						{
						State = 9834; Match(INNER);
						}
					}

					}
					break;
				case FULL:
				case LEFT:
				case RIGHT:
					{
					State = 9837;
					_localctx.join_type = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==FULL || _la==LEFT || _la==RIGHT) ) {
						_localctx.join_type = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 9839;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==OUTER) {
						{
						State = 9838; Match(OUTER);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 9844;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==MERGE || _la==HASH || _la==LOOP || _la==REMOTE) {
					{
					State = 9843;
					_localctx.join_hint = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==MERGE || _la==HASH || _la==LOOP || _la==REMOTE) ) {
						_localctx.join_hint = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
				}

				State = 9846; Match(JOIN);
				State = 9847; table_source();
				State = 9848; Match(ON);
				State = 9849; search_condition();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9851; Match(CROSS);
				State = 9852; Match(JOIN);
				State = 9853; table_source();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9854; Match(CROSS);
				State = 9855; Match(APPLY);
				State = 9856; table_source();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9857; Match(OUTER);
				State = 9858; Match(APPLY);
				State = 9859; table_source();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9860; Match(PIVOT);
				State = 9861; pivot_clause();
				State = 9862; as_table_alias();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 9864; Match(UNPIVOT);
				State = 9865; unpivot_clause();
				State = 9866; as_table_alias();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pivot_clauseContext : ParserRuleContext {
		public Aggregate_windowed_functionContext aggregate_windowed_function() {
			return GetRuleContext<Aggregate_windowed_functionContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public Full_column_nameContext full_column_name() {
			return GetRuleContext<Full_column_nameContext>(0);
		}
		public ITerminalNode IN() { return GetToken(TSqlParser.IN, 0); }
		public Column_alias_listContext column_alias_list() {
			return GetRuleContext<Column_alias_listContext>(0);
		}
		public Pivot_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pivot_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPivot_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPivot_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPivot_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pivot_clauseContext pivot_clause() {
		Pivot_clauseContext _localctx = new Pivot_clauseContext(_ctx, State);
		EnterRule(_localctx, 842, RULE_pivot_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9870; Match(LR_BRACKET);
			State = 9871; aggregate_windowed_function();
			State = 9872; Match(FOR);
			State = 9873; full_column_name();
			State = 9874; Match(IN);
			State = 9875; column_alias_list();
			State = 9876; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unpivot_clauseContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public Full_column_nameContext full_column_name() {
			return GetRuleContext<Full_column_nameContext>(0);
		}
		public ITerminalNode IN() { return GetToken(TSqlParser.IN, 0); }
		public Full_column_name_listContext full_column_name_list() {
			return GetRuleContext<Full_column_name_listContext>(0);
		}
		public Unpivot_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unpivot_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUnpivot_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUnpivot_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnpivot_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unpivot_clauseContext unpivot_clause() {
		Unpivot_clauseContext _localctx = new Unpivot_clauseContext(_ctx, State);
		EnterRule(_localctx, 844, RULE_unpivot_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9878; Match(LR_BRACKET);
			State = 9879; expression(0);
			State = 9880; Match(FOR);
			State = 9881; full_column_name();
			State = 9882; Match(IN);
			State = 9883; Match(LR_BRACKET);
			State = 9884; full_column_name_list();
			State = 9885; Match(RR_BRACKET);
			State = 9886; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_column_name_listContext : ParserRuleContext {
		public Full_column_nameContext[] full_column_name() {
			return GetRuleContexts<Full_column_nameContext>();
		}
		public Full_column_nameContext full_column_name(int i) {
			return GetRuleContext<Full_column_nameContext>(i);
		}
		public Full_column_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_column_name_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFull_column_name_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFull_column_name_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFull_column_name_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Full_column_name_listContext full_column_name_list() {
		Full_column_name_listContext _localctx = new Full_column_name_listContext(_ctx, State);
		EnterRule(_localctx, 846, RULE_full_column_name_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9888; full_column_name();
			State = 9893;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 9889; Match(COMMA);
				State = 9890; full_column_name();
				}
				}
				State = 9895;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_name_with_hintContext : ParserRuleContext {
		public Schema_object_nameContext schema_object_name() {
			return GetRuleContext<Schema_object_nameContext>(0);
		}
		public With_table_hintsContext with_table_hints() {
			return GetRuleContext<With_table_hintsContext>(0);
		}
		public Table_name_with_hintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_name_with_hint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_name_with_hint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_name_with_hint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_name_with_hint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_name_with_hintContext table_name_with_hint() {
		Table_name_with_hintContext _localctx = new Table_name_with_hintContext(_ctx, State);
		EnterRule(_localctx, 848, RULE_table_name_with_hint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9896; schema_object_name();
			State = 9898;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1397,_ctx) ) {
			case 1:
				{
				State = 9897; with_table_hints();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rowset_functionContext : ParserRuleContext {
		public IToken provider_name;
		public IToken connectionString;
		public IToken sql;
		public IToken data_file;
		public ITerminalNode OPENROWSET() { return GetToken(TSqlParser.OPENROWSET, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode BULK() { return GetToken(TSqlParser.BULK, 0); }
		public Bulk_optionContext[] bulk_option() {
			return GetRuleContexts<Bulk_optionContext>();
		}
		public Bulk_optionContext bulk_option(int i) {
			return GetRuleContext<Bulk_optionContext>(i);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Rowset_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowset_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRowset_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRowset_function(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRowset_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rowset_functionContext rowset_function() {
		Rowset_functionContext _localctx = new Rowset_functionContext(_ctx, State);
		EnterRule(_localctx, 850, RULE_rowset_function);
		int _la;
		try {
			State = 9926;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1400,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 9900; Match(OPENROWSET);
				State = 9901; Match(LR_BRACKET);
				State = 9902; _localctx.provider_name = Match(STRING);
				State = 9903; Match(COMMA);
				State = 9904; _localctx.connectionString = Match(STRING);
				State = 9905; Match(COMMA);
				State = 9906; _localctx.sql = Match(STRING);
				State = 9907; Match(RR_BRACKET);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 9908; Match(OPENROWSET);
				State = 9909; Match(LR_BRACKET);
				State = 9910; Match(BULK);
				State = 9911; _localctx.data_file = Match(STRING);
				State = 9912; Match(COMMA);
				State = 9922;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1399,_ctx) ) {
				case 1:
					{
					State = 9913; bulk_option();
					State = 9918;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 9914; Match(COMMA);
						State = 9915; bulk_option();
						}
						}
						State = 9920;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
					break;

				case 2:
					{
					State = 9921; id();
					}
					break;
				}
				State = 9924; Match(RR_BRACKET);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bulk_optionContext : ParserRuleContext {
		public IToken bulk_option_value;
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Bulk_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bulk_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBulk_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBulk_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBulk_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bulk_optionContext bulk_option() {
		Bulk_optionContext _localctx = new Bulk_optionContext(_ctx, State);
		EnterRule(_localctx, 852, RULE_bulk_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9928; id();
			State = 9929; Match(EQUAL);
			State = 9930;
			_localctx.bulk_option_value = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==DECIMAL || _la==STRING) ) {
				_localctx.bulk_option_value = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Derived_tableContext : ParserRuleContext {
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public Table_value_constructorContext table_value_constructor() {
			return GetRuleContext<Table_value_constructorContext>(0);
		}
		public Derived_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_derived_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDerived_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDerived_table(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDerived_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Derived_tableContext derived_table() {
		Derived_tableContext _localctx = new Derived_tableContext(_ctx, State);
		EnterRule(_localctx, 854, RULE_derived_table);
		try {
			State = 9942;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1401,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9932; subquery();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9933; Match(LR_BRACKET);
				State = 9934; subquery();
				State = 9935; Match(RR_BRACKET);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9937; table_value_constructor();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9938; Match(LR_BRACKET);
				State = 9939; table_value_constructor();
				State = 9940; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_callContext : ParserRuleContext {
		public Function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call; } }
	 
		public Function_callContext() { }
		public virtual void CopyFrom(Function_callContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BINARY_CHECKSUMContext : Function_callContext {
		public ITerminalNode BINARY_CHECKSUM() { return GetToken(TSqlParser.BINARY_CHECKSUM, 0); }
		public BINARY_CHECKSUMContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBINARY_CHECKSUM(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBINARY_CHECKSUM(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBINARY_CHECKSUM(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CASTContext : Function_callContext {
		public ITerminalNode CAST() { return GetToken(TSqlParser.CAST, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public CASTContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CONVERTContext : Function_callContext {
		public Data_typeContext convert_data_type;
		public ExpressionContext convert_expression;
		public ExpressionContext style;
		public ITerminalNode CONVERT() { return GetToken(TSqlParser.CONVERT, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CONVERTContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCONVERT(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCONVERT(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCONVERT(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CHECKSUMContext : Function_callContext {
		public ITerminalNode CHECKSUM() { return GetToken(TSqlParser.CHECKSUM, 0); }
		public CHECKSUMContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCHECKSUM(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCHECKSUM(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCHECKSUM(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class COALESCEContext : Function_callContext {
		public ITerminalNode COALESCE() { return GetToken(TSqlParser.COALESCE, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public COALESCEContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCOALESCE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCOALESCE(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCOALESCE(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CURRENT_TIMESTAMPContext : Function_callContext {
		public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(TSqlParser.CURRENT_TIMESTAMP, 0); }
		public CURRENT_TIMESTAMPContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCURRENT_TIMESTAMP(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCURRENT_TIMESTAMP(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCURRENT_TIMESTAMP(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CURRENT_USERContext : Function_callContext {
		public ITerminalNode CURRENT_USER() { return GetToken(TSqlParser.CURRENT_USER, 0); }
		public CURRENT_USERContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCURRENT_USER(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCURRENT_USER(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCURRENT_USER(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DATEADDContext : Function_callContext {
		public ITerminalNode DATEADD() { return GetToken(TSqlParser.DATEADD, 0); }
		public ITerminalNode ID() { return GetToken(TSqlParser.ID, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DATEADDContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDATEADD(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDATEADD(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDATEADD(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DATEDIFFContext : Function_callContext {
		public ITerminalNode DATEDIFF() { return GetToken(TSqlParser.DATEDIFF, 0); }
		public ITerminalNode ID() { return GetToken(TSqlParser.ID, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DATEDIFFContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDATEDIFF(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDATEDIFF(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDATEDIFF(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DATENAMEContext : Function_callContext {
		public ITerminalNode DATENAME() { return GetToken(TSqlParser.DATENAME, 0); }
		public ITerminalNode ID() { return GetToken(TSqlParser.ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DATENAMEContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDATENAME(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDATENAME(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDATENAME(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DATEPARTContext : Function_callContext {
		public ITerminalNode DATEPART() { return GetToken(TSqlParser.DATEPART, 0); }
		public ITerminalNode ID() { return GetToken(TSqlParser.ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DATEPARTContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDATEPART(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDATEPART(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDATEPART(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GETDATEContext : Function_callContext {
		public ITerminalNode GETDATE() { return GetToken(TSqlParser.GETDATE, 0); }
		public GETDATEContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGETDATE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGETDATE(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGETDATE(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GETUTCDATEContext : Function_callContext {
		public ITerminalNode GETUTCDATE() { return GetToken(TSqlParser.GETUTCDATE, 0); }
		public GETUTCDATEContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGETUTCDATE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGETUTCDATE(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGETUTCDATE(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IDENTITYContext : Function_callContext {
		public IToken seed;
		public IToken increment;
		public ITerminalNode IDENTITY() { return GetToken(TSqlParser.IDENTITY, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public IDENTITYContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIDENTITY(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIDENTITY(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIDENTITY(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MIN_ACTIVE_ROWVERSIONContext : Function_callContext {
		public ITerminalNode MIN_ACTIVE_ROWVERSION() { return GetToken(TSqlParser.MIN_ACTIVE_ROWVERSION, 0); }
		public MIN_ACTIVE_ROWVERSIONContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMIN_ACTIVE_ROWVERSION(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMIN_ACTIVE_ROWVERSION(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMIN_ACTIVE_ROWVERSION(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NULLIFContext : Function_callContext {
		public ITerminalNode NULLIF() { return GetToken(TSqlParser.NULLIF, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NULLIFContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterNULLIF(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitNULLIF(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNULLIF(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class STUFFContext : Function_callContext {
		public ITerminalNode STUFF() { return GetToken(TSqlParser.STUFF, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public STUFFContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSTUFF(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSTUFF(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSTUFF(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SESSION_USERContext : Function_callContext {
		public ITerminalNode SESSION_USER() { return GetToken(TSqlParser.SESSION_USER, 0); }
		public SESSION_USERContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSESSION_USER(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSESSION_USER(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSESSION_USER(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SYSTEM_USERContext : Function_callContext {
		public ITerminalNode SYSTEM_USER() { return GetToken(TSqlParser.SYSTEM_USER, 0); }
		public SYSTEM_USERContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSYSTEM_USER(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSYSTEM_USER(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSYSTEM_USER(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ISNULLContext : Function_callContext {
		public ITerminalNode ISNULL() { return GetToken(TSqlParser.ISNULL, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ISNULLContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterISNULL(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitISNULL(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitISNULL(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class XML_DATA_TYPE_FUNCContext : Function_callContext {
		public Xml_data_type_methodsContext xml_data_type_methods() {
			return GetRuleContext<Xml_data_type_methodsContext>(0);
		}
		public XML_DATA_TYPE_FUNCContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterXML_DATA_TYPE_FUNC(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitXML_DATA_TYPE_FUNC(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXML_DATA_TYPE_FUNC(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IFFContext : Function_callContext {
		public ITerminalNode IIF() { return GetToken(TSqlParser.IIF, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IFFContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIFF(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIFF(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIFF(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RANKING_WINDOWED_FUNCContext : Function_callContext {
		public Ranking_windowed_functionContext ranking_windowed_function() {
			return GetRuleContext<Ranking_windowed_functionContext>(0);
		}
		public RANKING_WINDOWED_FUNCContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRANKING_WINDOWED_FUNC(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRANKING_WINDOWED_FUNC(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRANKING_WINDOWED_FUNC(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AGGREGATE_WINDOWED_FUNCContext : Function_callContext {
		public Aggregate_windowed_functionContext aggregate_windowed_function() {
			return GetRuleContext<Aggregate_windowed_functionContext>(0);
		}
		public AGGREGATE_WINDOWED_FUNCContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAGGREGATE_WINDOWED_FUNC(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAGGREGATE_WINDOWED_FUNC(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAGGREGATE_WINDOWED_FUNC(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ANALYTIC_WINDOWED_FUNCContext : Function_callContext {
		public Analytic_windowed_functionContext analytic_windowed_function() {
			return GetRuleContext<Analytic_windowed_functionContext>(0);
		}
		public ANALYTIC_WINDOWED_FUNCContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterANALYTIC_WINDOWED_FUNC(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitANALYTIC_WINDOWED_FUNC(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitANALYTIC_WINDOWED_FUNC(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SCALAR_FUNCTIONContext : Function_callContext {
		public Scalar_function_nameContext scalar_function_name() {
			return GetRuleContext<Scalar_function_nameContext>(0);
		}
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public SCALAR_FUNCTIONContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSCALAR_FUNCTION(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSCALAR_FUNCTION(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSCALAR_FUNCTION(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class STRINGAGGContext : Function_callContext {
		public ExpressionContext expr;
		public ExpressionContext separator;
		public ITerminalNode STRING_AGG() { return GetToken(TSqlParser.STRING_AGG, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode WITHIN() { return GetToken(TSqlParser.WITHIN, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public STRINGAGGContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSTRINGAGG(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSTRINGAGG(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSTRINGAGG(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NEXT_VALUE_FORContext : Function_callContext {
		public IdContext sequence_name;
		public ITerminalNode NEXT() { return GetToken(TSqlParser.NEXT, 0); }
		public ITerminalNode VALUE() { return GetToken(TSqlParser.VALUE, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public NEXT_VALUE_FORContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterNEXT_VALUE_FOR(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitNEXT_VALUE_FOR(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNEXT_VALUE_FOR(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_callContext function_call() {
		Function_callContext _localctx = new Function_callContext(_ctx, State);
		EnterRule(_localctx, 856, RULE_function_call);
		int _la;
		try {
			State = 10104;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1409,_ctx) ) {
			case 1:
				_localctx = new BINARY_CHECKSUMContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 9944; Match(BINARY_CHECKSUM);
				State = 9945; Match(LR_BRACKET);
				State = 9946; Match(STAR);
				State = 9947; Match(RR_BRACKET);
				}
				break;

			case 2:
				_localctx = new CASTContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 9948; Match(CAST);
				State = 9949; Match(LR_BRACKET);
				State = 9950; expression(0);
				State = 9951; Match(AS);
				State = 9952; data_type();
				State = 9953; Match(RR_BRACKET);
				}
				break;

			case 3:
				_localctx = new CONVERTContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 9955; Match(CONVERT);
				State = 9956; Match(LR_BRACKET);
				State = 9957; ((CONVERTContext)_localctx).convert_data_type = data_type();
				State = 9958; Match(COMMA);
				State = 9959; ((CONVERTContext)_localctx).convert_expression = expression(0);
				State = 9962;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 9960; Match(COMMA);
					State = 9961; ((CONVERTContext)_localctx).style = expression(0);
					}
				}

				State = 9964; Match(RR_BRACKET);
				}
				break;

			case 4:
				_localctx = new CHECKSUMContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 9966; Match(CHECKSUM);
				State = 9967; Match(LR_BRACKET);
				State = 9968; Match(STAR);
				State = 9969; Match(RR_BRACKET);
				}
				break;

			case 5:
				_localctx = new COALESCEContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 9970; Match(COALESCE);
				State = 9971; Match(LR_BRACKET);
				State = 9972; expression_list();
				State = 9973; Match(RR_BRACKET);
				}
				break;

			case 6:
				_localctx = new CURRENT_TIMESTAMPContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 9975; Match(CURRENT_TIMESTAMP);
				}
				break;

			case 7:
				_localctx = new CURRENT_USERContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 9976; Match(CURRENT_USER);
				}
				break;

			case 8:
				_localctx = new DATEADDContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 9977; Match(DATEADD);
				State = 9978; Match(LR_BRACKET);
				State = 9979; Match(ID);
				State = 9980; Match(COMMA);
				State = 9981; expression(0);
				State = 9982; Match(COMMA);
				State = 9983; expression(0);
				State = 9984; Match(RR_BRACKET);
				}
				break;

			case 9:
				_localctx = new DATEDIFFContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 9986; Match(DATEDIFF);
				State = 9987; Match(LR_BRACKET);
				State = 9988; Match(ID);
				State = 9989; Match(COMMA);
				State = 9990; expression(0);
				State = 9991; Match(COMMA);
				State = 9992; expression(0);
				State = 9993; Match(RR_BRACKET);
				}
				break;

			case 10:
				_localctx = new DATENAMEContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 9995; Match(DATENAME);
				State = 9996; Match(LR_BRACKET);
				State = 9997; Match(ID);
				State = 9998; Match(COMMA);
				State = 9999; expression(0);
				State = 10000; Match(RR_BRACKET);
				}
				break;

			case 11:
				_localctx = new DATEPARTContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 10002; Match(DATEPART);
				State = 10003; Match(LR_BRACKET);
				State = 10004; Match(ID);
				State = 10005; Match(COMMA);
				State = 10006; expression(0);
				State = 10007; Match(RR_BRACKET);
				}
				break;

			case 12:
				_localctx = new GETDATEContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 10009; Match(GETDATE);
				State = 10010; Match(LR_BRACKET);
				State = 10011; Match(RR_BRACKET);
				}
				break;

			case 13:
				_localctx = new GETUTCDATEContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 10012; Match(GETUTCDATE);
				State = 10013; Match(LR_BRACKET);
				State = 10014; Match(RR_BRACKET);
				}
				break;

			case 14:
				_localctx = new IDENTITYContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 10015; Match(IDENTITY);
				State = 10016; Match(LR_BRACKET);
				State = 10017; data_type();
				State = 10020;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1403,_ctx) ) {
				case 1:
					{
					State = 10018; Match(COMMA);
					State = 10019; ((IDENTITYContext)_localctx).seed = Match(DECIMAL);
					}
					break;
				}
				State = 10024;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 10022; Match(COMMA);
					State = 10023; ((IDENTITYContext)_localctx).increment = Match(DECIMAL);
					}
				}

				State = 10026; Match(RR_BRACKET);
				}
				break;

			case 15:
				_localctx = new MIN_ACTIVE_ROWVERSIONContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 10028; Match(MIN_ACTIVE_ROWVERSION);
				}
				break;

			case 16:
				_localctx = new NULLIFContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 10029; Match(NULLIF);
				State = 10030; Match(LR_BRACKET);
				State = 10031; expression(0);
				State = 10032; Match(COMMA);
				State = 10033; expression(0);
				State = 10034; Match(RR_BRACKET);
				}
				break;

			case 17:
				_localctx = new STUFFContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 10036; Match(STUFF);
				State = 10037; Match(LR_BRACKET);
				State = 10038; expression(0);
				State = 10039; Match(COMMA);
				State = 10040; Match(DECIMAL);
				State = 10041; Match(COMMA);
				State = 10042; Match(DECIMAL);
				State = 10043; Match(COMMA);
				State = 10044; expression(0);
				State = 10045; Match(RR_BRACKET);
				}
				break;

			case 18:
				_localctx = new SESSION_USERContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 10047; Match(SESSION_USER);
				}
				break;

			case 19:
				_localctx = new SYSTEM_USERContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 10048; Match(SYSTEM_USER);
				}
				break;

			case 20:
				_localctx = new ISNULLContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 10049; Match(ISNULL);
				State = 10050; Match(LR_BRACKET);
				State = 10051; expression(0);
				State = 10052; Match(COMMA);
				State = 10053; expression(0);
				State = 10054; Match(RR_BRACKET);
				}
				break;

			case 21:
				_localctx = new XML_DATA_TYPE_FUNCContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 10056; xml_data_type_methods();
				}
				break;

			case 22:
				_localctx = new IFFContext(_localctx);
				EnterOuterAlt(_localctx, 22);
				{
				State = 10057; Match(IIF);
				State = 10058; Match(LR_BRACKET);
				State = 10059; search_condition();
				State = 10060; Match(COMMA);
				State = 10061; expression(0);
				State = 10062; Match(COMMA);
				State = 10063; expression(0);
				State = 10064; Match(RR_BRACKET);
				}
				break;

			case 23:
				_localctx = new RANKING_WINDOWED_FUNCContext(_localctx);
				EnterOuterAlt(_localctx, 23);
				{
				State = 10066; ranking_windowed_function();
				}
				break;

			case 24:
				_localctx = new AGGREGATE_WINDOWED_FUNCContext(_localctx);
				EnterOuterAlt(_localctx, 24);
				{
				State = 10067; aggregate_windowed_function();
				}
				break;

			case 25:
				_localctx = new ANALYTIC_WINDOWED_FUNCContext(_localctx);
				EnterOuterAlt(_localctx, 25);
				{
				State = 10068; analytic_windowed_function();
				}
				break;

			case 26:
				_localctx = new SCALAR_FUNCTIONContext(_localctx);
				EnterOuterAlt(_localctx, 26);
				{
				State = 10069; scalar_function_name();
				State = 10070; Match(LR_BRACKET);
				State = 10072;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1405,_ctx) ) {
				case 1:
					{
					State = 10071; expression_list();
					}
					break;
				}
				State = 10074; Match(RR_BRACKET);
				}
				break;

			case 27:
				_localctx = new STRINGAGGContext(_localctx);
				EnterOuterAlt(_localctx, 27);
				{
				State = 10076; Match(STRING_AGG);
				State = 10077; Match(LR_BRACKET);
				State = 10078; ((STRINGAGGContext)_localctx).expr = expression(0);
				State = 10079; Match(COMMA);
				State = 10080; ((STRINGAGGContext)_localctx).separator = expression(0);
				State = 10081; Match(RR_BRACKET);
				State = 10088;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1406,_ctx) ) {
				case 1:
					{
					State = 10082; Match(WITHIN);
					State = 10083; Match(GROUP);
					State = 10084; Match(LR_BRACKET);
					State = 10085; order_by_clause();
					State = 10086; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;

			case 28:
				_localctx = new NEXT_VALUE_FORContext(_localctx);
				EnterOuterAlt(_localctx, 28);
				{
				State = 10090; Match(NEXT);
				State = 10091; Match(VALUE);
				State = 10092; Match(FOR);
				State = 10096;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1407,_ctx) ) {
				case 1:
					{
					State = 10093; database_name();
					State = 10094; Match(DOT);
					}
					break;
				}
				State = 10101;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1408,_ctx) ) {
				case 1:
					{
					State = 10098; schema_name();
					State = 10099; Match(DOT);
					}
					break;
				}
				State = 10103; ((NEXT_VALUE_FORContext)_localctx).sequence_name = id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_data_type_methodsContext : ParserRuleContext {
		public Value_methodContext value_method() {
			return GetRuleContext<Value_methodContext>(0);
		}
		public Query_methodContext query_method() {
			return GetRuleContext<Query_methodContext>(0);
		}
		public Exist_methodContext exist_method() {
			return GetRuleContext<Exist_methodContext>(0);
		}
		public Modify_methodContext modify_method() {
			return GetRuleContext<Modify_methodContext>(0);
		}
		public Nodes_methodContext nodes_method() {
			return GetRuleContext<Nodes_methodContext>(0);
		}
		public Xml_data_type_methodsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_data_type_methods; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterXml_data_type_methods(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitXml_data_type_methods(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXml_data_type_methods(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xml_data_type_methodsContext xml_data_type_methods() {
		Xml_data_type_methodsContext _localctx = new Xml_data_type_methodsContext(_ctx, State);
		EnterRule(_localctx, 858, RULE_xml_data_type_methods);
		try {
			State = 10111;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1410,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10106; value_method();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10107; query_method();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10108; exist_method();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10109; modify_method();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10110; nodes_method();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_methodContext : ParserRuleContext {
		public IToken xquery;
		public IToken sqltype;
		public ITerminalNode VALUE() { return GetToken(TSqlParser.VALUE, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode ID() { return GetToken(TSqlParser.ID, 0); }
		public ITerminalNode EVENTDATA() { return GetToken(TSqlParser.EVENTDATA, 0); }
		public Query_methodContext query_method() {
			return GetRuleContext<Query_methodContext>(0);
		}
		public ITerminalNode ROW() { return GetToken(TSqlParser.ROW, 0); }
		public ITerminalNode PARAM_NODE() { return GetToken(TSqlParser.PARAM_NODE, 0); }
		public Value_methodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_method; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterValue_method(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitValue_method(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue_method(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Value_methodContext value_method() {
		Value_methodContext _localctx = new Value_methodContext(_ctx, State);
		EnterRule(_localctx, 860, RULE_value_method);
		try {
			State = 10156;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1414,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10117;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1411,_ctx) ) {
				case 1:
					{
					State = 10113; Match(LOCAL_ID);
					}
					break;

				case 2:
					{
					State = 10114; Match(ID);
					}
					break;

				case 3:
					{
					State = 10115; Match(EVENTDATA);
					}
					break;

				case 4:
					{
					State = 10116; query_method();
					}
					break;
				}
				State = 10119; Match(DOT);
				State = 10120; Match(VALUE);
				State = 10121; Match(LR_BRACKET);
				State = 10122; _localctx.xquery = Match(STRING);
				State = 10123; Match(COMMA);
				State = 10124; _localctx.sqltype = Match(STRING);
				State = 10125; Match(RR_BRACKET);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10130;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1412,_ctx) ) {
				case 1:
					{
					State = 10126; Match(LOCAL_ID);
					}
					break;

				case 2:
					{
					State = 10127; Match(ID);
					}
					break;

				case 3:
					{
					State = 10128; Match(EVENTDATA);
					}
					break;

				case 4:
					{
					State = 10129; query_method();
					}
					break;
				}
				State = 10132; Match(DOT);
				State = 10133; Match(ROW);
				State = 10134; Match(DOT);
				State = 10135; Match(VALUE);
				State = 10136; Match(LR_BRACKET);
				State = 10137; _localctx.xquery = Match(STRING);
				State = 10138; Match(COMMA);
				State = 10139; _localctx.sqltype = Match(STRING);
				State = 10140; Match(RR_BRACKET);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10145;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1413,_ctx) ) {
				case 1:
					{
					State = 10141; Match(LOCAL_ID);
					}
					break;

				case 2:
					{
					State = 10142; Match(ID);
					}
					break;

				case 3:
					{
					State = 10143; Match(EVENTDATA);
					}
					break;

				case 4:
					{
					State = 10144; query_method();
					}
					break;
				}
				State = 10147; Match(DOT);
				State = 10148; Match(PARAM_NODE);
				State = 10149; Match(DOT);
				State = 10150; Match(VALUE);
				State = 10151; Match(LR_BRACKET);
				State = 10152; _localctx.xquery = Match(STRING);
				State = 10153; Match(COMMA);
				State = 10154; _localctx.sqltype = Match(STRING);
				State = 10155; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_methodContext : ParserRuleContext {
		public IToken xquery;
		public ITerminalNode QUERY() { return GetToken(TSqlParser.QUERY, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode ID() { return GetToken(TSqlParser.ID, 0); }
		public Schema_object_nameContext schema_object_name() {
			return GetRuleContext<Schema_object_nameContext>(0);
		}
		public ITerminalNode ROW() { return GetToken(TSqlParser.ROW, 0); }
		public Query_methodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_method; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQuery_method(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQuery_method(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_method(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_methodContext query_method() {
		Query_methodContext _localctx = new Query_methodContext(_ctx, State);
		EnterRule(_localctx, 862, RULE_query_method);
		try {
			State = 10180;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1417,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10161;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1415,_ctx) ) {
				case 1:
					{
					State = 10158; Match(LOCAL_ID);
					}
					break;

				case 2:
					{
					State = 10159; Match(ID);
					}
					break;

				case 3:
					{
					State = 10160; schema_object_name();
					}
					break;
				}
				State = 10163; Match(DOT);
				State = 10164; Match(QUERY);
				State = 10165; Match(LR_BRACKET);
				State = 10166; _localctx.xquery = Match(STRING);
				State = 10167; Match(RR_BRACKET);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10171;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1416,_ctx) ) {
				case 1:
					{
					State = 10168; Match(LOCAL_ID);
					}
					break;

				case 2:
					{
					State = 10169; Match(ID);
					}
					break;

				case 3:
					{
					State = 10170; schema_object_name();
					}
					break;
				}
				State = 10173; Match(DOT);
				State = 10174; Match(ROW);
				State = 10175; Match(DOT);
				State = 10176; Match(QUERY);
				State = 10177; Match(LR_BRACKET);
				State = 10178; _localctx.xquery = Match(STRING);
				State = 10179; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exist_methodContext : ParserRuleContext {
		public IToken xquery;
		public ITerminalNode EXIST() { return GetToken(TSqlParser.EXIST, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode ID() { return GetToken(TSqlParser.ID, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Exist_methodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exist_method; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExist_method(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExist_method(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExist_method(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Exist_methodContext exist_method() {
		Exist_methodContext _localctx = new Exist_methodContext(_ctx, State);
		EnterRule(_localctx, 864, RULE_exist_method);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10182;
			_la = _input.La(1);
			if ( !(_la==LOCAL_ID || _la==ID) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 10183; Match(DOT);
			State = 10184; Match(EXIST);
			State = 10185; Match(LR_BRACKET);
			State = 10186; _localctx.xquery = Match(STRING);
			State = 10187; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Modify_methodContext : ParserRuleContext {
		public IToken xml_dml;
		public ITerminalNode MODIFY() { return GetToken(TSqlParser.MODIFY, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode ID() { return GetToken(TSqlParser.ID, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Modify_methodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modify_method; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterModify_method(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitModify_method(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModify_method(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Modify_methodContext modify_method() {
		Modify_methodContext _localctx = new Modify_methodContext(_ctx, State);
		EnterRule(_localctx, 866, RULE_modify_method);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10189;
			_la = _input.La(1);
			if ( !(_la==LOCAL_ID || _la==ID) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 10190; Match(DOT);
			State = 10191; Match(MODIFY);
			State = 10192; Match(LR_BRACKET);
			State = 10193; _localctx.xml_dml = Match(STRING);
			State = 10194; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nodes_methodContext : ParserRuleContext {
		public IToken xquery;
		public ITerminalNode NODES() { return GetToken(TSqlParser.NODES, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode ID() { return GetToken(TSqlParser.ID, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Nodes_methodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodes_method; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterNodes_method(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitNodes_method(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodes_method(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Nodes_methodContext nodes_method() {
		Nodes_methodContext _localctx = new Nodes_methodContext(_ctx, State);
		EnterRule(_localctx, 868, RULE_nodes_method);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10196;
			_la = _input.La(1);
			if ( !(_la==LOCAL_ID || _la==ID) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 10197; Match(DOT);
			State = 10198; Match(NODES);
			State = 10199; Match(LR_BRACKET);
			State = 10200; _localctx.xquery = Match(STRING);
			State = 10201; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_sectionContext : ParserRuleContext {
		public ITerminalNode WHEN() { return GetToken(TSqlParser.WHEN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(TSqlParser.THEN, 0); }
		public Switch_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_section; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSwitch_section(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSwitch_section(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_section(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_sectionContext switch_section() {
		Switch_sectionContext _localctx = new Switch_sectionContext(_ctx, State);
		EnterRule(_localctx, 870, RULE_switch_section);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10203; Match(WHEN);
			State = 10204; expression(0);
			State = 10205; Match(THEN);
			State = 10206; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_search_condition_sectionContext : ParserRuleContext {
		public ITerminalNode WHEN() { return GetToken(TSqlParser.WHEN, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(TSqlParser.THEN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Switch_search_condition_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_search_condition_section; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSwitch_search_condition_section(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSwitch_search_condition_section(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_search_condition_section(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_search_condition_sectionContext switch_search_condition_section() {
		Switch_search_condition_sectionContext _localctx = new Switch_search_condition_sectionContext(_ctx, State);
		EnterRule(_localctx, 872, RULE_switch_search_condition_section);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10208; Match(WHEN);
			State = 10209; search_condition();
			State = 10210; Match(THEN);
			State = 10211; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class As_column_aliasContext : ParserRuleContext {
		public Column_aliasContext column_alias() {
			return GetRuleContext<Column_aliasContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public As_column_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_as_column_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAs_column_alias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAs_column_alias(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAs_column_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public As_column_aliasContext as_column_alias() {
		As_column_aliasContext _localctx = new As_column_aliasContext(_ctx, State);
		EnterRule(_localctx, 874, RULE_as_column_alias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10214;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 10213; Match(AS);
				}
			}

			State = 10216; column_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class As_table_aliasContext : ParserRuleContext {
		public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public As_table_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_as_table_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAs_table_alias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAs_table_alias(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAs_table_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public As_table_aliasContext as_table_alias() {
		As_table_aliasContext _localctx = new As_table_aliasContext(_ctx, State);
		EnterRule(_localctx, 876, RULE_as_table_alias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10219;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 10218; Match(AS);
				}
			}

			State = 10221; table_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_aliasContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public With_table_hintsContext with_table_hints() {
			return GetRuleContext<With_table_hintsContext>(0);
		}
		public Table_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_alias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_alias(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_aliasContext table_alias() {
		Table_aliasContext _localctx = new Table_aliasContext(_ctx, State);
		EnterRule(_localctx, 878, RULE_table_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10223; id();
			State = 10225;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1420,_ctx) ) {
			case 1:
				{
				State = 10224; with_table_hints();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_table_hintsContext : ParserRuleContext {
		public Table_hintContext[] table_hint() {
			return GetRuleContexts<Table_hintContext>();
		}
		public Table_hintContext table_hint(int i) {
			return GetRuleContext<Table_hintContext>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public With_table_hintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_table_hints; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWith_table_hints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWith_table_hints(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWith_table_hints(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public With_table_hintsContext with_table_hints() {
		With_table_hintsContext _localctx = new With_table_hintsContext(_ctx, State);
		EnterRule(_localctx, 880, RULE_with_table_hints);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10228;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WITH) {
				{
				State = 10227; Match(WITH);
				}
			}

			State = 10230; Match(LR_BRACKET);
			State = 10231; table_hint();
			State = 10238;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==FORCESEEK || _la==INDEX || _la==NOEXPAND || ((((_la - 728)) & ~0x3f) == 0 && ((1L << (_la - 728)) & ((1L << (SERIALIZABLE - 728)) | (1L << (SNAPSHOT - 728)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 728)))) != 0) || _la==ID || _la==COMMA) {
				{
				{
				State = 10233;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 10232; Match(COMMA);
					}
				}

				State = 10235; table_hint();
				}
				}
				State = 10240;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 10241; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_with_table_hintsContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Table_hintContext[] table_hint() {
			return GetRuleContexts<Table_hintContext>();
		}
		public Table_hintContext table_hint(int i) {
			return GetRuleContext<Table_hintContext>(i);
		}
		public Insert_with_table_hintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_with_table_hints; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterInsert_with_table_hints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitInsert_with_table_hints(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsert_with_table_hints(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Insert_with_table_hintsContext insert_with_table_hints() {
		Insert_with_table_hintsContext _localctx = new Insert_with_table_hintsContext(_ctx, State);
		EnterRule(_localctx, 882, RULE_insert_with_table_hints);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10243; Match(WITH);
			State = 10244; Match(LR_BRACKET);
			State = 10245; table_hint();
			State = 10252;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==FORCESEEK || _la==INDEX || _la==NOEXPAND || ((((_la - 728)) & ~0x3f) == 0 && ((1L << (_la - 728)) & ((1L << (SERIALIZABLE - 728)) | (1L << (SNAPSHOT - 728)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 728)))) != 0) || _la==ID || _la==COMMA) {
				{
				{
				State = 10247;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 10246; Match(COMMA);
					}
				}

				State = 10249; table_hint();
				}
				}
				State = 10254;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 10255; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_hintContext : ParserRuleContext {
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public Index_valueContext[] index_value() {
			return GetRuleContexts<Index_valueContext>();
		}
		public Index_valueContext index_value(int i) {
			return GetRuleContext<Index_valueContext>(i);
		}
		public ITerminalNode FORCESEEK() { return GetToken(TSqlParser.FORCESEEK, 0); }
		public ITerminalNode SERIALIZABLE() { return GetToken(TSqlParser.SERIALIZABLE, 0); }
		public ITerminalNode SNAPSHOT() { return GetToken(TSqlParser.SNAPSHOT, 0); }
		public ITerminalNode SPATIAL_WINDOW_MAX_CELLS() { return GetToken(TSqlParser.SPATIAL_WINDOW_MAX_CELLS, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode[] ID() { return GetTokens(TSqlParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(TSqlParser.ID, i);
		}
		public ITerminalNode NOEXPAND() { return GetToken(TSqlParser.NOEXPAND, 0); }
		public Table_hintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_hint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_hint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_hint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_hint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_hintContext table_hint() {
		Table_hintContext _localctx = new Table_hintContext(_ctx, State);
		EnterRule(_localctx, 884, RULE_table_hint);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10258;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==NOEXPAND) {
				{
				State = 10257; Match(NOEXPAND);
				}
			}

			State = 10308;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1432,_ctx) ) {
			case 1:
				{
				State = 10260; Match(INDEX);
				State = 10280;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1429,_ctx) ) {
				case 1:
					{
					State = 10261; Match(LR_BRACKET);
					State = 10262; index_value();
					State = 10267;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 10263; Match(COMMA);
						State = 10264; index_value();
						}
						}
						State = 10269;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 10270; Match(RR_BRACKET);
					}
					break;

				case 2:
					{
					State = 10272; index_value();
					State = 10277;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1428,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 10273; Match(COMMA);
							State = 10274; index_value();
							}
							} 
						}
						State = 10279;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,1428,_ctx);
					}
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 10282; Match(INDEX);
				State = 10283; Match(EQUAL);
				State = 10284; index_value();
				}
				break;

			case 3:
				{
				State = 10285; Match(FORCESEEK);
				State = 10300;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LR_BRACKET) {
					{
					State = 10286; Match(LR_BRACKET);
					State = 10287; index_value();
					State = 10288; Match(LR_BRACKET);
					State = 10289; Match(ID);
					State = 10294;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 10290; Match(COMMA);
						State = 10291; Match(ID);
						}
						}
						State = 10296;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 10297; Match(RR_BRACKET);
					State = 10298; Match(RR_BRACKET);
					}
				}

				}
				break;

			case 4:
				{
				State = 10302; Match(SERIALIZABLE);
				}
				break;

			case 5:
				{
				State = 10303; Match(SNAPSHOT);
				}
				break;

			case 6:
				{
				State = 10304; Match(SPATIAL_WINDOW_MAX_CELLS);
				State = 10305; Match(EQUAL);
				State = 10306; Match(DECIMAL);
				}
				break;

			case 7:
				{
				State = 10307; Match(ID);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_valueContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Index_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIndex_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIndex_value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Index_valueContext index_value() {
		Index_valueContext _localctx = new Index_valueContext(_ctx, State);
		EnterRule(_localctx, 886, RULE_index_value);
		try {
			State = 10312;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1433,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10310; id();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10311; Match(DECIMAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_alias_listContext : ParserRuleContext {
		public Column_aliasContext[] column_alias() {
			return GetRuleContexts<Column_aliasContext>();
		}
		public Column_aliasContext column_alias(int i) {
			return GetRuleContext<Column_aliasContext>(i);
		}
		public Column_alias_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_alias_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_alias_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_alias_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_alias_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_alias_listContext column_alias_list() {
		Column_alias_listContext _localctx = new Column_alias_listContext(_ctx, State);
		EnterRule(_localctx, 888, RULE_column_alias_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10314; Match(LR_BRACKET);
			State = 10315; column_alias();
			State = 10320;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 10316; Match(COMMA);
				State = 10317; column_alias();
				}
				}
				State = 10322;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 10323; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_aliasContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Column_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_alias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_alias(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_aliasContext column_alias() {
		Column_aliasContext _localctx = new Column_aliasContext(_ctx, State);
		EnterRule(_localctx, 890, RULE_column_alias);
		try {
			State = 10327;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1435,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10325; id();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10326; Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_value_constructorContext : ParserRuleContext {
		public ITerminalNode VALUES() { return GetToken(TSqlParser.VALUES, 0); }
		public Expression_listContext[] expression_list() {
			return GetRuleContexts<Expression_listContext>();
		}
		public Expression_listContext expression_list(int i) {
			return GetRuleContext<Expression_listContext>(i);
		}
		public Table_value_constructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_value_constructor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_value_constructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_value_constructor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_value_constructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_value_constructorContext table_value_constructor() {
		Table_value_constructorContext _localctx = new Table_value_constructorContext(_ctx, State);
		EnterRule(_localctx, 892, RULE_table_value_constructor);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10329; Match(VALUES);
			State = 10330; Match(LR_BRACKET);
			State = 10331; expression_list();
			State = 10332; Match(RR_BRACKET);
			State = 10340;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1436,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 10333; Match(COMMA);
					State = 10334; Match(LR_BRACKET);
					State = 10335; expression_list();
					State = 10336; Match(RR_BRACKET);
					}
					} 
				}
				State = 10342;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1436,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_listContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExpression_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExpression_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_listContext expression_list() {
		Expression_listContext _localctx = new Expression_listContext(_ctx, State);
		EnterRule(_localctx, 894, RULE_expression_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10343; expression(0);
			State = 10348;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 10344; Match(COMMA);
				State = 10345; expression(0);
				}
				}
				State = 10350;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ranking_windowed_functionContext : ParserRuleContext {
		public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		public ITerminalNode RANK() { return GetToken(TSqlParser.RANK, 0); }
		public ITerminalNode DENSE_RANK() { return GetToken(TSqlParser.DENSE_RANK, 0); }
		public ITerminalNode ROW_NUMBER() { return GetToken(TSqlParser.ROW_NUMBER, 0); }
		public ITerminalNode NTILE() { return GetToken(TSqlParser.NTILE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Ranking_windowed_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ranking_windowed_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRanking_windowed_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRanking_windowed_function(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRanking_windowed_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ranking_windowed_functionContext ranking_windowed_function() {
		Ranking_windowed_functionContext _localctx = new Ranking_windowed_functionContext(_ctx, State);
		EnterRule(_localctx, 896, RULE_ranking_windowed_function);
		int _la;
		try {
			State = 10361;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case DENSE_RANK:
			case RANK:
			case ROW_NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10351;
				_la = _input.La(1);
				if ( !(_la==DENSE_RANK || _la==RANK || _la==ROW_NUMBER) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 10352; Match(LR_BRACKET);
				State = 10353; Match(RR_BRACKET);
				State = 10354; over_clause();
				}
				break;
			case NTILE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10355; Match(NTILE);
				State = 10356; Match(LR_BRACKET);
				State = 10357; expression(0);
				State = 10358; Match(RR_BRACKET);
				State = 10359; over_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Aggregate_windowed_functionContext : ParserRuleContext {
		public All_distinct_expressionContext all_distinct_expression() {
			return GetRuleContext<All_distinct_expressionContext>(0);
		}
		public ITerminalNode AVG() { return GetToken(TSqlParser.AVG, 0); }
		public ITerminalNode MAX() { return GetToken(TSqlParser.MAX, 0); }
		public ITerminalNode MIN() { return GetToken(TSqlParser.MIN, 0); }
		public ITerminalNode SUM() { return GetToken(TSqlParser.SUM, 0); }
		public ITerminalNode STDEV() { return GetToken(TSqlParser.STDEV, 0); }
		public ITerminalNode STDEVP() { return GetToken(TSqlParser.STDEVP, 0); }
		public ITerminalNode VAR() { return GetToken(TSqlParser.VAR, 0); }
		public ITerminalNode VARP() { return GetToken(TSqlParser.VARP, 0); }
		public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		public ITerminalNode COUNT() { return GetToken(TSqlParser.COUNT, 0); }
		public ITerminalNode COUNT_BIG() { return GetToken(TSqlParser.COUNT_BIG, 0); }
		public ITerminalNode CHECKSUM_AGG() { return GetToken(TSqlParser.CHECKSUM_AGG, 0); }
		public ITerminalNode GROUPING() { return GetToken(TSqlParser.GROUPING, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode GROUPING_ID() { return GetToken(TSqlParser.GROUPING_ID, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public Aggregate_windowed_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregate_windowed_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAggregate_windowed_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAggregate_windowed_function(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregate_windowed_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Aggregate_windowed_functionContext aggregate_windowed_function() {
		Aggregate_windowed_functionContext _localctx = new Aggregate_windowed_functionContext(_ctx, State);
		EnterRule(_localctx, 898, RULE_aggregate_windowed_function);
		int _la;
		try {
			State = 10395;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case AVG:
			case MAX:
			case MIN:
			case STDEV:
			case STDEVP:
			case SUM:
			case VAR:
			case VARP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10363;
				_la = _input.La(1);
				if ( !(_la==AVG || _la==MAX || _la==MIN || ((((_la - 746)) & ~0x3f) == 0 && ((1L << (_la - 746)) & ((1L << (STDEV - 746)) | (1L << (STDEVP - 746)) | (1L << (SUM - 746)) | (1L << (VAR - 746)) | (1L << (VARP - 746)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 10364; Match(LR_BRACKET);
				State = 10365; all_distinct_expression();
				State = 10366; Match(RR_BRACKET);
				State = 10368;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1439,_ctx) ) {
				case 1:
					{
					State = 10367; over_clause();
					}
					break;
				}
				}
				break;
			case COUNT:
			case COUNT_BIG:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10370;
				_la = _input.La(1);
				if ( !(_la==COUNT || _la==COUNT_BIG) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 10371; Match(LR_BRACKET);
				State = 10374;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1440,_ctx) ) {
				case 1:
					{
					State = 10372; Match(STAR);
					}
					break;

				case 2:
					{
					State = 10373; all_distinct_expression();
					}
					break;
				}
				State = 10376; Match(RR_BRACKET);
				State = 10378;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1441,_ctx) ) {
				case 1:
					{
					State = 10377; over_clause();
					}
					break;
				}
				}
				break;
			case CHECKSUM_AGG:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10380; Match(CHECKSUM_AGG);
				State = 10381; Match(LR_BRACKET);
				State = 10382; all_distinct_expression();
				State = 10383; Match(RR_BRACKET);
				}
				break;
			case GROUPING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10385; Match(GROUPING);
				State = 10386; Match(LR_BRACKET);
				State = 10387; expression(0);
				State = 10388; Match(RR_BRACKET);
				}
				break;
			case GROUPING_ID:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10390; Match(GROUPING_ID);
				State = 10391; Match(LR_BRACKET);
				State = 10392; expression_list();
				State = 10393; Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Analytic_windowed_functionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		public ITerminalNode FIRST_VALUE() { return GetToken(TSqlParser.FIRST_VALUE, 0); }
		public ITerminalNode LAST_VALUE() { return GetToken(TSqlParser.LAST_VALUE, 0); }
		public ITerminalNode LAG() { return GetToken(TSqlParser.LAG, 0); }
		public ITerminalNode LEAD() { return GetToken(TSqlParser.LEAD, 0); }
		public Analytic_windowed_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_analytic_windowed_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAnalytic_windowed_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAnalytic_windowed_function(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnalytic_windowed_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Analytic_windowed_functionContext analytic_windowed_function() {
		Analytic_windowed_functionContext _localctx = new Analytic_windowed_functionContext(_ctx, State);
		EnterRule(_localctx, 900, RULE_analytic_windowed_function);
		int _la;
		try {
			State = 10417;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case FIRST_VALUE:
			case LAST_VALUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10397;
				_la = _input.La(1);
				if ( !(_la==FIRST_VALUE || _la==LAST_VALUE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 10398; Match(LR_BRACKET);
				State = 10399; expression(0);
				State = 10400; Match(RR_BRACKET);
				State = 10401; over_clause();
				}
				break;
			case LAG:
			case LEAD:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10403;
				_la = _input.La(1);
				if ( !(_la==LAG || _la==LEAD) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 10404; Match(LR_BRACKET);
				State = 10405; expression(0);
				State = 10412;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 10406; Match(COMMA);
					State = 10407; expression(0);
					State = 10410;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==COMMA) {
						{
						State = 10408; Match(COMMA);
						State = 10409; expression(0);
						}
					}

					}
				}

				State = 10414; Match(RR_BRACKET);
				State = 10415; over_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class All_distinct_expressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode DISTINCT() { return GetToken(TSqlParser.DISTINCT, 0); }
		public All_distinct_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_all_distinct_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAll_distinct_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAll_distinct_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAll_distinct_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public All_distinct_expressionContext all_distinct_expression() {
		All_distinct_expressionContext _localctx = new All_distinct_expressionContext(_ctx, State);
		EnterRule(_localctx, 902, RULE_all_distinct_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10420;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				State = 10419;
				_la = _input.La(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 10422; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Over_clauseContext : ParserRuleContext {
		public ITerminalNode OVER() { return GetToken(TSqlParser.OVER, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public Row_or_range_clauseContext row_or_range_clause() {
			return GetRuleContext<Row_or_range_clauseContext>(0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_over_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOver_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOver_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOver_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Over_clauseContext over_clause() {
		Over_clauseContext _localctx = new Over_clauseContext(_ctx, State);
		EnterRule(_localctx, 904, RULE_over_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10424; Match(OVER);
			State = 10425; Match(LR_BRACKET);
			State = 10429;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==PARTITION) {
				{
				State = 10426; Match(PARTITION);
				State = 10427; Match(BY);
				State = 10428; expression_list();
				}
			}

			State = 10432;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ORDER) {
				{
				State = 10431; order_by_clause();
				}
			}

			State = 10435;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==RANGE || _la==ROWS) {
				{
				State = 10434; row_or_range_clause();
				}
			}

			State = 10437; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_or_range_clauseContext : ParserRuleContext {
		public Window_frame_extentContext window_frame_extent() {
			return GetRuleContext<Window_frame_extentContext>(0);
		}
		public ITerminalNode ROWS() { return GetToken(TSqlParser.ROWS, 0); }
		public ITerminalNode RANGE() { return GetToken(TSqlParser.RANGE, 0); }
		public Row_or_range_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_or_range_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRow_or_range_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRow_or_range_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRow_or_range_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Row_or_range_clauseContext row_or_range_clause() {
		Row_or_range_clauseContext _localctx = new Row_or_range_clauseContext(_ctx, State);
		EnterRule(_localctx, 906, RULE_row_or_range_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10439;
			_la = _input.La(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 10440; window_frame_extent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_extentContext : ParserRuleContext {
		public Window_frame_precedingContext window_frame_preceding() {
			return GetRuleContext<Window_frame_precedingContext>(0);
		}
		public ITerminalNode BETWEEN() { return GetToken(TSqlParser.BETWEEN, 0); }
		public Window_frame_boundContext[] window_frame_bound() {
			return GetRuleContexts<Window_frame_boundContext>();
		}
		public Window_frame_boundContext window_frame_bound(int i) {
			return GetRuleContext<Window_frame_boundContext>(i);
		}
		public ITerminalNode AND() { return GetToken(TSqlParser.AND, 0); }
		public Window_frame_extentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_extent; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWindow_frame_extent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWindow_frame_extent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_frame_extent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_extentContext window_frame_extent() {
		Window_frame_extentContext _localctx = new Window_frame_extentContext(_ctx, State);
		EnterRule(_localctx, 908, RULE_window_frame_extent);
		try {
			State = 10448;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case CURRENT:
			case UNBOUNDED:
			case DECIMAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10442; window_frame_preceding();
				}
				break;
			case BETWEEN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10443; Match(BETWEEN);
				State = 10444; window_frame_bound();
				State = 10445; Match(AND);
				State = 10446; window_frame_bound();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_boundContext : ParserRuleContext {
		public Window_frame_precedingContext window_frame_preceding() {
			return GetRuleContext<Window_frame_precedingContext>(0);
		}
		public Window_frame_followingContext window_frame_following() {
			return GetRuleContext<Window_frame_followingContext>(0);
		}
		public Window_frame_boundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_bound; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWindow_frame_bound(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWindow_frame_bound(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_frame_bound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_boundContext window_frame_bound() {
		Window_frame_boundContext _localctx = new Window_frame_boundContext(_ctx, State);
		EnterRule(_localctx, 910, RULE_window_frame_bound);
		try {
			State = 10452;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1451,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10450; window_frame_preceding();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10451; window_frame_following();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_precedingContext : ParserRuleContext {
		public ITerminalNode UNBOUNDED() { return GetToken(TSqlParser.UNBOUNDED, 0); }
		public ITerminalNode PRECEDING() { return GetToken(TSqlParser.PRECEDING, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode CURRENT() { return GetToken(TSqlParser.CURRENT, 0); }
		public ITerminalNode ROW() { return GetToken(TSqlParser.ROW, 0); }
		public Window_frame_precedingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_preceding; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWindow_frame_preceding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWindow_frame_preceding(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_frame_preceding(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_precedingContext window_frame_preceding() {
		Window_frame_precedingContext _localctx = new Window_frame_precedingContext(_ctx, State);
		EnterRule(_localctx, 912, RULE_window_frame_preceding);
		try {
			State = 10460;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case UNBOUNDED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10454; Match(UNBOUNDED);
				State = 10455; Match(PRECEDING);
				}
				break;
			case DECIMAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10456; Match(DECIMAL);
				State = 10457; Match(PRECEDING);
				}
				break;
			case CURRENT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10458; Match(CURRENT);
				State = 10459; Match(ROW);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_followingContext : ParserRuleContext {
		public ITerminalNode UNBOUNDED() { return GetToken(TSqlParser.UNBOUNDED, 0); }
		public ITerminalNode FOLLOWING() { return GetToken(TSqlParser.FOLLOWING, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Window_frame_followingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_following; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWindow_frame_following(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWindow_frame_following(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_frame_following(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_followingContext window_frame_following() {
		Window_frame_followingContext _localctx = new Window_frame_followingContext(_ctx, State);
		EnterRule(_localctx, 914, RULE_window_frame_following);
		try {
			State = 10466;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case UNBOUNDED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10462; Match(UNBOUNDED);
				State = 10463; Match(FOLLOWING);
				}
				break;
			case DECIMAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10464; Match(DECIMAL);
				State = 10465; Match(FOLLOWING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_database_optionContext : ParserRuleContext {
		public ITerminalNode FILESTREAM() { return GetToken(TSqlParser.FILESTREAM, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Database_filestream_optionContext[] database_filestream_option() {
			return GetRuleContexts<Database_filestream_optionContext>();
		}
		public Database_filestream_optionContext database_filestream_option(int i) {
			return GetRuleContext<Database_filestream_optionContext>(i);
		}
		public ITerminalNode DEFAULT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode DEFAULT_FULLTEXT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0); }
		public ITerminalNode NESTED_TRIGGERS() { return GetToken(TSqlParser.NESTED_TRIGGERS, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode TRANSFORM_NOISE_WORDS() { return GetToken(TSqlParser.TRANSFORM_NOISE_WORDS, 0); }
		public ITerminalNode TWO_DIGIT_YEAR_CUTOFF() { return GetToken(TSqlParser.TWO_DIGIT_YEAR_CUTOFF, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode DB_CHAINING() { return GetToken(TSqlParser.DB_CHAINING, 0); }
		public ITerminalNode TRUSTWORTHY() { return GetToken(TSqlParser.TRUSTWORTHY, 0); }
		public Create_database_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_database_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_database_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_database_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_database_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_database_optionContext create_database_option() {
		Create_database_optionContext _localctx = new Create_database_optionContext(_ctx, State);
		EnterRule(_localctx, 916, RULE_create_database_option);
		int _la;
		try {
			State = 10505;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case FILESTREAM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10468; Match(FILESTREAM);
				State = 10469; Match(LR_BRACKET);
				{
				State = 10470; database_filestream_option();
				State = 10475;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 10471; Match(COMMA);
					State = 10472; database_filestream_option();
					}
					}
					State = 10477;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				State = 10478; Match(RR_BRACKET);
				}
				break;
			case DEFAULT_LANGUAGE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10480; Match(DEFAULT_LANGUAGE);
				State = 10481; Match(EQUAL);
				State = 10484;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1455,_ctx) ) {
				case 1:
					{
					State = 10482; id();
					}
					break;

				case 2:
					{
					State = 10483; Match(STRING);
					}
					break;
				}
				}
				break;
			case DEFAULT_FULLTEXT_LANGUAGE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10486; Match(DEFAULT_FULLTEXT_LANGUAGE);
				State = 10487; Match(EQUAL);
				State = 10490;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1456,_ctx) ) {
				case 1:
					{
					State = 10488; id();
					}
					break;

				case 2:
					{
					State = 10489; Match(STRING);
					}
					break;
				}
				}
				break;
			case NESTED_TRIGGERS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10492; Match(NESTED_TRIGGERS);
				State = 10493; Match(EQUAL);
				State = 10494;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			case TRANSFORM_NOISE_WORDS:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10495; Match(TRANSFORM_NOISE_WORDS);
				State = 10496; Match(EQUAL);
				State = 10497;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			case TWO_DIGIT_YEAR_CUTOFF:
				EnterOuterAlt(_localctx, 6);
				{
				State = 10498; Match(TWO_DIGIT_YEAR_CUTOFF);
				State = 10499; Match(EQUAL);
				State = 10500; Match(DECIMAL);
				}
				break;
			case DB_CHAINING:
				EnterOuterAlt(_localctx, 7);
				{
				State = 10501; Match(DB_CHAINING);
				State = 10502;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			case TRUSTWORTHY:
				EnterOuterAlt(_localctx, 8);
				{
				State = 10503; Match(TRUSTWORTHY);
				State = 10504;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Database_filestream_optionContext : ParserRuleContext {
		public ITerminalNode NON_TRANSACTED_ACCESS() { return GetToken(TSqlParser.NON_TRANSACTED_ACCESS, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode DIRECTORY_NAME() { return GetToken(TSqlParser.DIRECTORY_NAME, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode READ_ONLY() { return GetToken(TSqlParser.READ_ONLY, 0); }
		public ITerminalNode FULL() { return GetToken(TSqlParser.FULL, 0); }
		public Database_filestream_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_database_filestream_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDatabase_filestream_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDatabase_filestream_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatabase_filestream_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Database_filestream_optionContext database_filestream_option() {
		Database_filestream_optionContext _localctx = new Database_filestream_optionContext(_ctx, State);
		EnterRule(_localctx, 918, RULE_database_filestream_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10513;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NON_TRANSACTED_ACCESS:
				{
				{
				State = 10507; Match(NON_TRANSACTED_ACCESS);
				State = 10508; Match(EQUAL);
				State = 10509;
				_la = _input.La(1);
				if ( !(_la==FULL || _la==OFF || _la==READ_ONLY) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				}
				break;
			case DIRECTORY_NAME:
				{
				{
				State = 10510; Match(DIRECTORY_NAME);
				State = 10511; Match(EQUAL);
				State = 10512; Match(STRING);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Database_file_specContext : ParserRuleContext {
		public File_groupContext file_group() {
			return GetRuleContext<File_groupContext>(0);
		}
		public File_specContext file_spec() {
			return GetRuleContext<File_specContext>(0);
		}
		public Database_file_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_database_file_spec; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDatabase_file_spec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDatabase_file_spec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatabase_file_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Database_file_specContext database_file_spec() {
		Database_file_specContext _localctx = new Database_file_specContext(_ctx, State);
		EnterRule(_localctx, 920, RULE_database_file_spec);
		try {
			State = 10517;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case FILEGROUP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10515; file_group();
				}
				break;
			case LR_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10516; file_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_groupContext : ParserRuleContext {
		public ITerminalNode FILEGROUP() { return GetToken(TSqlParser.FILEGROUP, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public File_specContext[] file_spec() {
			return GetRuleContexts<File_specContext>();
		}
		public File_specContext file_spec(int i) {
			return GetRuleContext<File_specContext>(i);
		}
		public ITerminalNode[] CONTAINS() { return GetTokens(TSqlParser.CONTAINS); }
		public ITerminalNode CONTAINS(int i) {
			return GetToken(TSqlParser.CONTAINS, i);
		}
		public ITerminalNode FILESTREAM() { return GetToken(TSqlParser.FILESTREAM, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode MEMORY_OPTIMIZED_DATA() { return GetToken(TSqlParser.MEMORY_OPTIMIZED_DATA, 0); }
		public File_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_group; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFile_group(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFile_group(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile_group(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public File_groupContext file_group() {
		File_groupContext _localctx = new File_groupContext(_ctx, State);
		EnterRule(_localctx, 922, RULE_file_group);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10519; Match(FILEGROUP);
			State = 10520; id();
			State = 10523;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1460,_ctx) ) {
			case 1:
				{
				State = 10521; Match(CONTAINS);
				State = 10522; Match(FILESTREAM);
				}
				break;
			}
			State = 10526;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==DEFAULT) {
				{
				State = 10525; Match(DEFAULT);
				}
			}

			State = 10530;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CONTAINS) {
				{
				State = 10528; Match(CONTAINS);
				State = 10529; Match(MEMORY_OPTIMIZED_DATA);
				}
			}

			State = 10532; file_spec();
			State = 10537;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1463,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 10533; Match(COMMA);
					State = 10534; file_spec();
					}
					} 
				}
				State = 10539;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1463,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_specContext : ParserRuleContext {
		public IToken file;
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode FILENAME() { return GetToken(TSqlParser.FILENAME, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode SIZE() { return GetToken(TSqlParser.SIZE, 0); }
		public File_sizeContext[] file_size() {
			return GetRuleContexts<File_sizeContext>();
		}
		public File_sizeContext file_size(int i) {
			return GetRuleContext<File_sizeContext>(i);
		}
		public ITerminalNode MAXSIZE() { return GetToken(TSqlParser.MAXSIZE, 0); }
		public ITerminalNode FILEGROWTH() { return GetToken(TSqlParser.FILEGROWTH, 0); }
		public ITerminalNode UNLIMITED() { return GetToken(TSqlParser.UNLIMITED, 0); }
		public File_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_spec; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFile_spec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFile_spec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public File_specContext file_spec() {
		File_specContext _localctx = new File_specContext(_ctx, State);
		EnterRule(_localctx, 924, RULE_file_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10540; Match(LR_BRACKET);
			State = 10541; Match(NAME);
			State = 10542; Match(EQUAL);
			State = 10545;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1464,_ctx) ) {
			case 1:
				{
				State = 10543; id();
				}
				break;

			case 2:
				{
				State = 10544; Match(STRING);
				}
				break;
			}
			State = 10548;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 10547; Match(COMMA);
				}
			}

			State = 10550; Match(FILENAME);
			State = 10551; Match(EQUAL);
			State = 10552; _localctx.file = Match(STRING);
			State = 10554;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 10553; Match(COMMA);
				}
			}

			State = 10562;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==SIZE) {
				{
				State = 10556; Match(SIZE);
				State = 10557; Match(EQUAL);
				State = 10558; file_size();
				State = 10560;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 10559; Match(COMMA);
					}
				}

				}
			}

			State = 10573;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==MAXSIZE) {
				{
				State = 10564; Match(MAXSIZE);
				State = 10565; Match(EQUAL);
				State = 10568;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case DECIMAL:
					{
					State = 10566; file_size();
					}
					break;
				case UNLIMITED:
					{
					State = 10567; Match(UNLIMITED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 10571;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 10570; Match(COMMA);
					}
				}

				}
			}

			State = 10581;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==FILEGROWTH) {
				{
				State = 10575; Match(FILEGROWTH);
				State = 10576; Match(EQUAL);
				State = 10577; file_size();
				State = 10579;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 10578; Match(COMMA);
					}
				}

				}
			}

			State = 10583; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_nameContext : ParserRuleContext {
		public Schema_object_nameContext schema_object_name() {
			return GetRuleContext<Schema_object_nameContext>(0);
		}
		public Entity_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEntity_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEntity_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntity_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Entity_nameContext entity_name() {
		Entity_nameContext _localctx = new Entity_nameContext(_ctx, State);
		EnterRule(_localctx, 926, RULE_entity_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10585; schema_object_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_name_for_azure_dwContext : ParserRuleContext {
		public IdContext object_name;
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Entity_name_for_azure_dwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_name_for_azure_dw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEntity_name_for_azure_dw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEntity_name_for_azure_dw(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntity_name_for_azure_dw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Entity_name_for_azure_dwContext entity_name_for_azure_dw() {
		Entity_name_for_azure_dwContext _localctx = new Entity_name_for_azure_dwContext(_ctx, State);
		EnterRule(_localctx, 928, RULE_entity_name_for_azure_dw);
		try {
			State = 10592;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1474,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10587; schema_name();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10588; schema_name();
				State = 10589; Match(DOT);
				State = 10590; _localctx.object_name = id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_name_for_parallel_dwContext : ParserRuleContext {
		public IdContext schema_database;
		public IdContext object_name;
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public Entity_name_for_parallel_dwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_name_for_parallel_dw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEntity_name_for_parallel_dw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEntity_name_for_parallel_dw(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntity_name_for_parallel_dw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Entity_name_for_parallel_dwContext entity_name_for_parallel_dw() {
		Entity_name_for_parallel_dwContext _localctx = new Entity_name_for_parallel_dwContext(_ctx, State);
		EnterRule(_localctx, 930, RULE_entity_name_for_parallel_dw);
		try {
			State = 10599;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1475,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10594; _localctx.schema_database = id();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10595; schema_name();
				State = 10596; Match(DOT);
				State = 10597; _localctx.object_name = id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Schema_object_nameContext : ParserRuleContext {
		public Server_nameContext server_name() {
			return GetRuleContext<Server_nameContext>(0);
		}
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Schema_object_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schema_object_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSchema_object_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSchema_object_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSchema_object_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Schema_object_nameContext schema_object_name() {
		Schema_object_nameContext _localctx = new Schema_object_nameContext(_ctx, State);
		EnterRule(_localctx, 932, RULE_schema_object_name);
		try {
			State = 10620;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1476,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10601; server_name();
				State = 10602; Match(DOT);
				State = 10603; database_name();
				State = 10604; Match(DOT);
				State = 10605; schema_name();
				State = 10606; Match(DOT);
				State = 10607; table_name();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10609; database_name();
				State = 10610; Match(DOT);
				State = 10611; schema_name();
				State = 10612; Match(DOT);
				State = 10613; table_name();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10615; schema_name();
				State = 10616; Match(DOT);
				State = 10617; table_name();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10619; table_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Server_nameContext : ParserRuleContext {
		public IdContext server;
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Server_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_server_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterServer_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitServer_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitServer_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Server_nameContext server_name() {
		Server_nameContext _localctx = new Server_nameContext(_ctx, State);
		EnterRule(_localctx, 934, RULE_server_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10622; _localctx.server = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_nameContext : ParserRuleContext {
		public IdContext table;
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_nameContext table_name() {
		Table_nameContext _localctx = new Table_nameContext(_ctx, State);
		EnterRule(_localctx, 936, RULE_table_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10624; _localctx.table = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Database_nameContext : ParserRuleContext {
		public IdContext database;
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Database_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_database_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDatabase_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDatabase_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatabase_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Database_nameContext database_name() {
		Database_nameContext _localctx = new Database_nameContext(_ctx, State);
		EnterRule(_localctx, 938, RULE_database_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10626; _localctx.database = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Schema_nameContext : ParserRuleContext {
		public IdContext schema;
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Schema_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schema_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSchema_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSchema_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSchema_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Schema_nameContext schema_name() {
		Schema_nameContext _localctx = new Schema_nameContext(_ctx, State);
		EnterRule(_localctx, 940, RULE_schema_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10628; _localctx.schema = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_nameContext : ParserRuleContext {
		public IdContext name;
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public Simple_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSimple_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSimple_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_nameContext simple_name() {
		Simple_nameContext _localctx = new Simple_nameContext(_ctx, State);
		EnterRule(_localctx, 942, RULE_simple_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10633;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1477,_ctx) ) {
			case 1:
				{
				State = 10630; schema_name();
				State = 10631; Match(DOT);
				}
				break;
			}
			State = 10635; _localctx.name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_proc_name_schemaContext : ParserRuleContext {
		public IdContext procedure;
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public Func_proc_name_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_proc_name_schema; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFunc_proc_name_schema(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFunc_proc_name_schema(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_proc_name_schema(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_proc_name_schemaContext func_proc_name_schema() {
		Func_proc_name_schemaContext _localctx = new Func_proc_name_schemaContext(_ctx, State);
		EnterRule(_localctx, 944, RULE_func_proc_name_schema);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10640;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1478,_ctx) ) {
			case 1:
				{
				{
				State = 10637; schema_name();
				}
				State = 10638; Match(DOT);
				}
				break;
			}
			State = 10642; _localctx.procedure = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_proc_name_database_schemaContext : ParserRuleContext {
		public IdContext procedure;
		public Func_proc_name_schemaContext func_proc_name_schema() {
			return GetRuleContext<Func_proc_name_schemaContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public Func_proc_name_database_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_proc_name_database_schema; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFunc_proc_name_database_schema(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFunc_proc_name_database_schema(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_proc_name_database_schema(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_proc_name_database_schemaContext func_proc_name_database_schema() {
		Func_proc_name_database_schemaContext _localctx = new Func_proc_name_database_schemaContext(_ctx, State);
		EnterRule(_localctx, 946, RULE_func_proc_name_database_schema);
		try {
			State = 10655;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1481,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10644; func_proc_name_schema();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10652;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1480,_ctx) ) {
				case 1:
					{
					State = 10645; database_name();
					State = 10646; Match(DOT);
					State = 10648;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1479,_ctx) ) {
					case 1:
						{
						State = 10647; schema_name();
						}
						break;
					}
					State = 10650; Match(DOT);
					}
					break;
				}
				State = 10654; _localctx.procedure = id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_proc_name_server_database_schemaContext : ParserRuleContext {
		public IdContext procedure;
		public Func_proc_name_database_schemaContext func_proc_name_database_schema() {
			return GetRuleContext<Func_proc_name_database_schemaContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Server_nameContext server_name() {
			return GetRuleContext<Server_nameContext>(0);
		}
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public Func_proc_name_server_database_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_proc_name_server_database_schema; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFunc_proc_name_server_database_schema(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFunc_proc_name_server_database_schema(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_proc_name_server_database_schema(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_proc_name_server_database_schemaContext func_proc_name_server_database_schema() {
		Func_proc_name_server_database_schemaContext _localctx = new Func_proc_name_server_database_schemaContext(_ctx, State);
		EnterRule(_localctx, 948, RULE_func_proc_name_server_database_schema);
		try {
			State = 10670;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1484,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10657; func_proc_name_database_schema();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10667;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1483,_ctx) ) {
				case 1:
					{
					State = 10658; server_name();
					State = 10659; Match(DOT);
					State = 10660; database_name();
					State = 10661; Match(DOT);
					State = 10663;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1482,_ctx) ) {
					case 1:
						{
						State = 10662; schema_name();
						}
						break;
					}
					State = 10665; Match(DOT);
					}
					break;
				}
				State = 10669; _localctx.procedure = id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ddl_objectContext : ParserRuleContext {
		public Schema_object_nameContext schema_object_name() {
			return GetRuleContext<Schema_object_nameContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Ddl_objectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ddl_object; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDdl_object(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDdl_object(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDdl_object(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ddl_objectContext ddl_object() {
		Ddl_objectContext _localctx = new Ddl_objectContext(_ctx, State);
		EnterRule(_localctx, 950, RULE_ddl_object);
		try {
			State = 10674;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1485,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10672; schema_object_name();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10673; Match(LOCAL_ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_column_nameContext : ParserRuleContext {
		public IdContext column_name;
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Schema_object_nameContext schema_object_name() {
			return GetRuleContext<Schema_object_nameContext>(0);
		}
		public ITerminalNode COMPATIBILITY_LEVEL() { return GetToken(TSqlParser.COMPATIBILITY_LEVEL, 0); }
		public ITerminalNode STATUS() { return GetToken(TSqlParser.STATUS, 0); }
		public ITerminalNode QUOTED_IDENTIFIER() { return GetToken(TSqlParser.QUOTED_IDENTIFIER, 0); }
		public ITerminalNode ARITHABORT() { return GetToken(TSqlParser.ARITHABORT, 0); }
		public ITerminalNode ANSI_WARNINGS() { return GetToken(TSqlParser.ANSI_WARNINGS, 0); }
		public ITerminalNode ANSI_PADDING() { return GetToken(TSqlParser.ANSI_PADDING, 0); }
		public ITerminalNode ANSI_NULLS() { return GetToken(TSqlParser.ANSI_NULLS, 0); }
		public Full_column_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_column_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFull_column_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFull_column_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFull_column_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Full_column_nameContext full_column_name() {
		Full_column_nameContext _localctx = new Full_column_nameContext(_ctx, State);
		EnterRule(_localctx, 952, RULE_full_column_name);
		try {
			State = 10724;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1494,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10679;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1486,_ctx) ) {
				case 1:
					{
					State = 10676; schema_object_name();
					State = 10677; Match(DOT);
					}
					break;
				}
				State = 10681; _localctx.column_name = id();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10685;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1487,_ctx) ) {
				case 1:
					{
					State = 10682; schema_object_name();
					State = 10683; Match(DOT);
					}
					break;
				}
				State = 10687; Match(COMPATIBILITY_LEVEL);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10691;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1488,_ctx) ) {
				case 1:
					{
					State = 10688; schema_object_name();
					State = 10689; Match(DOT);
					}
					break;
				}
				State = 10693; Match(STATUS);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10697;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1489,_ctx) ) {
				case 1:
					{
					State = 10694; schema_object_name();
					State = 10695; Match(DOT);
					}
					break;
				}
				State = 10699; Match(QUOTED_IDENTIFIER);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10703;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1490,_ctx) ) {
				case 1:
					{
					State = 10700; schema_object_name();
					State = 10701; Match(DOT);
					}
					break;
				}
				State = 10705; Match(ARITHABORT);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 10709;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1491,_ctx) ) {
				case 1:
					{
					State = 10706; schema_object_name();
					State = 10707; Match(DOT);
					}
					break;
				}
				State = 10711; Match(ANSI_WARNINGS);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 10715;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1492,_ctx) ) {
				case 1:
					{
					State = 10712; schema_object_name();
					State = 10713; Match(DOT);
					}
					break;
				}
				State = 10717; Match(ANSI_PADDING);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 10721;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1493,_ctx) ) {
				case 1:
					{
					State = 10718; schema_object_name();
					State = 10719; Match(DOT);
					}
					break;
				}
				State = 10723; Match(ANSI_NULLS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_name_list_with_orderContext : ParserRuleContext {
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] ASC() { return GetTokens(TSqlParser.ASC); }
		public ITerminalNode ASC(int i) {
			return GetToken(TSqlParser.ASC, i);
		}
		public ITerminalNode[] DESC() { return GetTokens(TSqlParser.DESC); }
		public ITerminalNode DESC(int i) {
			return GetToken(TSqlParser.DESC, i);
		}
		public Column_name_list_with_orderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_name_list_with_order; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_name_list_with_order(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_name_list_with_order(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_name_list_with_order(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_name_list_with_orderContext column_name_list_with_order() {
		Column_name_list_with_orderContext _localctx = new Column_name_list_with_orderContext(_ctx, State);
		EnterRule(_localctx, 954, RULE_column_name_list_with_order);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10726; id();
			State = 10728;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ASC || _la==DESC) {
				{
				State = 10727;
				_la = _input.La(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 10737;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 10730; Match(COMMA);
				State = 10731; id();
				State = 10733;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ASC || _la==DESC) {
					{
					State = 10732;
					_la = _input.La(1);
					if ( !(_la==ASC || _la==DESC) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
				}

				}
				}
				State = 10739;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_name_listContext : ParserRuleContext {
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public Column_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_name_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_name_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_name_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_name_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_name_listContext column_name_list() {
		Column_name_listContext _localctx = new Column_name_listContext(_ctx, State);
		EnterRule(_localctx, 956, RULE_column_name_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10740; id();
			State = 10745;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1498,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 10741; Match(COMMA);
					State = 10742; id();
					}
					} 
				}
				State = 10747;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1498,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cursor_nameContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Cursor_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursor_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCursor_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCursor_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursor_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cursor_nameContext cursor_name() {
		Cursor_nameContext _localctx = new Cursor_nameContext(_ctx, State);
		EnterRule(_localctx, 958, RULE_cursor_name);
		try {
			State = 10750;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1499,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10748; id();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10749; Match(LOCAL_ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class On_offContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public On_offContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_on_off; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOn_off(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOn_off(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOn_off(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public On_offContext on_off() {
		On_offContext _localctx = new On_offContext(_ctx, State);
		EnterRule(_localctx, 960, RULE_on_off);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10752;
			_la = _input.La(1);
			if ( !(_la==OFF || _la==ON) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClusteredContext : ParserRuleContext {
		public ITerminalNode CLUSTERED() { return GetToken(TSqlParser.CLUSTERED, 0); }
		public ITerminalNode NONCLUSTERED() { return GetToken(TSqlParser.NONCLUSTERED, 0); }
		public ClusteredContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clustered; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterClustered(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitClustered(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClustered(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClusteredContext clustered() {
		ClusteredContext _localctx = new ClusteredContext(_ctx, State);
		EnterRule(_localctx, 962, RULE_clustered);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10754;
			_la = _input.La(1);
			if ( !(_la==CLUSTERED || _la==NONCLUSTERED) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Null_notnullContext : ParserRuleContext {
		public ITerminalNode NULL() { return GetToken(TSqlParser.NULL, 0); }
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public Null_notnullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null_notnull; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterNull_notnull(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitNull_notnull(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNull_notnull(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Null_notnullContext null_notnull() {
		Null_notnullContext _localctx = new Null_notnullContext(_ctx, State);
		EnterRule(_localctx, 964, RULE_null_notnull);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10757;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==NOT) {
				{
				State = 10756; Match(NOT);
				}
			}

			State = 10759; Match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Null_or_defaultContext : ParserRuleContext {
		public Null_notnullContext null_notnull() {
			return GetRuleContext<Null_notnullContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public Constant_expressionContext constant_expression() {
			return GetRuleContext<Constant_expressionContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode VALUES() { return GetToken(TSqlParser.VALUES, 0); }
		public Null_or_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null_or_default; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterNull_or_default(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitNull_or_default(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNull_or_default(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Null_or_defaultContext null_or_default() {
		Null_or_defaultContext _localctx = new Null_or_defaultContext(_ctx, State);
		EnterRule(_localctx, 966, RULE_null_or_default);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10768;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NOT:
			case NULL:
				{
				State = 10761; null_notnull();
				}
				break;
			case DEFAULT:
				{
				State = 10762; Match(DEFAULT);
				State = 10763; constant_expression();
				State = 10766;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1501,_ctx) ) {
				case 1:
					{
					State = 10764; Match(WITH);
					State = 10765; Match(VALUES);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scalar_function_nameContext : ParserRuleContext {
		public Func_proc_name_server_database_schemaContext func_proc_name_server_database_schema() {
			return GetRuleContext<Func_proc_name_server_database_schemaContext>(0);
		}
		public ITerminalNode RIGHT() { return GetToken(TSqlParser.RIGHT, 0); }
		public ITerminalNode LEFT() { return GetToken(TSqlParser.LEFT, 0); }
		public ITerminalNode BINARY_CHECKSUM() { return GetToken(TSqlParser.BINARY_CHECKSUM, 0); }
		public ITerminalNode CHECKSUM() { return GetToken(TSqlParser.CHECKSUM, 0); }
		public Scalar_function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalar_function_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterScalar_function_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitScalar_function_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScalar_function_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Scalar_function_nameContext scalar_function_name() {
		Scalar_function_nameContext _localctx = new Scalar_function_nameContext(_ctx, State);
		EnterRule(_localctx, 968, RULE_scalar_function_name);
		try {
			State = 10775;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1503,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10770; func_proc_name_server_database_schema();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10771; Match(RIGHT);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10772; Match(LEFT);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10773; Match(BINARY_CHECKSUM);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10774; Match(CHECKSUM);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Begin_conversation_timerContext : ParserRuleContext {
		public ITerminalNode BEGIN() { return GetToken(TSqlParser.BEGIN, 0); }
		public ITerminalNode CONVERSATION() { return GetToken(TSqlParser.CONVERSATION, 0); }
		public ITerminalNode TIMER() { return GetToken(TSqlParser.TIMER, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode TIMEOUT() { return GetToken(TSqlParser.TIMEOUT, 0); }
		public TimeContext time() {
			return GetRuleContext<TimeContext>(0);
		}
		public Begin_conversation_timerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_begin_conversation_timer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBegin_conversation_timer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBegin_conversation_timer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBegin_conversation_timer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Begin_conversation_timerContext begin_conversation_timer() {
		Begin_conversation_timerContext _localctx = new Begin_conversation_timerContext(_ctx, State);
		EnterRule(_localctx, 970, RULE_begin_conversation_timer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10777; Match(BEGIN);
			State = 10778; Match(CONVERSATION);
			State = 10779; Match(TIMER);
			State = 10780; Match(LR_BRACKET);
			State = 10781; Match(LOCAL_ID);
			State = 10782; Match(RR_BRACKET);
			State = 10783; Match(TIMEOUT);
			State = 10784; Match(EQUAL);
			State = 10785; time();
			State = 10787;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1504,_ctx) ) {
			case 1:
				{
				State = 10786; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Begin_conversation_dialogContext : ParserRuleContext {
		public IToken dialog_handle;
		public Service_nameContext initiator_service_name;
		public Service_nameContext target_service_name;
		public IToken service_broker_guid;
		public ITerminalNode BEGIN() { return GetToken(TSqlParser.BEGIN, 0); }
		public ITerminalNode DIALOG() { return GetToken(TSqlParser.DIALOG, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode[] SERVICE() { return GetTokens(TSqlParser.SERVICE); }
		public ITerminalNode SERVICE(int i) {
			return GetToken(TSqlParser.SERVICE, i);
		}
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public ITerminalNode[] LOCAL_ID() { return GetTokens(TSqlParser.LOCAL_ID); }
		public ITerminalNode LOCAL_ID(int i) {
			return GetToken(TSqlParser.LOCAL_ID, i);
		}
		public Service_nameContext[] service_name() {
			return GetRuleContexts<Service_nameContext>();
		}
		public Service_nameContext service_name(int i) {
			return GetRuleContext<Service_nameContext>(i);
		}
		public ITerminalNode CONVERSATION() { return GetToken(TSqlParser.CONVERSATION, 0); }
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode CONTRACT() { return GetToken(TSqlParser.CONTRACT, 0); }
		public Contract_nameContext contract_name() {
			return GetRuleContext<Contract_nameContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode LIFETIME() { return GetToken(TSqlParser.LIFETIME, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode RELATED_CONVERSATION() { return GetToken(TSqlParser.RELATED_CONVERSATION, 0); }
		public ITerminalNode RELATED_CONVERSATION_GROUP() { return GetToken(TSqlParser.RELATED_CONVERSATION_GROUP, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Begin_conversation_dialogContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_begin_conversation_dialog; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBegin_conversation_dialog(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBegin_conversation_dialog(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBegin_conversation_dialog(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Begin_conversation_dialogContext begin_conversation_dialog() {
		Begin_conversation_dialogContext _localctx = new Begin_conversation_dialogContext(_ctx, State);
		EnterRule(_localctx, 972, RULE_begin_conversation_dialog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10789; Match(BEGIN);
			State = 10790; Match(DIALOG);
			State = 10792;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CONVERSATION) {
				{
				State = 10791; Match(CONVERSATION);
				}
			}

			State = 10794; _localctx.dialog_handle = Match(LOCAL_ID);
			State = 10795; Match(FROM);
			State = 10796; Match(SERVICE);
			State = 10797; _localctx.initiator_service_name = service_name();
			State = 10798; Match(TO);
			State = 10799; Match(SERVICE);
			State = 10800; _localctx.target_service_name = service_name();
			State = 10803;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1506,_ctx) ) {
			case 1:
				{
				State = 10801; Match(COMMA);
				State = 10802; _localctx.service_broker_guid = Match(STRING);
				}
				break;
			}
			State = 10808;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ON) {
				{
				State = 10805; Match(ON);
				State = 10806; Match(CONTRACT);
				State = 10807; contract_name();
				}
			}

			State = 10832;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1513,_ctx) ) {
			case 1:
				{
				State = 10810; Match(WITH);
				State = 10817;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1509,_ctx) ) {
				case 1:
					{
					State = 10811;
					_la = _input.La(1);
					if ( !(_la==RELATED_CONVERSATION || _la==RELATED_CONVERSATION_GROUP) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 10812; Match(EQUAL);
					State = 10813; Match(LOCAL_ID);
					State = 10815;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1508,_ctx) ) {
					case 1:
						{
						State = 10814; Match(COMMA);
						}
						break;
					}
					}
					break;
				}
				State = 10825;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1511,_ctx) ) {
				case 1:
					{
					State = 10819; Match(LIFETIME);
					State = 10820; Match(EQUAL);
					State = 10821;
					_la = _input.La(1);
					if ( !(_la==LOCAL_ID || _la==DECIMAL) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 10823;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1510,_ctx) ) {
					case 1:
						{
						State = 10822; Match(COMMA);
						}
						break;
					}
					}
					break;
				}
				State = 10830;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1512,_ctx) ) {
				case 1:
					{
					State = 10827; Match(ENCRYPTION);
					State = 10828; Match(EQUAL);
					State = 10829;
					_la = _input.La(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;
			}
			State = 10835;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1514,_ctx) ) {
			case 1:
				{
				State = 10834; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Contract_nameContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Contract_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contract_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterContract_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitContract_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContract_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Contract_nameContext contract_name() {
		Contract_nameContext _localctx = new Contract_nameContext(_ctx, State);
		EnterRule(_localctx, 974, RULE_contract_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10839;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1515,_ctx) ) {
			case 1:
				{
				State = 10837; id();
				}
				break;

			case 2:
				{
				State = 10838; expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Service_nameContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Service_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_service_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterService_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitService_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitService_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Service_nameContext service_name() {
		Service_nameContext _localctx = new Service_nameContext(_ctx, State);
		EnterRule(_localctx, 976, RULE_service_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10843;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1516,_ctx) ) {
			case 1:
				{
				State = 10841; id();
				}
				break;

			case 2:
				{
				State = 10842; expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class End_conversationContext : ParserRuleContext {
		public IToken conversation_handle;
		public IToken faliure_code;
		public IToken failure_text;
		public ITerminalNode END() { return GetToken(TSqlParser.END, 0); }
		public ITerminalNode CONVERSATION() { return GetToken(TSqlParser.CONVERSATION, 0); }
		public ITerminalNode[] LOCAL_ID() { return GetTokens(TSqlParser.LOCAL_ID); }
		public ITerminalNode LOCAL_ID(int i) {
			return GetToken(TSqlParser.LOCAL_ID, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode ERROR() { return GetToken(TSqlParser.ERROR, 0); }
		public ITerminalNode DESCRIPTION() { return GetToken(TSqlParser.DESCRIPTION, 0); }
		public ITerminalNode CLEANUP() { return GetToken(TSqlParser.CLEANUP, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public End_conversationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end_conversation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEnd_conversation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEnd_conversation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnd_conversation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public End_conversationContext end_conversation() {
		End_conversationContext _localctx = new End_conversationContext(_ctx, State);
		EnterRule(_localctx, 978, RULE_end_conversation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10845; Match(END);
			State = 10846; Match(CONVERSATION);
			State = 10847; _localctx.conversation_handle = Match(LOCAL_ID);
			State = 10849;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1517,_ctx) ) {
			case 1:
				{
				State = 10848; Match(SEMI);
				}
				break;
			}
			State = 10863;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1520,_ctx) ) {
			case 1:
				{
				State = 10851; Match(WITH);
				State = 10858;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1518,_ctx) ) {
				case 1:
					{
					State = 10852; Match(ERROR);
					State = 10853; Match(EQUAL);
					State = 10854;
					_localctx.faliure_code = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==LOCAL_ID || _la==STRING) ) {
						_localctx.faliure_code = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 10855; Match(DESCRIPTION);
					State = 10856; Match(EQUAL);
					State = 10857;
					_localctx.failure_text = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==LOCAL_ID || _la==STRING) ) {
						_localctx.failure_text = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 10861;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1519,_ctx) ) {
				case 1:
					{
					State = 10860; Match(CLEANUP);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Get_conversationContext : ParserRuleContext {
		public IToken conversation_group_id;
		public Queue_idContext queue;
		public ITerminalNode GET() { return GetToken(TSqlParser.GET, 0); }
		public ITerminalNode CONVERSATION() { return GetToken(TSqlParser.CONVERSATION, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public Queue_idContext queue_id() {
			return GetRuleContext<Queue_idContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Get_conversationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_get_conversation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGet_conversation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGet_conversation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGet_conversation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Get_conversationContext get_conversation() {
		Get_conversationContext _localctx = new Get_conversationContext(_ctx, State);
		EnterRule(_localctx, 980, RULE_get_conversation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10865; Match(GET);
			State = 10866; Match(CONVERSATION);
			State = 10867; Match(GROUP);
			State = 10868;
			_localctx.conversation_group_id = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==LOCAL_ID || _la==STRING) ) {
				_localctx.conversation_group_id = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 10869; Match(FROM);
			State = 10870; _localctx.queue = queue_id();
			State = 10872;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1521,_ctx) ) {
			case 1:
				{
				State = 10871; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Queue_idContext : ParserRuleContext {
		public IdContext name;
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Queue_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queue_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQueue_id(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQueue_id(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueue_id(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Queue_idContext queue_id() {
		Queue_idContext _localctx = new Queue_idContext(_ctx, State);
		EnterRule(_localctx, 982, RULE_queue_id);
		try {
			State = 10881;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1522,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 10874; database_name();
				State = 10875; Match(DOT);
				State = 10876; schema_name();
				State = 10877; Match(DOT);
				State = 10878; _localctx.name = id();
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10880; id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Send_conversationContext : ParserRuleContext {
		public IToken conversation_handle;
		public ExpressionContext message_type_name;
		public IToken message_body_expression;
		public ITerminalNode SEND() { return GetToken(TSqlParser.SEND, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode CONVERSATION() { return GetToken(TSqlParser.CONVERSATION, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] LOCAL_ID() { return GetTokens(TSqlParser.LOCAL_ID); }
		public ITerminalNode LOCAL_ID(int i) {
			return GetToken(TSqlParser.LOCAL_ID, i);
		}
		public ITerminalNode MESSAGE() { return GetToken(TSqlParser.MESSAGE, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Send_conversationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_send_conversation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSend_conversation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSend_conversation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSend_conversation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Send_conversationContext send_conversation() {
		Send_conversationContext _localctx = new Send_conversationContext(_ctx, State);
		EnterRule(_localctx, 984, RULE_send_conversation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10883; Match(SEND);
			State = 10884; Match(ON);
			State = 10885; Match(CONVERSATION);
			State = 10886;
			_localctx.conversation_handle = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==LOCAL_ID || _la==STRING) ) {
				_localctx.conversation_handle = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 10890;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1523,_ctx) ) {
			case 1:
				{
				State = 10887; Match(MESSAGE);
				State = 10888; Match(TYPE);
				State = 10889; _localctx.message_type_name = expression(0);
				}
				break;
			}
			State = 10895;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1524,_ctx) ) {
			case 1:
				{
				State = 10892; Match(LR_BRACKET);
				State = 10893;
				_localctx.message_body_expression = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==LOCAL_ID || _la==STRING) ) {
					_localctx.message_body_expression = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 10894; Match(RR_BRACKET);
				}
				break;
			}
			State = 10898;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1525,_ctx) ) {
			case 1:
				{
				State = 10897; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_typeContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode IDENTITY() { return GetToken(TSqlParser.IDENTITY, 0); }
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode MAX() { return GetToken(TSqlParser.MAX, 0); }
		public ITerminalNode DOUBLE() { return GetToken(TSqlParser.DOUBLE, 0); }
		public ITerminalNode PRECISION() { return GetToken(TSqlParser.PRECISION, 0); }
		public ITerminalNode INT() { return GetToken(TSqlParser.INT, 0); }
		public ITerminalNode TINYINT() { return GetToken(TSqlParser.TINYINT, 0); }
		public ITerminalNode SMALLINT() { return GetToken(TSqlParser.SMALLINT, 0); }
		public ITerminalNode BIGINT() { return GetToken(TSqlParser.BIGINT, 0); }
		public Data_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterData_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitData_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitData_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Data_typeContext data_type() {
		Data_typeContext _localctx = new Data_typeContext(_ctx, State);
		EnterRule(_localctx, 986, RULE_data_type);
		int _la;
		try {
			State = 10921;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1530,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10900; id();
				State = 10902;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1526,_ctx) ) {
				case 1:
					{
					State = 10901; Match(IDENTITY);
					}
					break;
				}
				State = 10911;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1528,_ctx) ) {
				case 1:
					{
					State = 10904; Match(LR_BRACKET);
					State = 10905;
					_la = _input.La(1);
					if ( !(_la==MAX || _la==DECIMAL) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 10908;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==COMMA) {
						{
						State = 10906; Match(COMMA);
						State = 10907; Match(DECIMAL);
						}
					}

					State = 10910; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10913; Match(DOUBLE);
				State = 10915;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1529,_ctx) ) {
				case 1:
					{
					State = 10914; Match(PRECISION);
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10917; Match(INT);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10918; Match(TINYINT);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10919; Match(SMALLINT);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 10920; Match(BIGINT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_valueContext : ParserRuleContext {
		public ITerminalNode NULL() { return GetToken(TSqlParser.NULL, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public Default_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDefault_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDefault_value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefault_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Default_valueContext default_value() {
		Default_valueContext _localctx = new Default_valueContext(_ctx, State);
		EnterRule(_localctx, 988, RULE_default_value);
		try {
			State = 10926;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NULL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10923; Match(NULL);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10924; Match(DEFAULT);
				}
				break;
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10925; constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public IToken dollar;
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public SignContext sign() {
			return GetRuleContext<SignContext>(0);
		}
		public ITerminalNode REAL() { return GetToken(TSqlParser.REAL, 0); }
		public ITerminalNode FLOAT() { return GetToken(TSqlParser.FLOAT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(_ctx, State);
		EnterRule(_localctx, 990, RULE_constant);
		int _la;
		try {
			State = 10943;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1535,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10928; Match(STRING);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10929; Match(BINARY);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10931;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==PLUS || _la==MINUS) {
					{
					State = 10930; sign();
					}
				}

				State = 10933; Match(DECIMAL);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10935;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==PLUS || _la==MINUS) {
					{
					State = 10934; sign();
					}
				}

				State = 10937;
				_la = _input.La(1);
				if ( !(_la==FLOAT || _la==REAL) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10939;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==PLUS || _la==MINUS) {
					{
					State = 10938; sign();
					}
				}

				State = 10941; _localctx.dollar = Match(DOLLAR);
				State = 10942;
				_la = _input.La(1);
				if ( !(_la==DECIMAL || _la==FLOAT) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignContext : ParserRuleContext {
		public SignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sign; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignContext sign() {
		SignContext _localctx = new SignContext(_ctx, State);
		EnterRule(_localctx, 992, RULE_sign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10945;
			_la = _input.La(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		public Simple_idContext simple_id() {
			return GetRuleContext<Simple_idContext>(0);
		}
		public ITerminalNode DOUBLE_QUOTE_ID() { return GetToken(TSqlParser.DOUBLE_QUOTE_ID, 0); }
		public ITerminalNode SQUARE_BRACKET_ID() { return GetToken(TSqlParser.SQUARE_BRACKET_ID, 0); }
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(_ctx, State);
		EnterRule(_localctx, 994, RULE_id);
		try {
			State = 10950;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1536,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10947; simple_id();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10948; Match(DOUBLE_QUOTE_ID);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10949; Match(SQUARE_BRACKET_ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_idContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(TSqlParser.ID, 0); }
		public ITerminalNode ABSOLUTE() { return GetToken(TSqlParser.ABSOLUTE, 0); }
		public ITerminalNode ACCENT_SENSITIVITY() { return GetToken(TSqlParser.ACCENT_SENSITIVITY, 0); }
		public ITerminalNode ACTION() { return GetToken(TSqlParser.ACTION, 0); }
		public ITerminalNode ACTIVATION() { return GetToken(TSqlParser.ACTIVATION, 0); }
		public ITerminalNode ACTIVE() { return GetToken(TSqlParser.ACTIVE, 0); }
		public ITerminalNode ADDRESS() { return GetToken(TSqlParser.ADDRESS, 0); }
		public ITerminalNode AES_128() { return GetToken(TSqlParser.AES_128, 0); }
		public ITerminalNode AES_192() { return GetToken(TSqlParser.AES_192, 0); }
		public ITerminalNode AES_256() { return GetToken(TSqlParser.AES_256, 0); }
		public ITerminalNode AFFINITY() { return GetToken(TSqlParser.AFFINITY, 0); }
		public ITerminalNode AFTER() { return GetToken(TSqlParser.AFTER, 0); }
		public ITerminalNode AGGREGATE() { return GetToken(TSqlParser.AGGREGATE, 0); }
		public ITerminalNode ALGORITHM() { return GetToken(TSqlParser.ALGORITHM, 0); }
		public ITerminalNode ALLOW_ENCRYPTED_VALUE_MODIFICATIONS() { return GetToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, 0); }
		public ITerminalNode ALLOW_SNAPSHOT_ISOLATION() { return GetToken(TSqlParser.ALLOW_SNAPSHOT_ISOLATION, 0); }
		public ITerminalNode ALLOWED() { return GetToken(TSqlParser.ALLOWED, 0); }
		public ITerminalNode ANSI_NULL_DEFAULT() { return GetToken(TSqlParser.ANSI_NULL_DEFAULT, 0); }
		public ITerminalNode ANSI_NULLS() { return GetToken(TSqlParser.ANSI_NULLS, 0); }
		public ITerminalNode ANSI_PADDING() { return GetToken(TSqlParser.ANSI_PADDING, 0); }
		public ITerminalNode ANSI_WARNINGS() { return GetToken(TSqlParser.ANSI_WARNINGS, 0); }
		public ITerminalNode APPLICATION_LOG() { return GetToken(TSqlParser.APPLICATION_LOG, 0); }
		public ITerminalNode APPLY() { return GetToken(TSqlParser.APPLY, 0); }
		public ITerminalNode ARITHABORT() { return GetToken(TSqlParser.ARITHABORT, 0); }
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public ITerminalNode AUDIT() { return GetToken(TSqlParser.AUDIT, 0); }
		public ITerminalNode AUDIT_GUID() { return GetToken(TSqlParser.AUDIT_GUID, 0); }
		public ITerminalNode AUTO() { return GetToken(TSqlParser.AUTO, 0); }
		public ITerminalNode AUTO_CLEANUP() { return GetToken(TSqlParser.AUTO_CLEANUP, 0); }
		public ITerminalNode AUTO_CLOSE() { return GetToken(TSqlParser.AUTO_CLOSE, 0); }
		public ITerminalNode AUTO_CREATE_STATISTICS() { return GetToken(TSqlParser.AUTO_CREATE_STATISTICS, 0); }
		public ITerminalNode AUTO_SHRINK() { return GetToken(TSqlParser.AUTO_SHRINK, 0); }
		public ITerminalNode AUTO_UPDATE_STATISTICS() { return GetToken(TSqlParser.AUTO_UPDATE_STATISTICS, 0); }
		public ITerminalNode AUTO_UPDATE_STATISTICS_ASYNC() { return GetToken(TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, 0); }
		public ITerminalNode AVAILABILITY() { return GetToken(TSqlParser.AVAILABILITY, 0); }
		public ITerminalNode AVG() { return GetToken(TSqlParser.AVG, 0); }
		public ITerminalNode BACKUP_PRIORITY() { return GetToken(TSqlParser.BACKUP_PRIORITY, 0); }
		public ITerminalNode BEGIN_DIALOG() { return GetToken(TSqlParser.BEGIN_DIALOG, 0); }
		public ITerminalNode BIGINT() { return GetToken(TSqlParser.BIGINT, 0); }
		public ITerminalNode BINARY_BASE64() { return GetToken(TSqlParser.BINARY_BASE64, 0); }
		public ITerminalNode BINARY_CHECKSUM() { return GetToken(TSqlParser.BINARY_CHECKSUM, 0); }
		public ITerminalNode BINDING() { return GetToken(TSqlParser.BINDING, 0); }
		public ITerminalNode BLOB_STORAGE() { return GetToken(TSqlParser.BLOB_STORAGE, 0); }
		public ITerminalNode BROKER() { return GetToken(TSqlParser.BROKER, 0); }
		public ITerminalNode BROKER_INSTANCE() { return GetToken(TSqlParser.BROKER_INSTANCE, 0); }
		public ITerminalNode BULK_LOGGED() { return GetToken(TSqlParser.BULK_LOGGED, 0); }
		public ITerminalNode CALLED() { return GetToken(TSqlParser.CALLED, 0); }
		public ITerminalNode CALLER() { return GetToken(TSqlParser.CALLER, 0); }
		public ITerminalNode CAP_CPU_PERCENT() { return GetToken(TSqlParser.CAP_CPU_PERCENT, 0); }
		public ITerminalNode CAST() { return GetToken(TSqlParser.CAST, 0); }
		public ITerminalNode CATALOG() { return GetToken(TSqlParser.CATALOG, 0); }
		public ITerminalNode CATCH() { return GetToken(TSqlParser.CATCH, 0); }
		public ITerminalNode CHANGE_RETENTION() { return GetToken(TSqlParser.CHANGE_RETENTION, 0); }
		public ITerminalNode CHANGE_TRACKING() { return GetToken(TSqlParser.CHANGE_TRACKING, 0); }
		public ITerminalNode CHECKSUM() { return GetToken(TSqlParser.CHECKSUM, 0); }
		public ITerminalNode CHECKSUM_AGG() { return GetToken(TSqlParser.CHECKSUM_AGG, 0); }
		public ITerminalNode CLEANUP() { return GetToken(TSqlParser.CLEANUP, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public ITerminalNode COLUMN_MASTER_KEY() { return GetToken(TSqlParser.COLUMN_MASTER_KEY, 0); }
		public ITerminalNode COMMITTED() { return GetToken(TSqlParser.COMMITTED, 0); }
		public ITerminalNode COMPATIBILITY_LEVEL() { return GetToken(TSqlParser.COMPATIBILITY_LEVEL, 0); }
		public ITerminalNode CONCAT() { return GetToken(TSqlParser.CONCAT, 0); }
		public ITerminalNode CONCAT_NULL_YIELDS_NULL() { return GetToken(TSqlParser.CONCAT_NULL_YIELDS_NULL, 0); }
		public ITerminalNode CONTENT() { return GetToken(TSqlParser.CONTENT, 0); }
		public ITerminalNode CONTROL() { return GetToken(TSqlParser.CONTROL, 0); }
		public ITerminalNode COOKIE() { return GetToken(TSqlParser.COOKIE, 0); }
		public ITerminalNode COUNT() { return GetToken(TSqlParser.COUNT, 0); }
		public ITerminalNode COUNT_BIG() { return GetToken(TSqlParser.COUNT_BIG, 0); }
		public ITerminalNode COUNTER() { return GetToken(TSqlParser.COUNTER, 0); }
		public ITerminalNode CPU() { return GetToken(TSqlParser.CPU, 0); }
		public ITerminalNode CREATE_NEW() { return GetToken(TSqlParser.CREATE_NEW, 0); }
		public ITerminalNode CREATION_DISPOSITION() { return GetToken(TSqlParser.CREATION_DISPOSITION, 0); }
		public ITerminalNode CREDENTIAL() { return GetToken(TSqlParser.CREDENTIAL, 0); }
		public ITerminalNode CRYPTOGRAPHIC() { return GetToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		public ITerminalNode CURSOR_CLOSE_ON_COMMIT() { return GetToken(TSqlParser.CURSOR_CLOSE_ON_COMMIT, 0); }
		public ITerminalNode CURSOR_DEFAULT() { return GetToken(TSqlParser.CURSOR_DEFAULT, 0); }
		public ITerminalNode DATA() { return GetToken(TSqlParser.DATA, 0); }
		public ITerminalNode DATA_COMPRESSION() { return GetToken(TSqlParser.DATA_COMPRESSION, 0); }
		public ITerminalNode DATE_CORRELATION_OPTIMIZATION() { return GetToken(TSqlParser.DATE_CORRELATION_OPTIMIZATION, 0); }
		public ITerminalNode DATEADD() { return GetToken(TSqlParser.DATEADD, 0); }
		public ITerminalNode DATEDIFF() { return GetToken(TSqlParser.DATEDIFF, 0); }
		public ITerminalNode DATEFIRST() { return GetToken(TSqlParser.DATEFIRST, 0); }
		public ITerminalNode DATEFORMAT() { return GetToken(TSqlParser.DATEFORMAT, 0); }
		public ITerminalNode DATENAME() { return GetToken(TSqlParser.DATENAME, 0); }
		public ITerminalNode DATEPART() { return GetToken(TSqlParser.DATEPART, 0); }
		public ITerminalNode DAYS() { return GetToken(TSqlParser.DAYS, 0); }
		public ITerminalNode DB_CHAINING() { return GetToken(TSqlParser.DB_CHAINING, 0); }
		public ITerminalNode DB_FAILOVER() { return GetToken(TSqlParser.DB_FAILOVER, 0); }
		public ITerminalNode DECRYPTION() { return GetToken(TSqlParser.DECRYPTION, 0); }
		public ITerminalNode DEFAULT_DOUBLE_QUOTE() { return GetToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, 0); }
		public ITerminalNode DEFAULT_FULLTEXT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0); }
		public ITerminalNode DEFAULT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
		public ITerminalNode DELAY() { return GetToken(TSqlParser.DELAY, 0); }
		public ITerminalNode DELAYED_DURABILITY() { return GetToken(TSqlParser.DELAYED_DURABILITY, 0); }
		public ITerminalNode DELETED() { return GetToken(TSqlParser.DELETED, 0); }
		public ITerminalNode DENSE_RANK() { return GetToken(TSqlParser.DENSE_RANK, 0); }
		public ITerminalNode DEPENDENTS() { return GetToken(TSqlParser.DEPENDENTS, 0); }
		public ITerminalNode DES() { return GetToken(TSqlParser.DES, 0); }
		public ITerminalNode DESCRIPTION() { return GetToken(TSqlParser.DESCRIPTION, 0); }
		public ITerminalNode DESX() { return GetToken(TSqlParser.DESX, 0); }
		public ITerminalNode DHCP() { return GetToken(TSqlParser.DHCP, 0); }
		public ITerminalNode DIALOG() { return GetToken(TSqlParser.DIALOG, 0); }
		public ITerminalNode DIRECTORY_NAME() { return GetToken(TSqlParser.DIRECTORY_NAME, 0); }
		public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		public ITerminalNode DISABLE_BROKER() { return GetToken(TSqlParser.DISABLE_BROKER, 0); }
		public ITerminalNode DISABLED() { return GetToken(TSqlParser.DISABLED, 0); }
		public ITerminalNode DISK_DRIVE() { return GetToken(TSqlParser.DISK_DRIVE, 0); }
		public ITerminalNode DOCUMENT() { return GetToken(TSqlParser.DOCUMENT, 0); }
		public ITerminalNode DYNAMIC() { return GetToken(TSqlParser.DYNAMIC, 0); }
		public ITerminalNode EMERGENCY() { return GetToken(TSqlParser.EMERGENCY, 0); }
		public ITerminalNode EMPTY() { return GetToken(TSqlParser.EMPTY, 0); }
		public ITerminalNode ENABLE() { return GetToken(TSqlParser.ENABLE, 0); }
		public ITerminalNode ENABLE_BROKER() { return GetToken(TSqlParser.ENABLE_BROKER, 0); }
		public ITerminalNode ENCRYPTED_VALUE() { return GetToken(TSqlParser.ENCRYPTED_VALUE, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode ENDPOINT_URL() { return GetToken(TSqlParser.ENDPOINT_URL, 0); }
		public ITerminalNode ERROR_BROKER_CONVERSATIONS() { return GetToken(TSqlParser.ERROR_BROKER_CONVERSATIONS, 0); }
		public ITerminalNode EVENTDATA() { return GetToken(TSqlParser.EVENTDATA, 0); }
		public ITerminalNode EXCLUSIVE() { return GetToken(TSqlParser.EXCLUSIVE, 0); }
		public ITerminalNode EXECUTABLE() { return GetToken(TSqlParser.EXECUTABLE, 0); }
		public ITerminalNode EXIST() { return GetToken(TSqlParser.EXIST, 0); }
		public ITerminalNode EXPAND() { return GetToken(TSqlParser.EXPAND, 0); }
		public ITerminalNode EXPIRY_DATE() { return GetToken(TSqlParser.EXPIRY_DATE, 0); }
		public ITerminalNode EXPLICIT() { return GetToken(TSqlParser.EXPLICIT, 0); }
		public ITerminalNode FAIL_OPERATION() { return GetToken(TSqlParser.FAIL_OPERATION, 0); }
		public ITerminalNode FAILOVER_MODE() { return GetToken(TSqlParser.FAILOVER_MODE, 0); }
		public ITerminalNode FAILURE() { return GetToken(TSqlParser.FAILURE, 0); }
		public ITerminalNode FAILURE_CONDITION_LEVEL() { return GetToken(TSqlParser.FAILURE_CONDITION_LEVEL, 0); }
		public ITerminalNode FAST() { return GetToken(TSqlParser.FAST, 0); }
		public ITerminalNode FAST_FORWARD() { return GetToken(TSqlParser.FAST_FORWARD, 0); }
		public ITerminalNode FILEGROUP() { return GetToken(TSqlParser.FILEGROUP, 0); }
		public ITerminalNode FILEGROWTH() { return GetToken(TSqlParser.FILEGROWTH, 0); }
		public ITerminalNode FILENAME() { return GetToken(TSqlParser.FILENAME, 0); }
		public ITerminalNode FILEPATH() { return GetToken(TSqlParser.FILEPATH, 0); }
		public ITerminalNode FILESTREAM() { return GetToken(TSqlParser.FILESTREAM, 0); }
		public ITerminalNode FILLFACTOR() { return GetToken(TSqlParser.FILLFACTOR, 0); }
		public ITerminalNode FILTER() { return GetToken(TSqlParser.FILTER, 0); }
		public ITerminalNode FIRST() { return GetToken(TSqlParser.FIRST, 0); }
		public ITerminalNode FIRST_VALUE() { return GetToken(TSqlParser.FIRST_VALUE, 0); }
		public ITerminalNode FOLLOWING() { return GetToken(TSqlParser.FOLLOWING, 0); }
		public ITerminalNode FORCE() { return GetToken(TSqlParser.FORCE, 0); }
		public ITerminalNode FORCE_FAILOVER_ALLOW_DATA_LOSS() { return GetToken(TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, 0); }
		public ITerminalNode FORCED() { return GetToken(TSqlParser.FORCED, 0); }
		public ITerminalNode FORCESEEK() { return GetToken(TSqlParser.FORCESEEK, 0); }
		public ITerminalNode FORMAT() { return GetToken(TSqlParser.FORMAT, 0); }
		public ITerminalNode FORWARD_ONLY() { return GetToken(TSqlParser.FORWARD_ONLY, 0); }
		public ITerminalNode FULLSCAN() { return GetToken(TSqlParser.FULLSCAN, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode GB() { return GetToken(TSqlParser.GB, 0); }
		public ITerminalNode GETDATE() { return GetToken(TSqlParser.GETDATE, 0); }
		public ITerminalNode GETUTCDATE() { return GetToken(TSqlParser.GETUTCDATE, 0); }
		public ITerminalNode GLOBAL() { return GetToken(TSqlParser.GLOBAL, 0); }
		public ITerminalNode GO() { return GetToken(TSqlParser.GO, 0); }
		public ITerminalNode GROUP_MAX_REQUESTS() { return GetToken(TSqlParser.GROUP_MAX_REQUESTS, 0); }
		public ITerminalNode GROUPING() { return GetToken(TSqlParser.GROUPING, 0); }
		public ITerminalNode GROUPING_ID() { return GetToken(TSqlParser.GROUPING_ID, 0); }
		public ITerminalNode HADR() { return GetToken(TSqlParser.HADR, 0); }
		public ITerminalNode HASH() { return GetToken(TSqlParser.HASH, 0); }
		public ITerminalNode HEALTH_CHECK_TIMEOUT() { return GetToken(TSqlParser.HEALTH_CHECK_TIMEOUT, 0); }
		public ITerminalNode HIGH() { return GetToken(TSqlParser.HIGH, 0); }
		public ITerminalNode HONOR_BROKER_PRIORITY() { return GetToken(TSqlParser.HONOR_BROKER_PRIORITY, 0); }
		public ITerminalNode HOURS() { return GetToken(TSqlParser.HOURS, 0); }
		public ITerminalNode IDENTITY_VALUE() { return GetToken(TSqlParser.IDENTITY_VALUE, 0); }
		public ITerminalNode IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX() { return GetToken(TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0); }
		public ITerminalNode IMMEDIATE() { return GetToken(TSqlParser.IMMEDIATE, 0); }
		public ITerminalNode IMPERSONATE() { return GetToken(TSqlParser.IMPERSONATE, 0); }
		public ITerminalNode IMPORTANCE() { return GetToken(TSqlParser.IMPORTANCE, 0); }
		public ITerminalNode INCREMENTAL() { return GetToken(TSqlParser.INCREMENTAL, 0); }
		public ITerminalNode INIT() { return GetToken(TSqlParser.INIT, 0); }
		public ITerminalNode INITIATOR() { return GetToken(TSqlParser.INITIATOR, 0); }
		public ITerminalNode INPUT() { return GetToken(TSqlParser.INPUT, 0); }
		public ITerminalNode INSENSITIVE() { return GetToken(TSqlParser.INSENSITIVE, 0); }
		public ITerminalNode INSERTED() { return GetToken(TSqlParser.INSERTED, 0); }
		public ITerminalNode INT() { return GetToken(TSqlParser.INT, 0); }
		public ITerminalNode IP() { return GetToken(TSqlParser.IP, 0); }
		public ITerminalNode ISOLATION() { return GetToken(TSqlParser.ISOLATION, 0); }
		public ITerminalNode KB() { return GetToken(TSqlParser.KB, 0); }
		public ITerminalNode KEEP() { return GetToken(TSqlParser.KEEP, 0); }
		public ITerminalNode KEEPFIXED() { return GetToken(TSqlParser.KEEPFIXED, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode KEY_SOURCE() { return GetToken(TSqlParser.KEY_SOURCE, 0); }
		public ITerminalNode KEYS() { return GetToken(TSqlParser.KEYS, 0); }
		public ITerminalNode KEYSET() { return GetToken(TSqlParser.KEYSET, 0); }
		public ITerminalNode LAG() { return GetToken(TSqlParser.LAG, 0); }
		public ITerminalNode LAST() { return GetToken(TSqlParser.LAST, 0); }
		public ITerminalNode LAST_VALUE() { return GetToken(TSqlParser.LAST_VALUE, 0); }
		public ITerminalNode LEAD() { return GetToken(TSqlParser.LEAD, 0); }
		public ITerminalNode LEVEL() { return GetToken(TSqlParser.LEVEL, 0); }
		public ITerminalNode LIST() { return GetToken(TSqlParser.LIST, 0); }
		public ITerminalNode LISTENER() { return GetToken(TSqlParser.LISTENER, 0); }
		public ITerminalNode LISTENER_URL() { return GetToken(TSqlParser.LISTENER_URL, 0); }
		public ITerminalNode LOB_COMPACTION() { return GetToken(TSqlParser.LOB_COMPACTION, 0); }
		public ITerminalNode LOCAL() { return GetToken(TSqlParser.LOCAL, 0); }
		public ITerminalNode LOCATION() { return GetToken(TSqlParser.LOCATION, 0); }
		public ITerminalNode LOCK() { return GetToken(TSqlParser.LOCK, 0); }
		public ITerminalNode LOCK_ESCALATION() { return GetToken(TSqlParser.LOCK_ESCALATION, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public ITerminalNode LOOP() { return GetToken(TSqlParser.LOOP, 0); }
		public ITerminalNode LOW() { return GetToken(TSqlParser.LOW, 0); }
		public ITerminalNode MANUAL() { return GetToken(TSqlParser.MANUAL, 0); }
		public ITerminalNode MARK() { return GetToken(TSqlParser.MARK, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode MATERIALIZED() { return GetToken(TSqlParser.MATERIALIZED, 0); }
		public ITerminalNode MAX() { return GetToken(TSqlParser.MAX, 0); }
		public ITerminalNode MAX_CPU_PERCENT() { return GetToken(TSqlParser.MAX_CPU_PERCENT, 0); }
		public ITerminalNode MAX_DOP() { return GetToken(TSqlParser.MAX_DOP, 0); }
		public ITerminalNode MAX_FILES() { return GetToken(TSqlParser.MAX_FILES, 0); }
		public ITerminalNode MAX_IOPS_PER_VOLUME() { return GetToken(TSqlParser.MAX_IOPS_PER_VOLUME, 0); }
		public ITerminalNode MAX_MEMORY() { return GetToken(TSqlParser.MAX_MEMORY, 0); }
		public ITerminalNode MAX_MEMORY_PERCENT() { return GetToken(TSqlParser.MAX_MEMORY_PERCENT, 0); }
		public ITerminalNode MAX_PROCESSES() { return GetToken(TSqlParser.MAX_PROCESSES, 0); }
		public ITerminalNode MAX_QUEUE_READERS() { return GetToken(TSqlParser.MAX_QUEUE_READERS, 0); }
		public ITerminalNode MAX_ROLLOVER_FILES() { return GetToken(TSqlParser.MAX_ROLLOVER_FILES, 0); }
		public ITerminalNode MAXDOP() { return GetToken(TSqlParser.MAXDOP, 0); }
		public ITerminalNode MAXRECURSION() { return GetToken(TSqlParser.MAXRECURSION, 0); }
		public ITerminalNode MAXSIZE() { return GetToken(TSqlParser.MAXSIZE, 0); }
		public ITerminalNode MB() { return GetToken(TSqlParser.MB, 0); }
		public ITerminalNode MEDIUM() { return GetToken(TSqlParser.MEDIUM, 0); }
		public ITerminalNode MEMORY_OPTIMIZED_DATA() { return GetToken(TSqlParser.MEMORY_OPTIMIZED_DATA, 0); }
		public ITerminalNode MESSAGE() { return GetToken(TSqlParser.MESSAGE, 0); }
		public ITerminalNode MIN() { return GetToken(TSqlParser.MIN, 0); }
		public ITerminalNode MIN_ACTIVE_ROWVERSION() { return GetToken(TSqlParser.MIN_ACTIVE_ROWVERSION, 0); }
		public ITerminalNode MIN_CPU_PERCENT() { return GetToken(TSqlParser.MIN_CPU_PERCENT, 0); }
		public ITerminalNode MIN_IOPS_PER_VOLUME() { return GetToken(TSqlParser.MIN_IOPS_PER_VOLUME, 0); }
		public ITerminalNode MIN_MEMORY_PERCENT() { return GetToken(TSqlParser.MIN_MEMORY_PERCENT, 0); }
		public ITerminalNode MINUTES() { return GetToken(TSqlParser.MINUTES, 0); }
		public ITerminalNode MIRROR_ADDRESS() { return GetToken(TSqlParser.MIRROR_ADDRESS, 0); }
		public ITerminalNode MIXED_PAGE_ALLOCATION() { return GetToken(TSqlParser.MIXED_PAGE_ALLOCATION, 0); }
		public ITerminalNode MODE() { return GetToken(TSqlParser.MODE, 0); }
		public ITerminalNode MODIFY() { return GetToken(TSqlParser.MODIFY, 0); }
		public ITerminalNode MOVE() { return GetToken(TSqlParser.MOVE, 0); }
		public ITerminalNode MULTI_USER() { return GetToken(TSqlParser.MULTI_USER, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode NESTED_TRIGGERS() { return GetToken(TSqlParser.NESTED_TRIGGERS, 0); }
		public ITerminalNode NEW_ACCOUNT() { return GetToken(TSqlParser.NEW_ACCOUNT, 0); }
		public ITerminalNode NEW_BROKER() { return GetToken(TSqlParser.NEW_BROKER, 0); }
		public ITerminalNode NEW_PASSWORD() { return GetToken(TSqlParser.NEW_PASSWORD, 0); }
		public ITerminalNode NEXT() { return GetToken(TSqlParser.NEXT, 0); }
		public ITerminalNode NO() { return GetToken(TSqlParser.NO, 0); }
		public ITerminalNode NO_TRUNCATE() { return GetToken(TSqlParser.NO_TRUNCATE, 0); }
		public ITerminalNode NO_WAIT() { return GetToken(TSqlParser.NO_WAIT, 0); }
		public ITerminalNode NOCOUNT() { return GetToken(TSqlParser.NOCOUNT, 0); }
		public ITerminalNode NODES() { return GetToken(TSqlParser.NODES, 0); }
		public ITerminalNode NOEXPAND() { return GetToken(TSqlParser.NOEXPAND, 0); }
		public ITerminalNode NON_TRANSACTED_ACCESS() { return GetToken(TSqlParser.NON_TRANSACTED_ACCESS, 0); }
		public ITerminalNode NORECOMPUTE() { return GetToken(TSqlParser.NORECOMPUTE, 0); }
		public ITerminalNode NORECOVERY() { return GetToken(TSqlParser.NORECOVERY, 0); }
		public ITerminalNode NOWAIT() { return GetToken(TSqlParser.NOWAIT, 0); }
		public ITerminalNode NTILE() { return GetToken(TSqlParser.NTILE, 0); }
		public ITerminalNode NUMANODE() { return GetToken(TSqlParser.NUMANODE, 0); }
		public ITerminalNode NUMBER() { return GetToken(TSqlParser.NUMBER, 0); }
		public ITerminalNode NUMERIC_ROUNDABORT() { return GetToken(TSqlParser.NUMERIC_ROUNDABORT, 0); }
		public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		public ITerminalNode OFFLINE() { return GetToken(TSqlParser.OFFLINE, 0); }
		public ITerminalNode OFFSET() { return GetToken(TSqlParser.OFFSET, 0); }
		public ITerminalNode OFFSETS() { return GetToken(TSqlParser.OFFSETS, 0); }
		public ITerminalNode OLD_ACCOUNT() { return GetToken(TSqlParser.OLD_ACCOUNT, 0); }
		public ITerminalNode ONLINE() { return GetToken(TSqlParser.ONLINE, 0); }
		public ITerminalNode ONLY() { return GetToken(TSqlParser.ONLY, 0); }
		public ITerminalNode OPEN_EXISTING() { return GetToken(TSqlParser.OPEN_EXISTING, 0); }
		public ITerminalNode OPTIMISTIC() { return GetToken(TSqlParser.OPTIMISTIC, 0); }
		public ITerminalNode OPTIMIZE() { return GetToken(TSqlParser.OPTIMIZE, 0); }
		public ITerminalNode OUT() { return GetToken(TSqlParser.OUT, 0); }
		public ITerminalNode OUTPUT() { return GetToken(TSqlParser.OUTPUT, 0); }
		public ITerminalNode OWNER() { return GetToken(TSqlParser.OWNER, 0); }
		public ITerminalNode PAGE() { return GetToken(TSqlParser.PAGE, 0); }
		public ITerminalNode PAGE_VERIFY() { return GetToken(TSqlParser.PAGE_VERIFY, 0); }
		public ITerminalNode PARAMETERIZATION() { return GetToken(TSqlParser.PARAMETERIZATION, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		public ITerminalNode PARTITIONS() { return GetToken(TSqlParser.PARTITIONS, 0); }
		public ITerminalNode PARTNER() { return GetToken(TSqlParser.PARTNER, 0); }
		public ITerminalNode PATH() { return GetToken(TSqlParser.PATH, 0); }
		public ITerminalNode POISON_MESSAGE_HANDLING() { return GetToken(TSqlParser.POISON_MESSAGE_HANDLING, 0); }
		public ITerminalNode POOL() { return GetToken(TSqlParser.POOL, 0); }
		public ITerminalNode PORT() { return GetToken(TSqlParser.PORT, 0); }
		public ITerminalNode PRECEDING() { return GetToken(TSqlParser.PRECEDING, 0); }
		public ITerminalNode PRIMARY_ROLE() { return GetToken(TSqlParser.PRIMARY_ROLE, 0); }
		public ITerminalNode PRIOR() { return GetToken(TSqlParser.PRIOR, 0); }
		public ITerminalNode PRIORITY() { return GetToken(TSqlParser.PRIORITY, 0); }
		public ITerminalNode PRIORITY_LEVEL() { return GetToken(TSqlParser.PRIORITY_LEVEL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(TSqlParser.PRIVATE, 0); }
		public ITerminalNode PRIVATE_KEY() { return GetToken(TSqlParser.PRIVATE_KEY, 0); }
		public ITerminalNode PRIVILEGES() { return GetToken(TSqlParser.PRIVILEGES, 0); }
		public ITerminalNode PROCEDURE_NAME() { return GetToken(TSqlParser.PROCEDURE_NAME, 0); }
		public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public ITerminalNode PROVIDER_KEY_NAME() { return GetToken(TSqlParser.PROVIDER_KEY_NAME, 0); }
		public ITerminalNode PUBLIC() { return GetToken(TSqlParser.PUBLIC, 0); }
		public ITerminalNode QUERY() { return GetToken(TSqlParser.QUERY, 0); }
		public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		public ITerminalNode QUEUE_DELAY() { return GetToken(TSqlParser.QUEUE_DELAY, 0); }
		public ITerminalNode QUOTED_IDENTIFIER() { return GetToken(TSqlParser.QUOTED_IDENTIFIER, 0); }
		public ITerminalNode R() { return GetToken(TSqlParser.R, 0); }
		public ITerminalNode RANGE() { return GetToken(TSqlParser.RANGE, 0); }
		public ITerminalNode RANK() { return GetToken(TSqlParser.RANK, 0); }
		public ITerminalNode RAW() { return GetToken(TSqlParser.RAW, 0); }
		public ITerminalNode RC2() { return GetToken(TSqlParser.RC2, 0); }
		public ITerminalNode RC4() { return GetToken(TSqlParser.RC4, 0); }
		public ITerminalNode RC4_128() { return GetToken(TSqlParser.RC4_128, 0); }
		public ITerminalNode READ_COMMITTED_SNAPSHOT() { return GetToken(TSqlParser.READ_COMMITTED_SNAPSHOT, 0); }
		public ITerminalNode READ_ONLY() { return GetToken(TSqlParser.READ_ONLY, 0); }
		public ITerminalNode READ_ONLY_ROUTING_LIST() { return GetToken(TSqlParser.READ_ONLY_ROUTING_LIST, 0); }
		public ITerminalNode READ_WRITE() { return GetToken(TSqlParser.READ_WRITE, 0); }
		public ITerminalNode READONLY() { return GetToken(TSqlParser.READONLY, 0); }
		public ITerminalNode REBUILD() { return GetToken(TSqlParser.REBUILD, 0); }
		public ITerminalNode RECEIVE() { return GetToken(TSqlParser.RECEIVE, 0); }
		public ITerminalNode RECOMPILE() { return GetToken(TSqlParser.RECOMPILE, 0); }
		public ITerminalNode RECOVERY() { return GetToken(TSqlParser.RECOVERY, 0); }
		public ITerminalNode RECURSIVE_TRIGGERS() { return GetToken(TSqlParser.RECURSIVE_TRIGGERS, 0); }
		public ITerminalNode RELATIVE() { return GetToken(TSqlParser.RELATIVE, 0); }
		public ITerminalNode REMOTE() { return GetToken(TSqlParser.REMOTE, 0); }
		public ITerminalNode REMOTE_SERVICE_NAME() { return GetToken(TSqlParser.REMOTE_SERVICE_NAME, 0); }
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode REORGANIZE() { return GetToken(TSqlParser.REORGANIZE, 0); }
		public ITerminalNode REPEATABLE() { return GetToken(TSqlParser.REPEATABLE, 0); }
		public ITerminalNode REPLICA() { return GetToken(TSqlParser.REPLICA, 0); }
		public ITerminalNode REQUEST_MAX_CPU_TIME_SEC() { return GetToken(TSqlParser.REQUEST_MAX_CPU_TIME_SEC, 0); }
		public ITerminalNode REQUEST_MAX_MEMORY_GRANT_PERCENT() { return GetToken(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, 0); }
		public ITerminalNode REQUEST_MEMORY_GRANT_TIMEOUT_SEC() { return GetToken(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, 0); }
		public ITerminalNode REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT() { return GetToken(TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, 0); }
		public ITerminalNode RESERVE_DISK_SPACE() { return GetToken(TSqlParser.RESERVE_DISK_SPACE, 0); }
		public ITerminalNode RESOURCE() { return GetToken(TSqlParser.RESOURCE, 0); }
		public ITerminalNode RESOURCE_MANAGER_LOCATION() { return GetToken(TSqlParser.RESOURCE_MANAGER_LOCATION, 0); }
		public ITerminalNode RESTRICTED_USER() { return GetToken(TSqlParser.RESTRICTED_USER, 0); }
		public ITerminalNode RETENTION() { return GetToken(TSqlParser.RETENTION, 0); }
		public ITerminalNode RETURN() { return GetToken(TSqlParser.RETURN, 0); }
		public ITerminalNode RETURNS() { return GetToken(TSqlParser.RETURNS, 0); }
		public ITerminalNode ROBUST() { return GetToken(TSqlParser.ROBUST, 0); }
		public ITerminalNode ROOT() { return GetToken(TSqlParser.ROOT, 0); }
		public ITerminalNode ROUTE() { return GetToken(TSqlParser.ROUTE, 0); }
		public ITerminalNode ROW() { return GetToken(TSqlParser.ROW, 0); }
		public ITerminalNode ROW_NUMBER() { return GetToken(TSqlParser.ROW_NUMBER, 0); }
		public ITerminalNode ROWCOUNT() { return GetToken(TSqlParser.ROWCOUNT, 0); }
		public ITerminalNode ROWGUID() { return GetToken(TSqlParser.ROWGUID, 0); }
		public ITerminalNode ROWS() { return GetToken(TSqlParser.ROWS, 0); }
		public ITerminalNode SAFETY() { return GetToken(TSqlParser.SAFETY, 0); }
		public ITerminalNode SAMPLE() { return GetToken(TSqlParser.SAMPLE, 0); }
		public ITerminalNode SCHEMABINDING() { return GetToken(TSqlParser.SCHEMABINDING, 0); }
		public ITerminalNode SCOPED() { return GetToken(TSqlParser.SCOPED, 0); }
		public ITerminalNode SCROLL() { return GetToken(TSqlParser.SCROLL, 0); }
		public ITerminalNode SCROLL_LOCKS() { return GetToken(TSqlParser.SCROLL_LOCKS, 0); }
		public ITerminalNode SEARCH() { return GetToken(TSqlParser.SEARCH, 0); }
		public ITerminalNode SECONDARY() { return GetToken(TSqlParser.SECONDARY, 0); }
		public ITerminalNode SECONDARY_ONLY() { return GetToken(TSqlParser.SECONDARY_ONLY, 0); }
		public ITerminalNode SECONDARY_ROLE() { return GetToken(TSqlParser.SECONDARY_ROLE, 0); }
		public ITerminalNode SECONDS() { return GetToken(TSqlParser.SECONDS, 0); }
		public ITerminalNode SECRET() { return GetToken(TSqlParser.SECRET, 0); }
		public ITerminalNode SECURITY() { return GetToken(TSqlParser.SECURITY, 0); }
		public ITerminalNode SECURITY_LOG() { return GetToken(TSqlParser.SECURITY_LOG, 0); }
		public ITerminalNode SEEDING_MODE() { return GetToken(TSqlParser.SEEDING_MODE, 0); }
		public ITerminalNode SELF() { return GetToken(TSqlParser.SELF, 0); }
		public ITerminalNode SEMI_SENSITIVE() { return GetToken(TSqlParser.SEMI_SENSITIVE, 0); }
		public ITerminalNode SEND() { return GetToken(TSqlParser.SEND, 0); }
		public ITerminalNode SENT() { return GetToken(TSqlParser.SENT, 0); }
		public ITerminalNode SEQUENCE() { return GetToken(TSqlParser.SEQUENCE, 0); }
		public ITerminalNode SERIALIZABLE() { return GetToken(TSqlParser.SERIALIZABLE, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode SESSION_TIMEOUT() { return GetToken(TSqlParser.SESSION_TIMEOUT, 0); }
		public ITerminalNode SETERROR() { return GetToken(TSqlParser.SETERROR, 0); }
		public ITerminalNode SHARE() { return GetToken(TSqlParser.SHARE, 0); }
		public ITerminalNode SHOWPLAN() { return GetToken(TSqlParser.SHOWPLAN, 0); }
		public ITerminalNode[] SID() { return GetTokens(TSqlParser.SID); }
		public ITerminalNode SID(int i) {
			return GetToken(TSqlParser.SID, i);
		}
		public ITerminalNode SIGNATURE() { return GetToken(TSqlParser.SIGNATURE, 0); }
		public ITerminalNode SIMPLE() { return GetToken(TSqlParser.SIMPLE, 0); }
		public ITerminalNode SINGLE_USER() { return GetToken(TSqlParser.SINGLE_USER, 0); }
		public ITerminalNode SIZE() { return GetToken(TSqlParser.SIZE, 0); }
		public ITerminalNode SMALLINT() { return GetToken(TSqlParser.SMALLINT, 0); }
		public ITerminalNode SNAPSHOT() { return GetToken(TSqlParser.SNAPSHOT, 0); }
		public ITerminalNode SOURCE() { return GetToken(TSqlParser.SOURCE, 0); }
		public ITerminalNode SPATIAL_WINDOW_MAX_CELLS() { return GetToken(TSqlParser.SPATIAL_WINDOW_MAX_CELLS, 0); }
		public ITerminalNode SPLIT() { return GetToken(TSqlParser.SPLIT, 0); }
		public ITerminalNode STANDBY() { return GetToken(TSqlParser.STANDBY, 0); }
		public ITerminalNode START() { return GetToken(TSqlParser.START, 0); }
		public ITerminalNode START_DATE() { return GetToken(TSqlParser.START_DATE, 0); }
		public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		public ITerminalNode STATIC() { return GetToken(TSqlParser.STATIC, 0); }
		public ITerminalNode STATS_STREAM() { return GetToken(TSqlParser.STATS_STREAM, 0); }
		public ITerminalNode STATUS() { return GetToken(TSqlParser.STATUS, 0); }
		public ITerminalNode STDEV() { return GetToken(TSqlParser.STDEV, 0); }
		public ITerminalNode STDEVP() { return GetToken(TSqlParser.STDEVP, 0); }
		public ITerminalNode STOPLIST() { return GetToken(TSqlParser.STOPLIST, 0); }
		public ITerminalNode STRING_AGG() { return GetToken(TSqlParser.STRING_AGG, 0); }
		public ITerminalNode STUFF() { return GetToken(TSqlParser.STUFF, 0); }
		public ITerminalNode SUBJECT() { return GetToken(TSqlParser.SUBJECT, 0); }
		public ITerminalNode SUM() { return GetToken(TSqlParser.SUM, 0); }
		public ITerminalNode SUSPEND() { return GetToken(TSqlParser.SUSPEND, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode SYNCHRONOUS_COMMIT() { return GetToken(TSqlParser.SYNCHRONOUS_COMMIT, 0); }
		public ITerminalNode SYNONYM() { return GetToken(TSqlParser.SYNONYM, 0); }
		public ITerminalNode SYSTEM() { return GetToken(TSqlParser.SYSTEM, 0); }
		public ITerminalNode TAKE() { return GetToken(TSqlParser.TAKE, 0); }
		public ITerminalNode TARGET() { return GetToken(TSqlParser.TARGET, 0); }
		public ITerminalNode TARGET_RECOVERY_TIME() { return GetToken(TSqlParser.TARGET_RECOVERY_TIME, 0); }
		public ITerminalNode TB() { return GetToken(TSqlParser.TB, 0); }
		public ITerminalNode TEXTIMAGE_ON() { return GetToken(TSqlParser.TEXTIMAGE_ON, 0); }
		public ITerminalNode THROW() { return GetToken(TSqlParser.THROW, 0); }
		public ITerminalNode TIES() { return GetToken(TSqlParser.TIES, 0); }
		public ITerminalNode TIME() { return GetToken(TSqlParser.TIME, 0); }
		public ITerminalNode TIMEOUT() { return GetToken(TSqlParser.TIMEOUT, 0); }
		public ITerminalNode TIMER() { return GetToken(TSqlParser.TIMER, 0); }
		public ITerminalNode TINYINT() { return GetToken(TSqlParser.TINYINT, 0); }
		public ITerminalNode TORN_PAGE_DETECTION() { return GetToken(TSqlParser.TORN_PAGE_DETECTION, 0); }
		public ITerminalNode TRANSFORM_NOISE_WORDS() { return GetToken(TSqlParser.TRANSFORM_NOISE_WORDS, 0); }
		public ITerminalNode TRIPLE_DES() { return GetToken(TSqlParser.TRIPLE_DES, 0); }
		public ITerminalNode TRIPLE_DES_3KEY() { return GetToken(TSqlParser.TRIPLE_DES_3KEY, 0); }
		public ITerminalNode TRUSTWORTHY() { return GetToken(TSqlParser.TRUSTWORTHY, 0); }
		public ITerminalNode TRY() { return GetToken(TSqlParser.TRY, 0); }
		public ITerminalNode TSQL() { return GetToken(TSqlParser.TSQL, 0); }
		public ITerminalNode TWO_DIGIT_YEAR_CUTOFF() { return GetToken(TSqlParser.TWO_DIGIT_YEAR_CUTOFF, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ITerminalNode TYPE_WARNING() { return GetToken(TSqlParser.TYPE_WARNING, 0); }
		public ITerminalNode UNBOUNDED() { return GetToken(TSqlParser.UNBOUNDED, 0); }
		public ITerminalNode UNCOMMITTED() { return GetToken(TSqlParser.UNCOMMITTED, 0); }
		public ITerminalNode UNKNOWN() { return GetToken(TSqlParser.UNKNOWN, 0); }
		public ITerminalNode UNLIMITED() { return GetToken(TSqlParser.UNLIMITED, 0); }
		public ITerminalNode USING() { return GetToken(TSqlParser.USING, 0); }
		public ITerminalNode VALID_XML() { return GetToken(TSqlParser.VALID_XML, 0); }
		public ITerminalNode VALIDATION() { return GetToken(TSqlParser.VALIDATION, 0); }
		public ITerminalNode VALUE() { return GetToken(TSqlParser.VALUE, 0); }
		public ITerminalNode VAR() { return GetToken(TSqlParser.VAR, 0); }
		public ITerminalNode VARP() { return GetToken(TSqlParser.VARP, 0); }
		public ITerminalNode VIEW_METADATA() { return GetToken(TSqlParser.VIEW_METADATA, 0); }
		public ITerminalNode VIEWS() { return GetToken(TSqlParser.VIEWS, 0); }
		public ITerminalNode WAIT() { return GetToken(TSqlParser.WAIT, 0); }
		public ITerminalNode WELL_FORMED_XML() { return GetToken(TSqlParser.WELL_FORMED_XML, 0); }
		public ITerminalNode WORK() { return GetToken(TSqlParser.WORK, 0); }
		public ITerminalNode WORKLOAD() { return GetToken(TSqlParser.WORKLOAD, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode XMLNAMESPACES() { return GetToken(TSqlParser.XMLNAMESPACES, 0); }
		public ITerminalNode ABSENT() { return GetToken(TSqlParser.ABSENT, 0); }
		public ITerminalNode AES() { return GetToken(TSqlParser.AES, 0); }
		public ITerminalNode ALLOW_CONNECTIONS() { return GetToken(TSqlParser.ALLOW_CONNECTIONS, 0); }
		public ITerminalNode ALLOW_MULTIPLE_EVENT_LOSS() { return GetToken(TSqlParser.ALLOW_MULTIPLE_EVENT_LOSS, 0); }
		public ITerminalNode ALLOW_SINGLE_EVENT_LOSS() { return GetToken(TSqlParser.ALLOW_SINGLE_EVENT_LOSS, 0); }
		public ITerminalNode AND_ASSIGN() { return GetToken(TSqlParser.AND_ASSIGN, 0); }
		public ITerminalNode ANONYMOUS() { return GetToken(TSqlParser.ANONYMOUS, 0); }
		public ITerminalNode APPEND() { return GetToken(TSqlParser.APPEND, 0); }
		public ITerminalNode APPLICATION() { return GetToken(TSqlParser.APPLICATION, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode ASYNCHRONOUS_COMMIT() { return GetToken(TSqlParser.ASYNCHRONOUS_COMMIT, 0); }
		public ITerminalNode AT() { return GetToken(TSqlParser.AT, 0); }
		public ITerminalNode AUTHENTICATION() { return GetToken(TSqlParser.AUTHENTICATION, 0); }
		public ITerminalNode AUTOMATED_BACKUP_PREFERENCE() { return GetToken(TSqlParser.AUTOMATED_BACKUP_PREFERENCE, 0); }
		public ITerminalNode AUTOMATIC() { return GetToken(TSqlParser.AUTOMATIC, 0); }
		public ITerminalNode AVAILABILITY_MODE() { return GetToken(TSqlParser.AVAILABILITY_MODE, 0); }
		public ITerminalNode BACKSLASH() { return GetToken(TSqlParser.BACKSLASH, 0); }
		public ITerminalNode BEFORE() { return GetToken(TSqlParser.BEFORE, 0); }
		public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		public ITerminalNode BIT_AND() { return GetToken(TSqlParser.BIT_AND, 0); }
		public ITerminalNode BIT_NOT() { return GetToken(TSqlParser.BIT_NOT, 0); }
		public ITerminalNode BIT_OR() { return GetToken(TSqlParser.BIT_OR, 0); }
		public ITerminalNode BIT_XOR() { return GetToken(TSqlParser.BIT_XOR, 0); }
		public ITerminalNode BLOCK() { return GetToken(TSqlParser.BLOCK, 0); }
		public ITerminalNode BLOCKING_HIERARCHY() { return GetToken(TSqlParser.BLOCKING_HIERARCHY, 0); }
		public ITerminalNode BLOCKSIZE() { return GetToken(TSqlParser.BLOCKSIZE, 0); }
		public ITerminalNode BUCKET_COUNT() { return GetToken(TSqlParser.BUCKET_COUNT, 0); }
		public ITerminalNode BUFFER() { return GetToken(TSqlParser.BUFFER, 0); }
		public ITerminalNode BUFFERCOUNT() { return GetToken(TSqlParser.BUFFERCOUNT, 0); }
		public ITerminalNode CACHE() { return GetToken(TSqlParser.CACHE, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode CHANGES() { return GetToken(TSqlParser.CHANGES, 0); }
		public ITerminalNode CHANGETABLE() { return GetToken(TSqlParser.CHANGETABLE, 0); }
		public ITerminalNode CHECK_EXPIRATION() { return GetToken(TSqlParser.CHECK_EXPIRATION, 0); }
		public ITerminalNode CHECK_POLICY() { return GetToken(TSqlParser.CHECK_POLICY, 0); }
		public ITerminalNode CLASSIFIER_FUNCTION() { return GetToken(TSqlParser.CLASSIFIER_FUNCTION, 0); }
		public ITerminalNode CLUSTER() { return GetToken(TSqlParser.CLUSTER, 0); }
		public ITerminalNode COLON() { return GetToken(TSqlParser.COLON, 0); }
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode COMMENT() { return GetToken(TSqlParser.COMMENT, 0); }
		public ITerminalNode COMPRESSION() { return GetToken(TSqlParser.COMPRESSION, 0); }
		public ITerminalNode CONFIGURATION() { return GetToken(TSqlParser.CONFIGURATION, 0); }
		public ITerminalNode CONNECTION_OPTIONS() { return GetToken(TSqlParser.CONNECTION_OPTIONS, 0); }
		public ITerminalNode CONTAINMENT() { return GetToken(TSqlParser.CONTAINMENT, 0); }
		public ITerminalNode CONTEXT() { return GetToken(TSqlParser.CONTEXT, 0); }
		public ITerminalNode CONTINUE_AFTER_ERROR() { return GetToken(TSqlParser.CONTINUE_AFTER_ERROR, 0); }
		public ITerminalNode CONTRACT() { return GetToken(TSqlParser.CONTRACT, 0); }
		public ITerminalNode CONTRACT_NAME() { return GetToken(TSqlParser.CONTRACT_NAME, 0); }
		public ITerminalNode CONVERSATION() { return GetToken(TSqlParser.CONVERSATION, 0); }
		public ITerminalNode COPY_ONLY() { return GetToken(TSqlParser.COPY_ONLY, 0); }
		public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(TSqlParser.CURRENT_TIMESTAMP, 0); }
		public ITerminalNode CURRENT_USER() { return GetToken(TSqlParser.CURRENT_USER, 0); }
		public ITerminalNode CYCLE() { return GetToken(TSqlParser.CYCLE, 0); }
		public ITerminalNode DATABASE_MIRRORING() { return GetToken(TSqlParser.DATABASE_MIRRORING, 0); }
		public ITerminalNode DATA_SOURCE() { return GetToken(TSqlParser.DATA_SOURCE, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode DEFAULT_DATABASE() { return GetToken(TSqlParser.DEFAULT_DATABASE, 0); }
		public ITerminalNode DEFAULT_SCHEMA() { return GetToken(TSqlParser.DEFAULT_SCHEMA, 0); }
		public ITerminalNode DIAGNOSTICS() { return GetToken(TSqlParser.DIAGNOSTICS, 0); }
		public ITerminalNode DIFFERENTIAL() { return GetToken(TSqlParser.DIFFERENTIAL, 0); }
		public ITerminalNode DISK() { return GetToken(TSqlParser.DISK, 0); }
		public ITerminalNode DIVIDE() { return GetToken(TSqlParser.DIVIDE, 0); }
		public ITerminalNode DIV_ASSIGN() { return GetToken(TSqlParser.DIV_ASSIGN, 0); }
		public ITerminalNode DOLLAR() { return GetToken(TSqlParser.DOLLAR, 0); }
		public ITerminalNode DOLLAR_ACTION() { return GetToken(TSqlParser.DOLLAR_ACTION, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode DOUBLE_BACK_SLASH() { return GetToken(TSqlParser.DOUBLE_BACK_SLASH, 0); }
		public ITerminalNode DOUBLE_BAR() { return GetToken(TSqlParser.DOUBLE_BAR, 0); }
		public ITerminalNode DOUBLE_FORWARD_SLASH() { return GetToken(TSqlParser.DOUBLE_FORWARD_SLASH, 0); }
		public ITerminalNode DOUBLE_QUOTE_ID() { return GetToken(TSqlParser.DOUBLE_QUOTE_ID, 0); }
		public ITerminalNode DTC_SUPPORT() { return GetToken(TSqlParser.DTC_SUPPORT, 0); }
		public ITerminalNode DUMP() { return GetToken(TSqlParser.DUMP, 0); }
		public ITerminalNode ELEMENTS() { return GetToken(TSqlParser.ELEMENTS, 0); }
		public ITerminalNode ENABLED() { return GetToken(TSqlParser.ENABLED, 0); }
		public ITerminalNode ENDPOINT() { return GetToken(TSqlParser.ENDPOINT, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode ERROR() { return GetToken(TSqlParser.ERROR, 0); }
		public ITerminalNode EVENT() { return GetToken(TSqlParser.EVENT, 0); }
		public ITerminalNode EVENT_RETENTION_MODE() { return GetToken(TSqlParser.EVENT_RETENTION_MODE, 0); }
		public ITerminalNode EXCLAMATION() { return GetToken(TSqlParser.EXCLAMATION, 0); }
		public ITerminalNode EXECUTABLE_FILE() { return GetToken(TSqlParser.EXECUTABLE_FILE, 0); }
		public ITerminalNode EXPIREDATE() { return GetToken(TSqlParser.EXPIREDATE, 0); }
		public ITerminalNode EXTENSION() { return GetToken(TSqlParser.EXTENSION, 0); }
		public ITerminalNode EXTERNAL_ACCESS() { return GetToken(TSqlParser.EXTERNAL_ACCESS, 0); }
		public ITerminalNode FAILOVER() { return GetToken(TSqlParser.FAILOVER, 0); }
		public ITerminalNode FAILURECONDITIONLEVEL() { return GetToken(TSqlParser.FAILURECONDITIONLEVEL, 0); }
		public ITerminalNode FAN_IN() { return GetToken(TSqlParser.FAN_IN, 0); }
		public ITerminalNode FILE_SNAPSHOT() { return GetToken(TSqlParser.FILE_SNAPSHOT, 0); }
		public ITerminalNode FLOAT() { return GetToken(TSqlParser.FLOAT, 0); }
		public ITerminalNode FORCE_SERVICE_ALLOW_DATA_LOSS() { return GetToken(TSqlParser.FORCE_SERVICE_ALLOW_DATA_LOSS, 0); }
		public ITerminalNode GET() { return GetToken(TSqlParser.GET, 0); }
		public ITerminalNode GOVERNOR() { return GetToken(TSqlParser.GOVERNOR, 0); }
		public ITerminalNode GREATER() { return GetToken(TSqlParser.GREATER, 0); }
		public ITerminalNode HADOOP() { return GetToken(TSqlParser.HADOOP, 0); }
		public ITerminalNode HASHED() { return GetToken(TSqlParser.HASHED, 0); }
		public ITerminalNode HEALTHCHECKTIMEOUT() { return GetToken(TSqlParser.HEALTHCHECKTIMEOUT, 0); }
		public ITerminalNode IDENTITYCOL() { return GetToken(TSqlParser.IDENTITYCOL, 0); }
		public ITerminalNode IIF() { return GetToken(TSqlParser.IIF, 0); }
		public ITerminalNode INCLUDE() { return GetToken(TSqlParser.INCLUDE, 0); }
		public ITerminalNode INCLUDE_NULL_VALUES() { return GetToken(TSqlParser.INCLUDE_NULL_VALUES, 0); }
		public ITerminalNode INCREMENT() { return GetToken(TSqlParser.INCREMENT, 0); }
		public ITerminalNode INFINITE() { return GetToken(TSqlParser.INFINITE, 0); }
		public ITerminalNode INSTEAD() { return GetToken(TSqlParser.INSTEAD, 0); }
		public ITerminalNode IPV4_ADDR() { return GetToken(TSqlParser.IPV4_ADDR, 0); }
		public ITerminalNode IPV4_OCTECT() { return GetToken(TSqlParser.IPV4_OCTECT, 0); }
		public ITerminalNode IPV6_ADDR() { return GetToken(TSqlParser.IPV6_ADDR, 0); }
		public ITerminalNode ISNULL() { return GetToken(TSqlParser.ISNULL, 0); }
		public ITerminalNode JOB() { return GetToken(TSqlParser.JOB, 0); }
		public ITerminalNode JSON() { return GetToken(TSqlParser.JSON, 0); }
		public ITerminalNode KERBEROS() { return GetToken(TSqlParser.KERBEROS, 0); }
		public ITerminalNode KEY_PATH() { return GetToken(TSqlParser.KEY_PATH, 0); }
		public ITerminalNode KEY_STORE_PROVIDER_NAME() { return GetToken(TSqlParser.KEY_STORE_PROVIDER_NAME, 0); }
		public ITerminalNode LANGUAGE() { return GetToken(TSqlParser.LANGUAGE, 0); }
		public ITerminalNode LESS() { return GetToken(TSqlParser.LESS, 0); }
		public ITerminalNode LIBRARY() { return GetToken(TSqlParser.LIBRARY, 0); }
		public ITerminalNode LIFETIME() { return GetToken(TSqlParser.LIFETIME, 0); }
		public ITerminalNode LINE_COMMENT() { return GetToken(TSqlParser.LINE_COMMENT, 0); }
		public ITerminalNode LINUX() { return GetToken(TSqlParser.LINUX, 0); }
		public ITerminalNode LISTENER_IP() { return GetToken(TSqlParser.LISTENER_IP, 0); }
		public ITerminalNode LISTENER_PORT() { return GetToken(TSqlParser.LISTENER_PORT, 0); }
		public ITerminalNode LOAD() { return GetToken(TSqlParser.LOAD, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode LOCAL_SERVICE_NAME() { return GetToken(TSqlParser.LOCAL_SERVICE_NAME, 0); }
		public ITerminalNode LOG() { return GetToken(TSqlParser.LOG, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode MATCHED() { return GetToken(TSqlParser.MATCHED, 0); }
		public ITerminalNode MAXTRANSFER() { return GetToken(TSqlParser.MAXTRANSFER, 0); }
		public ITerminalNode MAXVALUE() { return GetToken(TSqlParser.MAXVALUE, 0); }
		public ITerminalNode MAX_DISPATCH_LATENCY() { return GetToken(TSqlParser.MAX_DISPATCH_LATENCY, 0); }
		public ITerminalNode MAX_EVENT_SIZE() { return GetToken(TSqlParser.MAX_EVENT_SIZE, 0); }
		public ITerminalNode MAX_OUTSTANDING_IO_PER_VOLUME() { return GetToken(TSqlParser.MAX_OUTSTANDING_IO_PER_VOLUME, 0); }
		public ITerminalNode MAX_SIZE() { return GetToken(TSqlParser.MAX_SIZE, 0); }
		public ITerminalNode MEDIADESCRIPTION() { return GetToken(TSqlParser.MEDIADESCRIPTION, 0); }
		public ITerminalNode MEDIANAME() { return GetToken(TSqlParser.MEDIANAME, 0); }
		public ITerminalNode MEMBER() { return GetToken(TSqlParser.MEMBER, 0); }
		public ITerminalNode MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT() { return GetToken(TSqlParser.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT, 0); }
		public ITerminalNode MEMORY_PARTITION_MODE() { return GetToken(TSqlParser.MEMORY_PARTITION_MODE, 0); }
		public ITerminalNode MESSAGE_FORWARDING() { return GetToken(TSqlParser.MESSAGE_FORWARDING, 0); }
		public ITerminalNode MESSAGE_FORWARD_SIZE() { return GetToken(TSqlParser.MESSAGE_FORWARD_SIZE, 0); }
		public ITerminalNode MINUS() { return GetToken(TSqlParser.MINUS, 0); }
		public ITerminalNode MINUS_ASSIGN() { return GetToken(TSqlParser.MINUS_ASSIGN, 0); }
		public ITerminalNode MINVALUE() { return GetToken(TSqlParser.MINVALUE, 0); }
		public ITerminalNode MIRROR() { return GetToken(TSqlParser.MIRROR, 0); }
		public ITerminalNode MODULE() { return GetToken(TSqlParser.MODULE, 0); }
		public ITerminalNode MOD_ASSIGN() { return GetToken(TSqlParser.MOD_ASSIGN, 0); }
		public ITerminalNode MULT_ASSIGN() { return GetToken(TSqlParser.MULT_ASSIGN, 0); }
		public ITerminalNode MUST_CHANGE() { return GetToken(TSqlParser.MUST_CHANGE, 0); }
		public ITerminalNode NATIVE_COMPILATION() { return GetToken(TSqlParser.NATIVE_COMPILATION, 0); }
		public ITerminalNode NEGOTIATE() { return GetToken(TSqlParser.NEGOTIATE, 0); }
		public ITerminalNode NOFORMAT() { return GetToken(TSqlParser.NOFORMAT, 0); }
		public ITerminalNode NOINIT() { return GetToken(TSqlParser.NOINIT, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode NOREWIND() { return GetToken(TSqlParser.NOREWIND, 0); }
		public ITerminalNode NOSKIP() { return GetToken(TSqlParser.NOSKIP, 0); }
		public ITerminalNode NOTIFICATION() { return GetToken(TSqlParser.NOTIFICATION, 0); }
		public ITerminalNode NOUNLOAD() { return GetToken(TSqlParser.NOUNLOAD, 0); }
		public ITerminalNode NO_CHECKSUM() { return GetToken(TSqlParser.NO_CHECKSUM, 0); }
		public ITerminalNode NO_COMPRESSION() { return GetToken(TSqlParser.NO_COMPRESSION, 0); }
		public ITerminalNode NO_EVENT_LOSS() { return GetToken(TSqlParser.NO_EVENT_LOSS, 0); }
		public ITerminalNode NTLM() { return GetToken(TSqlParser.NTLM, 0); }
		public ITerminalNode NULL() { return GetToken(TSqlParser.NULL, 0); }
		public ITerminalNode OLD_PASSWORD() { return GetToken(TSqlParser.OLD_PASSWORD, 0); }
		public ITerminalNode ON_FAILURE() { return GetToken(TSqlParser.ON_FAILURE, 0); }
		public ITerminalNode OR_ASSIGN() { return GetToken(TSqlParser.OR_ASSIGN, 0); }
		public ITerminalNode OVERRIDE() { return GetToken(TSqlParser.OVERRIDE, 0); }
		public ITerminalNode PARAM_NODE() { return GetToken(TSqlParser.PARAM_NODE, 0); }
		public ITerminalNode PARTIAL() { return GetToken(TSqlParser.PARTIAL, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode PERMISSION_SET() { return GetToken(TSqlParser.PERMISSION_SET, 0); }
		public ITerminalNode PER_CPU() { return GetToken(TSqlParser.PER_CPU, 0); }
		public ITerminalNode PER_DB() { return GetToken(TSqlParser.PER_DB, 0); }
		public ITerminalNode PER_NODE() { return GetToken(TSqlParser.PER_NODE, 0); }
		public ITerminalNode PLATFORM() { return GetToken(TSqlParser.PLATFORM, 0); }
		public ITerminalNode PLUS() { return GetToken(TSqlParser.PLUS, 0); }
		public ITerminalNode PLUS_ASSIGN() { return GetToken(TSqlParser.PLUS_ASSIGN, 0); }
		public ITerminalNode POLICY() { return GetToken(TSqlParser.POLICY, 0); }
		public ITerminalNode PRECISION() { return GetToken(TSqlParser.PRECISION, 0); }
		public ITerminalNode PREDICATE() { return GetToken(TSqlParser.PREDICATE, 0); }
		public ITerminalNode PROCESS() { return GetToken(TSqlParser.PROCESS, 0); }
		public ITerminalNode PUSHDOWN() { return GetToken(TSqlParser.PUSHDOWN, 0); }
		public ITerminalNode PYTHON() { return GetToken(TSqlParser.PYTHON, 0); }
		public ITerminalNode QUOTED_HOST_AND_PORT() { return GetToken(TSqlParser.QUOTED_HOST_AND_PORT, 0); }
		public ITerminalNode QUOTED_URL() { return GetToken(TSqlParser.QUOTED_URL, 0); }
		public ITerminalNode READ_WRITE_FILEGROUPS() { return GetToken(TSqlParser.READ_WRITE_FILEGROUPS, 0); }
		public ITerminalNode REAL() { return GetToken(TSqlParser.REAL, 0); }
		public ITerminalNode REGENERATE() { return GetToken(TSqlParser.REGENERATE, 0); }
		public ITerminalNode RELATED_CONVERSATION() { return GetToken(TSqlParser.RELATED_CONVERSATION, 0); }
		public ITerminalNode RELATED_CONVERSATION_GROUP() { return GetToken(TSqlParser.RELATED_CONVERSATION_GROUP, 0); }
		public ITerminalNode REQUIRED() { return GetToken(TSqlParser.REQUIRED, 0); }
		public ITerminalNode RESET() { return GetToken(TSqlParser.RESET, 0); }
		public ITerminalNode RESTART() { return GetToken(TSqlParser.RESTART, 0); }
		public ITerminalNode RESULT_SETS() { return GetToken(TSqlParser.RESULT_SETS, 0); }
		public ITerminalNode RESUME() { return GetToken(TSqlParser.RESUME, 0); }
		public ITerminalNode RETAINDAYS() { return GetToken(TSqlParser.RETAINDAYS, 0); }
		public ITerminalNode REWIND() { return GetToken(TSqlParser.REWIND, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public ITerminalNode ROWGUIDCOL() { return GetToken(TSqlParser.ROWGUIDCOL, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode RSA_1024() { return GetToken(TSqlParser.RSA_1024, 0); }
		public ITerminalNode RSA_2048() { return GetToken(TSqlParser.RSA_2048, 0); }
		public ITerminalNode RSA_3072() { return GetToken(TSqlParser.RSA_3072, 0); }
		public ITerminalNode RSA_4096() { return GetToken(TSqlParser.RSA_4096, 0); }
		public ITerminalNode RSA_512() { return GetToken(TSqlParser.RSA_512, 0); }
		public ITerminalNode SAFE() { return GetToken(TSqlParser.SAFE, 0); }
		public ITerminalNode SCHEDULER() { return GetToken(TSqlParser.SCHEDULER, 0); }
		public ITerminalNode SCHEME() { return GetToken(TSqlParser.SCHEME, 0); }
		public ITerminalNode SECURITYAUDIT() { return GetToken(TSqlParser.SECURITYAUDIT, 0); }
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode SERVICE_BROKER() { return GetToken(TSqlParser.SERVICE_BROKER, 0); }
		public ITerminalNode SERVICE_NAME() { return GetToken(TSqlParser.SERVICE_NAME, 0); }
		public ITerminalNode SESSION() { return GetToken(TSqlParser.SESSION, 0); }
		public ITerminalNode SESSION_USER() { return GetToken(TSqlParser.SESSION_USER, 0); }
		public ITerminalNode SHARP() { return GetToken(TSqlParser.SHARP, 0); }
		public ITerminalNode SINGLE_QUOTE() { return GetToken(TSqlParser.SINGLE_QUOTE, 0); }
		public ITerminalNode SKIP_KEYWORD() { return GetToken(TSqlParser.SKIP_KEYWORD, 0); }
		public ITerminalNode SOFTNUMA() { return GetToken(TSqlParser.SOFTNUMA, 0); }
		public ITerminalNode SPACE() { return GetToken(TSqlParser.SPACE, 0); }
		public ITerminalNode SPECIFICATION() { return GetToken(TSqlParser.SPECIFICATION, 0); }
		public ITerminalNode SQLDUMPERFLAGS() { return GetToken(TSqlParser.SQLDUMPERFLAGS, 0); }
		public ITerminalNode SQLDUMPERPATH() { return GetToken(TSqlParser.SQLDUMPERPATH, 0); }
		public ITerminalNode SQLDUMPERTIMEOUT() { return GetToken(TSqlParser.SQLDUMPERTIMEOUT, 0); }
		public ITerminalNode SQUARE_BRACKET_ID() { return GetToken(TSqlParser.SQUARE_BRACKET_ID, 0); }
		public ITerminalNode STAR() { return GetToken(TSqlParser.STAR, 0); }
		public ITerminalNode STARTED() { return GetToken(TSqlParser.STARTED, 0); }
		public ITerminalNode STARTUP_STATE() { return GetToken(TSqlParser.STARTUP_STATE, 0); }
		public ITerminalNode STATS() { return GetToken(TSqlParser.STATS, 0); }
		public ITerminalNode STATUSONLY() { return GetToken(TSqlParser.STATUSONLY, 0); }
		public ITerminalNode STOP() { return GetToken(TSqlParser.STOP, 0); }
		public ITerminalNode STOPPED() { return GetToken(TSqlParser.STOPPED, 0); }
		public ITerminalNode STOP_ON_ERROR() { return GetToken(TSqlParser.STOP_ON_ERROR, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode SUBSCRIPTION() { return GetToken(TSqlParser.SUBSCRIPTION, 0); }
		public ITerminalNode SUPPORTED() { return GetToken(TSqlParser.SUPPORTED, 0); }
		public ITerminalNode SYSTEM_USER() { return GetToken(TSqlParser.SYSTEM_USER, 0); }
		public ITerminalNode TAPE() { return GetToken(TSqlParser.TAPE, 0); }
		public ITerminalNode TCP() { return GetToken(TSqlParser.TCP, 0); }
		public ITerminalNode TRACK_CAUSALITY() { return GetToken(TSqlParser.TRACK_CAUSALITY, 0); }
		public ITerminalNode TRANSFER() { return GetToken(TSqlParser.TRANSFER, 0); }
		public ITerminalNode UNCHECKED() { return GetToken(TSqlParser.UNCHECKED, 0); }
		public ITerminalNode UNDEFINED() { return GetToken(TSqlParser.UNDEFINED, 0); }
		public ITerminalNode UNDERLINE() { return GetToken(TSqlParser.UNDERLINE, 0); }
		public ITerminalNode UNLOCK() { return GetToken(TSqlParser.UNLOCK, 0); }
		public ITerminalNode UNSAFE() { return GetToken(TSqlParser.UNSAFE, 0); }
		public ITerminalNode UOW() { return GetToken(TSqlParser.UOW, 0); }
		public ITerminalNode URL() { return GetToken(TSqlParser.URL, 0); }
		public ITerminalNode USED() { return GetToken(TSqlParser.USED, 0); }
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public ITerminalNode VERBOSELOGGING() { return GetToken(TSqlParser.VERBOSELOGGING, 0); }
		public ITerminalNode VISIBILITY() { return GetToken(TSqlParser.VISIBILITY, 0); }
		public ITerminalNode WINDOWS() { return GetToken(TSqlParser.WINDOWS, 0); }
		public ITerminalNode WITHIN() { return GetToken(TSqlParser.WITHIN, 0); }
		public ITerminalNode WITHOUT() { return GetToken(TSqlParser.WITHOUT, 0); }
		public ITerminalNode WITHOUT_ARRAY_WRAPPER() { return GetToken(TSqlParser.WITHOUT_ARRAY_WRAPPER, 0); }
		public ITerminalNode WITNESS() { return GetToken(TSqlParser.WITNESS, 0); }
		public ITerminalNode XMLDATA() { return GetToken(TSqlParser.XMLDATA, 0); }
		public ITerminalNode XMLSCHEMA() { return GetToken(TSqlParser.XMLSCHEMA, 0); }
		public ITerminalNode XOR_ASSIGN() { return GetToken(TSqlParser.XOR_ASSIGN, 0); }
		public ITerminalNode XSINIL() { return GetToken(TSqlParser.XSINIL, 0); }
		public ITerminalNode MDY() { return GetToken(TSqlParser.MDY, 0); }
		public ITerminalNode DMY() { return GetToken(TSqlParser.DMY, 0); }
		public ITerminalNode YMD() { return GetToken(TSqlParser.YMD, 0); }
		public ITerminalNode YDM() { return GetToken(TSqlParser.YDM, 0); }
		public ITerminalNode MYD() { return GetToken(TSqlParser.MYD, 0); }
		public ITerminalNode DYM() { return GetToken(TSqlParser.DYM, 0); }
		public Simple_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSimple_id(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSimple_id(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_id(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_idContext simple_id() {
		Simple_idContext _localctx = new Simple_idContext(_ctx, State);
		EnterRule(_localctx, 996, RULE_simple_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10952;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSENT) | (1L << AES) | (1L << ALLOW_CONNECTIONS) | (1L << ALLOW_MULTIPLE_EVENT_LOSS) | (1L << ALLOW_SINGLE_EVENT_LOSS) | (1L << ANONYMOUS) | (1L << APPEND) | (1L << APPLICATION) | (1L << ASYMMETRIC) | (1L << ASYNCHRONOUS_COMMIT) | (1L << AUTHENTICATION) | (1L << AUTOMATED_BACKUP_PREFERENCE) | (1L << AUTOMATIC) | (1L << AVAILABILITY_MODE) | (1L << BACKSLASH) | (1L << BEFORE) | (1L << BLOCK) | (1L << BLOCKSIZE) | (1L << BLOCKING_HIERARCHY) | (1L << BUFFER) | (1L << BUFFERCOUNT) | (1L << CACHE) | (1L << CALLED) | (1L << CERTIFICATE) | (1L << CHANGETABLE) | (1L << CHANGES) | (1L << CHECK_POLICY) | (1L << CHECK_EXPIRATION) | (1L << CLASSIFIER_FUNCTION) | (1L << CLUSTER) | (1L << COMPRESSION) | (1L << CONNECTION_OPTIONS) | (1L << CONFIGURATION) | (1L << CONTAINMENT))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CONTEXT - 65)) | (1L << (CONTINUE_AFTER_ERROR - 65)) | (1L << (CONTRACT - 65)) | (1L << (CONTRACT_NAME - 65)) | (1L << (CONVERSATION - 65)) | (1L << (COPY_ONLY - 65)) | (1L << (CURRENT_TIMESTAMP - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA_COMPRESSION - 65)) | (1L << (DATA_SOURCE - 65)) | (1L << (DATABASE_MIRRORING - 65)) | (1L << (DEFAULT_DATABASE - 65)) | (1L << (DEFAULT_SCHEMA - 65)) | (1L << (DIAGNOSTICS - 65)) | (1L << (DIFFERENTIAL - 65)) | (1L << (DISK - 65)) | (1L << (DOUBLE_BACK_SLASH - 65)) | (1L << (DOUBLE_FORWARD_SLASH - 65)) | (1L << (DTC_SUPPORT - 65)) | (1L << (DUMP - 65)) | (1L << (ENABLED - 65)) | (1L << (ENDPOINT - 65)) | (1L << (ERROR - 65)) | (1L << (EVENT - 65)) | (1L << (EVENTDATA - 65)) | (1L << (EVENT_RETENTION_MODE - 65)) | (1L << (EXECUTABLE_FILE - 65)) | (1L << (EXPIREDATE - 65)) | (1L << (EXTENSION - 65)) | (1L << (EXTERNAL_ACCESS - 65)) | (1L << (FAILOVER - 65)) | (1L << (FAILURECONDITIONLEVEL - 65)) | (1L << (FAN_IN - 65)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (FILENAME - 130)) | (1L << (FILLFACTOR - 130)) | (1L << (FILE_SNAPSHOT - 130)) | (1L << (FORCESEEK - 130)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 130)) | (1L << (GET - 130)) | (1L << (GOVERNOR - 130)) | (1L << (HASHED - 130)) | (1L << (HEALTHCHECKTIMEOUT - 130)) | (1L << (IDENTITYCOL - 130)) | (1L << (IIF - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCREMENT - 130)) | (1L << (INFINITE - 130)) | (1L << (INIT - 130)) | (1L << (INSTEAD - 130)) | (1L << (IPV4_ADDR - 130)) | (1L << (IPV6_ADDR - 130)) | (1L << (ISNULL - 130)) | (1L << (KERBEROS - 130)) | (1L << (KEY - 130)) | (1L << (KEY_PATH - 130)) | (1L << (KEY_STORE_PROVIDER_NAME - 130)) | (1L << (LANGUAGE - 130)) | (1L << (LIBRARY - 130)) | (1L << (LIFETIME - 130)) | (1L << (LINUX - 130)) | (1L << (LISTENER_IP - 130)) | (1L << (LISTENER_PORT - 130)) | (1L << (LOAD - 130)) | (1L << (LOCAL_SERVICE_NAME - 130)) | (1L << (LOG - 130)) | (1L << (MATCHED - 130)) | (1L << (MASTER - 130)) | (1L << (MAX_MEMORY - 130)) | (1L << (MAXTRANSFER - 130)) | (1L << (MAXVALUE - 130)) | (1L << (MAX_DISPATCH_LATENCY - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (MAX_EVENT_SIZE - 194)) | (1L << (MAX_SIZE - 194)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 194)) | (1L << (MEDIADESCRIPTION - 194)) | (1L << (MEDIANAME - 194)) | (1L << (MEMBER - 194)) | (1L << (MEMORY_PARTITION_MODE - 194)) | (1L << (MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT - 194)) | (1L << (MESSAGE_FORWARDING - 194)) | (1L << (MESSAGE_FORWARD_SIZE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MIRROR - 194)) | (1L << (MUST_CHANGE - 194)) | (1L << (NATIVE_COMPILATION - 194)) | (1L << (NEGOTIATE - 194)) | (1L << (NOFORMAT - 194)) | (1L << (NOINIT - 194)) | (1L << (NONE - 194)) | (1L << (NOREWIND - 194)) | (1L << (NOSKIP - 194)) | (1L << (NOUNLOAD - 194)) | (1L << (NO_CHECKSUM - 194)) | (1L << (NO_COMPRESSION - 194)) | (1L << (NO_EVENT_LOSS - 194)) | (1L << (NOTIFICATION - 194)) | (1L << (NTLM - 194)) | (1L << (NULL - 194)) | (1L << (OFFSETS - 194)) | (1L << (OLD_PASSWORD - 194)) | (1L << (ON_FAILURE - 194)) | (1L << (PAGE - 194)) | (1L << (PARAM_NODE - 194)) | (1L << (PARTIAL - 194)) | (1L << (PASSWORD - 194)) | (1L << (PERMISSION_SET - 194)) | (1L << (PER_CPU - 194)) | (1L << (PER_DB - 194)) | (1L << (PER_NODE - 194)) | (1L << (PLATFORM - 194)) | (1L << (POLICY - 194)) | (1L << (PRECISION - 194)) | (1L << (PREDICATE - 194)))) != 0) || ((((_la - 262)) & ~0x3f) == 0 && ((1L << (_la - 262)) & ((1L << (PROCESS - 262)) | (1L << (PUBLIC - 262)) | (1L << (PUSHDOWN - 262)) | (1L << (PYTHON - 262)) | (1L << (R - 262)) | (1L << (RAW - 262)) | (1L << (READ_WRITE_FILEGROUPS - 262)) | (1L << (REGENERATE - 262)) | (1L << (RELATED_CONVERSATION - 262)) | (1L << (RELATED_CONVERSATION_GROUP - 262)) | (1L << (REQUIRED - 262)) | (1L << (RESET - 262)) | (1L << (RESTART - 262)) | (1L << (RESULT_SETS - 262)) | (1L << (RESUME - 262)) | (1L << (RETAINDAYS - 262)) | (1L << (RETURN - 262)) | (1L << (RETURNS - 262)) | (1L << (REWIND - 262)) | (1L << (ROLE - 262)) | (1L << (ROWCOUNT - 262)) | (1L << (ROWGUIDCOL - 262)) | (1L << (RSA_512 - 262)) | (1L << (RSA_1024 - 262)) | (1L << (RSA_2048 - 262)) | (1L << (RSA_3072 - 262)) | (1L << (RSA_4096 - 262)) | (1L << (SAFETY - 262)) | (1L << (SAFE - 262)) | (1L << (SCHEDULER - 262)) | (1L << (SCHEME - 262)) | (1L << (SECURITYAUDIT - 262)) | (1L << (SERVER - 262)) | (1L << (SERVICE - 262)) | (1L << (SERVICE_BROKER - 262)) | (1L << (SERVICE_NAME - 262)) | (1L << (SESSION - 262)) | (1L << (SESSION_USER - 262)) | (1L << (SID - 262)) | (1L << (SKIP_KEYWORD - 262)) | (1L << (SOFTNUMA - 262)))) != 0) || ((((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & ((1L << (SOURCE - 326)) | (1L << (SPECIFICATION - 326)) | (1L << (SPLIT - 326)) | (1L << (SQLDUMPERFLAGS - 326)) | (1L << (SQLDUMPERPATH - 326)) | (1L << (SQLDUMPERTIMEOUT - 326)) | (1L << (STATE - 326)) | (1L << (STATS - 326)) | (1L << (START - 326)) | (1L << (STARTED - 326)) | (1L << (STARTUP_STATE - 326)) | (1L << (STOP - 326)) | (1L << (STOPPED - 326)) | (1L << (STOP_ON_ERROR - 326)) | (1L << (SUPPORTED - 326)) | (1L << (SYSTEM_USER - 326)) | (1L << (TAPE - 326)) | (1L << (TARGET - 326)) | (1L << (TCP - 326)) | (1L << (TRACK_CAUSALITY - 326)) | (1L << (TRANSFER - 326)) | (1L << (UNCHECKED - 326)) | (1L << (UNLOCK - 326)) | (1L << (UNSAFE - 326)) | (1L << (URL - 326)) | (1L << (USED - 326)) | (1L << (USER - 326)) | (1L << (VERBOSELOGGING - 326)) | (1L << (VISIBILITY - 326)) | (1L << (WINDOWS - 326)) | (1L << (WITHIN - 326)) | (1L << (WITHOUT - 326)) | (1L << (WITNESS - 326)) | (1L << (ABSOLUTE - 326)) | (1L << (ACCENT_SENSITIVITY - 326)) | (1L << (ACTION - 326)) | (1L << (ACTIVATION - 326)))) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & ((1L << (ACTIVE - 390)) | (1L << (ADDRESS - 390)) | (1L << (AES_128 - 390)) | (1L << (AES_192 - 390)) | (1L << (AES_256 - 390)) | (1L << (AFFINITY - 390)) | (1L << (AFTER - 390)) | (1L << (AGGREGATE - 390)) | (1L << (ALGORITHM - 390)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 390)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 390)) | (1L << (ALLOWED - 390)) | (1L << (ANSI_NULL_DEFAULT - 390)) | (1L << (ANSI_NULLS - 390)) | (1L << (ANSI_PADDING - 390)) | (1L << (ANSI_WARNINGS - 390)) | (1L << (APPLICATION_LOG - 390)) | (1L << (APPLY - 390)) | (1L << (ARITHABORT - 390)) | (1L << (ASSEMBLY - 390)) | (1L << (AUDIT - 390)) | (1L << (AUDIT_GUID - 390)) | (1L << (AUTO - 390)) | (1L << (AUTO_CLEANUP - 390)) | (1L << (AUTO_CLOSE - 390)) | (1L << (AUTO_CREATE_STATISTICS - 390)) | (1L << (AUTO_SHRINK - 390)) | (1L << (AUTO_UPDATE_STATISTICS - 390)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 390)) | (1L << (AVAILABILITY - 390)) | (1L << (AVG - 390)) | (1L << (BACKUP_PRIORITY - 390)) | (1L << (BEGIN_DIALOG - 390)) | (1L << (BIGINT - 390)) | (1L << (BINARY_BASE64 - 390)) | (1L << (BINARY_CHECKSUM - 390)) | (1L << (BINDING - 390)) | (1L << (BLOB_STORAGE - 390)) | (1L << (BROKER - 390)) | (1L << (BROKER_INSTANCE - 390)) | (1L << (BUCKET_COUNT - 390)) | (1L << (BULK_LOGGED - 390)) | (1L << (CALLER - 390)) | (1L << (CAP_CPU_PERCENT - 390)) | (1L << (CAST - 390)) | (1L << (CATALOG - 390)) | (1L << (CATCH - 390)) | (1L << (CHANGE_RETENTION - 390)) | (1L << (CHANGE_TRACKING - 390)) | (1L << (CHECKSUM - 390)) | (1L << (CHECKSUM_AGG - 390)) | (1L << (CLEANUP - 390)) | (1L << (COLLECTION - 390)) | (1L << (COLUMN_MASTER_KEY - 390)) | (1L << (COMMITTED - 390)) | (1L << (COMPATIBILITY_LEVEL - 390)) | (1L << (CONCAT - 390)) | (1L << (CONCAT_NULL_YIELDS_NULL - 390)) | (1L << (CONTENT - 390)) | (1L << (CONTROL - 390)) | (1L << (COOKIE - 390)) | (1L << (COUNT - 390)) | (1L << (COUNT_BIG - 390)) | (1L << (COUNTER - 390)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (CPU - 454)) | (1L << (CREATE_NEW - 454)) | (1L << (CREATION_DISPOSITION - 454)) | (1L << (CREDENTIAL - 454)) | (1L << (CRYPTOGRAPHIC - 454)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 454)) | (1L << (CURSOR_DEFAULT - 454)) | (1L << (DATA - 454)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 454)) | (1L << (DATEADD - 454)) | (1L << (DATEDIFF - 454)) | (1L << (DATEFIRST - 454)) | (1L << (DATEFORMAT - 454)) | (1L << (DATENAME - 454)) | (1L << (DATEPART - 454)) | (1L << (DAYS - 454)) | (1L << (DB_CHAINING - 454)) | (1L << (DB_FAILOVER - 454)) | (1L << (DECRYPTION - 454)) | (1L << (DEFAULT_DOUBLE_QUOTE - 454)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 454)) | (1L << (DEFAULT_LANGUAGE - 454)) | (1L << (DELAY - 454)) | (1L << (DELAYED_DURABILITY - 454)) | (1L << (DELETED - 454)) | (1L << (DENSE_RANK - 454)) | (1L << (DEPENDENTS - 454)) | (1L << (DES - 454)) | (1L << (DESCRIPTION - 454)) | (1L << (DESX - 454)) | (1L << (DHCP - 454)) | (1L << (DIALOG - 454)) | (1L << (DIRECTORY_NAME - 454)) | (1L << (DISABLE - 454)) | (1L << (DISABLE_BROKER - 454)) | (1L << (DISABLED - 454)) | (1L << (DISK_DRIVE - 454)) | (1L << (DOCUMENT - 454)) | (1L << (DYNAMIC - 454)) | (1L << (ELEMENTS - 454)) | (1L << (EMERGENCY - 454)) | (1L << (EMPTY - 454)) | (1L << (ENABLE - 454)) | (1L << (ENABLE_BROKER - 454)) | (1L << (ENCRYPTED_VALUE - 454)) | (1L << (ENCRYPTION - 454)) | (1L << (ENDPOINT_URL - 454)) | (1L << (ERROR_BROKER_CONVERSATIONS - 454)) | (1L << (EXCLUSIVE - 454)) | (1L << (EXECUTABLE - 454)) | (1L << (EXIST - 454)) | (1L << (EXPAND - 454)) | (1L << (EXPIRY_DATE - 454)) | (1L << (EXPLICIT - 454)) | (1L << (FAIL_OPERATION - 454)) | (1L << (FAILOVER_MODE - 454)) | (1L << (FAILURE - 454)) | (1L << (FAILURE_CONDITION_LEVEL - 454)) | (1L << (FAST - 454)) | (1L << (FAST_FORWARD - 454)) | (1L << (FILEGROUP - 454)) | (1L << (FILEGROWTH - 454)) | (1L << (FILEPATH - 454)) | (1L << (FILESTREAM - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (FILTER - 518)) | (1L << (FIRST - 518)) | (1L << (FIRST_VALUE - 518)) | (1L << (FOLLOWING - 518)) | (1L << (FORCE - 518)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 518)) | (1L << (FORCED - 518)) | (1L << (FORMAT - 518)) | (1L << (FORWARD_ONLY - 518)) | (1L << (FULLSCAN - 518)) | (1L << (FULLTEXT - 518)) | (1L << (GB - 518)) | (1L << (GETDATE - 518)) | (1L << (GETUTCDATE - 518)) | (1L << (GLOBAL - 518)) | (1L << (GO - 518)) | (1L << (GROUP_MAX_REQUESTS - 518)) | (1L << (GROUPING - 518)) | (1L << (GROUPING_ID - 518)) | (1L << (HADOOP - 518)) | (1L << (HADR - 518)) | (1L << (HASH - 518)) | (1L << (HEALTH_CHECK_TIMEOUT - 518)) | (1L << (HIGH - 518)) | (1L << (HONOR_BROKER_PRIORITY - 518)) | (1L << (HOURS - 518)) | (1L << (IDENTITY_VALUE - 518)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 518)) | (1L << (IMMEDIATE - 518)) | (1L << (IMPERSONATE - 518)) | (1L << (IMPORTANCE - 518)) | (1L << (INCLUDE_NULL_VALUES - 518)) | (1L << (INCREMENTAL - 518)) | (1L << (INITIATOR - 518)) | (1L << (INPUT - 518)) | (1L << (INSENSITIVE - 518)) | (1L << (INSERTED - 518)) | (1L << (INT - 518)) | (1L << (IP - 518)) | (1L << (ISOLATION - 518)) | (1L << (JOB - 518)) | (1L << (JSON - 518)) | (1L << (KB - 518)) | (1L << (KEEP - 518)) | (1L << (KEEPFIXED - 518)) | (1L << (KEY_SOURCE - 518)) | (1L << (KEYS - 518)) | (1L << (KEYSET - 518)) | (1L << (LAG - 518)) | (1L << (LAST - 518)) | (1L << (LAST_VALUE - 518)) | (1L << (LEAD - 518)) | (1L << (LEVEL - 518)) | (1L << (LIST - 518)) | (1L << (LISTENER - 518)) | (1L << (LISTENER_URL - 518)) | (1L << (LOB_COMPACTION - 518)) | (1L << (LOCAL - 518)) | (1L << (LOCATION - 518)) | (1L << (LOCK - 518)) | (1L << (LOCK_ESCALATION - 518)) | (1L << (LOGIN - 518)) | (1L << (LOOP - 518)) | (1L << (LOW - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (MANUAL - 582)) | (1L << (MARK - 582)) | (1L << (MATERIALIZED - 582)) | (1L << (MAX - 582)) | (1L << (MAX_CPU_PERCENT - 582)) | (1L << (MAX_DOP - 582)) | (1L << (MAX_FILES - 582)) | (1L << (MAX_IOPS_PER_VOLUME - 582)) | (1L << (MAX_MEMORY_PERCENT - 582)) | (1L << (MAX_PROCESSES - 582)) | (1L << (MAX_QUEUE_READERS - 582)) | (1L << (MAX_ROLLOVER_FILES - 582)) | (1L << (MAXDOP - 582)) | (1L << (MAXRECURSION - 582)) | (1L << (MAXSIZE - 582)) | (1L << (MB - 582)) | (1L << (MEDIUM - 582)) | (1L << (MEMORY_OPTIMIZED_DATA - 582)) | (1L << (MESSAGE - 582)) | (1L << (MIN - 582)) | (1L << (MIN_ACTIVE_ROWVERSION - 582)) | (1L << (MIN_CPU_PERCENT - 582)) | (1L << (MIN_IOPS_PER_VOLUME - 582)) | (1L << (MIN_MEMORY_PERCENT - 582)) | (1L << (MINUTES - 582)) | (1L << (MIRROR_ADDRESS - 582)) | (1L << (MIXED_PAGE_ALLOCATION - 582)) | (1L << (MODE - 582)) | (1L << (MODIFY - 582)) | (1L << (MOVE - 582)) | (1L << (MULTI_USER - 582)) | (1L << (NAME - 582)) | (1L << (NESTED_TRIGGERS - 582)) | (1L << (NEW_ACCOUNT - 582)) | (1L << (NEW_BROKER - 582)) | (1L << (NEW_PASSWORD - 582)) | (1L << (NEXT - 582)) | (1L << (NO - 582)) | (1L << (NO_TRUNCATE - 582)) | (1L << (NO_WAIT - 582)) | (1L << (NOCOUNT - 582)) | (1L << (NODES - 582)) | (1L << (NOEXPAND - 582)) | (1L << (NON_TRANSACTED_ACCESS - 582)) | (1L << (NORECOMPUTE - 582)) | (1L << (NORECOVERY - 582)) | (1L << (NOWAIT - 582)) | (1L << (NTILE - 582)) | (1L << (NUMANODE - 582)) | (1L << (NUMBER - 582)) | (1L << (NUMERIC_ROUNDABORT - 582)) | (1L << (OBJECT - 582)) | (1L << (OFFLINE - 582)) | (1L << (OFFSET - 582)) | (1L << (OLD_ACCOUNT - 582)) | (1L << (ONLINE - 582)) | (1L << (ONLY - 582)) | (1L << (OPEN_EXISTING - 582)) | (1L << (OPTIMISTIC - 582)) | (1L << (OPTIMIZE - 582)) | (1L << (OUT - 582)) | (1L << (OUTPUT - 582)) | (1L << (OVERRIDE - 582)) | (1L << (OWNER - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (PAGE_VERIFY - 646)) | (1L << (PARAMETERIZATION - 646)) | (1L << (PARTITION - 646)) | (1L << (PARTITIONS - 646)) | (1L << (PARTNER - 646)) | (1L << (PATH - 646)) | (1L << (POISON_MESSAGE_HANDLING - 646)) | (1L << (POOL - 646)) | (1L << (PORT - 646)) | (1L << (PRECEDING - 646)) | (1L << (PRIMARY_ROLE - 646)) | (1L << (PRIOR - 646)) | (1L << (PRIORITY - 646)) | (1L << (PRIORITY_LEVEL - 646)) | (1L << (PRIVATE - 646)) | (1L << (PRIVATE_KEY - 646)) | (1L << (PRIVILEGES - 646)) | (1L << (PROCEDURE_NAME - 646)) | (1L << (PROPERTY - 646)) | (1L << (PROVIDER - 646)) | (1L << (PROVIDER_KEY_NAME - 646)) | (1L << (QUERY - 646)) | (1L << (QUEUE - 646)) | (1L << (QUEUE_DELAY - 646)) | (1L << (QUOTED_IDENTIFIER - 646)) | (1L << (RANGE - 646)) | (1L << (RANK - 646)) | (1L << (RC2 - 646)) | (1L << (RC4 - 646)) | (1L << (RC4_128 - 646)) | (1L << (READ_COMMITTED_SNAPSHOT - 646)) | (1L << (READ_ONLY - 646)) | (1L << (READ_ONLY_ROUTING_LIST - 646)) | (1L << (READ_WRITE - 646)) | (1L << (READONLY - 646)) | (1L << (REBUILD - 646)) | (1L << (RECEIVE - 646)) | (1L << (RECOMPILE - 646)) | (1L << (RECOVERY - 646)) | (1L << (RECURSIVE_TRIGGERS - 646)) | (1L << (RELATIVE - 646)) | (1L << (REMOTE - 646)) | (1L << (REMOTE_SERVICE_NAME - 646)) | (1L << (REMOVE - 646)) | (1L << (REORGANIZE - 646)) | (1L << (REPEATABLE - 646)) | (1L << (REPLICA - 646)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 646)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 646)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 646)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 646)) | (1L << (RESERVE_DISK_SPACE - 646)) | (1L << (RESOURCE - 646)) | (1L << (RESOURCE_MANAGER_LOCATION - 646)) | (1L << (RESTRICTED_USER - 646)) | (1L << (RETENTION - 646)) | (1L << (ROBUST - 646)) | (1L << (ROOT - 646)) | (1L << (ROUTE - 646)) | (1L << (ROW - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (ROWGUID - 646)) | (1L << (ROWS - 646)) | (1L << (SAMPLE - 646)))) != 0) || ((((_la - 710)) & ~0x3f) == 0 && ((1L << (_la - 710)) & ((1L << (SCHEMABINDING - 710)) | (1L << (SCOPED - 710)) | (1L << (SCROLL - 710)) | (1L << (SCROLL_LOCKS - 710)) | (1L << (SEARCH - 710)) | (1L << (SECONDARY - 710)) | (1L << (SECONDARY_ONLY - 710)) | (1L << (SECONDARY_ROLE - 710)) | (1L << (SECONDS - 710)) | (1L << (SECRET - 710)) | (1L << (SECURITY - 710)) | (1L << (SECURITY_LOG - 710)) | (1L << (SEEDING_MODE - 710)) | (1L << (SELF - 710)) | (1L << (SEMI_SENSITIVE - 710)) | (1L << (SEND - 710)) | (1L << (SENT - 710)) | (1L << (SEQUENCE - 710)) | (1L << (SERIALIZABLE - 710)) | (1L << (SESSION_TIMEOUT - 710)) | (1L << (SETERROR - 710)) | (1L << (SHARE - 710)) | (1L << (SHOWPLAN - 710)) | (1L << (SIGNATURE - 710)) | (1L << (SIMPLE - 710)) | (1L << (SINGLE_USER - 710)) | (1L << (SIZE - 710)) | (1L << (SMALLINT - 710)) | (1L << (SNAPSHOT - 710)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 710)) | (1L << (STANDBY - 710)) | (1L << (START_DATE - 710)) | (1L << (STATIC - 710)) | (1L << (STATS_STREAM - 710)) | (1L << (STATUS - 710)) | (1L << (STATUSONLY - 710)) | (1L << (STDEV - 710)) | (1L << (STDEVP - 710)) | (1L << (STOPLIST - 710)) | (1L << (STRING_AGG - 710)) | (1L << (STUFF - 710)) | (1L << (SUBJECT - 710)) | (1L << (SUBSCRIPTION - 710)) | (1L << (SUM - 710)) | (1L << (SUSPEND - 710)) | (1L << (SYMMETRIC - 710)) | (1L << (SYNCHRONOUS_COMMIT - 710)) | (1L << (SYNONYM - 710)) | (1L << (SYSTEM - 710)) | (1L << (TAKE - 710)) | (1L << (TARGET_RECOVERY_TIME - 710)) | (1L << (TB - 710)) | (1L << (TEXTIMAGE_ON - 710)) | (1L << (THROW - 710)) | (1L << (TIES - 710)) | (1L << (TIME - 710)) | (1L << (TIMEOUT - 710)) | (1L << (TIMER - 710)) | (1L << (TINYINT - 710)) | (1L << (TORN_PAGE_DETECTION - 710)) | (1L << (TRANSFORM_NOISE_WORDS - 710)) | (1L << (TRIPLE_DES - 710)) | (1L << (TRIPLE_DES_3KEY - 710)) | (1L << (TRUSTWORTHY - 710)))) != 0) || ((((_la - 774)) & ~0x3f) == 0 && ((1L << (_la - 774)) & ((1L << (TRY - 774)) | (1L << (TSQL - 774)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 774)) | (1L << (TYPE - 774)) | (1L << (TYPE_WARNING - 774)) | (1L << (UNBOUNDED - 774)) | (1L << (UNCOMMITTED - 774)) | (1L << (UNDEFINED - 774)) | (1L << (UNKNOWN - 774)) | (1L << (UNLIMITED - 774)) | (1L << (UOW - 774)) | (1L << (USING - 774)) | (1L << (VALID_XML - 774)) | (1L << (VALIDATION - 774)) | (1L << (VALUE - 774)) | (1L << (VAR - 774)) | (1L << (VARP - 774)) | (1L << (VIEW_METADATA - 774)) | (1L << (VIEWS - 774)) | (1L << (WAIT - 774)) | (1L << (WELL_FORMED_XML - 774)) | (1L << (WITHOUT_ARRAY_WRAPPER - 774)) | (1L << (WORK - 774)) | (1L << (WORKLOAD - 774)) | (1L << (XML - 774)) | (1L << (XMLDATA - 774)) | (1L << (XMLNAMESPACES - 774)) | (1L << (XMLSCHEMA - 774)) | (1L << (XSINIL - 774)) | (1L << (DOLLAR_ACTION - 774)) | (1L << (SPACE - 774)) | (1L << (COMMENT - 774)) | (1L << (LINE_COMMENT - 774)) | (1L << (DOUBLE_QUOTE_ID - 774)) | (1L << (SINGLE_QUOTE - 774)) | (1L << (SQUARE_BRACKET_ID - 774)) | (1L << (LOCAL_ID - 774)) | (1L << (DECIMAL - 774)) | (1L << (ID - 774)) | (1L << (QUOTED_URL - 774)) | (1L << (QUOTED_HOST_AND_PORT - 774)) | (1L << (STRING - 774)) | (1L << (BINARY - 774)) | (1L << (FLOAT - 774)) | (1L << (REAL - 774)) | (1L << (EQUAL - 774)) | (1L << (GREATER - 774)) | (1L << (LESS - 774)) | (1L << (EXCLAMATION - 774)) | (1L << (PLUS_ASSIGN - 774)) | (1L << (MINUS_ASSIGN - 774)) | (1L << (MULT_ASSIGN - 774)) | (1L << (DIV_ASSIGN - 774)) | (1L << (MOD_ASSIGN - 774)) | (1L << (AND_ASSIGN - 774)) | (1L << (XOR_ASSIGN - 774)) | (1L << (OR_ASSIGN - 774)) | (1L << (DOUBLE_BAR - 774)) | (1L << (DOT - 774)) | (1L << (UNDERLINE - 774)) | (1L << (AT - 774)) | (1L << (SHARP - 774)) | (1L << (DOLLAR - 774)) | (1L << (LR_BRACKET - 774)))) != 0) || ((((_la - 838)) & ~0x3f) == 0 && ((1L << (_la - 838)) & ((1L << (RR_BRACKET - 838)) | (1L << (COMMA - 838)) | (1L << (SEMI - 838)) | (1L << (COLON - 838)) | (1L << (STAR - 838)) | (1L << (DIVIDE - 838)) | (1L << (MODULE - 838)) | (1L << (PLUS - 838)) | (1L << (MINUS - 838)) | (1L << (BIT_NOT - 838)) | (1L << (BIT_OR - 838)) | (1L << (BIT_AND - 838)) | (1L << (BIT_XOR - 838)) | (1L << (MDY - 838)) | (1L << (DMY - 838)) | (1L << (YMD - 838)) | (1L << (YDM - 838)) | (1L << (MYD - 838)) | (1L << (DYM - 838)) | (1L << (IPV4_OCTECT - 838)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comparison_operatorContext : ParserRuleContext {
		public Comparison_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterComparison_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitComparison_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comparison_operatorContext comparison_operator() {
		Comparison_operatorContext _localctx = new Comparison_operatorContext(_ctx, State);
		EnterRule(_localctx, 998, RULE_comparison_operator);
		try {
			State = 10969;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1537,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10954; Match(EQUAL);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10955; Match(GREATER);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10956; Match(LESS);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10957; Match(LESS);
				State = 10958; Match(EQUAL);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10959; Match(GREATER);
				State = 10960; Match(EQUAL);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 10961; Match(LESS);
				State = 10962; Match(GREATER);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 10963; Match(EXCLAMATION);
				State = 10964; Match(EQUAL);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 10965; Match(EXCLAMATION);
				State = 10966; Match(GREATER);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 10967; Match(EXCLAMATION);
				State = 10968; Match(LESS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_operatorContext : ParserRuleContext {
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAssignment_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAssignment_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_operatorContext assignment_operator() {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(_ctx, State);
		EnterRule(_localctx, 1000, RULE_assignment_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10971;
			_la = _input.La(1);
			if ( !(((((_la - 823)) & ~0x3f) == 0 && ((1L << (_la - 823)) & ((1L << (PLUS_ASSIGN - 823)) | (1L << (MINUS_ASSIGN - 823)) | (1L << (MULT_ASSIGN - 823)) | (1L << (DIV_ASSIGN - 823)) | (1L << (MOD_ASSIGN - 823)) | (1L << (AND_ASSIGN - 823)) | (1L << (XOR_ASSIGN - 823)) | (1L << (OR_ASSIGN - 823)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_sizeContext : ParserRuleContext {
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode KB() { return GetToken(TSqlParser.KB, 0); }
		public ITerminalNode MB() { return GetToken(TSqlParser.MB, 0); }
		public ITerminalNode GB() { return GetToken(TSqlParser.GB, 0); }
		public ITerminalNode TB() { return GetToken(TSqlParser.TB, 0); }
		public File_sizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_size; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFile_size(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFile_size(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile_size(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public File_sizeContext file_size() {
		File_sizeContext _localctx = new File_sizeContext(_ctx, State);
		EnterRule(_localctx, 1002, RULE_file_size);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10973; Match(DECIMAL);
			State = 10975;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==GB || _la==KB || _la==MB || _la==TB || _la==MODULE) {
				{
				State = 10974;
				_la = _input.La(1);
				if ( !(_la==GB || _la==KB || _la==MB || _la==TB || _la==MODULE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 46: return assembly_option_sempred((Assembly_optionContext)_localctx, predIndex);

		case 375: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool assembly_option_sempred(Assembly_optionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(_ctx, 5);

		case 2: return Precpred(_ctx, 4);

		case 3: return Precpred(_ctx, 3);

		case 4: return Precpred(_ctx, 2);

		case 5: return Precpred(_ctx, 10);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x35B\x2AE4\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4"+
		"{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82"+
		"\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86\x4\x87\t\x87"+
		"\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B\t\x8B\x4\x8C\t\x8C\x4\x8D"+
		"\t\x8D\x4\x8E\t\x8E\x4\x8F\t\x8F\x4\x90\t\x90\x4\x91\t\x91\x4\x92\t\x92"+
		"\x4\x93\t\x93\x4\x94\t\x94\x4\x95\t\x95\x4\x96\t\x96\x4\x97\t\x97\x4\x98"+
		"\t\x98\x4\x99\t\x99\x4\x9A\t\x9A\x4\x9B\t\x9B\x4\x9C\t\x9C\x4\x9D\t\x9D"+
		"\x4\x9E\t\x9E\x4\x9F\t\x9F\x4\xA0\t\xA0\x4\xA1\t\xA1\x4\xA2\t\xA2\x4\xA3"+
		"\t\xA3\x4\xA4\t\xA4\x4\xA5\t\xA5\x4\xA6\t\xA6\x4\xA7\t\xA7\x4\xA8\t\xA8"+
		"\x4\xA9\t\xA9\x4\xAA\t\xAA\x4\xAB\t\xAB\x4\xAC\t\xAC\x4\xAD\t\xAD\x4\xAE"+
		"\t\xAE\x4\xAF\t\xAF\x4\xB0\t\xB0\x4\xB1\t\xB1\x4\xB2\t\xB2\x4\xB3\t\xB3"+
		"\x4\xB4\t\xB4\x4\xB5\t\xB5\x4\xB6\t\xB6\x4\xB7\t\xB7\x4\xB8\t\xB8\x4\xB9"+
		"\t\xB9\x4\xBA\t\xBA\x4\xBB\t\xBB\x4\xBC\t\xBC\x4\xBD\t\xBD\x4\xBE\t\xBE"+
		"\x4\xBF\t\xBF\x4\xC0\t\xC0\x4\xC1\t\xC1\x4\xC2\t\xC2\x4\xC3\t\xC3\x4\xC4"+
		"\t\xC4\x4\xC5\t\xC5\x4\xC6\t\xC6\x4\xC7\t\xC7\x4\xC8\t\xC8\x4\xC9\t\xC9"+
		"\x4\xCA\t\xCA\x4\xCB\t\xCB\x4\xCC\t\xCC\x4\xCD\t\xCD\x4\xCE\t\xCE\x4\xCF"+
		"\t\xCF\x4\xD0\t\xD0\x4\xD1\t\xD1\x4\xD2\t\xD2\x4\xD3\t\xD3\x4\xD4\t\xD4"+
		"\x4\xD5\t\xD5\x4\xD6\t\xD6\x4\xD7\t\xD7\x4\xD8\t\xD8\x4\xD9\t\xD9\x4\xDA"+
		"\t\xDA\x4\xDB\t\xDB\x4\xDC\t\xDC\x4\xDD\t\xDD\x4\xDE\t\xDE\x4\xDF\t\xDF"+
		"\x4\xE0\t\xE0\x4\xE1\t\xE1\x4\xE2\t\xE2\x4\xE3\t\xE3\x4\xE4\t\xE4\x4\xE5"+
		"\t\xE5\x4\xE6\t\xE6\x4\xE7\t\xE7\x4\xE8\t\xE8\x4\xE9\t\xE9\x4\xEA\t\xEA"+
		"\x4\xEB\t\xEB\x4\xEC\t\xEC\x4\xED\t\xED\x4\xEE\t\xEE\x4\xEF\t\xEF\x4\xF0"+
		"\t\xF0\x4\xF1\t\xF1\x4\xF2\t\xF2\x4\xF3\t\xF3\x4\xF4\t\xF4\x4\xF5\t\xF5"+
		"\x4\xF6\t\xF6\x4\xF7\t\xF7\x4\xF8\t\xF8\x4\xF9\t\xF9\x4\xFA\t\xFA\x4\xFB"+
		"\t\xFB\x4\xFC\t\xFC\x4\xFD\t\xFD\x4\xFE\t\xFE\x4\xFF\t\xFF\x4\x100\t\x100"+
		"\x4\x101\t\x101\x4\x102\t\x102\x4\x103\t\x103\x4\x104\t\x104\x4\x105\t"+
		"\x105\x4\x106\t\x106\x4\x107\t\x107\x4\x108\t\x108\x4\x109\t\x109\x4\x10A"+
		"\t\x10A\x4\x10B\t\x10B\x4\x10C\t\x10C\x4\x10D\t\x10D\x4\x10E\t\x10E\x4"+
		"\x10F\t\x10F\x4\x110\t\x110\x4\x111\t\x111\x4\x112\t\x112\x4\x113\t\x113"+
		"\x4\x114\t\x114\x4\x115\t\x115\x4\x116\t\x116\x4\x117\t\x117\x4\x118\t"+
		"\x118\x4\x119\t\x119\x4\x11A\t\x11A\x4\x11B\t\x11B\x4\x11C\t\x11C\x4\x11D"+
		"\t\x11D\x4\x11E\t\x11E\x4\x11F\t\x11F\x4\x120\t\x120\x4\x121\t\x121\x4"+
		"\x122\t\x122\x4\x123\t\x123\x4\x124\t\x124\x4\x125\t\x125\x4\x126\t\x126"+
		"\x4\x127\t\x127\x4\x128\t\x128\x4\x129\t\x129\x4\x12A\t\x12A\x4\x12B\t"+
		"\x12B\x4\x12C\t\x12C\x4\x12D\t\x12D\x4\x12E\t\x12E\x4\x12F\t\x12F\x4\x130"+
		"\t\x130\x4\x131\t\x131\x4\x132\t\x132\x4\x133\t\x133\x4\x134\t\x134\x4"+
		"\x135\t\x135\x4\x136\t\x136\x4\x137\t\x137\x4\x138\t\x138\x4\x139\t\x139"+
		"\x4\x13A\t\x13A\x4\x13B\t\x13B\x4\x13C\t\x13C\x4\x13D\t\x13D\x4\x13E\t"+
		"\x13E\x4\x13F\t\x13F\x4\x140\t\x140\x4\x141\t\x141\x4\x142\t\x142\x4\x143"+
		"\t\x143\x4\x144\t\x144\x4\x145\t\x145\x4\x146\t\x146\x4\x147\t\x147\x4"+
		"\x148\t\x148\x4\x149\t\x149\x4\x14A\t\x14A\x4\x14B\t\x14B\x4\x14C\t\x14C"+
		"\x4\x14D\t\x14D\x4\x14E\t\x14E\x4\x14F\t\x14F\x4\x150\t\x150\x4\x151\t"+
		"\x151\x4\x152\t\x152\x4\x153\t\x153\x4\x154\t\x154\x4\x155\t\x155\x4\x156"+
		"\t\x156\x4\x157\t\x157\x4\x158\t\x158\x4\x159\t\x159\x4\x15A\t\x15A\x4"+
		"\x15B\t\x15B\x4\x15C\t\x15C\x4\x15D\t\x15D\x4\x15E\t\x15E\x4\x15F\t\x15F"+
		"\x4\x160\t\x160\x4\x161\t\x161\x4\x162\t\x162\x4\x163\t\x163\x4\x164\t"+
		"\x164\x4\x165\t\x165\x4\x166\t\x166\x4\x167\t\x167\x4\x168\t\x168\x4\x169"+
		"\t\x169\x4\x16A\t\x16A\x4\x16B\t\x16B\x4\x16C\t\x16C\x4\x16D\t\x16D\x4"+
		"\x16E\t\x16E\x4\x16F\t\x16F\x4\x170\t\x170\x4\x171\t\x171\x4\x172\t\x172"+
		"\x4\x173\t\x173\x4\x174\t\x174\x4\x175\t\x175\x4\x176\t\x176\x4\x177\t"+
		"\x177\x4\x178\t\x178\x4\x179\t\x179\x4\x17A\t\x17A\x4\x17B\t\x17B\x4\x17C"+
		"\t\x17C\x4\x17D\t\x17D\x4\x17E\t\x17E\x4\x17F\t\x17F\x4\x180\t\x180\x4"+
		"\x181\t\x181\x4\x182\t\x182\x4\x183\t\x183\x4\x184\t\x184\x4\x185\t\x185"+
		"\x4\x186\t\x186\x4\x187\t\x187\x4\x188\t\x188\x4\x189\t\x189\x4\x18A\t"+
		"\x18A\x4\x18B\t\x18B\x4\x18C\t\x18C\x4\x18D\t\x18D\x4\x18E\t\x18E\x4\x18F"+
		"\t\x18F\x4\x190\t\x190\x4\x191\t\x191\x4\x192\t\x192\x4\x193\t\x193\x4"+
		"\x194\t\x194\x4\x195\t\x195\x4\x196\t\x196\x4\x197\t\x197\x4\x198\t\x198"+
		"\x4\x199\t\x199\x4\x19A\t\x19A\x4\x19B\t\x19B\x4\x19C\t\x19C\x4\x19D\t"+
		"\x19D\x4\x19E\t\x19E\x4\x19F\t\x19F\x4\x1A0\t\x1A0\x4\x1A1\t\x1A1\x4\x1A2"+
		"\t\x1A2\x4\x1A3\t\x1A3\x4\x1A4\t\x1A4\x4\x1A5\t\x1A5\x4\x1A6\t\x1A6\x4"+
		"\x1A7\t\x1A7\x4\x1A8\t\x1A8\x4\x1A9\t\x1A9\x4\x1AA\t\x1AA\x4\x1AB\t\x1AB"+
		"\x4\x1AC\t\x1AC\x4\x1AD\t\x1AD\x4\x1AE\t\x1AE\x4\x1AF\t\x1AF\x4\x1B0\t"+
		"\x1B0\x4\x1B1\t\x1B1\x4\x1B2\t\x1B2\x4\x1B3\t\x1B3\x4\x1B4\t\x1B4\x4\x1B5"+
		"\t\x1B5\x4\x1B6\t\x1B6\x4\x1B7\t\x1B7\x4\x1B8\t\x1B8\x4\x1B9\t\x1B9\x4"+
		"\x1BA\t\x1BA\x4\x1BB\t\x1BB\x4\x1BC\t\x1BC\x4\x1BD\t\x1BD\x4\x1BE\t\x1BE"+
		"\x4\x1BF\t\x1BF\x4\x1C0\t\x1C0\x4\x1C1\t\x1C1\x4\x1C2\t\x1C2\x4\x1C3\t"+
		"\x1C3\x4\x1C4\t\x1C4\x4\x1C5\t\x1C5\x4\x1C6\t\x1C6\x4\x1C7\t\x1C7\x4\x1C8"+
		"\t\x1C8\x4\x1C9\t\x1C9\x4\x1CA\t\x1CA\x4\x1CB\t\x1CB\x4\x1CC\t\x1CC\x4"+
		"\x1CD\t\x1CD\x4\x1CE\t\x1CE\x4\x1CF\t\x1CF\x4\x1D0\t\x1D0\x4\x1D1\t\x1D1"+
		"\x4\x1D2\t\x1D2\x4\x1D3\t\x1D3\x4\x1D4\t\x1D4\x4\x1D5\t\x1D5\x4\x1D6\t"+
		"\x1D6\x4\x1D7\t\x1D7\x4\x1D8\t\x1D8\x4\x1D9\t\x1D9\x4\x1DA\t\x1DA\x4\x1DB"+
		"\t\x1DB\x4\x1DC\t\x1DC\x4\x1DD\t\x1DD\x4\x1DE\t\x1DE\x4\x1DF\t\x1DF\x4"+
		"\x1E0\t\x1E0\x4\x1E1\t\x1E1\x4\x1E2\t\x1E2\x4\x1E3\t\x1E3\x4\x1E4\t\x1E4"+
		"\x4\x1E5\t\x1E5\x4\x1E6\t\x1E6\x4\x1E7\t\x1E7\x4\x1E8\t\x1E8\x4\x1E9\t"+
		"\x1E9\x4\x1EA\t\x1EA\x4\x1EB\t\x1EB\x4\x1EC\t\x1EC\x4\x1ED\t\x1ED\x4\x1EE"+
		"\t\x1EE\x4\x1EF\t\x1EF\x4\x1F0\t\x1F0\x4\x1F1\t\x1F1\x4\x1F2\t\x1F2\x4"+
		"\x1F3\t\x1F3\x4\x1F4\t\x1F4\x4\x1F5\t\x1F5\x4\x1F6\t\x1F6\x4\x1F7\t\x1F7"+
		"\x3\x2\a\x2\x3F0\n\x2\f\x2\xE\x2\x3F3\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\a\x3"+
		"\x3F9\n\x3\f\x3\xE\x3\x3FC\v\x3\x3\x3\x5\x3\x3FF\n\x3\x3\x3\x3\x3\a\x3"+
		"\x403\n\x3\f\x3\xE\x3\x406\v\x3\x5\x3\x408\n\x3\x3\x4\x3\x4\x5\x4\x40C"+
		"\n\x4\x6\x4\x40E\n\x4\r\x4\xE\x4\x40F\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x5\x5\x419\n\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\x420\n\x6"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a\x4C3\n\a\x3\b\x3\b\x3\b\x3\b"+
		"\x3\b\x5\b\x4CA\n\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t"+
		"\x3\t\x3\t\x5\t\x4D8\n\t\x3\n\x3\n\x5\n\x4DC\n\n\x3\n\x5\n\x4DF\n\n\x3"+
		"\n\x3\n\x5\n\x4E3\n\n\x3\v\x3\v\x5\v\x4E7\n\v\x3\f\x3\f\x5\f\x4EB\n\f"+
		"\x3\r\x3\r\x3\r\x5\r\x4F0\n\r\x3\r\x3\r\x3\r\x5\r\x4F5\n\r\x5\r\x4F7\n"+
		"\r\x3\xE\x3\xE\x5\xE\x4FB\n\xE\x3\xE\x5\xE\x4FE\n\xE\x3\xF\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x5\xF\x505\n\xF\x3\xF\x5\xF\x508\n\xF\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\x511\n\x10\x3\x10\x5\x10\x514\n\x10"+
		"\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x5\x14"+
		"\x51F\n\x14\x3\x14\x5\x14\x522\n\x14\x3\x14\x3\x14\x3\x14\x5\x14\x527"+
		"\n\x14\x3\x14\x3\x14\x3\x14\x5\x14\x52C\n\x14\x3\x14\x5\x14\x52F\n\x14"+
		"\x3\x14\x3\x14\x3\x14\x5\x14\x534\n\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3"+
		"\x15\x3\x15\x5\x15\x53C\n\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x542"+
		"\n\x15\x5\x15\x544\n\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x5\x16\x54B"+
		"\n\x16\x3\x16\x3\x16\x5\x16\x54F\n\x16\x5\x16\x551\n\x16\x3\x17\x3\x17"+
		"\x3\x17\x5\x17\x556\n\x17\x3\x17\x3\x17\a\x17\x55A\n\x17\f\x17\xE\x17"+
		"\x55D\v\x17\x3\x17\x5\x17\x560\n\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18"+
		"\x3\x18\x3\x18\x3\x18\x3\x18\a\x18\x56B\n\x18\f\x18\xE\x18\x56E\v\x18"+
		"\x3\x18\x3\x18\x3\x18\x5\x18\x573\n\x18\x3\x18\x5\x18\x576\n\x18\x3\x18"+
		"\x3\x18\x3\x18\x3\x18\x3\x18\a\x18\x57D\n\x18\f\x18\xE\x18\x580\v\x18"+
		"\x5\x18\x582\n\x18\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3"+
		"\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3"+
		"\x1A\x3\x1A\x5\x1A\x597\n\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B"+
		"\x5\x1B\x59F\n\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x5A4\n\x1B\x3\x1B\x5\x1B"+
		"\x5A7\n\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x5AC\n\x1B\x3\x1B\x5\x1B\x5AF"+
		"\n\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x5B4\n\x1B\x3\x1C\x3\x1C\x3\x1C\x3"+
		"\x1C\x3\x1C\x3\x1C\x5\x1C\x5BC\n\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x5C1"+
		"\n\x1C\x3\x1C\x5\x1C\x5C4\n\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x5C9\n\x1C"+
		"\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x5CF\n\x1D\x3\x1D\x3\x1D\x3\x1D\x5"+
		"\x1D\x5D4\n\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1F"+
		"\x3\x1F\x3\x1F\x3\x1F\x3 \x3 \x3 \x3!\x5!\x5E5\n!\x3!\x5!\x5E8\n!\x3!"+
		"\x5!\x5EB\n!\x3!\x5!\x5EE\n!\x3\"\x3\"\x3\"\x5\"\x5F3\n\"\x3#\x3#\x3$"+
		"\x3$\x3$\x3%\x3%\x5%\x5FC\n%\x3&\x3&\x3\'\x3\'\x3\'\x3(\x3(\x3(\x3(\x3"+
		")\x3)\x3)\x3)\x5)\x60B\n)\x3*\x3*\x3+\x3+\x3+\x3,\x3,\x3-\x3-\x3-\x3."+
		"\x3.\x3/\x3/\x3/\x5/\x61C\n/\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30"+
		"\x3\x30\x3\x30\x3\x30\x5\x30\x627\n\x30\x3\x30\x3\x30\a\x30\x62B\n\x30"+
		"\f\x30\xE\x30\x62E\v\x30\x3\x31\x3\x31\x3\x31\x3\x31\x3\x32\x3\x32\x3"+
		"\x33\x3\x33\x3\x34\x3\x34\x3\x34\x3\x34\x5\x34\x63C\n\x34\x3\x35\x3\x35"+
		"\x3\x36\x3\x36\x3\x36\x3\x37\x3\x37\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38"+
		"\x3\x38\x5\x38\x64B\n\x38\x3\x39\x3\x39\x3:\x3:\x3:\x3:\x3:\x5:\x654\n"+
		":\x3:\x3:\x5:\x658\n:\x3:\x6:\x65B\n:\r:\xE:\x65C\x3:\x3:\x3:\x3:\x5:"+
		"\x663\n:\x3;\x3;\x3;\x3;\x5;\x669\n;\x3;\x5;\x66C\n;\x3;\x6;\x66F\n;\r"+
		";\xE;\x670\x3;\x3;\x3;\x5;\x676\n;\x3<\x3<\x3<\x3<\x3<\x3<\x5<\x67E\n"+
		"<\x3=\x3=\x3=\x3=\x3>\x3>\x3>\x3>\x5>\x688\n>\x3>\x3>\x3?\x3?\x3?\x3?"+
		"\x3?\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x5@\x69B\n@\x3\x41\x3\x41"+
		"\x3\x41\x3\x41\x3\x41\x3\x41\x5\x41\x6A3\n\x41\x3\x41\x3\x41\x3\x41\x3"+
		"\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x5\x41\x6B0\n\x41"+
		"\x5\x41\x6B2\n\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3"+
		"\x41\x3\x41\x3\x41\x5\x41\x6BE\n\x41\x5\x41\x6C0\n\x41\x3\x41\x3\x41\x3"+
		"\x41\x3\x41\x3\x41\x5\x41\x6C7\n\x41\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42"+
		"\x3\x42\x3\x42\x5\x42\x6D0\n\x42\x3\x43\x3\x43\x3\x43\x3\x43\x5\x43\x6D6"+
		"\n\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x44\x3\x44\x3\x44\x5\x44\x6DF\n"+
		"\x44\x3\x45\x3\x45\x3\x46\x3\x46\x3\x46\x3G\x3G\x3G\x3G\x3H\x3H\x3H\x3"+
		"H\x5H\x6EE\nH\x3H\x3H\x3H\x3H\x3I\x3I\x3I\x3I\x5I\x6F8\nI\x3I\x3I\x3I"+
		"\x3I\x3J\x3J\x3J\x3J\x5J\x702\nJ\x3J\x3J\x3J\x3J\x3K\x3K\x3K\x3K\x3K\x3"+
		"K\x3K\x3K\x3K\x3K\x3K\x3K\x3K\x3K\x3K\x3K\x3K\x3K\x3K\x3K\x3K\x3K\x3K"+
		"\x3K\x3K\x3K\x3K\x3K\x3K\x3K\x3K\x3K\x3K\x3K\x5K\x72A\nK\x3L\x3L\x3L\x3"+
		"L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L"+
		"\x5L\x741\nL\x3M\x3M\x3N\x3N\x3O\x3O\x3O\x3O\x3O\x3P\x3P\x3P\x3Q\x3Q\x3"+
		"Q\x3Q\x3Q\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R"+
		"\x3R\x3R\x5R\x765\nR\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3"+
		"R\x3R\x3R\x3R\x5R\x777\nR\x3R\x5R\x77A\nR\x3R\x3R\x3R\x5R\x77F\nR\x3R"+
		"\x5R\x782\nR\x3R\x3R\x3R\x5R\x787\nR\x3R\x5R\x78A\nR\x3R\x3R\x3R\x5R\x78F"+
		"\nR\x3R\x5R\x792\nR\x3R\x3R\x3R\x5R\x797\nR\x3R\x5R\x79A\nR\x3R\x3R\x3"+
		"R\x3R\x3R\x3R\x5R\x7A2\nR\x3R\x5R\x7A5\nR\x3R\x3R\x3R\x3R\x3R\x3R\x5R"+
		"\x7AD\nR\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x5R\x7BA\nR\x3R\x3"+
		"R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x5R\x7C5\nR\x3R\aR\x7C8\nR\fR\xER\x7CB\v"+
		"R\x3R\x5R\x7CE\nR\x3R\x3R\x3R\x3R\x5R\x7D4\nR\x3R\x3R\x3R\x3R\x3R\x3R"+
		"\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x5R\x7EB"+
		"\nR\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x5R\x7F7\nR\x3R\x3R\x3R\x3"+
		"R\x3R\x3R\x3R\x3R\x3R\x5R\x802\nR\x3R\aR\x805\nR\fR\xER\x808\vR\x3R\x5"+
		"R\x80B\nR\x3R\x3R\x3R\x3R\x5R\x811\nR\x5R\x813\nR\x3R\x3R\x3R\x3R\x3R"+
		"\x3R\x3R\x3R\x3R\x3R\x3R\x5R\x820\nR\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3"+
		"R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x6R\x835\nR\rR\xER\x836\x3R"+
		"\x3R\x3R\x3R\x3R\x5R\x83E\nR\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x5R\x847\nR\x3"+
		"R\x3R\x3R\x5R\x84C\nR\x3R\x5R\x84F\nR\x3R\x3R\x3R\x5R\x854\nR\x3R\x5R"+
		"\x857\nR\x3R\x3R\x3R\x5R\x85C\nR\x3R\x6R\x85F\nR\rR\xER\x860\x3R\x3R\x3"+
		"R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R"+
		"\x3R\x3R\x3R\x3R\x3R\x3R\x5R\x87D\nR\x3R\x3R\x3R\x3R\x3R\x5R\x884\nR\x3"+
		"R\x6R\x887\nR\rR\xER\x888\x3R\x3R\x3R\x3R\x3R\x5R\x890\nR\x5R\x892\nR"+
		"\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x5R\x89D\nR\x3R\x3R\x3R\x3R\x5R\x8A3"+
		"\nR\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x5R\x8B2\nR\x3"+
		"S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x5S\x8C0\nS\x3S\x5S\x8C3"+
		"\nS\x5S\x8C5\nS\x3S\x3S\x3S\x5S\x8CA\nS\x3S\x3S\x5S\x8CE\nS\x3S\x5S\x8D1"+
		"\nS\x5S\x8D3\nS\x3S\x3S\x3S\x3S\x5S\x8D9\nS\x3S\x5S\x8DC\nS\x5S\x8DE\n"+
		"S\x3S\x3S\x3S\x3S\x5S\x8E4\nS\x5S\x8E6\nS\x3S\x3S\x3T\x3T\x3T\x3T\x3T"+
		"\x3U\x3U\x3U\x3U\x3U\x3U\x3U\x3U\x3U\x3U\x3U\x3U\x3U\x5U\x8FC\nU\x3U\x3"+
		"U\x3U\x3U\x3U\x3U\x5U\x904\nU\x3U\x3U\x3U\x3U\x3U\x3U\x5U\x90C\nU\x6U"+
		"\x90E\nU\rU\xEU\x90F\x3U\x3U\x3U\x3U\x3U\x3U\x3U\x5U\x919\nU\x3V\x3V\x3"+
		"V\x3V\x3V\x3V\x3V\x3V\x3V\x3V\x3V\x3V\x3V\x3V\x3V\x3V\x3V\x3V\x3V\x5V"+
		"\x92E\nV\x3V\x3V\x3W\x3W\x3W\x3W\x3W\x3W\x3W\x3W\x3W\x5W\x93B\nW\x3W\x3"+
		"W\x3W\x3W\x3W\x3W\x3W\x3W\x3W\x3W\x3W\x3W\x3W\x5W\x94A\nW\x6W\x94C\nW"+
		"\rW\xEW\x94D\x3X\x3X\x3X\x3X\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Z\x3Z\x3Z\x3Z\x3"+
		"Z\x3Z\x3[\x3[\x3[\x3[\x3\\\x3\\\x3\\\x3\\\x3]\x3]\x3]\x3]\x3]\x3^\x3^"+
		"\x3^\x3^\x5^\x971\n^\x3^\x5^\x974\n^\x3^\x6^\x977\n^\r^\xE^\x978\x3_\x3"+
		"_\x3_\x3_\x3_\x3_\x3`\x3`\x3`\x3`\x3`\x3`\x3\x61\x3\x61\x3\x61\x3\x61"+
		"\x5\x61\x98B\n\x61\x3\x61\x5\x61\x98E\n\x61\x3\x61\x3\x61\x3\x61\x5\x61"+
		"\x993\n\x61\x3\x61\x3\x61\x3\x62\x3\x62\x3\x62\x3\x62\x3\x63\x3\x63\x3"+
		"\x63\x3\x63\x3\x63\x3\x63\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3"+
		"\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x5\x65\x9AD\n\x65\x3\x66\x3\x66"+
		"\x3\x66\x3\x66\x3\x66\x3\x66\x3g\x3g\x3g\x3g\x3g\x3g\x5g\x9BB\ng\x3g\x3"+
		"g\x3g\x5g\x9C0\ng\x3g\x3g\x3h\x3h\x3h\x3h\x5h\x9C8\nh\x3h\x6h\x9CB\nh"+
		"\rh\xEh\x9CC\x3h\x3h\x3h\x3h\x3h\x5h\x9D4\nh\x3i\x3i\x3i\x3i\x3i\x3i\x3"+
		"i\x3j\x3j\x3j\x3j\x3j\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x5k\x9E9\nk\x3k\x3k"+
		"\x3l\x3l\x3l\x3l\x3l\x3m\x3m\x3m\x3m\x3n\x3n\x3n\x3n\x3o\x3o\x3o\x3o\x3"+
		"o\x3p\x3p\x3p\x3p\x3p\x3q\x3q\x3q\x3q\x3q\x3r\x3r\x3r\x3r\x3r\x5r\xA0E"+
		"\nr\x3r\x3r\x3r\x5r\xA13\nr\x3r\x3r\x3s\x3s\x3s\x3s\x3s\x3s\x3t\x3t\x3"+
		"t\x3t\x3t\x3u\x3u\x3u\x3u\x5u\xA26\nu\x3u\x3u\x3v\x3v\x3v\x3v\x3w\x3w"+
		"\x3w\x3w\x5w\xA32\nw\x3w\x5w\xA35\nw\x3w\x3w\x3w\x5w\xA3A\nw\x3w\x5w\xA3D"+
		"\nw\x3x\x3x\x3x\x3x\x5x\xA43\nx\x3x\x3x\x3y\x3y\x3y\x3y\x3y\x3y\x3z\x3"+
		"z\x3z\x3z\x3z\x5z\xA52\nz\x3z\x3z\x3z\x5z\xA57\nz\x3z\x3z\x3{\x3{\x3{"+
		"\x3{\x5{\xA5F\n{\x3{\x5{\xA62\n{\x3{\x3{\x3{\x5{\xA67\n{\x3{\x3{\x3{\x5"+
		"{\xA6C\n{\x3{\x5{\xA6F\n{\x3|\x3|\x3|\x3|\x3|\x3}\x3}\x3}\x3}\x3}\x3}"+
		"\x3~\x3~\x3~\x3~\x3~\x3\x7F\x3\x7F\x3\x7F\x3\x7F\x3\x80\x3\x80\x5\x80"+
		"\xA87\n\x80\x3\x80\x3\x80\x3\x80\x3\x80\x3\x80\x5\x80\xA8E\n\x80\x3\x80"+
		"\x3\x80\x3\x80\x5\x80\xA93\n\x80\x3\x80\x3\x80\x3\x80\x5\x80\xA98\n\x80"+
		"\x3\x80\x3\x80\x3\x80\x6\x80\xA9D\n\x80\r\x80\xE\x80\xA9E\x3\x81\x3\x81"+
		"\x3\x81\x3\x81\x3\x81\x5\x81\xAA6\n\x81\x3\x81\x3\x81\x3\x81\x3\x81\x3"+
		"\x82\x3\x82\x3\x82\x3\x82\x3\x82\x3\x82\x3\x82\x5\x82\xAB3\n\x82\x3\x83"+
		"\x3\x83\x3\x83\x3\x83\x5\x83\xAB9\n\x83\x3\x83\x3\x83\x3\x83\x5\x83\xABE"+
		"\n\x83\x3\x83\x3\x83\x3\x84\x3\x84\x3\x84\x3\x84\x5\x84\xAC6\n\x84\x3"+
		"\x84\x3\x84\x3\x85\x3\x85\x3\x85\x3\x85\x3\x85\x3\x86\x3\x86\x3\x86\x3"+
		"\x86\x3\x86\x3\x86\x3\x86\x5\x86\xAD6\n\x86\x3\x86\x3\x86\x3\x87\x3\x87"+
		"\x3\x87\x5\x87\xADD\n\x87\x3\x87\x3\x87\x3\x87\x5\x87\xAE2\n\x87\x3\x87"+
		"\x6\x87\xAE5\n\x87\r\x87\xE\x87\xAE6\x3\x87\x5\x87\xAEA\n\x87\x3\x87\x3"+
		"\x87\x3\x87\x3\x87\x5\x87\xAF0\n\x87\x3\x87\x3\x87\x3\x87\x3\x87\x5\x87"+
		"\xAF6\n\x87\x3\x88\x3\x88\x3\x88\x5\x88\xAFB\n\x88\x3\x88\x3\x88\x3\x88"+
		"\x5\x88\xB00\n\x88\x3\x88\x6\x88\xB03\n\x88\r\x88\xE\x88\xB04\x3\x88\x5"+
		"\x88\xB08\n\x88\x3\x88\x3\x88\x3\x88\x3\x88\x5\x88\xB0E\n\x88\x3\x88\x3"+
		"\x88\x3\x88\x3\x88\x5\x88\xB14\n\x88\x3\x89\x3\x89\x3\x89\x3\x89\x3\x89"+
		"\x3\x89\x3\x89\x3\x89\x3\x89\x5\x89\xB1F\n\x89\x3\x89\x5\x89\xB22\n\x89"+
		"\x3\x8A\x3\x8A\x3\x8A\x3\x8A\x3\x8A\x3\x8A\x3\x8A\x3\x8A\x5\x8A\xB2C\n"+
		"\x8A\x3\x8A\x3\x8A\x3\x8A\x3\x8A\x5\x8A\xB32\n\x8A\x6\x8A\xB34\n\x8A\r"+
		"\x8A\xE\x8A\xB35\x3\x8A\x3\x8A\x5\x8A\xB3A\n\x8A\x3\x8B\x3\x8B\x3\x8B"+
		"\x3\x8B\x3\x8B\x3\x8B\x3\x8B\x3\x8B\x3\x8B\x3\x8B\x3\x8B\x3\x8B\x3\x8B"+
		"\x3\x8B\x3\x8B\x3\x8B\x3\x8C\x3\x8C\x3\x8C\x3\x8C\x3\x8C\x3\x8C\x3\x8C"+
		"\x3\x8C\x3\x8C\x3\x8C\x3\x8C\x5\x8C\xB57\n\x8C\x3\x8D\x3\x8D\x3\x8D\x3"+
		"\x8D\x3\x8D\x3\x8D\x3\x8D\x3\x8D\x3\x8D\x3\x8D\x3\x8D\x5\x8D\xB64\n\x8D"+
		"\x3\x8D\x3\x8D\x3\x8D\x3\x8D\x5\x8D\xB6A\n\x8D\x3\x8E\x3\x8E\x3\x8E\x3"+
		"\x8E\x3\x8E\x3\x8E\x3\x8E\x3\x8E\x3\x8E\x3\x8E\x3\x8E\x3\x8E\x3\x8E\x5"+
		"\x8E\xB79\n\x8E\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F"+
		"\x5\x8F\xB83\n\x8F\x3\x8F\x5\x8F\xB86\n\x8F\x3\x90\x3\x90\x3\x90\x3\x90"+
		"\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90\x3\x91\x3\x91\x3\x91\x3\x91\x3\x91"+
		"\x3\x91\x3\x91\x3\x91\x3\x91\x5\x91\xB9A\n\x91\x3\x91\x3\x91\x5\x91\xB9E"+
		"\n\x91\x3\x91\x3\x91\x5\x91\xBA2\n\x91\x3\x91\x6\x91\xBA5\n\x91\r\x91"+
		"\xE\x91\xBA6\x3\x91\x3\x91\x3\x91\x3\x91\x3\x91\x3\x91\x3\x92\x3\x92\x3"+
		"\x92\x3\x92\x3\x92\x3\x92\x3\x92\x5\x92\xBB6\n\x92\x3\x92\x3\x92\x3\x92"+
		"\x3\x92\x3\x92\x5\x92\xBBD\n\x92\x3\x92\x3\x92\x3\x92\x3\x92\x3\x92\x3"+
		"\x92\x3\x92\x5\x92\xBC6\n\x92\x3\x92\x3\x92\x3\x92\x3\x92\a\x92\xBCC\n"+
		"\x92\f\x92\xE\x92\xBCF\v\x92\x5\x92\xBD1\n\x92\x3\x92\x3\x92\x3\x92\x5"+
		"\x92\xBD6\n\x92\x3\x92\x3\x92\x3\x92\x5\x92\xBDB\n\x92\x3\x92\x3\x92\x3"+
		"\x92\x3\x92\x6\x92\xBE1\n\x92\r\x92\xE\x92\xBE2\x3\x92\x3\x92\x6\x92\xBE7"+
		"\n\x92\r\x92\xE\x92\xBE8\x3\x92\x3\x92\x5\x92\xBED\n\x92\x3\x92\x3\x92"+
		"\a\x92\xBF1\n\x92\f\x92\xE\x92\xBF4\v\x92\a\x92\xBF6\n\x92\f\x92\xE\x92"+
		"\xBF9\v\x92\x3\x92\x5\x92\xBFC\n\x92\x3\x92\x3\x92\x3\x92\x3\x92\x3\x92"+
		"\x5\x92\xC03\n\x92\x3\x92\x3\x92\x3\x92\x3\x92\a\x92\xC09\n\x92\f\x92"+
		"\xE\x92\xC0C\v\x92\x3\x92\x3\x92\x3\x92\x3\x92\x3\x92\x5\x92\xC13\n\x92"+
		"\x3\x92\x3\x92\x3\x92\x3\x92\x3\x92\x3\x92\x3\x92\x5\x92\xC1C\n\x92\x3"+
		"\x92\x3\x92\x3\x92\x5\x92\xC21\n\x92\x3\x92\x3\x92\x5\x92\xC25\n\x92\x3"+
		"\x92\x5\x92\xC28\n\x92\x6\x92\xC2A\n\x92\r\x92\xE\x92\xC2B\x3\x92\x3\x92"+
		"\a\x92\xC30\n\x92\f\x92\xE\x92\xC33\v\x92\a\x92\xC35\n\x92\f\x92\xE\x92"+
		"\xC38\v\x92\x3\x92\x3\x92\x3\x92\x3\x92\x3\x92\x5\x92\xC3F\n\x92\x3\x92"+
		"\x3\x92\x3\x92\x3\x92\a\x92\xC45\n\x92\f\x92\xE\x92\xC48\v\x92\x3\x92"+
		"\x3\x92\x3\x92\x5\x92\xC4D\n\x92\x3\x92\x3\x92\x3\x92\x3\x92\x5\x92\xC53"+
		"\n\x92\x3\x92\x5\x92\xC56\n\x92\x3\x92\x3\x92\x3\x92\x5\x92\xC5B\n\x92"+
		"\x3\x92\x5\x92\xC5E\n\x92\x3\x92\x3\x92\x3\x92\x3\x92\x3\x92\x5\x92\xC65"+
		"\n\x92\x5\x92\xC67\n\x92\x3\x92\x5\x92\xC6A\n\x92\x3\x92\x3\x92\x3\x92"+
		"\x3\x92\x5\x92\xC70\n\x92\x3\x92\x5\x92\xC73\n\x92\x3\x92\x3\x92\x3\x92"+
		"\x5\x92\xC78\n\x92\x3\x92\x5\x92\xC7B\n\x92\x3\x92\x3\x92\x3\x92\x5\x92"+
		"\xC80\n\x92\x3\x92\x5\x92\xC83\n\x92\x3\x92\x3\x92\x3\x92\x5\x92\xC88"+
		"\n\x92\x3\x92\x5\x92\xC8B\n\x92\x3\x92\x3\x92\x3\x92\x5\x92\xC90\n\x92"+
		"\x3\x93\x5\x93\xC93\n\x93\x3\x93\x5\x93\xC96\n\x93\x3\x93\x5\x93\xC99"+
		"\n\x93\x3\x93\x3\x93\x3\x93\x3\x93\x3\x93\x5\x93\xCA0\n\x93\x6\x93\xCA2"+
		"\n\x93\r\x93\xE\x93\xCA3\x3\x94\x3\x94\x3\x94\x3\x94\x3\x94\x5\x94\xCAB"+
		"\n\x94\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95\x5\x95\xCB2\n\x95\x3\x95\x3"+
		"\x95\x3\x95\x3\x95\x5\x95\xCB8\n\x95\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95"+
		"\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95\x5\x95\xCC5\n\x95\x3\x95\x3"+
		"\x95\x5\x95\xCC9\n\x95\x3\x95\x3\x95\x3\x95\x5\x95\xCCE\n\x95\x3\x95\x3"+
		"\x95\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95\x5\x95\xCD8\n\x95\x3\x95"+
		"\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95\x5\x95\xCE1\n\x95\x3\x95\x3"+
		"\x95\x5\x95\xCE5\n\x95\x3\x96\x3\x96\x3\x96\x3\x96\x3\x96\x3\x96\x3\x96"+
		"\x3\x96\x3\x96\x3\x96\x3\x96\x5\x96\xCF2\n\x96\x3\x96\x3\x96\x3\x96\x3"+
		"\x96\x5\x96\xCF8\n\x96\x3\x96\x3\x96\x3\x96\x3\x96\x3\x96\x3\x96\x3\x96"+
		"\x3\x96\x3\x96\x3\x96\x3\x96\x3\x96\x6\x96\xD06\n\x96\r\x96\xE\x96\xD07"+
		"\x3\x96\x3\x96\x3\x97\x3\x97\x3\x97\x3\x97\x3\x97\x3\x97\x3\x97\x3\x97"+
		"\x3\x97\x3\x97\x5\x97\xD16\n\x97\x3\x97\x3\x97\x3\x97\x3\x97\x5\x97\xD1C"+
		"\n\x97\x3\x97\x3\x97\x3\x97\x6\x97\xD21\n\x97\r\x97\xE\x97\xD22\x3\x97"+
		"\x3\x97\x3\x97\x3\x97\x3\x97\x3\x97\x3\x97\x3\x97\x3\x97\x3\x97\x3\x97"+
		"\x3\x97\x3\x97\x3\x97\x3\x97\x3\x97\x3\x97\x3\x97\x5\x97\xD37\n\x97\x3"+
		"\x97\x3\x97\x5\x97\xD3B\n\x97\x3\x98\x3\x98\x3\x98\x3\x98\x3\x98\x3\x98"+
		"\x5\x98\xD43\n\x98\x3\x98\x3\x98\x3\x98\x3\x98\x3\x98\x3\x98\x3\x98\x5"+
		"\x98\xD4C\n\x98\x3\x98\x3\x98\x3\x98\x3\x98\x5\x98\xD52\n\x98\x3\x98\x3"+
		"\x98\x3\x98\x3\x98\x5\x98\xD58\n\x98\x3\x98\x3\x98\x3\x98\x3\x98\x3\x98"+
		"\x3\x98\x6\x98\xD60\n\x98\r\x98\xE\x98\xD61\x3\x98\x3\x98\x3\x99\x3\x99"+
		"\x3\x99\x3\x99\x3\x99\x3\x99\x5\x99\xD6C\n\x99\x3\x99\x3\x99\x5\x99\xD70"+
		"\n\x99\x3\x99\x5\x99\xD73\n\x99\x3\x99\x3\x99\x5\x99\xD77\n\x99\x3\x99"+
		"\x3\x99\x3\x99\x5\x99\xD7C\n\x99\x3\x99\x3\x99\x3\x99\x3\x99\x5\x99\xD82"+
		"\n\x99\x3\x99\x5\x99\xD85\n\x99\x3\x99\x3\x99\x5\x99\xD89\n\x99\x3\x99"+
		"\x3\x99\x3\x99\x3\x99\x3\x99\x3\x99\x6\x99\xD91\n\x99\r\x99\xE\x99\xD92"+
		"\x3\x99\x5\x99\xD96\n\x99\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x5"+
		"\x9A\xD9E\n\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x5\x9A\xDA6"+
		"\n\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x5\x9A\xDAD\n\x9A\x3\x9A\x3"+
		"\x9A\x3\x9A\x3\x9A\x3\x9A\x6\x9A\xDB4\n\x9A\r\x9A\xE\x9A\xDB5\x5\x9A\xDB8"+
		"\n\x9A\x3\x9A\x3\x9A\x3\x9A\x5\x9A\xDBD\n\x9A\x3\x9A\x3\x9A\x3\x9A\x3"+
		"\x9A\x5\x9A\xDC3\n\x9A\x3\x9A\x6\x9A\xDC6\n\x9A\r\x9A\xE\x9A\xDC7\x5\x9A"+
		"\xDCA\n\x9A\x3\x9A\x5\x9A\xDCD\n\x9A\x3\x9A\x3\x9A\x3\x9A\x5\x9A\xDD2"+
		"\n\x9A\x3\x9A\x5\x9A\xDD5\n\x9A\x3\x9A\x3\x9A\x3\x9A\x5\x9A\xDDA\n\x9A"+
		"\x3\x9A\x3\x9A\x3\x9B\x3\x9B\x3\x9B\x3\x9B\x3\x9B\x3\x9B\x3\x9B\x3\x9B"+
		"\x3\x9B\x3\x9B\x3\x9B\x5\x9B\xDE9\n\x9B\x3\x9B\x3\x9B\x3\x9B\x3\x9B\x3"+
		"\x9B\x5\x9B\xDF0\n\x9B\x3\x9B\x3\x9B\x3\x9B\x3\x9B\x3\x9B\x6\x9B\xDF7"+
		"\n\x9B\r\x9B\xE\x9B\xDF8\x5\x9B\xDFB\n\x9B\x3\x9B\x3\x9B\x3\x9B\x5\x9B"+
		"\xE00\n\x9B\x3\x9B\x3\x9B\x3\x9B\x3\x9B\x5\x9B\xE06\n\x9B\x3\x9B\x6\x9B"+
		"\xE09\n\x9B\r\x9B\xE\x9B\xE0A\x5\x9B\xE0D\n\x9B\x3\x9B\x5\x9B\xE10\n\x9B"+
		"\x3\x9B\x3\x9B\x3\x9B\x5\x9B\xE15\n\x9B\x3\x9B\x5\x9B\xE18\n\x9B\x3\x9B"+
		"\x3\x9B\x3\x9B\x5\x9B\xE1D\n\x9B\x3\x9B\x3\x9B\x3\x9C\x3\x9C\x3\x9C\x3"+
		"\x9C\x3\x9C\x3\x9C\x3\x9C\x3\x9C\x3\x9C\x5\x9C\xE2A\n\x9C\x3\x9C\x3\x9C"+
		"\x3\x9C\x5\x9C\xE2F\n\x9C\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x3"+
		"\x9D\x5\x9D\xE38\n\x9D\x3\x9D\x3\x9D\x3\x9D\x5\x9D\xE3D\n\x9D\x3\x9D\x3"+
		"\x9D\x3\x9D\x3\x9D\x5\x9D\xE43\n\x9D\x3\x9D\x3\x9D\x5\x9D\xE47\n\x9D\x3"+
		"\x9D\x3\x9D\x5\x9D\xE4B\n\x9D\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E"+
		"\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x5\x9E"+
		"\xE5C\n\x9E\x5\x9E\xE5E\n\x9E\x3\x9F\x3\x9F\x3\x9F\x3\x9F\x3\x9F\x3\x9F"+
		"\x3\x9F\x3\x9F\x5\x9F\xE68\n\x9F\x3\x9F\x3\x9F\x3\x9F\x5\x9F\xE6D\n\x9F"+
		"\x5\x9F\xE6F\n\x9F\x3\x9F\x3\x9F\x5\x9F\xE73\n\x9F\x3\xA0\x3\xA0\x3\xA0"+
		"\x3\xA0\x5\xA0\xE79\n\xA0\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x5"+
		"\xA0\xE81\n\xA0\x3\xA0\a\xA0\xE84\n\xA0\f\xA0\xE\xA0\xE87\v\xA0\x5\xA0"+
		"\xE89\n\xA0\x3\xA0\x3\xA0\x3\xA0\x3\xA0\a\xA0\xE8F\n\xA0\f\xA0\xE\xA0"+
		"\xE92\v\xA0\x5\xA0\xE94\n\xA0\x3\xA0\x3\xA0\x3\xA0\x5\xA0\xE99\n\xA0\x3"+
		"\xA0\x3\xA0\x3\xA0\x5\xA0\xE9E\n\xA0\x3\xA0\x3\xA0\x3\xA0\x5\xA0\xEA3"+
		"\n\xA0\x3\xA0\x3\xA0\x3\xA0\x5\xA0\xEA8\n\xA0\x3\xA0\x3\xA0\x3\xA0\x5"+
		"\xA0\xEAD\n\xA0\x3\xA0\x3\xA0\x3\xA0\x5\xA0\xEB2\n\xA0\x3\xA0\x3\xA0\x5"+
		"\xA0\xEB6\n\xA0\x3\xA0\x3\xA0\x3\xA0\x5\xA0\xEBB\n\xA0\x3\xA1\x3\xA1\x3"+
		"\xA1\x3\xA1\x3\xA1\x3\xA1\x3\xA1\x3\xA1\x3\xA1\x5\xA1\xEC6\n\xA1\x3\xA1"+
		"\a\xA1\xEC9\n\xA1\f\xA1\xE\xA1\xECC\v\xA1\x5\xA1\xECE\n\xA1\x3\xA1\x5"+
		"\xA1\xED1\n\xA1\x3\xA1\x3\xA1\x3\xA1\x5\xA1\xED6\n\xA1\x3\xA1\x5\xA1\xED9"+
		"\n\xA1\x3\xA1\x3\xA1\x3\xA1\x5\xA1\xEDE\n\xA1\x3\xA1\x5\xA1\xEE1\n\xA1"+
		"\x3\xA1\x3\xA1\x3\xA1\x5\xA1\xEE6\n\xA1\x3\xA1\x5\xA1\xEE9\n\xA1\x3\xA1"+
		"\x3\xA1\x3\xA1\x5\xA1\xEEE\n\xA1\x3\xA1\x5\xA1\xEF1\n\xA1\x3\xA1\x3\xA1"+
		"\x3\xA1\x5\xA1\xEF6\n\xA1\x3\xA1\x5\xA1\xEF9\n\xA1\x3\xA1\x3\xA1\x3\xA1"+
		"\x5\xA1\xEFE\n\xA1\x3\xA1\x3\xA1\x3\xA1\x3\xA1\x5\xA1\xF04\n\xA1\x3\xA1"+
		"\x3\xA1\x3\xA1\x5\xA1\xF09\n\xA1\x3\xA1\x5\xA1\xF0C\n\xA1\x3\xA1\x3\xA1"+
		"\x3\xA1\x5\xA1\xF11\n\xA1\x3\xA1\x3\xA1\x3\xA1\x3\xA1\x3\xA1\x5\xA1\xF18"+
		"\n\xA1\x5\xA1\xF1A\n\xA1\x3\xA2\x3\xA2\x3\xA2\x3\xA2\x5\xA2\xF20\n\xA2"+
		"\x3\xA2\x3\xA2\x3\xA2\x3\xA2\x3\xA2\x3\xA2\x3\xA2\x5\xA2\xF29\n\xA2\x3"+
		"\xA2\x3\xA2\x3\xA2\x5\xA2\xF2E\n\xA2\x5\xA2\xF30\n\xA2\x3\xA3\x3\xA3\x3"+
		"\xA3\x3\xA3\x3\xA3\x3\xA3\x3\xA3\x3\xA3\x3\xA3\x3\xA3\x5\xA3\xF3C\n\xA3"+
		"\x3\xA4\x3\xA4\x3\xA4\x3\xA4\x5\xA4\xF42\n\xA4\x3\xA4\x3\xA4\x3\xA4\x3"+
		"\xA4\x3\xA4\x3\xA4\x3\xA4\x3\xA4\a\xA4\xF4C\n\xA4\f\xA4\xE\xA4\xF4F\v"+
		"\xA4\x5\xA4\xF51\n\xA4\x3\xA4\x3\xA4\x3\xA4\x5\xA4\xF56\n\xA4\x5\xA4\xF58"+
		"\n\xA4\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x5\xA5"+
		"\xF62\n\xA5\x3\xA5\x3\xA5\x3\xA5\x5\xA5\xF67\n\xA5\x5\xA5\xF69\n\xA5\x3"+
		"\xA5\x3\xA5\x5\xA5\xF6D\n\xA5\x3\xA6\x3\xA6\x3\xA6\x3\xA6\x5\xA6\xF73"+
		"\n\xA6\x3\xA6\x3\xA6\x3\xA6\x3\xA6\x3\xA6\x3\xA6\x3\xA6\x3\xA6\x3\xA6"+
		"\x3\xA6\x3\xA6\x3\xA6\x3\xA6\x3\xA6\x3\xA6\x3\xA6\x5\xA6\xF85\n\xA6\x5"+
		"\xA6\xF87\n\xA6\x3\xA7\x3\xA7\x3\xA7\x3\xA7\x3\xA7\x3\xA7\x3\xA7\x3\xA7"+
		"\x3\xA7\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x5\xA8\xF96\n\xA8\x3\xA8\x3\xA8\x3"+
		"\xA8\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x3"+
		"\xA8\x3\xA8\x3\xA8\x3\xA8\x5\xA8\xFA8\n\xA8\x3\xA8\x3\xA8\x3\xA8\x3\xA8"+
		"\x3\xA8\x3\xA8\x5\xA8\xFB0\n\xA8\x3\xA9\x3\xA9\x3\xA9\x3\xA9\x3\xA9\x3"+
		"\xA9\x3\xA9\x3\xA9\x5\xA9\xFBA\n\xA9\x3\xAA\x3\xAA\x3\xAA\x3\xAA\x3\xAA"+
		"\x3\xAA\x3\xAA\x3\xAA\x3\xAA\x3\xAA\x3\xAA\x3\xAA\x3\xAA\x3\xAA\x5\xAA"+
		"\xFCA\n\xAA\x3\xAB\x3\xAB\x3\xAB\x3\xAB\x3\xAB\x3\xAB\x3\xAB\x3\xAB\x3"+
		"\xAB\x3\xAB\x3\xAB\x3\xAB\x3\xAC\x3\xAC\x3\xAC\x3\xAC\x3\xAC\x3\xAC\x3"+
		"\xAC\x5\xAC\xFDF\n\xAC\x3\xAD\x3\xAD\x3\xAD\x3\xAD\x3\xAD\x3\xAD\x3\xAD"+
		"\x3\xAD\x3\xAD\x5\xAD\xFEA\n\xAD\x3\xAD\x3\xAD\x3\xAD\x3\xAD\x5\xAD\xFF0"+
		"\n\xAD\x3\xAE\x3\xAE\x3\xAE\x3\xAE\x3\xAE\x3\xAE\x3\xAE\x5\xAE\xFF9\n"+
		"\xAE\x3\xAE\x3\xAE\x3\xAE\x3\xAE\x3\xAE\x3\xAE\x3\xAE\x5\xAE\x1002\n\xAE"+
		"\x3\xAE\x3\xAE\x3\xAE\x3\xAE\x5\xAE\x1008\n\xAE\x3\xAF\x3\xAF\x3\xAF\x3"+
		"\xAF\x3\xAF\x3\xAF\x3\xAF\x5\xAF\x1011\n\xAF\x3\xAF\x3\xAF\x3\xAF\x5\xAF"+
		"\x1016\n\xAF\x3\xAF\x5\xAF\x1019\n\xAF\x3\xAF\x3\xAF\x3\xAF\x5\xAF\x101E"+
		"\n\xAF\x3\xAF\x5\xAF\x1021\n\xAF\x3\xAF\x3\xAF\x3\xAF\x5\xAF\x1026\n\xAF"+
		"\x3\xAF\x5\xAF\x1029\n\xAF\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x5"+
		"\xAF\x1031\n\xAF\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x5\xAF\x1037\n\xAF\x6\xAF"+
		"\x1039\n\xAF\r\xAF\xE\xAF\x103A\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x5"+
		"\xAF\x1042\n\xAF\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x5\xAF\x1048\n\xAF\x6\xAF"+
		"\x104A\n\xAF\r\xAF\xE\xAF\x104B\x3\xAF\x5\xAF\x104F\n\xAF\x5\xAF\x1051"+
		"\n\xAF\x3\xAF\x5\xAF\x1054\n\xAF\x3\xAF\x3\xAF\x3\xAF\x5\xAF\x1059\n\xAF"+
		"\x3\xAF\x5\xAF\x105C\n\xAF\x3\xAF\x3\xAF\x3\xAF\x5\xAF\x1061\n\xAF\x3"+
		"\xAF\x5\xAF\x1064\n\xAF\x3\xAF\x3\xAF\x3\xAF\x5\xAF\x1069\n\xAF\x3\xAF"+
		"\x5\xAF\x106C\n\xAF\x3\xAF\x3\xAF\x3\xAF\x5\xAF\x1071\n\xAF\x3\xAF\x5"+
		"\xAF\x1074\n\xAF\x3\xB0\x3\xB0\x3\xB0\x3\xB0\x3\xB0\x3\xB0\x3\xB0\x3\xB0"+
		"\x3\xB0\x3\xB0\x3\xB0\x3\xB0\x3\xB0\x5\xB0\x1083\n\xB0\x3\xB0\x3\xB0\x3"+
		"\xB0\x3\xB0\x3\xB0\x3\xB0\x3\xB0\x3\xB0\x3\xB0\x5\xB0\x108E\n\xB0\x3\xB1"+
		"\x3\xB1\x3\xB1\x3\xB1\x3\xB1\x3\xB1\x3\xB1\x3\xB1\x3\xB1\x3\xB1\x5\xB1"+
		"\x109A\n\xB1\x3\xB2\x3\xB2\x3\xB2\x3\xB2\x3\xB2\x5\xB2\x10A1\n\xB2\x3"+
		"\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x5\xB3\x10A8\n\xB3\x3\xB3\x3\xB3\x5\xB3"+
		"\x10AC\n\xB3\x3\xB3\x3\xB3\x3\xB3\x5\xB3\x10B1\n\xB3\x3\xB3\x5\xB3\x10B4"+
		"\n\xB3\x3\xB3\x3\xB3\x3\xB3\x5\xB3\x10B9\n\xB3\x3\xB3\x5\xB3\x10BC\n\xB3"+
		"\x3\xB3\x3\xB3\x3\xB3\x5\xB3\x10C1\n\xB3\x3\xB3\x5\xB3\x10C4\n\xB3\x3"+
		"\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x5\xB3\x10CD\n\xB3\x3\xB4"+
		"\x3\xB4\x3\xB4\x3\xB4\x3\xB4\x5\xB4\x10D4\n\xB4\x3\xB4\x3\xB4\x3\xB4\x3"+
		"\xB4\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x5"+
		"\xB5\x10E3\n\xB5\x3\xB5\x3\xB5\x5\xB5\x10E7\n\xB5\x3\xB5\x3\xB5\x3\xB5"+
		"\x5\xB5\x10EC\n\xB5\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x3"+
		"\xB6\x3\xB6\x5\xB6\x10F7\n\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB6"+
		"\x3\xB6\x3\xB6\x5\xB6\x1101\n\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x3"+
		"\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x5\xB6\x110D\n\xB6\x3\xB6\x3\xB6\x3\xB6"+
		"\x3\xB6\a\xB6\x1113\n\xB6\f\xB6\xE\xB6\x1116\v\xB6\x3\xB7\x3\xB7\x3\xB7"+
		"\x3\xB7\x3\xB7\x5\xB7\x111D\n\xB7\x3\xB8\x3\xB8\x3\xB8\x3\xB8\x3\xB8\x3"+
		"\xB8\x3\xB8\x5\xB8\x1126\n\xB8\x3\xB8\x3\xB8\x3\xB8\x5\xB8\x112B\n\xB8"+
		"\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x5\xB9"+
		"\x1136\n\xB9\x3\xB9\x5\xB9\x1139\n\xB9\x3\xB9\x3\xB9\x5\xB9\x113D\n\xB9"+
		"\x3\xBA\x3\xBA\x3\xBA\x3\xBA\x3\xBA\x3\xBA\x5\xBA\x1145\n\xBA\x3\xBA\x3"+
		"\xBA\x5\xBA\x1149\n\xBA\x3\xBA\x3\xBA\x5\xBA\x114D\n\xBA\x3\xBA\x3\xBA"+
		"\x3\xBA\x3\xBA\x3\xBA\x3\xBA\x5\xBA\x1155\n\xBA\x3\xBA\x6\xBA\x1158\n"+
		"\xBA\r\xBA\xE\xBA\x1159\x3\xBA\x3\xBA\x3\xBA\x3\xBA\x3\xBA\x3\xBA\x5\xBA"+
		"\x1162\n\xBA\x3\xBA\x3\xBA\x3\xBA\x5\xBA\x1167\n\xBA\x3\xBA\x3\xBA\a\xBA"+
		"\x116B\n\xBA\f\xBA\xE\xBA\x116E\v\xBA\x6\xBA\x1170\n\xBA\r\xBA\xE\xBA"+
		"\x1171\x3\xBA\x3\xBA\x3\xBA\x3\xBA\x3\xBA\x3\xBA\x3\xBA\x5\xBA\x117B\n"+
		"\xBA\x3\xBA\x5\xBA\x117E\n\xBA\x3\xBA\x3\xBA\x3\xBA\x5\xBA\x1183\n\xBA"+
		"\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x5\xBB\x118A\n\xBB\x3\xBB\x3\xBB\x3"+
		"\xBB\x3\xBB\x5\xBB\x1190\n\xBB\x5\xBB\x1192\n\xBB\x3\xBB\x3\xBB\x3\xBB"+
		"\x5\xBB\x1197\n\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x5\xBB\x119D\n\xBB\x3"+
		"\xBB\x3\xBB\x3\xBB\x3\xBB\x5\xBB\x11A3\n\xBB\x3\xBB\x3\xBB\x3\xBB\x5\xBB"+
		"\x11A8\n\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x5\xBB\x11AE\n\xBB\x3\xBC\x3"+
		"\xBC\x3\xBC\x3\xBC\x3\xBC\x5\xBC\x11B5\n\xBC\x3\xBC\x3\xBC\x3\xBC\x5\xBC"+
		"\x11BA\n\xBC\x3\xBC\x3\xBC\x3\xBC\x5\xBC\x11BF\n\xBC\x3\xBC\x3\xBC\x3"+
		"\xBC\x5\xBC\x11C4\n\xBC\x3\xBC\x5\xBC\x11C7\n\xBC\x3\xBC\x3\xBC\x5\xBC"+
		"\x11CB\n\xBC\x3\xBC\x3\xBC\x5\xBC\x11CF\n\xBC\x3\xBC\x3\xBC\x5\xBC\x11D3"+
		"\n\xBC\x3\xBC\x3\xBC\x5\xBC\x11D7\n\xBC\x3\xBC\x3\xBC\x3\xBC\x5\xBC\x11DC"+
		"\n\xBC\x3\xBC\x3\xBC\x5\xBC\x11E0\n\xBC\x3\xBC\x3\xBC\x5\xBC\x11E4\n\xBC"+
		"\x3\xBD\x3\xBD\x3\xBD\x3\xBD\x3\xBD\x3\xBD\x3\xBD\x3\xBD\x5\xBD\x11EE"+
		"\n\xBD\x3\xBD\x3\xBD\x3\xBD\x3\xBD\x5\xBD\x11F4\n\xBD\x3\xBD\x3\xBD\x3"+
		"\xBD\x3\xBD\x3\xBD\x5\xBD\x11FB\n\xBD\x3\xBD\x5\xBD\x11FE\n\xBD\x3\xBD"+
		"\x3\xBD\x3\xBD\x3\xBD\x5\xBD\x1204\n\xBD\x3\xBD\x3\xBD\x3\xBD\x3\xBD\x5"+
		"\xBD\x120A\n\xBD\x3\xBD\x3\xBD\x3\xBD\a\xBD\x120F\n\xBD\f\xBD\xE\xBD\x1212"+
		"\v\xBD\x3\xBD\x3\xBD\x3\xBD\x5\xBD\x1217\n\xBD\x5\xBD\x1219\n\xBD\x3\xBD"+
		"\x3\xBD\x3\xBD\x5\xBD\x121E\n\xBD\x3\xBD\x3\xBD\x3\xBD\x3\xBD\x5\xBD\x1224"+
		"\n\xBD\x3\xBD\x3\xBD\x3\xBD\x3\xBD\x5\xBD\x122A\n\xBD\x3\xBD\x3\xBD\x3"+
		"\xBD\a\xBD\x122F\n\xBD\f\xBD\xE\xBD\x1232\v\xBD\x3\xBD\x5\xBD\x1235\n"+
		"\xBD\x3\xBD\x3\xBD\x5\xBD\x1239\n\xBD\x3\xBD\x5\xBD\x123C\n\xBD\x3\xBD"+
		"\x3\xBD\x3\xBD\x3\xBD\x3\xBD\x3\xBD\x3\xBD\x3\xBD\x3\xBD\x3\xBD\x3\xBD"+
		"\x3\xBD\x5\xBD\x124A\n\xBD\x3\xBD\x3\xBD\x3\xBD\x5\xBD\x124F\n\xBD\x3"+
		"\xBD\x3\xBD\x5\xBD\x1253\n\xBD\x3\xBD\x3\xBD\x3\xBD\x3\xBD\x3\xBD\x3\xBD"+
		"\x3\xBD\x3\xBD\x3\xBD\x3\xBD\x3\xBD\x5\xBD\x1260\n\xBD\x3\xBD\x5\xBD\x1263"+
		"\n\xBD\x5\xBD\x1265\n\xBD\x3\xBD\x3\xBD\x3\xBD\x3\xBD\x3\xBD\x3\xBD\x5"+
		"\xBD\x126D\n\xBD\x3\xBE\x3\xBE\x3\xBE\x3\xBE\x3\xBE\x3\xBE\x3\xBE\x3\xBE"+
		"\x5\xBE\x1277\n\xBE\x3\xBE\x3\xBE\x3\xBE\x3\xBE\x5\xBE\x127D\n\xBE\x3"+
		"\xBE\x3\xBE\x3\xBE\x3\xBE\x3\xBE\x5\xBE\x1284\n\xBE\x3\xBE\x5\xBE\x1287"+
		"\n\xBE\x3\xBE\x3\xBE\x3\xBE\x3\xBE\x5\xBE\x128D\n\xBE\x3\xBE\x3\xBE\x3"+
		"\xBE\x3\xBE\x5\xBE\x1293\n\xBE\x3\xBE\x3\xBE\x3\xBE\a\xBE\x1298\n\xBE"+
		"\f\xBE\xE\xBE\x129B\v\xBE\x3\xBE\x3\xBE\x3\xBE\x5\xBE\x12A0\n\xBE\x5\xBE"+
		"\x12A2\n\xBE\x3\xBE\x3\xBE\x3\xBE\x5\xBE\x12A7\n\xBE\x3\xBE\x3\xBE\x3"+
		"\xBE\x3\xBE\x5\xBE\x12AD\n\xBE\x3\xBE\x3\xBE\x3\xBE\x3\xBE\x5\xBE\x12B3"+
		"\n\xBE\x3\xBE\x3\xBE\x3\xBE\x3\xBE\x5\xBE\x12B9\n\xBE\x3\xBE\x3\xBE\x3"+
		"\xBE\a\xBE\x12BE\n\xBE\f\xBE\xE\xBE\x12C1\v\xBE\x3\xBE\x5\xBE\x12C4\n"+
		"\xBE\x3\xBE\x3\xBE\x5\xBE\x12C8\n\xBE\x3\xBE\x5\xBE\x12CB\n\xBE\x3\xBE"+
		"\x3\xBE\x3\xBE\x3\xBE\x3\xBE\x3\xBE\x3\xBE\x3\xBE\x3\xBE\x3\xBE\x3\xBE"+
		"\x3\xBE\x5\xBE\x12D9\n\xBE\x3\xBE\x3\xBE\x3\xBE\x5\xBE\x12DE\n\xBE\x3"+
		"\xBE\x3\xBE\x5\xBE\x12E2\n\xBE\x3\xBE\x3\xBE\x3\xBE\x3\xBE\x3\xBE\x3\xBE"+
		"\x3\xBE\x3\xBE\x3\xBE\x3\xBE\x3\xBE\x5\xBE\x12EF\n\xBE\x3\xBE\x5\xBE\x12F2"+
		"\n\xBE\x5\xBE\x12F4\n\xBE\x3\xBE\x3\xBE\x3\xBE\x3\xBE\x3\xBE\x3\xBE\x5"+
		"\xBE\x12FC\n\xBE\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF"+
		"\x3\xBF\x5\xBF\x1307\n\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\a\xBF\x130E"+
		"\n\xBF\f\xBF\xE\xBF\x1311\v\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x3"+
		"\xBF\x5\xBF\x1319\n\xBF\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0"+
		"\x3\xC0\x3\xC0\x5\xC0\x1324\n\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0\a"+
		"\xC0\x132B\n\xC0\f\xC0\xE\xC0\x132E\v\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0"+
		"\x3\xC0\x3\xC0\x5\xC0\x1336\n\xC0\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3"+
		"\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x5\xC1\x1342\n\xC1\x3\xC1\x3\xC1\x5\xC1"+
		"\x1346\n\xC1\x3\xC1\x3\xC1\x3\xC1\x6\xC1\x134B\n\xC1\r\xC1\xE\xC1\x134C"+
		"\x5\xC1\x134F\n\xC1\x3\xC1\x3\xC1\x3\xC1\x5\xC1\x1354\n\xC1\x3\xC1\x3"+
		"\xC1\x5\xC1\x1358\n\xC1\x3\xC1\x3\xC1\x3\xC1\x6\xC1\x135D\n\xC1\r\xC1"+
		"\xE\xC1\x135E\x5\xC1\x1361\n\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3"+
		"\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x5\xC1\x136F\n\xC1\x3\xC1"+
		"\x3\xC1\x3\xC1\x5\xC1\x1374\n\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3"+
		"\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3"+
		"\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x5\xC1\x138A\n\xC1\x3\xC1\x3\xC1\x3\xC1"+
		"\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1"+
		"\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x5\xC1\x13A0\n\xC1\x3"+
		"\xC1\x3\xC1\x3\xC1\x5\xC1\x13A5\n\xC1\x3\xC2\x3\xC2\x3\xC2\x3\xC2\x3\xC2"+
		"\x3\xC2\x3\xC2\x3\xC2\x3\xC2\x3\xC2\x3\xC2\x5\xC2\x13B2\n\xC2\x3\xC3\x3"+
		"\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x5\xC3\x13BA\n\xC3\x3\xC4\x3\xC4\x3\xC4"+
		"\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC5\x3\xC5\x3\xC5\x3\xC5\x3\xC5"+
		"\x3\xC5\x3\xC5\x3\xC5\x3\xC5\x3\xC5\x5\xC5\x13CE\n\xC5\x3\xC5\x5\xC5\x13D1"+
		"\n\xC5\x3\xC5\x3\xC5\a\xC5\x13D5\n\xC5\f\xC5\xE\xC5\x13D8\v\xC5\x3\xC6"+
		"\x3\xC6\x3\xC6\x3\xC6\x3\xC6\x5\xC6\x13DF\n\xC6\x3\xC6\x3\xC6\x3\xC6\x3"+
		"\xC6\x3\xC6\x5\xC6\x13E6\n\xC6\x3\xC6\x3\xC6\x3\xC6\x5\xC6\x13EB\n\xC6"+
		"\x3\xC6\x3\xC6\x5\xC6\x13EF\n\xC6\x6\xC6\x13F1\n\xC6\r\xC6\xE\xC6\x13F2"+
		"\x3\xC6\x5\xC6\x13F6\n\xC6\x3\xC7\x3\xC7\x3\xC7\x3\xC7\x3\xC7\x5\xC7\x13FD"+
		"\n\xC7\x3\xC7\x3\xC7\x3\xC7\x3\xC7\x3\xC7\x3\xC7\x3\xC7\x3\xC7\x3\xC7"+
		"\x3\xC7\x3\xC7\x3\xC7\x3\xC7\x3\xC7\x3\xC7\x3\xC7\x5\xC7\x140F\n\xC7\x5"+
		"\xC7\x1411\n\xC7\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x3\xC8"+
		"\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x3\xC8"+
		"\x5\xC8\x1425\n\xC8\x3\xC9\x3\xC9\x3\xC9\x3\xC9\x3\xC9\x3\xC9\x5\xC9\x142D"+
		"\n\xC9\x3\xC9\x3\xC9\x3\xC9\x5\xC9\x1432\n\xC9\x3\xC9\x3\xC9\x3\xC9\x3"+
		"\xC9\x3\xC9\x3\xC9\x3\xC9\x3\xC9\x3\xC9\x3\xC9\x3\xC9\x3\xC9\x3\xC9\x3"+
		"\xC9\x3\xC9\x3\xC9\x5\xC9\x1444\n\xC9\x3\xC9\x3\xC9\x3\xC9\x3\xC9\x3\xC9"+
		"\x3\xC9\x3\xC9\x3\xC9\x3\xC9\x3\xC9\x3\xC9\x3\xC9\x3\xC9\x5\xC9\x1453"+
		"\n\xC9\x5\xC9\x1455\n\xC9\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x5\xCA\x145C"+
		"\n\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x5\xCA\x1463\n\xCA\x3\xCA\x3"+
		"\xCA\x3\xCA\x5\xCA\x1468\n\xCA\x3\xCA\x3\xCA\x3\xCA\x5\xCA\x146D\n\xCA"+
		"\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x5\xCA\x1473\n\xCA\x3\xCA\x3\xCA\x3\xCA\x5"+
		"\xCA\x1478\n\xCA\x5\xCA\x147A\n\xCA\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB"+
		"\x5\xCB\x1481\n\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x5\xCB\x1487\n\xCB\x3"+
		"\xCB\x3\xCB\x3\xCB\x3\xCB\x5\xCB\x148D\n\xCB\x3\xCB\x5\xCB\x1490\n\xCB"+
		"\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x5\xCB\x1496\n\xCB\x3\xCB\x3\xCB\x3\xCB\x3"+
		"\xCB\x3\xCB\x3\xCB\x6\xCB\x149E\n\xCB\r\xCB\xE\xCB\x149F\x3\xCB\x5\xCB"+
		"\x14A3\n\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x5\xCB\x14AA\n\xCB\x3"+
		"\xCB\x5\xCB\x14AD\n\xCB\x3\xCB\x3\xCB\x3\xCB\x6\xCB\x14B2\n\xCB\r\xCB"+
		"\xE\xCB\x14B3\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x5\xCC\x14BC\n"+
		"\xCC\x3\xCC\x3\xCC\x5\xCC\x14C0\n\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x5\xCC"+
		"\x14C6\n\xCC\x3\xCC\x3\xCC\x3\xCC\a\xCC\x14CB\n\xCC\f\xCC\xE\xCC\x14CE"+
		"\v\xCC\x5\xCC\x14D0\n\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x5\xCC\x14D7"+
		"\n\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x5\xCC\x14DD\n\xCC\x3\xCC\x3\xCC\x3"+
		"\xCC\x3\xCC\x3\xCC\x5\xCC\x14E4\n\xCC\x3\xCC\x5\xCC\x14E7\n\xCC\x3\xCC"+
		"\x3\xCC\x3\xCC\x3\xCC\x5\xCC\x14ED\n\xCC\x3\xCC\x3\xCC\x3\xCC\a\xCC\x14F2"+
		"\n\xCC\f\xCC\xE\xCC\x14F5\v\xCC\x5\xCC\x14F7\n\xCC\x3\xCC\x3\xCC\x3\xCC"+
		"\x3\xCC\x3\xCC\x3\xCC\x5\xCC\x14FF\n\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x5"+
		"\xCC\x1505\n\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x5\xCC\x150C\n\xCC"+
		"\x3\xCC\x5\xCC\x150F\n\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x5\xCC\x1515\n"+
		"\xCC\x3\xCC\x3\xCC\x3\xCC\a\xCC\x151A\n\xCC\f\xCC\xE\xCC\x151D\v\xCC\x3"+
		"\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x5\xCC\x1524\n\xCC\x3\xCC\x3\xCC\x3\xCC"+
		"\x3\xCC\x3\xCC\x3\xCC\x5\xCC\x152C\n\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x5"+
		"\xCC\x1532\n\xCC\x3\xCC\x3\xCC\x3\xCC\a\xCC\x1537\n\xCC\f\xCC\xE\xCC\x153A"+
		"\v\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x5\xCC\x1543\n"+
		"\xCC\x3\xCC\x3\xCC\x3\xCC\x5\xCC\x1548\n\xCC\x3\xCD\x3\xCD\x3\xCD\x3\xCD"+
		"\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x5\xCD\x1552\n\xCD\x3\xCD\x3\xCD\x3\xCD\x3"+
		"\xCD\x5\xCD\x1558\n\xCD\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x3\xCD"+
		"\x3\xCD\x3\xCD\x3\xCD\x5\xCD\x1564\n\xCD\x5\xCD\x1566\n\xCD\x3\xCE\x3"+
		"\xCE\x3\xCE\x3\xCE\x3\xCE\x5\xCE\x156D\n\xCE\x3\xCE\x3\xCE\x3\xCE\x3\xCE"+
		"\x5\xCE\x1573\n\xCE\x3\xCE\x3\xCE\x3\xCE\x3\xCE\x5\xCE\x1579\n\xCE\x3"+
		"\xCE\x3\xCE\x3\xCE\x3\xCE\x5\xCE\x157F\n\xCE\x3\xCE\x3\xCE\x3\xCE\x6\xCE"+
		"\x1584\n\xCE\r\xCE\xE\xCE\x1585\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x5"+
		"\xCF\x158D\n\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x5\xCF\x1595"+
		"\n\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x5\xCF\x159B\n\xCF\x3\xCF\x3\xCF\x3"+
		"\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x6"+
		"\xCF\x15A9\n\xCF\r\xCF\xE\xCF\x15AA\x3\xCF\x5\xCF\x15AE\n\xCF\x3\xCF\x3"+
		"\xCF\x3\xCF\x5\xCF\x15B3\n\xCF\x5\xCF\x15B5\n\xCF\x3\xD0\x3\xD0\x3\xD0"+
		"\x3\xD0\x3\xD0\x3\xD0\x3\xD0\x3\xD0\x3\xD0\x3\xD0\x5\xD0\x15C1\n\xD0\x3"+
		"\xD0\x3\xD0\x3\xD0\x3\xD0\x5\xD0\x15C7\n\xD0\x3\xD0\x3\xD0\x3\xD0\x3\xD0"+
		"\x3\xD0\x3\xD0\x3\xD0\x3\xD0\x3\xD0\x3\xD0\x3\xD0\x3\xD0\x6\xD0\x15D5"+
		"\n\xD0\r\xD0\xE\xD0\x15D6\x3\xD0\x5\xD0\x15DA\n\xD0\x3\xD0\x3\xD0\x3\xD0"+
		"\x5\xD0\x15DF\n\xD0\x3\xD0\x5\xD0\x15E2\n\xD0\x3\xD0\x3\xD0\x3\xD0\x5"+
		"\xD0\x15E7\n\xD0\x5\xD0\x15E9\n\xD0\x3\xD1\x3\xD1\x3\xD1\x3\xD1\x3\xD1"+
		"\x3\xD1\x3\xD1\x5\xD1\x15F2\n\xD1\x3\xD1\x3\xD1\x3\xD1\x3\xD1\x3\xD1\x5"+
		"\xD1\x15F9\n\xD1\x3\xD2\x3\xD2\x3\xD2\x3\xD2\x5\xD2\x15FF\n\xD2\x3\xD2"+
		"\x5\xD2\x1602\n\xD2\x3\xD2\x3\xD2\x3\xD2\x5\xD2\x1607\n\xD2\x3\xD3\x3"+
		"\xD3\x3\xD3\x3\xD3\x3\xD3\x5\xD3\x160E\n\xD3\x5\xD3\x1610\n\xD3\x3\xD3"+
		"\x3\xD3\x3\xD3\x3\xD3\x5\xD3\x1616\n\xD3\x5\xD3\x1618\n\xD3\x3\xD3\x3"+
		"\xD3\x3\xD3\x3\xD3\x3\xD3\x3\xD3\x5\xD3\x1620\n\xD3\x5\xD3\x1622\n\xD3"+
		"\x3\xD3\x3\xD3\x3\xD3\x3\xD3\x5\xD3\x1628\n\xD3\x5\xD3\x162A\n\xD3\x3"+
		"\xD3\x3\xD3\x3\xD3\x3\xD3\x5\xD3\x1630\n\xD3\x5\xD3\x1632\n\xD3\x3\xD3"+
		"\x3\xD3\x3\xD3\x3\xD3\x3\xD3\x5\xD3\x1639\n\xD3\x3\xD3\x5\xD3\x163C\n"+
		"\xD3\x5\xD3\x163E\n\xD3\x3\xD3\x5\xD3\x1641\n\xD3\x3\xD3\x3\xD3\x5\xD3"+
		"\x1645\n\xD3\x5\xD3\x1647\n\xD3\x3\xD3\x3\xD3\x3\xD3\x3\xD3\x3\xD3\x3"+
		"\xD3\x3\xD3\x5\xD3\x1650\n\xD3\x3\xD4\x3\xD4\x3\xD4\x3\xD4\x5\xD4\x1656"+
		"\n\xD4\x3\xD4\x3\xD4\x5\xD4\x165A\n\xD4\x3\xD5\x3\xD5\x3\xD5\x3\xD5\x3"+
		"\xD5\x3\xD5\x5\xD5\x1662\n\xD5\x3\xD5\x3\xD5\x3\xD5\x3\xD5\x3\xD5\x5\xD5"+
		"\x1669\n\xD5\x3\xD5\x3\xD5\x3\xD5\x3\xD5\x5\xD5\x166F\n\xD5\x5\xD5\x1671"+
		"\n\xD5\x3\xD6\x3\xD6\x3\xD6\x3\xD6\x3\xD7\x3\xD7\x3\xD7\x3\xD7\x3\xD7"+
		"\x5\xD7\x167C\n\xD7\x3\xD7\x3\xD7\x3\xD7\x5\xD7\x1681\n\xD7\x3\xD7\x3"+
		"\xD7\x3\xD7\x3\xD7\x5\xD7\x1687\n\xD7\x6\xD7\x1689\n\xD7\r\xD7\xE\xD7"+
		"\x168A\x3\xD7\x3\xD7\x3\xD8\x3\xD8\x3\xD8\x3\xD8\x3\xD8\x5\xD8\x1694\n"+
		"\xD8\x3\xD9\x3\xD9\x3\xD9\x3\xD9\x3\xD9\x3\xD9\x5\xD9\x169C\n\xD9\x3\xD9"+
		"\x3\xD9\x3\xD9\x3\xD9\x3\xD9\x3\xD9\x3\xD9\x3\xD9\x3\xD9\x3\xD9\x5\xD9"+
		"\x16A8\n\xD9\x3\xDA\x5\xDA\x16AB\n\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x3"+
		"\xDA\x3\xDA\x5\xDA\x16B3\n\xDA\x5\xDA\x16B5\n\xDA\x3\xDA\x5\xDA\x16B8"+
		"\n\xDA\x3\xDA\x3\xDA\x5\xDA\x16BC\n\xDA\x3\xDA\x5\xDA\x16BF\n\xDA\x3\xDA"+
		"\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x5\xDA\x16C9\n\xDA\x3"+
		"\xDA\x3\xDA\a\xDA\x16CD\n\xDA\f\xDA\xE\xDA\x16D0\v\xDA\x3\xDA\x3\xDA\x3"+
		"\xDA\x3\xDA\x3\xDA\x5\xDA\x16D7\n\xDA\x3\xDA\x3\xDA\x5\xDA\x16DB\n\xDA"+
		"\x3\xDA\x3\xDA\x5\xDA\x16DF\n\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x3"+
		"\xDA\x3\xDA\x5\xDA\x16E8\n\xDA\x3\xDA\x3\xDA\a\xDA\x16EC\n\xDA\f\xDA\xE"+
		"\xDA\x16EF\v\xDA\x3\xDA\x5\xDA\x16F2\n\xDA\x3\xDA\x5\xDA\x16F5\n\xDA\x3"+
		"\xDA\x3\xDA\x3\xDB\x3\xDB\x3\xDB\x3\xDB\x3\xDB\a\xDB\x16FE\n\xDB\f\xDB"+
		"\xE\xDB\x1701\v\xDB\x3\xDB\x5\xDB\x1704\n\xDB\x3\xDC\x3\xDC\x3\xDC\x3"+
		"\xDC\x3\xDC\x5\xDC\x170B\n\xDC\x3\xDC\x3\xDC\x3\xDC\x5\xDC\x1710\n\xDC"+
		"\x3\xDD\x5\xDD\x1713\n\xDD\x3\xDD\x3\xDD\x3\xDD\x3\xDD\x3\xDD\x3\xDD\x5"+
		"\xDD\x171B\n\xDD\x3\xDD\x3\xDD\x5\xDD\x171F\n\xDD\x3\xDD\x5\xDD\x1722"+
		"\n\xDD\x3\xDD\x3\xDD\x5\xDD\x1726\n\xDD\x3\xDD\x5\xDD\x1729\n\xDD\x3\xDD"+
		"\x3\xDD\x5\xDD\x172D\n\xDD\x3\xDD\x3\xDD\x3\xDD\x3\xDD\x3\xDD\x5\xDD\x1734"+
		"\n\xDD\x3\xDD\x3\xDD\x5\xDD\x1738\n\xDD\x5\xDD\x173A\n\xDD\x5\xDD\x173C"+
		"\n\xDD\x3\xDD\x5\xDD\x173F\n\xDD\x3\xDD\x5\xDD\x1742\n\xDD\x3\xDD\x5\xDD"+
		"\x1745\n\xDD\x3\xDE\x3\xDE\x3\xDE\x3\xDE\x5\xDE\x174B\n\xDE\x3\xDF\x5"+
		"\xDF\x174E\n\xDF\x3\xDF\x3\xDF\x3\xDF\x3\xDF\x3\xDF\x3\xDF\x5\xDF\x1756"+
		"\n\xDF\x5\xDF\x1758\n\xDF\x3\xDF\x5\xDF\x175B\n\xDF\x3\xDF\x3\xDF\x5\xDF"+
		"\x175F\n\xDF\x3\xDF\x5\xDF\x1762\n\xDF\x3\xDF\x3\xDF\x3\xDF\x3\xDF\x5"+
		"\xDF\x1768\n\xDF\x3\xDF\x5\xDF\x176B\n\xDF\x3\xDF\x3\xDF\x5\xDF\x176F"+
		"\n\xDF\x3\xDF\x5\xDF\x1772\n\xDF\x3\xDF\x5\xDF\x1775\n\xDF\x3\xE0\x3\xE0"+
		"\x3\xE0\x3\xE0\x3\xE0\x5\xE0\x177C\n\xE0\x3\xE1\x3\xE1\x5\xE1\x1780\n"+
		"\xE1\x3\xE1\x5\xE1\x1783\n\xE1\x3\xE1\x3\xE1\x3\xE1\x3\xE1\x3\xE1\x3\xE1"+
		"\x3\xE1\x3\xE1\x5\xE1\x178D\n\xE1\x3\xE2\x5\xE2\x1790\n\xE2\x3\xE2\x3"+
		"\xE2\x5\xE2\x1794\n\xE2\x3\xE2\x5\xE2\x1797\n\xE2\x3\xE2\x5\xE2\x179A"+
		"\n\xE2\x3\xE2\x5\xE2\x179D\n\xE2\x3\xE3\x3\xE3\x5\xE3\x17A1\n\xE3\x3\xE4"+
		"\x5\xE4\x17A4\n\xE4\x3\xE4\x3\xE4\x3\xE4\x3\xE4\x3\xE4\x3\xE4\x5\xE4\x17AC"+
		"\n\xE4\x5\xE4\x17AE\n\xE4\x3\xE4\x3\xE4\x5\xE4\x17B2\n\xE4\x3\xE4\x5\xE4"+
		"\x17B5\n\xE4\x3\xE4\x3\xE4\x3\xE4\x3\xE4\a\xE4\x17BB\n\xE4\f\xE4\xE\xE4"+
		"\x17BE\v\xE4\x3\xE4\x5\xE4\x17C1\n\xE4\x3\xE4\x3\xE4\x5\xE4\x17C5\n\xE4"+
		"\x3\xE4\x3\xE4\x3\xE4\x3\xE4\x3\xE4\x5\xE4\x17CC\n\xE4\x3\xE4\x3\xE4\x5"+
		"\xE4\x17D0\n\xE4\x5\xE4\x17D2\n\xE4\x5\xE4\x17D4\n\xE4\x3\xE4\x5\xE4\x17D7"+
		"\n\xE4\x3\xE4\x5\xE4\x17DA\n\xE4\x3\xE4\x5\xE4\x17DD\n\xE4\x3\xE5\x3\xE5"+
		"\x3\xE5\x3\xE5\x3\xE5\x5\xE5\x17E4\n\xE5\x3\xE6\x3\xE6\x3\xE6\x3\xE6\a"+
		"\xE6\x17EA\n\xE6\f\xE6\xE\xE6\x17ED\v\xE6\x3\xE6\x3\xE6\x3\xE6\x5\xE6"+
		"\x17F2\n\xE6\x3\xE6\x3\xE6\x3\xE6\x3\xE6\x5\xE6\x17F8\n\xE6\x3\xE7\x3"+
		"\xE7\x3\xE7\x3\xE7\a\xE7\x17FE\n\xE7\f\xE7\xE\xE7\x1801\v\xE7\x3\xE8\x3"+
		"\xE8\x5\xE8\x1805\n\xE8\x3\xE8\x5\xE8\x1808\n\xE8\x3\xE9\x3\xE9\x3\xE9"+
		"\x5\xE9\x180D\n\xE9\x3\xE9\x3\xE9\x3\xE9\x5\xE9\x1812\n\xE9\x3\xE9\x5"+
		"\xE9\x1815\n\xE9\x3\xEA\x3\xEA\x3\xEA\x3\xEA\x3\xEA\x3\xEA\x5\xEA\x181D"+
		"\n\xEA\x3\xEA\x3\xEA\x5\xEA\x1821\n\xEA\x3\xEA\x3\xEA\x3\xEA\a\xEA\x1826"+
		"\n\xEA\f\xEA\xE\xEA\x1829\v\xEA\x5\xEA\x182B\n\xEA\x3\xEA\x3\xEA\x3\xEA"+
		"\x3\xEA\x3\xEA\a\xEA\x1832\n\xEA\f\xEA\xE\xEA\x1835\v\xEA\x5\xEA\x1837"+
		"\n\xEA\x3\xEA\x3\xEA\x5\xEA\x183B\n\xEA\x3\xEA\x3\xEA\x3\xEA\x3\xEA\a"+
		"\xEA\x1841\n\xEA\f\xEA\xE\xEA\x1844\v\xEA\x5\xEA\x1846\n\xEA\x3\xEB\x3"+
		"\xEB\x5\xEB\x184A\n\xEB\x3\xEB\x5\xEB\x184D\n\xEB\x3\xEB\x3\xEB\x3\xEB"+
		"\x3\xEB\x3\xEB\x3\xEB\x3\xEB\x3\xEB\x3\xEB\x3\xEB\x3\xEB\x3\xEB\x5\xEB"+
		"\x185B\n\xEB\x3\xEB\x3\xEB\x5\xEB\x185F\n\xEB\x3\xEB\x5\xEB\x1862\n\xEB"+
		"\x3\xEB\x3\xEB\x5\xEB\x1866\n\xEB\x3\xEB\x5\xEB\x1869\n\xEB\x3\xEC\x3"+
		"\xEC\x3\xEC\x5\xEC\x186E\n\xEC\x3\xEC\x5\xEC\x1871\n\xEC\x3\xEC\x3\xEC"+
		"\x3\xEC\x3\xEC\x5\xEC\x1877\n\xEC\x3\xEC\x5\xEC\x187A\n\xEC\x3\xEC\x3"+
		"\xEC\x3\xEC\a\xEC\x187F\n\xEC\f\xEC\xE\xEC\x1882\v\xEC\x3\xEC\x5\xEC\x1885"+
		"\n\xEC\x5\xEC\x1887\n\xEC\x3\xEC\x3\xEC\x3\xEC\x3\xEC\a\xEC\x188D\n\xEC"+
		"\f\xEC\xE\xEC\x1890\v\xEC\x5\xEC\x1892\n\xEC\x3\xEC\x3\xEC\x5\xEC\x1896"+
		"\n\xEC\x3\xEC\x3\xEC\x3\xEC\x5\xEC\x189B\n\xEC\x3\xED\x3\xED\x3\xED\x3"+
		"\xED\x3\xED\x3\xED\x3\xED\a\xED\x18A4\n\xED\f\xED\xE\xED\x18A7\v\xED\x3"+
		"\xED\x3\xED\x3\xED\x3\xED\x5\xED\x18AD\n\xED\x3\xEE\x3\xEE\x3\xEE\x3\xEE"+
		"\x3\xEE\x3\xEE\x3\xEE\x3\xEE\x3\xEE\x3\xEE\x3\xEE\x3\xEE\x3\xEE\x5\xEE"+
		"\x18BC\n\xEE\x3\xEE\x3\xEE\x3\xEE\x3\xEE\x3\xEE\x3\xEE\x3\xEE\x3\xEE\x3"+
		"\xEE\x3\xEE\x3\xEE\x3\xEE\x5\xEE\x18CA\n\xEE\x3\xEF\x3\xEF\x5\xEF\x18CE"+
		"\n\xEF\x3\xF0\x3\xF0\x3\xF0\x5\xF0\x18D3\n\xF0\x3\xF0\x5\xF0\x18D6\n\xF0"+
		"\x3\xF0\x3\xF0\x3\xF0\x3\xF0\x3\xF0\x3\xF0\x3\xF0\x3\xF0\a\xF0\x18E0\n"+
		"\xF0\f\xF0\xE\xF0\x18E3\v\xF0\x5\xF0\x18E5\n\xF0\x3\xF0\x3\xF0\x3\xF0"+
		"\x3\xF0\x5\xF0\x18EB\n\xF0\x3\xF0\x3\xF0\x3\xF0\a\xF0\x18F0\n\xF0\f\xF0"+
		"\xE\xF0\x18F3\v\xF0\x3\xF0\x3\xF0\x5\xF0\x18F7\n\xF0\x3\xF0\x3\xF0\x3"+
		"\xF0\x5\xF0\x18FC\n\xF0\x3\xF0\x3\xF0\x3\xF0\x3\xF1\x3\xF1\x5\xF1\x1903"+
		"\n\xF1\x3\xF2\x3\xF2\x3\xF3\x3\xF3\x3\xF3\x5\xF3\x190A\n\xF3\x3\xF3\x5"+
		"\xF3\x190D\n\xF3\x3\xF3\x3\xF3\x3\xF3\x3\xF3\x3\xF3\x3\xF3\x5\xF3\x1915"+
		"\n\xF3\x3\xF3\x3\xF3\x3\xF3\x3\xF3\a\xF3\x191B\n\xF3\f\xF3\xE\xF3\x191E"+
		"\v\xF3\x5\xF3\x1920\n\xF3\x3\xF3\x3\xF3\x3\xF3\x3\xF3\a\xF3\x1926\n\xF3"+
		"\f\xF3\xE\xF3\x1929\v\xF3\x3\xF3\x3\xF3\x3\xF3\x3\xF4\x3\xF4\x3\xF5\x3"+
		"\xF5\x3\xF5\x5\xF5\x1933\n\xF5\x3\xF5\x5\xF5\x1936\n\xF5\x3\xF5\x3\xF5"+
		"\x3\xF5\x3\xF5\x3\xF5\x3\xF5\a\xF5\x193E\n\xF5\f\xF5\xE\xF5\x1941\v\xF5"+
		"\x3\xF5\x3\xF5\x3\xF5\x3\xF5\x5\xF5\x1947\n\xF5\x3\xF5\x3\xF5\x3\xF5\x5"+
		"\xF5\x194C\n\xF5\x3\xF5\x5\xF5\x194F\n\xF5\x3\xF6\x3\xF6\x3\xF6\x3\xF6"+
		"\x3\xF6\x3\xF6\a\xF6\x1957\n\xF6\f\xF6\xE\xF6\x195A\v\xF6\x5\xF6\x195C"+
		"\n\xF6\x3\xF6\x5\xF6\x195F\n\xF6\x3\xF6\x3\xF6\x3\xF6\x3\xF6\x3\xF6\x3"+
		"\xF6\x5\xF6\x1967\n\xF6\x3\xF7\x3\xF7\x3\xF7\x3\xF7\x3\xF7\x3\xF7\x3\xF7"+
		"\a\xF7\x1970\n\xF7\f\xF7\xE\xF7\x1973\v\xF7\x5\xF7\x1975\n\xF7\x3\xF7"+
		"\x5\xF7\x1978\n\xF7\x3\xF7\x3\xF7\a\xF7\x197C\n\xF7\f\xF7\xE\xF7\x197F"+
		"\v\xF7\x3\xF7\x3\xF7\x5\xF7\x1983\n\xF7\x3\xF7\x3\xF7\x5\xF7\x1987\n\xF7"+
		"\x3\xF8\x3\xF8\x3\xF8\x3\xF8\x3\xF8\x3\xF8\a\xF8\x198F\n\xF8\f\xF8\xE"+
		"\xF8\x1992\v\xF8\x5\xF8\x1994\n\xF8\x3\xF8\x5\xF8\x1997\n\xF8\x3\xF8\x3"+
		"\xF8\a\xF8\x199B\n\xF8\f\xF8\xE\xF8\x199E\v\xF8\x3\xF8\x3\xF8\x3\xF8\x5"+
		"\xF8\x19A3\n\xF8\x3\xF8\x3\xF8\x3\xF9\x3\xF9\x3\xF9\x3\xF9\x5\xF9\x19AB"+
		"\n\xF9\x3\xF9\x5\xF9\x19AE\n\xF9\x3\xF9\x3\xF9\x5\xF9\x19B2\n\xF9\x3\xF9"+
		"\x5\xF9\x19B5\n\xF9\x3\xF9\x3\xF9\x5\xF9\x19B9\n\xF9\x3\xF9\x5\xF9\x19BC"+
		"\n\xF9\x3\xFA\x3\xFA\x3\xFA\x3\xFA\x3\xFA\x3\xFA\x5\xFA\x19C4\n\xFA\x3"+
		"\xFB\x3\xFB\x3\xFB\x3\xFB\x3\xFB\x3\xFB\x3\xFB\x3\xFB\x3\xFB\x3\xFB\x3"+
		"\xFB\x3\xFB\x5\xFB\x19D2\n\xFB\x3\xFC\x3\xFC\x3\xFC\x3\xFC\x3\xFC\x3\xFC"+
		"\x3\xFC\x3\xFC\x3\xFC\x3\xFC\x3\xFC\x3\xFC\x3\xFC\x3\xFC\x5\xFC\x19E2"+
		"\n\xFC\x3\xFC\x3\xFC\x5\xFC\x19E6\n\xFC\x3\xFC\x3\xFC\x3\xFC\x3\xFC\x5"+
		"\xFC\x19EC\n\xFC\x5\xFC\x19EE\n\xFC\x3\xFC\x5\xFC\x19F1\n\xFC\x3\xFD\x3"+
		"\xFD\x5\xFD\x19F5\n\xFD\x3\xFD\x3\xFD\x3\xFD\x5\xFD\x19FA\n\xFD\x3\xFD"+
		"\x3\xFD\x3\xFD\x5\xFD\x19FF\n\xFD\x3\xFE\x3\xFE\x3\xFE\x3\xFE\x3\xFE\x3"+
		"\xFE\x5\xFE\x1A07\n\xFE\x3\xFE\x3\xFE\x3\xFE\x5\xFE\x1A0C\n\xFE\x3\xFE"+
		"\a\xFE\x1A0F\n\xFE\f\xFE\xE\xFE\x1A12\v\xFE\x3\xFE\x3\xFE\x3\xFE\x5\xFE"+
		"\x1A17\n\xFE\x3\xFE\x3\xFE\x3\xFE\x5\xFE\x1A1C\n\xFE\x3\xFE\x5\xFE\x1A1F"+
		"\n\xFE\x3\xFF\x3\xFF\x3\xFF\x3\xFF\x3\xFF\a\xFF\x1A26\n\xFF\f\xFF\xE\xFF"+
		"\x1A29\v\xFF\x3\xFF\x3\xFF\x3\xFF\x3\xFF\x3\xFF\a\xFF\x1A30\n\xFF\f\xFF"+
		"\xE\xFF\x1A33\v\xFF\x5\xFF\x1A35\n\xFF\x3\x100\x3\x100\x3\x100\x5\x100"+
		"\x1A3A\n\x100\x3\x100\x5\x100\x1A3D\n\x100\x3\x100\x3\x100\x3\x100\x3"+
		"\x100\x3\x101\x3\x101\x3\x101\x3\x101\x3\x101\x3\x101\x3\x101\x5\x101"+
		"\x1A4A\n\x101\x3\x101\x3\x101\x3\x101\x3\x101\a\x101\x1A50\n\x101\f\x101"+
		"\xE\x101\x1A53\v\x101\x5\x101\x1A55\n\x101\x3\x101\x3\x101\x3\x101\x3"+
		"\x101\x3\x101\x5\x101\x1A5C\n\x101\x3\x101\x5\x101\x1A5F\n\x101\x3\x102"+
		"\x3\x102\x3\x103\x3\x103\x3\x103\x3\x103\x3\x103\x3\x103\x3\x103\x3\x103"+
		"\x3\x103\x3\x103\x3\x103\x3\x103\x3\x103\x3\x103\x3\x103\x3\x103\x3\x103"+
		"\x3\x103\x3\x103\x3\x103\x3\x103\x3\x103\x3\x103\x3\x103\x3\x103\x3\x103"+
		"\x3\x103\x3\x103\x3\x103\x3\x103\x3\x103\x3\x103\x3\x103\x3\x103\x3\x103"+
		"\x3\x103\x3\x103\x3\x103\x3\x103\x3\x103\x3\x103\x3\x103\x5\x103\x1A8D"+
		"\n\x103\x3\x103\x3\x103\x5\x103\x1A91\n\x103\x3\x103\x5\x103\x1A94\n\x103"+
		"\x3\x104\x3\x104\x3\x104\x3\x104\x5\x104\x1A9A\n\x104\x3\x104\x3\x104"+
		"\x3\x104\x3\x104\x3\x104\x3\x104\x3\x104\x3\x104\x3\x104\x3\x104\x5\x104"+
		"\x1AA6\n\x104\x5\x104\x1AA8\n\x104\x3\x104\x5\x104\x1AAB\n\x104\x3\x105"+
		"\x3\x105\x3\x105\x3\x105\x3\x105\x3\x105\x3\x105\x3\x105\x3\x105\x3\x105"+
		"\x3\x105\x3\x105\x3\x105\x3\x105\x3\x105\x3\x105\x3\x105\a\x105\x1ABE"+
		"\n\x105\f\x105\xE\x105\x1AC1\v\x105\x3\x105\x3\x105\x3\x105\x3\x105\x3"+
		"\x105\x3\x105\x3\x105\x3\x105\x3\x105\x3\x105\x3\x105\x5\x105\x1ACE\n"+
		"\x105\x3\x106\x3\x106\x3\x106\x3\x106\x3\x106\x3\x106\x3\x106\x3\x106"+
		"\x3\x106\x5\x106\x1AD9\n\x106\x3\x106\x3\x106\x3\x106\x3\x106\x3\x106"+
		"\x3\x106\x5\x106\x1AE1\n\x106\x3\x107\x3\x107\x3\x107\x3\x107\x3\x107"+
		"\x3\x107\x3\x107\a\x107\x1AEA\n\x107\f\x107\xE\x107\x1AED\v\x107\a\x107"+
		"\x1AEF\n\x107\f\x107\xE\x107\x1AF2\v\x107\x5\x107\x1AF4\n\x107\x3\x108"+
		"\x3\x108\x3\x108\x3\x108\x3\x108\x3\x108\x5\x108\x1AFC\n\x108\x3\x109"+
		"\x3\x109\x3\x109\x3\x109\x3\x10A\x3\x10A\x3\x10A\x3\x10A\x5\x10A\x1B06"+
		"\n\x10A\x3\x10B\x3\x10B\x3\x10B\x3\x10B\x3\x10B\x5\x10B\x1B0D\n\x10B\x3"+
		"\x10B\x3\x10B\x3\x10B\x3\x10B\x3\x10B\x5\x10B\x1B14\n\x10B\x5\x10B\x1B16"+
		"\n\x10B\x3\x10B\x3\x10B\x3\x10B\x3\x10B\x3\x10B\x3\x10B\x3\x10B\x3\x10B"+
		"\x3\x10B\x3\x10B\x5\x10B\x1B22\n\x10B\x3\x10B\x3\x10B\x3\x10B\x3\x10B"+
		"\x3\x10B\x3\x10B\x3\x10B\x3\x10B\x3\x10B\x5\x10B\x1B2D\n\x10B\x3\x10B"+
		"\x3\x10B\x5\x10B\x1B31\n\x10B\x3\x10B\x3\x10B\x3\x10B\x5\x10B\x1B36\n"+
		"\x10B\x3\x10B\x5\x10B\x1B39\n\x10B\x5\x10B\x1B3B\n\x10B\x3\x10B\x5\x10B"+
		"\x1B3E\n\x10B\x3\x10B\x3\x10B\x3\x10B\x3\x10B\x3\x10B\x3\x10B\x3\x10B"+
		"\x3\x10B\x3\x10B\x3\x10B\x5\x10B\x1B4A\n\x10B\x5\x10B\x1B4C\n\x10B\x5"+
		"\x10B\x1B4E\n\x10B\x3\x10B\x5\x10B\x1B51\n\x10B\x3\x10B\x3\x10B\x3\x10B"+
		"\x5\x10B\x1B56\n\x10B\x3\x10B\x5\x10B\x1B59\n\x10B\x3\x10B\x3\x10B\x3"+
		"\x10B\x5\x10B\x1B5E\n\x10B\x3\x10B\x3\x10B\x3\x10B\x3\x10B\x3\x10B\x3"+
		"\x10B\x3\x10B\x3\x10B\x5\x10B\x1B68\n\x10B\x3\x10B\x3\x10B\x5\x10B\x1B6C"+
		"\n\x10B\x3\x10B\x3\x10B\x3\x10B\x5\x10B\x1B71\n\x10B\x3\x10B\x5\x10B\x1B74"+
		"\n\x10B\x5\x10B\x1B76\n\x10B\x3\x10B\x5\x10B\x1B79\n\x10B\x3\x10B\x3\x10B"+
		"\x3\x10B\x3\x10B\x3\x10B\x3\x10B\x3\x10B\x3\x10B\x3\x10B\x3\x10B\x5\x10B"+
		"\x1B85\n\x10B\x5\x10B\x1B87\n\x10B\x5\x10B\x1B89\n\x10B\x3\x10B\x5\x10B"+
		"\x1B8C\n\x10B\x3\x10B\x3\x10B\x3\x10B\x3\x10B\x5\x10B\x1B92\n\x10B\x3"+
		"\x10C\x3\x10C\x3\x10D\x3\x10D\x3\x10D\x3\x10D\x3\x10D\x3\x10D\x5\x10D"+
		"\x1B9C\n\x10D\x3\x10E\x3\x10E\x3\x10F\x3\x10F\x3\x110\x3\x110\x3\x111"+
		"\x3\x111\x3\x111\x3\x111\x3\x111\x3\x111\x3\x111\x3\x111\x3\x111\x3\x111"+
		"\x3\x111\x3\x111\x5\x111\x1BB0\n\x111\x3\x112\x3\x112\x3\x112\x3\x112"+
		"\x5\x112\x1BB6\n\x112\x3\x113\x3\x113\x3\x114\x3\x114\x3\x114\x3\x114"+
		"\x3\x114\x3\x115\x3\x115\x3\x116\x3\x116\x3\x116\x3\x116\x3\x117\x3\x117"+
		"\x3\x118\x3\x118\x3\x118\x3\x118\x3\x118\x3\x118\x3\x118\x3\x118\x5\x118"+
		"\x1BCF\n\x118\x5\x118\x1BD1\n\x118\x3\x119\x3\x119\x3\x119\x3\x11A\x3"+
		"\x11A\x3\x11A\x3\x11B\x3\x11B\x3\x11C\x3\x11C\x3\x11D\x3\x11D\x3\x11E"+
		"\x3\x11E\x3\x11E\x3\x11E\x3\x11F\x3\x11F\x3\x11F\x3\x11F\x3\x11F\x3\x11F"+
		"\x3\x11F\x3\x11F\x5\x11F\x1BEB\n\x11F\x3\x11F\x3\x11F\x3\x11F\x3\x11F"+
		"\x5\x11F\x1BF1\n\x11F\x3\x11F\x3\x11F\x3\x11F\x3\x11F\x3\x11F\x3\x11F"+
		"\x3\x11F\x3\x11F\x3\x11F\x5\x11F\x1BFC\n\x11F\x3\x120\x3\x120\x3\x120"+
		"\x3\x120\x3\x120\x3\x120\x5\x120\x1C04\n\x120\x3\x120\x5\x120\x1C07\n"+
		"\x120\x3\x121\x3\x121\x3\x121\x3\x122\x3\x122\x3\x122\x3\x123\x3\x123"+
		"\x3\x123\x3\x123\x3\x123\x3\x123\x5\x123\x1C15\n\x123\x3\x124\x3\x124"+
		"\x3\x124\x3\x124\x3\x124\x3\x124\x5\x124\x1C1D\n\x124\x3\x125\x3\x125"+
		"\x3\x125\x3\x125\x3\x125\x3\x125\x3\x125\x5\x125\x1C26\n\x125\x3\x126"+
		"\x3\x126\x3\x126\x3\x126\x3\x126\x3\x126\x3\x126\x3\x126\x3\x126\x3\x126"+
		"\x3\x126\x3\x126\x3\x126\x3\x126\x3\x126\x3\x126\x3\x126\x3\x126\x3\x126"+
		"\x3\x126\x3\x126\x5\x126\x1C3D\n\x126\x3\x127\x3\x127\x3\x127\x3\x127"+
		"\x3\x127\x3\x128\x3\x128\x3\x128\x3\x128\x3\x128\x3\x128\x5\x128\x1C4A"+
		"\n\x128\x3\x129\x3\x129\x3\x129\x3\x129\x5\x129\x1C50\n\x129\x3\x129\x3"+
		"\x129\x3\x129\a\x129\x1C55\n\x129\f\x129\xE\x129\x1C58\v\x129\x3\x129"+
		"\x3\x129\x3\x129\a\x129\x1C5D\n\x129\f\x129\xE\x129\x1C60\v\x129\x5\x129"+
		"\x1C62\n\x129\x3\x129\x5\x129\x1C65\n\x129\x3\x12A\x3\x12A\x3\x12A\x3"+
		"\x12A\x3\x12B\x3\x12B\x3\x12B\x5\x12B\x1C6E\n\x12B\x3\x12B\x3\x12B\x3"+
		"\x12B\x3\x12B\x3\x12C\x3\x12C\x3\x12C\x3\x12C\x5\x12C\x1C78\n\x12C\x3"+
		"\x12C\x3\x12C\x3\x12C\a\x12C\x1C7D\n\x12C\f\x12C\xE\x12C\x1C80\v\x12C"+
		"\x3\x12C\x5\x12C\x1C83\n\x12C\x3\x12D\x3\x12D\x5\x12D\x1C87\n\x12D\x3"+
		"\x12E\x3\x12E\x3\x12E\x3\x12E\x5\x12E\x1C8D\n\x12E\x3\x12E\x3\x12E\x3"+
		"\x12E\a\x12E\x1C92\n\x12E\f\x12E\xE\x12E\x1C95\v\x12E\x3\x12E\x5\x12E"+
		"\x1C98\n\x12E\x3\x12F\x3\x12F\x3\x12F\x3\x12F\x5\x12F\x1C9E\n\x12F\x3"+
		"\x12F\x3\x12F\x3\x12F\a\x12F\x1CA3\n\x12F\f\x12F\xE\x12F\x1CA6\v\x12F"+
		"\x3\x12F\x3\x12F\x3\x12F\x3\x12F\x5\x12F\x1CAC\n\x12F\x3\x12F\x5\x12F"+
		"\x1CAF\n\x12F\x3\x130\x3\x130\x3\x130\x3\x130\x5\x130\x1CB5\n\x130\x3"+
		"\x130\x3\x130\x3\x130\a\x130\x1CBA\n\x130\f\x130\xE\x130\x1CBD\v\x130"+
		"\x3\x130\x5\x130\x1CC0\n\x130\x3\x131\x3\x131\x3\x131\x5\x131\x1CC5\n"+
		"\x131\x3\x131\x3\x131\x3\x131\x5\x131\x1CCA\n\x131\x3\x131\x6\x131\x1CCD"+
		"\n\x131\r\x131\xE\x131\x1CCE\x3\x131\x3\x131\x3\x132\x3\x132\x3\x132\x3"+
		"\x132\x5\x132\x1CD7\n\x132\x3\x132\x3\x132\x5\x132\x1CDB\n\x132\x3\x133"+
		"\x3\x133\x3\x133\x3\x133\x5\x133\x1CE1\n\x133\x3\x133\x3\x133\x3\x133"+
		"\a\x133\x1CE6\n\x133\f\x133\xE\x133\x1CE9\v\x133\x3\x133\x5\x133\x1CEC"+
		"\n\x133\x3\x134\x3\x134\x3\x134\x3\x134\x3\x134\x3\x134\x3\x134\x5\x134"+
		"\x1CF5\n\x134\x3\x134\x3\x134\x3\x134\x3\x134\x3\x134\x3\x134\x5\x134"+
		"\x1CFD\n\x134\x3\x135\x3\x135\x3\x135\x3\x135\x5\x135\x1D03\n\x135\x3"+
		"\x135\x3\x135\x3\x136\x3\x136\x5\x136\x1D09\n\x136\x3\x137\x3\x137\x3"+
		"\x137\x3\x137\x3\x137\x3\x137\x3\x137\x3\x138\x3\x138\x3\x138\x3\x138"+
		"\x3\x138\x3\x138\x3\x138\x3\x138\x5\x138\x1D1A\n\x138\x3\x138\x3\x138"+
		"\x5\x138\x1D1E\n\x138\x3\x138\x3\x138\x3\x138\x3\x139\x3\x139\x3\x139"+
		"\x5\x139\x1D26\n\x139\x3\x139\x3\x139\x5\x139\x1D2A\n\x139\x3\x139\x3"+
		"\x139\x3\x139\x3\x139\a\x139\x1D30\n\x139\f\x139\xE\x139\x1D33\v\x139"+
		"\x3\x139\x5\x139\x1D36\n\x139\x3\x139\x3\x139\x3\x139\x5\x139\x1D3B\n"+
		"\x139\x3\x139\x3\x139\x5\x139\x1D3F\n\x139\x3\x139\x3\x139\x3\x139\x3"+
		"\x139\x3\x139\x5\x139\x1D46\n\x139\x3\x139\x3\x139\x3\x139\x3\x139\x5"+
		"\x139\x1D4C\n\x139\x5\x139\x1D4E\n\x139\x3\x13A\x3\x13A\x5\x13A\x1D52"+
		"\n\x13A\x3\x13A\x3\x13A\x5\x13A\x1D56\n\x13A\x3\x13A\x3\x13A\x5\x13A\x1D5A"+
		"\n\x13A\x3\x13A\x5\x13A\x1D5D\n\x13A\x3\x13A\x3\x13A\x5\x13A\x1D61\n\x13A"+
		"\x3\x13A\x3\x13A\x3\x13A\x3\x13A\x5\x13A\x1D67\n\x13A\x3\x13A\x3\x13A"+
		"\x5\x13A\x1D6B\n\x13A\x5\x13A\x1D6D\n\x13A\x3\x13B\x3\x13B\x3\x13B\x3"+
		"\x13B\x3\x13B\x5\x13B\x1D74\n\x13B\x3\x13B\x3\x13B\x3\x13B\a\x13B\x1D79"+
		"\n\x13B\f\x13B\xE\x13B\x1D7C\v\x13B\x5\x13B\x1D7E\n\x13B\x3\x13B\x5\x13B"+
		"\x1D81\n\x13B\x3\x13B\x3\x13B\x3\x13B\a\x13B\x1D86\n\x13B\f\x13B\xE\x13B"+
		"\x1D89\v\x13B\x3\x13B\x3\x13B\x5\x13B\x1D8D\n\x13B\x3\x13B\x6\x13B\x1D90"+
		"\n\x13B\r\x13B\xE\x13B\x1D91\x3\x13B\x3\x13B\x5\x13B\x1D96\n\x13B\x3\x13B"+
		"\x3\x13B\x3\x13B\x3\x13B\x5\x13B\x1D9C\n\x13B\x6\x13B\x1D9E\n\x13B\r\x13B"+
		"\xE\x13B\x1D9F\x5\x13B\x1DA2\n\x13B\x3\x13B\x3\x13B\x3\x13B\x5\x13B\x1DA7"+
		"\n\x13B\x3\x13B\x6\x13B\x1DAA\n\x13B\r\x13B\xE\x13B\x1DAB\x6\x13B\x1DAE"+
		"\n\x13B\r\x13B\xE\x13B\x1DAF\x3\x13B\x3\x13B\x3\x13B\x5\x13B\x1DB5\n\x13B"+
		"\x3\x13B\x3\x13B\x3\x13B\x3\x13B\x5\x13B\x1DBB\n\x13B\x6\x13B\x1DBD\n"+
		"\x13B\r\x13B\xE\x13B\x1DBE\x6\x13B\x1DC1\n\x13B\r\x13B\xE\x13B\x1DC2\x5"+
		"\x13B\x1DC5\n\x13B\x3\x13B\x3\x13B\x5\x13B\x1DC9\n\x13B\x3\x13B\x3\x13B"+
		"\x5\x13B\x1DCD\n\x13B\x3\x13B\x3\x13B\x5\x13B\x1DD1\n\x13B\x3\x13B\x3"+
		"\x13B\x5\x13B\x1DD5\n\x13B\x3\x13B\x3\x13B\x3\x13B\x3\x13B\x5\x13B\x1DDB"+
		"\n\x13B\x3\x13B\x5\x13B\x1DDE\n\x13B\x3\x13B\x3\x13B\x3\x13B\x3\x13B\x5"+
		"\x13B\x1DE4\n\x13B\x3\x13B\x3\x13B\x5\x13B\x1DE8\n\x13B\x3\x13B\x3\x13B"+
		"\x5\x13B\x1DEC\n\x13B\x3\x13B\x3\x13B\x3\x13B\x3\x13B\x5\x13B\x1DF2\n"+
		"\x13B\x3\x13B\x3\x13B\x3\x13B\x3\x13B\x5\x13B\x1DF8\n\x13B\x5\x13B\x1DFA"+
		"\n\x13B\x3\x13B\x5\x13B\x1DFD\n\x13B\x3\x13B\x3\x13B\x5\x13B\x1E01\n\x13B"+
		"\x3\x13B\x3\x13B\x5\x13B\x1E05\n\x13B\x3\x13B\x3\x13B\x5\x13B\x1E09\n"+
		"\x13B\x3\x13B\x3\x13B\x3\x13B\x3\x13B\x5\x13B\x1E0F\n\x13B\x3\x13B\x5"+
		"\x13B\x1E12\n\x13B\x3\x13B\x3\x13B\x3\x13B\x3\x13B\x5\x13B\x1E18\n\x13B"+
		"\x3\x13B\x3\x13B\x3\x13B\x3\x13B\x5\x13B\x1E1E\n\x13B\x3\x13B\x5\x13B"+
		"\x1E21\n\x13B\x3\x13B\x3\x13B\x3\x13B\x3\x13B\x5\x13B\x1E27\n\x13B\x3"+
		"\x13B\x5\x13B\x1E2A\n\x13B\x3\x13B\x3\x13B\x3\x13B\x3\x13B\x5\x13B\x1E30"+
		"\n\x13B\x3\x13B\x5\x13B\x1E33\n\x13B\x3\x13B\x3\x13B\x5\x13B\x1E37\n\x13B"+
		"\x3\x13B\x3\x13B\x5\x13B\x1E3B\n\x13B\x3\x13B\x3\x13B\x5\x13B\x1E3F\n"+
		"\x13B\x3\x13B\x3\x13B\x3\x13B\x5\x13B\x1E44\n\x13B\x3\x13B\x5\x13B\x1E47"+
		"\n\x13B\x3\x13B\x3\x13B\x5\x13B\x1E4B\n\x13B\x3\x13B\x3\x13B\x5\x13B\x1E4F"+
		"\n\x13B\x3\x13B\x3\x13B\x3\x13B\x3\x13B\x3\x13B\x3\x13B\x3\x13B\x3\x13B"+
		"\x3\x13B\x3\x13B\x3\x13B\x3\x13B\x3\x13B\x3\x13B\x3\x13B\x5\x13B\x1E60"+
		"\n\x13B\x3\x13B\x3\x13B\a\x13B\x1E64\n\x13B\f\x13B\xE\x13B\x1E67\v\x13B"+
		"\x5\x13B\x1E69\n\x13B\x3\x13C\x3\x13C\x3\x13C\x3\x13C\x3\x13C\x5\x13C"+
		"\x1E70\n\x13C\x3\x13C\x6\x13C\x1E73\n\x13C\r\x13C\xE\x13C\x1E74\x3\x13C"+
		"\x3\x13C\x5\x13C\x1E79\n\x13C\x3\x13C\x3\x13C\x3\x13C\x3\x13C\x5\x13C"+
		"\x1E7F\n\x13C\x6\x13C\x1E81\n\x13C\r\x13C\xE\x13C\x1E82\x5\x13C\x1E85"+
		"\n\x13C\x3\x13C\x3\x13C\x3\x13C\x5\x13C\x1E8A\n\x13C\x3\x13C\x6\x13C\x1E8D"+
		"\n\x13C\r\x13C\xE\x13C\x1E8E\x6\x13C\x1E91\n\x13C\r\x13C\xE\x13C\x1E92"+
		"\x3\x13C\x3\x13C\x3\x13C\x5\x13C\x1E98\n\x13C\x3\x13C\x3\x13C\x3\x13C"+
		"\x3\x13C\x5\x13C\x1E9E\n\x13C\x6\x13C\x1EA0\n\x13C\r\x13C\xE\x13C\x1EA1"+
		"\x6\x13C\x1EA4\n\x13C\r\x13C\xE\x13C\x1EA5\x5\x13C\x1EA8\n\x13C\x3\x13C"+
		"\x3\x13C\x5\x13C\x1EAC\n\x13C\x3\x13C\x3\x13C\x5\x13C\x1EB0\n\x13C\x3"+
		"\x13C\x3\x13C\x5\x13C\x1EB4\n\x13C\x3\x13C\x3\x13C\x5\x13C\x1EB8\n\x13C"+
		"\x3\x13C\x3\x13C\x3\x13C\x3\x13C\x5\x13C\x1EBE\n\x13C\x3\x13C\x5\x13C"+
		"\x1EC1\n\x13C\x3\x13C\x3\x13C\x3\x13C\x3\x13C\x5\x13C\x1EC7\n\x13C\x3"+
		"\x13C\x3\x13C\x5\x13C\x1ECB\n\x13C\x3\x13C\x3\x13C\x5\x13C\x1ECF\n\x13C"+
		"\x3\x13C\x3\x13C\x3\x13C\x3\x13C\x5\x13C\x1ED5\n\x13C\x3\x13C\x3\x13C"+
		"\x3\x13C\x3\x13C\x5\x13C\x1EDB\n\x13C\x5\x13C\x1EDD\n\x13C\x3\x13C\x5"+
		"\x13C\x1EE0\n\x13C\x3\x13C\x3\x13C\x5\x13C\x1EE4\n\x13C\x3\x13C\x3\x13C"+
		"\x5\x13C\x1EE8\n\x13C\x3\x13C\x3\x13C\x5\x13C\x1EEC\n\x13C\x3\x13C\x3"+
		"\x13C\x3\x13C\x3\x13C\x5\x13C\x1EF2\n\x13C\x3\x13C\x5\x13C\x1EF5\n\x13C"+
		"\x3\x13C\x3\x13C\x3\x13C\x3\x13C\x5\x13C\x1EFB\n\x13C\x3\x13C\x3\x13C"+
		"\x3\x13C\x3\x13C\x5\x13C\x1F01\n\x13C\x3\x13C\x5\x13C\x1F04\n\x13C\x3"+
		"\x13C\x3\x13C\x3\x13C\x3\x13C\x5\x13C\x1F0A\n\x13C\x3\x13C\x5\x13C\x1F0D"+
		"\n\x13C\x3\x13C\x3\x13C\x3\x13C\x3\x13C\x5\x13C\x1F13\n\x13C\x3\x13C\x5"+
		"\x13C\x1F16\n\x13C\x3\x13C\x3\x13C\x5\x13C\x1F1A\n\x13C\x3\x13C\x3\x13C"+
		"\x5\x13C\x1F1E\n\x13C\x3\x13C\x3\x13C\x5\x13C\x1F22\n\x13C\x3\x13C\x3"+
		"\x13C\x3\x13C\x5\x13C\x1F27\n\x13C\x3\x13C\x5\x13C\x1F2A\n\x13C\x3\x13C"+
		"\x3\x13C\x5\x13C\x1F2E\n\x13C\x3\x13C\x3\x13C\x5\x13C\x1F32\n\x13C\x3"+
		"\x13C\x3\x13C\x3\x13C\x3\x13C\x5\x13C\x1F38\n\x13C\x3\x13C\x5\x13C\x1F3B"+
		"\n\x13C\x3\x13C\x3\x13C\x5\x13C\x1F3F\n\x13C\x3\x13C\x3\x13C\x3\x13C\x3"+
		"\x13C\x3\x13C\x3\x13C\x3\x13C\x3\x13C\x3\x13C\x3\x13C\x3\x13C\x3\x13C"+
		"\x3\x13C\x3\x13C\x3\x13C\x5\x13C\x1F50\n\x13C\a\x13C\x1F52\n\x13C\f\x13C"+
		"\xE\x13C\x1F55\v\x13C\x5\x13C\x1F57\n\x13C\x3\x13D\x3\x13D\x3\x13D\x3"+
		"\x13D\x3\x13D\x3\x13D\x3\x13D\x3\x13D\x3\x13D\x3\x13D\x3\x13D\x3\x13D"+
		"\x5\x13D\x1F65\n\x13D\x3\x13D\x3\x13D\x3\x13D\x3\x13D\x5\x13D\x1F6B\n"+
		"\x13D\x3\x13D\x3\x13D\x3\x13D\x3\x13D\x3\x13D\x3\x13D\x5\x13D\x1F73\n"+
		"\x13D\x3\x13D\x3\x13D\x3\x13D\x3\x13D\x3\x13D\x6\x13D\x1F7A\n\x13D\r\x13D"+
		"\xE\x13D\x1F7B\x3\x13D\x5\x13D\x1F7F\n\x13D\x3\x13E\x3\x13E\x3\x13E\x3"+
		"\x13E\x3\x13E\x3\x13E\x3\x13E\x3\x13E\x3\x13E\x3\x13E\x3\x13E\x3\x13E"+
		"\x3\x13E\x3\x13F\x3\x13F\x3\x13F\x3\x13F\x3\x13F\x3\x13F\x3\x13F\x3\x13F"+
		"\x3\x13F\x3\x13F\x3\x13F\x3\x13F\x3\x13F\x3\x13F\x3\x140\x3\x140\x3\x140"+
		"\x3\x140\x5\x140\x1FA0\n\x140\x3\x141\x3\x141\x5\x141\x1FA4\n\x141\x3"+
		"\x141\x3\x141\x5\x141\x1FA8\n\x141\x3\x142\x3\x142\x3\x142\x3\x142\x3"+
		"\x142\x5\x142\x1FAF\n\x142\x3\x143\x3\x143\x3\x143\x3\x143\x3\x144\x3"+
		"\x144\x3\x144\x3\x145\x3\x145\x5\x145\x1FBA\n\x145\x3\x145\x3\x145\x5"+
		"\x145\x1FBE\n\x145\x3\x145\x3\x145\x3\x145\a\x145\x1FC3\n\x145\f\x145"+
		"\xE\x145\x1FC6\v\x145\x5\x145\x1FC8\n\x145\x3\x145\x3\x145\x5\x145\x1FCC"+
		"\n\x145\x3\x145\x5\x145\x1FCF\n\x145\x3\x145\x3\x145\x3\x145\x3\x145\a"+
		"\x145\x1FD5\n\x145\f\x145\xE\x145\x1FD8\v\x145\x3\x145\x3\x145\x5\x145"+
		"\x1FDC\n\x145\x3\x145\x3\x145\x3\x145\x5\x145\x1FE1\n\x145\x3\x145\x5"+
		"\x145\x1FE4\n\x145\x5\x145\x1FE6\n\x145\x3\x146\x3\x146\x5\x146\x1FEA"+
		"\n\x146\x3\x146\x3\x146\x5\x146\x1FEE\n\x146\x3\x146\x5\x146\x1FF1\n\x146"+
		"\x3\x146\x3\x146\x5\x146\x1FF5\n\x146\x3\x147\x3\x147\x3\x148\x3\x148"+
		"\x3\x148\x3\x148\x3\x148\x3\x148\x3\x148\x3\x148\x3\x148\x3\x148\x3\x148"+
		"\x3\x148\x3\x148\x3\x148\x3\x148\a\x148\x2008\n\x148\f\x148\xE\x148\x200B"+
		"\v\x148\x3\x148\x3\x148\x5\x148\x200F\n\x148\x3\x149\x3\x149\x3\x149\a"+
		"\x149\x2014\n\x149\f\x149\xE\x149\x2017\v\x149\x3\x14A\x3\x14A\x3\x14A"+
		"\x3\x14A\x5\x14A\x201D\n\x14A\x3\x14A\x3\x14A\x5\x14A\x2021\n\x14A\x3"+
		"\x14A\x5\x14A\x2024\n\x14A\x3\x14B\x3\x14B\x5\x14B\x2028\n\x14B\x3\x14B"+
		"\x3\x14B\x3\x14B\x5\x14B\x202D\n\x14B\x3\x14B\x3\x14B\x3\x14B\x3\x14B"+
		"\x3\x14B\x5\x14B\x2034\n\x14B\x5\x14B\x2036\n\x14B\x3\x14B\x3\x14B\x5"+
		"\x14B\x203A\n\x14B\x3\x14B\x3\x14B\x3\x14B\x3\x14B\a\x14B\x2040\n\x14B"+
		"\f\x14B\xE\x14B\x2043\v\x14B\x3\x14B\x3\x14B\x3\x14B\x5\x14B\x2048\n\x14B"+
		"\x3\x14B\x3\x14B\x5\x14B\x204C\n\x14B\x3\x14B\x5\x14B\x204F\n\x14B\x3"+
		"\x14B\x3\x14B\x3\x14B\x3\x14B\x3\x14B\x3\x14B\x3\x14B\x5\x14B\x2058\n"+
		"\x14B\x3\x14B\x5\x14B\x205B\n\x14B\x3\x14B\x3\x14B\x3\x14B\x3\x14B\x5"+
		"\x14B\x2061\n\x14B\x3\x14C\x3\x14C\x3\x14C\x3\x14C\x3\x14C\x5\x14C\x2068"+
		"\n\x14C\x3\x14C\x3\x14C\x3\x14C\x5\x14C\x206D\n\x14C\x3\x14C\x3\x14C\x3"+
		"\x14C\x3\x14C\x3\x14C\x3\x14C\x5\x14C\x2075\n\x14C\x3\x14D\x3\x14D\x3"+
		"\x14D\x5\x14D\x207A\n\x14D\x3\x14D\x3\x14D\x3\x14D\x3\x14D\x3\x14D\x3"+
		"\x14D\x3\x14D\x3\x14D\x3\x14D\x3\x14D\x5\x14D\x2086\n\x14D\x5\x14D\x2088"+
		"\n\x14D\x3\x14E\x3\x14E\x3\x14E\x3\x14E\x3\x14E\x3\x14E\x3\x14E\x3\x14E"+
		"\x3\x14E\x5\x14E\x2093\n\x14E\x3\x14F\x3\x14F\x3\x14F\x3\x14F\x3\x14F"+
		"\x5\x14F\x209A\n\x14F\x3\x14F\x3\x14F\x3\x14F\x3\x14F\x3\x14F\x3\x14F"+
		"\a\x14F\x20A2\n\x14F\f\x14F\xE\x14F\x20A5\v\x14F\x3\x150\x3\x150\x3\x150"+
		"\x3\x150\x3\x151\x3\x151\x3\x151\x3\x151\x3\x151\x3\x151\x3\x151\x3\x151"+
		"\x3\x151\x3\x151\x3\x151\x3\x151\x3\x151\x3\x151\x3\x151\x3\x151\x5\x151"+
		"\x20BB\n\x151\x3\x152\x3\x152\x3\x152\x3\x152\x3\x152\x3\x152\x3\x152"+
		"\x3\x152\x3\x152\x3\x152\x3\x152\x5\x152\x20C8\n\x152\x3\x153\x3\x153"+
		"\x3\x153\x3\x153\x3\x153\x3\x153\x3\x153\x3\x153\x3\x153\x3\x153\x3\x153"+
		"\x3\x153\x3\x153\x3\x153\x5\x153\x20D8\n\x153\x3\x153\x3\x153\x3\x153"+
		"\x5\x153\x20DD\n\x153\x3\x153\x3\x153\x3\x153\x3\x153\x3\x153\x5\x153"+
		"\x20E4\n\x153\x3\x153\x5\x153\x20E7\n\x153\x6\x153\x20E9\n\x153\r\x153"+
		"\xE\x153\x20EA\x5\x153\x20ED\n\x153\x3\x154\x3\x154\x3\x154\x3\x154\x3"+
		"\x154\x3\x154\x3\x154\x3\x154\x3\x154\x3\x154\x3\x154\x3\x154\x3\x154"+
		"\x3\x154\x3\x154\x5\x154\x20FE\n\x154\x3\x155\x3\x155\x3\x156\x3\x156"+
		"\x3\x156\x3\x156\x3\x156\x3\x156\x3\x156\x3\x156\x3\x156\x3\x156\x3\x156"+
		"\x5\x156\x210D\n\x156\x3\x157\x3\x157\x3\x157\x3\x157\x3\x157\x3\x157"+
		"\x5\x157\x2115\n\x157\x3\x157\x3\x157\x3\x157\x3\x157\x3\x157\x3\x157"+
		"\x3\x157\x5\x157\x211E\n\x157\x3\x157\x3\x157\x3\x157\x3\x157\x3\x157"+
		"\x3\x157\x5\x157\x2126\n\x157\x3\x158\x3\x158\x3\x158\x3\x158\x3\x158"+
		"\x3\x158\x3\x158\x5\x158\x212F\n\x158\x3\x158\x3\x158\x3\x158\x3\x158"+
		"\x3\x158\x3\x158\x3\x158\x3\x158\x3\x158\x5\x158\x213A\n\x158\x3\x158"+
		"\x3\x158\x5\x158\x213E\n\x158\x5\x158\x2140\n\x158\x5\x158\x2142\n\x158"+
		"\x3\x159\x3\x159\x3\x159\x3\x159\x5\x159\x2148\n\x159\x3\x159\x3\x159"+
		"\x3\x159\x5\x159\x214D\n\x159\x3\x159\x3\x159\x3\x159\x3\x159\x3\x159"+
		"\x5\x159\x2154\n\x159\x3\x159\x3\x159\x3\x159\x3\x159\x3\x159\x3\x159"+
		"\x3\x159\x3\x159\x3\x159\x3\x159\x3\x159\x5\x159\x2161\n\x159\x5\x159"+
		"\x2163\n\x159\x5\x159\x2165\n\x159\x3\x159\x5\x159\x2168\n\x159\x3\x159"+
		"\x5\x159\x216B\n\x159\x3\x15A\x3\x15A\x3\x15A\x3\x15A\x3\x15A\x5\x15A"+
		"\x2172\n\x15A\x3\x15A\x5\x15A\x2175\n\x15A\x3\x15A\x3\x15A\x3\x15A\x3"+
		"\x15A\x5\x15A\x217B\n\x15A\x3\x15A\x3\x15A\x3\x15A\x5\x15A\x2180\n\x15A"+
		"\x5\x15A\x2182\n\x15A\x3\x15A\x5\x15A\x2185\n\x15A\x3\x15A\x3\x15A\x3"+
		"\x15A\x3\x15A\x5\x15A\x218B\n\x15A\x3\x15A\x3\x15A\x3\x15A\x3\x15A\x3"+
		"\x15A\x3\x15A\x5\x15A\x2193\n\x15A\x5\x15A\x2195\n\x15A\x3\x15A\x5\x15A"+
		"\x2198\n\x15A\x3\x15A\x3\x15A\x5\x15A\x219C\n\x15A\x3\x15A\x5\x15A\x219F"+
		"\n\x15A\x3\x15A\x3\x15A\x3\x15A\x3\x15A\x3\x15A\x3\x15A\x3\x15A\x3\x15A"+
		"\x5\x15A\x21A9\n\x15A\x3\x15A\x5\x15A\x21AC\n\x15A\x3\x15A\x3\x15A\x5"+
		"\x15A\x21B0\n\x15A\x3\x15A\x5\x15A\x21B3\n\x15A\x3\x15A\x3\x15A\x3\x15A"+
		"\x3\x15A\x5\x15A\x21B9\n\x15A\x3\x15A\x5\x15A\x21BC\n\x15A\x5\x15A\x21BE"+
		"\n\x15A\x3\x15B\x3\x15B\x5\x15B\x21C2\n\x15B\x3\x15C\x3\x15C\x3\x15C\x5"+
		"\x15C\x21C7\n\x15C\x3\x15D\x3\x15D\x5\x15D\x21CB\n\x15D\x3\x15E\x3\x15E"+
		"\x3\x15E\x5\x15E\x21D0\n\x15E\x3\x15F\x3\x15F\x3\x15F\x5\x15F\x21D5\n"+
		"\x15F\x3\x160\x3\x160\x3\x160\x3\x160\x3\x160\x3\x160\x5\x160\x21DD\n"+
		"\x160\x3\x160\x3\x160\x5\x160\x21E1\n\x160\x3\x160\x5\x160\x21E4\n\x160"+
		"\x3\x161\x3\x161\x3\x161\x5\x161\x21E9\n\x161\x3\x162\x3\x162\x3\x162"+
		"\x3\x162\x3\x163\x3\x163\x5\x163\x21F1\n\x163\x3\x163\x3\x163\x3\x163"+
		"\x5\x163\x21F6\n\x163\x3\x164\x3\x164\x3\x164\x3\x164\x3\x164\x3\x165"+
		"\x3\x165\x3\x165\x5\x165\x2200\n\x165\x3\x165\x3\x165\x3\x165\x3\x166"+
		"\x3\x166\x3\x166\x3\x166\x3\x167\x3\x167\x5\x167\x220B\n\x167\x3\x167"+
		"\a\x167\x220E\n\x167\f\x167\xE\x167\x2211\v\x167\x3\x168\x3\x168\x3\x168"+
		"\x5\x168\x2216\n\x168\x3\x169\x3\x169\x5\x169\x221A\n\x169\x3\x169\a\x169"+
		"\x221D\n\x169\f\x169\xE\x169\x2220\v\x169\x3\x16A\x3\x16A\x3\x16A\x3\x16A"+
		"\x5\x16A\x2226\n\x16A\x3\x16B\x3\x16B\x3\x16B\x3\x16B\x5\x16B\x222C\n"+
		"\x16B\x3\x16B\x3\x16B\x5\x16B\x2230\n\x16B\x3\x16B\x5\x16B\x2233\n\x16B"+
		"\x3\x16B\x3\x16B\x5\x16B\x2237\n\x16B\x3\x16B\x3\x16B\x5\x16B\x223B\n"+
		"\x16B\x3\x16B\x3\x16B\x3\x16B\x3\x16B\x3\x16B\x3\x16B\x5\x16B\x2243\n"+
		"\x16B\x3\x16B\x3\x16B\x3\x16B\x5\x16B\x2248\n\x16B\x5\x16B\x224A\n\x16B"+
		"\x3\x16B\x5\x16B\x224D\n\x16B\x3\x16B\a\x16B\x2250\n\x16B\f\x16B\xE\x16B"+
		"\x2253\v\x16B\x3\x16C\x3\x16C\x3\x16C\x3\x16C\x3\x16C\x3\x16C\x5\x16C"+
		"\x225B\n\x16C\x3\x16D\x3\x16D\x5\x16D\x225F\n\x16D\x3\x16D\x3\x16D\x3"+
		"\x16D\x5\x16D\x2264\n\x16D\x3\x16D\x5\x16D\x2267\n\x16D\x3\x16D\x5\x16D"+
		"\x226A\n\x16D\x3\x16D\x3\x16D\x3\x16D\x3\x16D\x5\x16D\x2270\n\x16D\x3"+
		"\x16D\x3\x16D\x3\x16D\x3\x16D\x3\x16D\x3\x16D\x5\x16D\x2278\n\x16D\x3"+
		"\x16D\x3\x16D\x3\x16D\x3\x16D\x3\x16D\x3\x16D\x5\x16D\x2280\n\x16D\x3"+
		"\x16D\x5\x16D\x2283\n\x16D\x3\x16D\x5\x16D\x2286\n\x16D\x3\x16E\x3\x16E"+
		"\x5\x16E\x228A\n\x16E\x3\x16E\x3\x16E\x3\x16E\x5\x16E\x228F\n\x16E\x3"+
		"\x16E\x5\x16E\x2292\n\x16E\x3\x16E\x3\x16E\x3\x16E\x3\x16E\x5\x16E\x2298"+
		"\n\x16E\x3\x16E\x3\x16E\x5\x16E\x229C\n\x16E\x3\x16E\x3\x16E\x3\x16E\x3"+
		"\x16E\x3\x16E\x3\x16E\x3\x16E\x3\x16E\x3\x16E\x3\x16E\x3\x16E\x3\x16E"+
		"\x5\x16E\x22AA\n\x16E\x3\x16E\x3\x16E\x3\x16E\x3\x16E\x5\x16E\x22B0\n"+
		"\x16E\x3\x16E\x3\x16E\x3\x16E\x3\x16E\x3\x16E\x3\x16E\x5\x16E\x22B8\n"+
		"\x16E\x3\x16E\x3\x16E\x3\x16E\x3\x16E\x6\x16E\x22BE\n\x16E\r\x16E\xE\x16E"+
		"\x22BF\x3\x16E\x5\x16E\x22C3\n\x16E\x3\x16E\x3\x16E\x3\x16E\x3\x16E\x3"+
		"\x16E\x3\x16E\x3\x16E\x3\x16E\x3\x16E\x3\x16E\x3\x16E\x3\x16E\x3\x16E"+
		"\x5\x16E\x22D2\n\x16E\x3\x16E\x5\x16E\x22D5\n\x16E\x3\x16E\x5\x16E\x22D8"+
		"\n\x16E\x5\x16E\x22DA\n\x16E\x3\x16F\x3\x16F\x3\x16F\x3\x16F\x3\x16F\x3"+
		"\x16F\x3\x16F\x3\x16F\x3\x16F\x5\x16F\x22E5\n\x16F\x3\x170\x3\x170\x3"+
		"\x170\x3\x170\x3\x170\x3\x170\x3\x170\x3\x170\x3\x170\x5\x170\x22F0\n"+
		"\x170\x3\x171\x3\x171\x3\x171\x3\x171\x3\x171\a\x171\x22F7\n\x171\f\x171"+
		"\xE\x171\x22FA\v\x171\x3\x171\x3\x171\x3\x172\x3\x172\x3\x172\x3\x172"+
		"\x3\x172\x5\x172\x2303\n\x172\x3\x173\x3\x173\x3\x173\x3\x173\x3\x173"+
		"\x3\x173\x3\x173\x3\x173\x5\x173\x230D\n\x173\x5\x173\x230F\n\x173\x5"+
		"\x173\x2311\n\x173\x3\x173\x5\x173\x2314\n\x173\x3\x173\x5\x173\x2317"+
		"\n\x173\x3\x173\x3\x173\x3\x173\x3\x173\x3\x173\x3\x173\x3\x173\x3\x173"+
		"\x3\x173\x5\x173\x2322\n\x173\x5\x173\x2324\n\x173\x5\x173\x2326\n\x173"+
		"\x3\x173\x5\x173\x2329\n\x173\x3\x174\a\x174\x232C\n\x174\f\x174\xE\x174"+
		"\x232F\v\x174\x3\x174\x3\x174\x3\x174\x3\x175\x3\x175\x3\x175\x3\x175"+
		"\x3\x175\x5\x175\x2339\n\x175\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176"+
		"\x3\x176\x3\x176\x5\x176\x2342\n\x176\x3\x176\x5\x176\x2345\n\x176\x3"+
		"\x176\x5\x176\x2348\n\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\a\x176"+
		"\x234F\n\x176\f\x176\xE\x176\x2352\v\x176\x5\x176\x2354\n\x176\x3\x176"+
		"\x5\x176\x2357\n\x176\x3\x177\x3\x177\x3\x177\x3\x177\x3\x177\x5\x177"+
		"\x235E\n\x177\x3\x177\x5\x177\x2361\n\x177\x3\x177\x3\x177\x3\x177\x3"+
		"\x177\x3\x177\x3\x177\x3\x177\x3\x177\x3\x177\x3\x177\x3\x177\x3\x177"+
		"\x3\x177\x5\x177\x2370\n\x177\x3\x177\x5\x177\x2373\n\x177\x3\x177\x3"+
		"\x177\x3\x177\x3\x177\x3\x177\x5\x177\x237A\n\x177\x3\x177\x3\x177\x3"+
		"\x177\x3\x177\x3\x177\x3\x177\x3\x177\x3\x177\x3\x177\x3\x177\x3\x177"+
		"\x3\x177\x3\x177\x3\x177\x5\x177\x238A\n\x177\x3\x178\x3\x178\x5\x178"+
		"\x238E\n\x178\x3\x179\x3\x179\x3\x179\x3\x179\x3\x179\x3\x179\x3\x179"+
		"\x3\x179\x5\x179\x2398\n\x179\x3\x179\x3\x179\x3\x179\x3\x179\x3\x179"+
		"\x3\x179\x3\x179\x3\x179\x3\x179\x3\x179\x3\x179\x3\x179\x3\x179\x3\x179"+
		"\x3\x179\x3\x179\x3\x179\a\x179\x23AB\n\x179\f\x179\xE\x179\x23AE\v\x179"+
		"\x3\x17A\x3\x17A\x3\x17A\x3\x17A\x5\x17A\x23B4\n\x17A\x3\x17B\x3\x17B"+
		"\x3\x17B\x6\x17B\x23B9\n\x17B\r\x17B\xE\x17B\x23BA\x3\x17B\x3\x17B\x5"+
		"\x17B\x23BF\n\x17B\x3\x17B\x3\x17B\x3\x17B\x3\x17B\x6\x17B\x23C5\n\x17B"+
		"\r\x17B\xE\x17B\x23C6\x3\x17B\x3\x17B\x5\x17B\x23CB\n\x17B\x3\x17B\x3"+
		"\x17B\x5\x17B\x23CF\n\x17B\x3\x17C\x3\x17C\x3\x17C\x3\x17C\x5\x17C\x23D5"+
		"\n\x17C\x3\x17D\x3\x17D\x3\x17D\x3\x17D\x3\x17D\x3\x17D\x3\x17D\x3\x17D"+
		"\x5\x17D\x23DF\n\x17D\x3\x17E\x3\x17E\x3\x17E\x3\x17E\x3\x17E\x3\x17E"+
		"\x3\x17E\x3\x17E\x5\x17E\x23E9\n\x17E\x3\x17F\x3\x17F\x3\x180\x3\x180"+
		"\x3\x180\x5\x180\x23F0\n\x180\x3\x180\x3\x180\x3\x180\a\x180\x23F5\n\x180"+
		"\f\x180\xE\x180\x23F8\v\x180\x3\x180\x3\x180\x3\x180\x3\x180\x3\x180\x3"+
		"\x180\x5\x180\x2400\n\x180\x3\x180\x3\x180\x3\x180\x3\x180\x3\x180\x5"+
		"\x180\x2407\n\x180\x3\x181\x3\x181\x3\x181\x3\x181\x3\x181\x5\x181\x240E"+
		"\n\x181\x3\x181\x3\x181\x3\x181\x3\x181\x3\x181\x3\x182\x3\x182\x5\x182"+
		"\x2417\n\x182\x3\x182\x3\x182\x5\x182\x241B\n\x182\x3\x182\x3\x182\x3"+
		"\x182\x3\x182\x3\x182\x3\x182\x3\x182\x3\x182\x5\x182\x2425\n\x182\x3"+
		"\x183\x3\x183\x3\x183\a\x183\x242A\n\x183\f\x183\xE\x183\x242D\v\x183"+
		"\x3\x184\x3\x184\x3\x184\a\x184\x2432\n\x184\f\x184\xE\x184\x2435\v\x184"+
		"\x3\x185\x3\x185\x3\x185\a\x185\x243A\n\x185\f\x185\xE\x185\x243D\v\x185"+
		"\x3\x186\x5\x186\x2440\n\x186\x3\x186\x3\x186\x3\x187\x3\x187\x3\x187"+
		"\x3\x187\x3\x187\x3\x187\x3\x187\x3\x187\x3\x187\x3\x187\x3\x187\x3\x187"+
		"\x3\x187\x3\x187\x3\x187\x3\x187\x3\x187\x3\x187\x5\x187\x2456\n\x187"+
		"\x3\x187\x3\x187\x3\x187\x3\x187\x3\x187\x3\x187\x3\x187\x5\x187\x245F"+
		"\n\x187\x3\x187\x3\x187\x3\x187\x3\x187\x5\x187\x2465\n\x187\x3\x187\x3"+
		"\x187\x3\x187\x3\x187\x5\x187\x246B\n\x187\x3\x187\x3\x187\x3\x187\x3"+
		"\x187\x5\x187\x2471\n\x187\x3\x187\x3\x187\x3\x187\x3\x187\x3\x187\x3"+
		"\x187\x3\x187\x3\x187\x5\x187\x247B\n\x187\x3\x188\x3\x188\x3\x188\x3"+
		"\x188\x3\x188\x5\x188\x2482\n\x188\x3\x188\a\x188\x2485\n\x188\f\x188"+
		"\xE\x188\x2488\v\x188\x3\x189\x3\x189\x5\x189\x248C\n\x189\x3\x189\x3"+
		"\x189\x5\x189\x2490\n\x189\x3\x189\x3\x189\x3\x189\x3\x189\x3\x189\x5"+
		"\x189\x2497\n\x189\x3\x18A\x3\x18A\x5\x18A\x249B\n\x18A\x3\x18A\x5\x18A"+
		"\x249E\n\x18A\x3\x18A\x3\x18A\x3\x18A\x5\x18A\x24A3\n\x18A\x3\x18A\x3"+
		"\x18A\x5\x18A\x24A7\n\x18A\x3\x18A\x3\x18A\x5\x18A\x24AB\n\x18A\x3\x18A"+
		"\x3\x18A\x3\x18A\x5\x18A\x24B0\n\x18A\x3\x18A\x3\x18A\x3\x18A\a\x18A\x24B5"+
		"\n\x18A\f\x18A\xE\x18A\x24B8\v\x18A\x5\x18A\x24BA\n\x18A\x3\x18A\x3\x18A"+
		"\x5\x18A\x24BE\n\x18A\x3\x18B\x3\x18B\x3\x18B\x5\x18B\x24C3\n\x18B\x3"+
		"\x18B\x3\x18B\x5\x18B\x24C7\n\x18B\x3\x18C\x3\x18C\x3\x18C\x3\x18C\x3"+
		"\x18C\x3\x18C\x3\x18C\x5\x18C\x24D0\n\x18C\x3\x18D\x3\x18D\x3\x18D\x3"+
		"\x18D\x3\x18D\x5\x18D\x24D7\n\x18D\x3\x18E\x3\x18E\x3\x18E\x3\x18E\x3"+
		"\x18E\a\x18E\x24DE\n\x18E\f\x18E\xE\x18E\x24E1\v\x18E\x3\x18E\x3\x18E"+
		"\x3\x18E\x3\x18E\x3\x18E\x3\x18E\x3\x18E\x3\x18E\x3\x18E\x5\x18E\x24EC"+
		"\n\x18E\x5\x18E\x24EE\n\x18E\x3\x18F\x3\x18F\x3\x18F\x3\x18F\x3\x18F\x3"+
		"\x18F\x3\x18F\x3\x18F\x5\x18F\x24F8\n\x18F\x3\x18F\x5\x18F\x24FB\n\x18F"+
		"\x3\x18F\a\x18F\x24FE\n\x18F\f\x18F\xE\x18F\x2501\v\x18F\x3\x18F\x3\x18F"+
		"\x3\x18F\x3\x18F\x3\x18F\x3\x18F\x5\x18F\x2509\n\x18F\x5\x18F\x250B\n"+
		"\x18F\x5\x18F\x250D\n\x18F\x3\x18F\x3\x18F\x3\x18F\x5\x18F\x2512\n\x18F"+
		"\x3\x18F\x3\x18F\x3\x18F\x3\x18F\a\x18F\x2518\n\x18F\f\x18F\xE\x18F\x251B"+
		"\v\x18F\x3\x18F\x3\x18F\x5\x18F\x251F\n\x18F\x3\x18F\x3\x18F\x3\x18F\x3"+
		"\x18F\x3\x18F\x3\x18F\x5\x18F\x2527\n\x18F\x3\x18F\a\x18F\x252A\n\x18F"+
		"\f\x18F\xE\x18F\x252D\v\x18F\x3\x18F\x3\x18F\x3\x18F\x5\x18F\x2532\n\x18F"+
		"\x3\x18F\x3\x18F\x3\x18F\x3\x18F\x3\x18F\x3\x18F\x3\x18F\x3\x18F\x5\x18F"+
		"\x253C\n\x18F\x5\x18F\x253E\n\x18F\x3\x18F\x3\x18F\x5\x18F\x2542\n\x18F"+
		"\x3\x18F\x3\x18F\x5\x18F\x2546\n\x18F\x5\x18F\x2548\n\x18F\x3\x190\x3"+
		"\x190\x3\x190\x3\x190\x3\x190\x3\x190\x3\x190\x5\x190\x2551\n\x190\x5"+
		"\x190\x2553\n\x190\x3\x191\x3\x191\x5\x191\x2557\n\x191\x3\x192\x3\x192"+
		"\x3\x193\x3\x193\x3\x193\x3\x193\x3\x193\a\x193\x2560\n\x193\f\x193\xE"+
		"\x193\x2563\v\x193\x3\x193\x3\x193\x3\x194\x3\x194\x3\x194\x3\x194\x3"+
		"\x194\x3\x194\x3\x194\x3\x194\x3\x194\x3\x194\x3\x194\x3\x194\x3\x194"+
		"\x3\x194\x3\x194\x3\x194\x3\x194\x3\x194\x3\x194\x3\x194\x3\x194\x3\x194"+
		"\x3\x194\x3\x194\x3\x194\x3\x194\x3\x194\a\x194\x2582\n\x194\f\x194\xE"+
		"\x194\x2585\v\x194\x3\x194\x3\x194\x3\x194\x3\x194\x3\x194\x3\x194\x3"+
		"\x194\x3\x194\x3\x194\x3\x194\x3\x194\x3\x194\x3\x194\x5\x194\x2594\n"+
		"\x194\x3\x195\x3\x195\x3\x195\x3\x195\x3\x195\x5\x195\x259B\n\x195\x5"+
		"\x195\x259D\n\x195\x3\x196\x3\x196\x3\x196\a\x196\x25A2\n\x196\f\x196"+
		"\xE\x196\x25A5\v\x196\x3\x197\x3\x197\x3\x197\x3\x197\a\x197\x25AB\n\x197"+
		"\f\x197\xE\x197\x25AE\v\x197\x3\x197\x3\x197\x3\x198\x3\x198\x3\x198\x5"+
		"\x198\x25B5\n\x198\x3\x198\x3\x198\x3\x199\x3\x199\x3\x199\x5\x199\x25BC"+
		"\n\x199\x3\x199\x3\x199\x3\x199\x3\x199\x3\x199\x5\x199\x25C3\n\x199\x3"+
		"\x199\x5\x199\x25C6\n\x199\x3\x199\x5\x199\x25C9\n\x199\x3\x19A\x3\x19A"+
		"\x3\x19A\x3\x19A\x3\x19A\x5\x19A\x25D0\n\x19A\x3\x19A\x3\x19A\x3\x19A"+
		"\x3\x19A\x3\x19A\x5\x19A\x25D7\n\x19A\x3\x19A\x5\x19A\x25DA\n\x19A\x5"+
		"\x19A\x25DC\n\x19A\x3\x19B\x3\x19B\x3\x19B\x3\x19B\x3\x19B\x3\x19B\x5"+
		"\x19B\x25E4\n\x19B\x5\x19B\x25E6\n\x19B\x3\x19C\x3\x19C\x3\x19C\x3\x19C"+
		"\x5\x19C\x25EC\n\x19C\x3\x19D\x3\x19D\x3\x19D\a\x19D\x25F1\n\x19D\f\x19D"+
		"\xE\x19D\x25F4\v\x19D\x3\x19E\x3\x19E\x3\x19E\x3\x19E\x3\x19E\x5\x19E"+
		"\x25FB\n\x19E\x3\x19F\x3\x19F\a\x19F\x25FF\n\x19F\f\x19F\xE\x19F\x2602"+
		"\v\x19F\x3\x1A0\x3\x1A0\x5\x1A0\x2606\n\x1A0\x3\x1A0\x5\x1A0\x2609\n\x1A0"+
		"\x3\x1A0\x5\x1A0\x260C\n\x1A0\x3\x1A0\x3\x1A0\x5\x1A0\x2610\n\x1A0\x3"+
		"\x1A0\x3\x1A0\x3\x1A0\x5\x1A0\x2615\n\x1A0\x5\x1A0\x2617\n\x1A0\x3\x1A0"+
		"\x3\x1A0\x3\x1A0\x3\x1A0\x3\x1A0\x3\x1A0\x5\x1A0\x261F\n\x1A0\x5\x1A0"+
		"\x2621\n\x1A0\x3\x1A0\x3\x1A0\x5\x1A0\x2625\n\x1A0\x3\x1A0\x3\x1A0\x3"+
		"\x1A0\x3\x1A0\x3\x1A0\x5\x1A0\x262C\n\x1A0\x5\x1A0\x262E\n\x1A0\x3\x1A0"+
		"\x3\x1A0\x3\x1A0\x3\x1A0\x3\x1A0\x5\x1A0\x2635\n\x1A0\x5\x1A0\x2637\n"+
		"\x1A0\x3\x1A1\x3\x1A1\x5\x1A1\x263B\n\x1A1\x3\x1A1\x3\x1A1\x3\x1A1\x3"+
		"\x1A1\x3\x1A1\x3\x1A1\x3\x1A1\x3\x1A1\x5\x1A1\x2645\n\x1A1\x3\x1A2\x3"+
		"\x1A2\x3\x1A2\x3\x1A2\x3\x1A2\x3\x1A2\x3\x1A2\x5\x1A2\x264E\n\x1A2\x3"+
		"\x1A2\x3\x1A2\x3\x1A2\x3\x1A2\x3\x1A2\x3\x1A2\x5\x1A2\x2656\n\x1A2\x3"+
		"\x1A3\x3\x1A3\x3\x1A3\a\x1A3\x265B\n\x1A3\f\x1A3\xE\x1A3\x265E\v\x1A3"+
		"\x3\x1A4\x3\x1A4\x3\x1A4\x5\x1A4\x2663\n\x1A4\x3\x1A5\x3\x1A5\x3\x1A5"+
		"\x3\x1A5\x3\x1A5\x3\x1A5\x3\x1A5\x3\x1A5\x3\x1A6\x5\x1A6\x266E\n\x1A6"+
		"\x3\x1A6\x3\x1A6\x5\x1A6\x2672\n\x1A6\x5\x1A6\x2674\n\x1A6\x3\x1A6\x5"+
		"\x1A6\x2677\n\x1A6\x3\x1A6\x3\x1A6\x3\x1A6\x3\x1A6\x3\x1A6\x3\x1A6\x3"+
		"\x1A6\x3\x1A6\x3\x1A6\x3\x1A6\x3\x1A6\x3\x1A6\x3\x1A6\x3\x1A6\x3\x1A6"+
		"\x3\x1A6\x3\x1A6\x3\x1A6\x3\x1A6\x3\x1A6\x3\x1A6\x3\x1A6\x5\x1A6\x268F"+
		"\n\x1A6\x3\x1A7\x3\x1A7\x3\x1A7\x3\x1A7\x3\x1A7\x3\x1A7\x3\x1A7\x3\x1A7"+
		"\x3\x1A8\x3\x1A8\x3\x1A8\x3\x1A8\x3\x1A8\x3\x1A8\x3\x1A8\x3\x1A8\x3\x1A8"+
		"\x3\x1A8\x3\x1A9\x3\x1A9\x3\x1A9\a\x1A9\x26A6\n\x1A9\f\x1A9\xE\x1A9\x26A9"+
		"\v\x1A9\x3\x1AA\x3\x1AA\x5\x1AA\x26AD\n\x1AA\x3\x1AB\x3\x1AB\x3\x1AB\x3"+
		"\x1AB\x3\x1AB\x3\x1AB\x3\x1AB\x3\x1AB\x3\x1AB\x3\x1AB\x3\x1AB\x3\x1AB"+
		"\x3\x1AB\x3\x1AB\x3\x1AB\x3\x1AB\a\x1AB\x26BF\n\x1AB\f\x1AB\xE\x1AB\x26C2"+
		"\v\x1AB\x3\x1AB\x5\x1AB\x26C5\n\x1AB\x3\x1AB\x3\x1AB\x5\x1AB\x26C9\n\x1AB"+
		"\x3\x1AC\x3\x1AC\x3\x1AC\x3\x1AC\x3\x1AD\x3\x1AD\x3\x1AD\x3\x1AD\x3\x1AD"+
		"\x3\x1AD\x3\x1AD\x3\x1AD\x3\x1AD\x3\x1AD\x5\x1AD\x26D9\n\x1AD\x3\x1AE"+
		"\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE"+
		"\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x5\x1AE"+
		"\x26ED\n\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE"+
		"\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE"+
		"\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE"+
		"\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE"+
		"\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE"+
		"\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE"+
		"\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x5\x1AE\x2727\n\x1AE\x3\x1AE\x3\x1AE"+
		"\x5\x1AE\x272B\n\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE"+
		"\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE"+
		"\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE"+
		"\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE"+
		"\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE"+
		"\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x5\x1AE\x275B\n\x1AE\x3\x1AE\x3\x1AE"+
		"\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE"+
		"\x3\x1AE\x3\x1AE\x3\x1AE\x5\x1AE\x276B\n\x1AE\x3\x1AE\x3\x1AE\x3\x1AE"+
		"\x3\x1AE\x3\x1AE\x3\x1AE\x5\x1AE\x2773\n\x1AE\x3\x1AE\x3\x1AE\x3\x1AE"+
		"\x5\x1AE\x2778\n\x1AE\x3\x1AE\x5\x1AE\x277B\n\x1AE\x3\x1AF\x3\x1AF\x3"+
		"\x1AF\x3\x1AF\x3\x1AF\x5\x1AF\x2782\n\x1AF\x3\x1B0\x3\x1B0\x3\x1B0\x3"+
		"\x1B0\x5\x1B0\x2788\n\x1B0\x3\x1B0\x3\x1B0\x3\x1B0\x3\x1B0\x3\x1B0\x3"+
		"\x1B0\x3\x1B0\x3\x1B0\x3\x1B0\x3\x1B0\x3\x1B0\x5\x1B0\x2795\n\x1B0\x3"+
		"\x1B0\x3\x1B0\x3\x1B0\x3\x1B0\x3\x1B0\x3\x1B0\x3\x1B0\x3\x1B0\x3\x1B0"+
		"\x3\x1B0\x3\x1B0\x3\x1B0\x3\x1B0\x5\x1B0\x27A4\n\x1B0\x3\x1B0\x3\x1B0"+
		"\x3\x1B0\x3\x1B0\x3\x1B0\x3\x1B0\x3\x1B0\x3\x1B0\x3\x1B0\x5\x1B0\x27AF"+
		"\n\x1B0\x3\x1B1\x3\x1B1\x3\x1B1\x5\x1B1\x27B4\n\x1B1\x3\x1B1\x3\x1B1\x3"+
		"\x1B1\x3\x1B1\x3\x1B1\x3\x1B1\x3\x1B1\x3\x1B1\x5\x1B1\x27BE\n\x1B1\x3"+
		"\x1B1\x3\x1B1\x3\x1B1\x3\x1B1\x3\x1B1\x3\x1B1\x3\x1B1\x5\x1B1\x27C7\n"+
		"\x1B1\x3\x1B2\x3\x1B2\x3\x1B2\x3\x1B2\x3\x1B2\x3\x1B2\x3\x1B2\x3\x1B3"+
		"\x3\x1B3\x3\x1B3\x3\x1B3\x3\x1B3\x3\x1B3\x3\x1B3\x3\x1B4\x3\x1B4\x3\x1B4"+
		"\x3\x1B4\x3\x1B4\x3\x1B4\x3\x1B4\x3\x1B5\x3\x1B5\x3\x1B5\x3\x1B5\x3\x1B5"+
		"\x3\x1B6\x3\x1B6\x3\x1B6\x3\x1B6\x3\x1B6\x3\x1B7\x5\x1B7\x27E9\n\x1B7"+
		"\x3\x1B7\x3\x1B7\x3\x1B8\x5\x1B8\x27EE\n\x1B8\x3\x1B8\x3\x1B8\x3\x1B9"+
		"\x3\x1B9\x5\x1B9\x27F4\n\x1B9\x3\x1BA\x5\x1BA\x27F7\n\x1BA\x3\x1BA\x3"+
		"\x1BA\x3\x1BA\x5\x1BA\x27FC\n\x1BA\x3\x1BA\a\x1BA\x27FF\n\x1BA\f\x1BA"+
		"\xE\x1BA\x2802\v\x1BA\x3\x1BA\x3\x1BA\x3\x1BB\x3\x1BB\x3\x1BB\x3\x1BB"+
		"\x5\x1BB\x280A\n\x1BB\x3\x1BB\a\x1BB\x280D\n\x1BB\f\x1BB\xE\x1BB\x2810"+
		"\v\x1BB\x3\x1BB\x3\x1BB\x3\x1BC\x5\x1BC\x2815\n\x1BC\x3\x1BC\x3\x1BC\x3"+
		"\x1BC\x3\x1BC\x3\x1BC\a\x1BC\x281C\n\x1BC\f\x1BC\xE\x1BC\x281F\v\x1BC"+
		"\x3\x1BC\x3\x1BC\x3\x1BC\x3\x1BC\x3\x1BC\a\x1BC\x2826\n\x1BC\f\x1BC\xE"+
		"\x1BC\x2829\v\x1BC\x5\x1BC\x282B\n\x1BC\x3\x1BC\x3\x1BC\x3\x1BC\x3\x1BC"+
		"\x3\x1BC\x3\x1BC\x3\x1BC\x3\x1BC\x3\x1BC\x3\x1BC\a\x1BC\x2837\n\x1BC\f"+
		"\x1BC\xE\x1BC\x283A\v\x1BC\x3\x1BC\x3\x1BC\x3\x1BC\x5\x1BC\x283F\n\x1BC"+
		"\x3\x1BC\x3\x1BC\x3\x1BC\x3\x1BC\x3\x1BC\x3\x1BC\x5\x1BC\x2847\n\x1BC"+
		"\x3\x1BD\x3\x1BD\x5\x1BD\x284B\n\x1BD\x3\x1BE\x3\x1BE\x3\x1BE\x3\x1BE"+
		"\a\x1BE\x2851\n\x1BE\f\x1BE\xE\x1BE\x2854\v\x1BE\x3\x1BE\x3\x1BE\x3\x1BF"+
		"\x3\x1BF\x5\x1BF\x285A\n\x1BF\x3\x1C0\x3\x1C0\x3\x1C0\x3\x1C0\x3\x1C0"+
		"\x3\x1C0\x3\x1C0\x3\x1C0\x3\x1C0\a\x1C0\x2865\n\x1C0\f\x1C0\xE\x1C0\x2868"+
		"\v\x1C0\x3\x1C1\x3\x1C1\x3\x1C1\a\x1C1\x286D\n\x1C1\f\x1C1\xE\x1C1\x2870"+
		"\v\x1C1\x3\x1C2\x3\x1C2\x3\x1C2\x3\x1C2\x3\x1C2\x3\x1C2\x3\x1C2\x3\x1C2"+
		"\x3\x1C2\x3\x1C2\x5\x1C2\x287C\n\x1C2\x3\x1C3\x3\x1C3\x3\x1C3\x3\x1C3"+
		"\x3\x1C3\x5\x1C3\x2883\n\x1C3\x3\x1C3\x3\x1C3\x3\x1C3\x3\x1C3\x5\x1C3"+
		"\x2889\n\x1C3\x3\x1C3\x3\x1C3\x5\x1C3\x288D\n\x1C3\x3\x1C3\x3\x1C3\x3"+
		"\x1C3\x3\x1C3\x3\x1C3\x3\x1C3\x3\x1C3\x3\x1C3\x3\x1C3\x3\x1C3\x3\x1C3"+
		"\x3\x1C3\x3\x1C3\x3\x1C3\x3\x1C3\x5\x1C3\x289E\n\x1C3\x3\x1C4\x3\x1C4"+
		"\x3\x1C4\x3\x1C4\x3\x1C4\x3\x1C4\x3\x1C4\x3\x1C4\x3\x1C4\x3\x1C4\x3\x1C4"+
		"\x3\x1C4\x3\x1C4\x5\x1C4\x28AD\n\x1C4\x5\x1C4\x28AF\n\x1C4\x3\x1C4\x3"+
		"\x1C4\x3\x1C4\x5\x1C4\x28B4\n\x1C4\x3\x1C5\x5\x1C5\x28B7\n\x1C5\x3\x1C5"+
		"\x3\x1C5\x3\x1C6\x3\x1C6\x3\x1C6\x3\x1C6\x3\x1C6\x5\x1C6\x28C0\n\x1C6"+
		"\x3\x1C6\x5\x1C6\x28C3\n\x1C6\x3\x1C6\x5\x1C6\x28C6\n\x1C6\x3\x1C6\x3"+
		"\x1C6\x3\x1C7\x3\x1C7\x3\x1C7\x3\x1C8\x3\x1C8\x3\x1C8\x3\x1C8\x3\x1C8"+
		"\x3\x1C8\x5\x1C8\x28D3\n\x1C8\x3\x1C9\x3\x1C9\x5\x1C9\x28D7\n\x1C9\x3"+
		"\x1CA\x3\x1CA\x3\x1CA\x3\x1CA\x3\x1CA\x3\x1CA\x5\x1CA\x28DF\n\x1CA\x3"+
		"\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x5\x1CB\x28E5\n\x1CB\x3\x1CC\x3\x1CC\x3"+
		"\x1CC\x3\x1CC\x3\x1CC\a\x1CC\x28EC\n\x1CC\f\x1CC\xE\x1CC\x28EF\v\x1CC"+
		"\x3\x1CC\x3\x1CC\x3\x1CC\x3\x1CC\x3\x1CC\x3\x1CC\x5\x1CC\x28F7\n\x1CC"+
		"\x3\x1CC\x3\x1CC\x3\x1CC\x3\x1CC\x5\x1CC\x28FD\n\x1CC\x3\x1CC\x3\x1CC"+
		"\x3\x1CC\x3\x1CC\x3\x1CC\x3\x1CC\x3\x1CC\x3\x1CC\x3\x1CC\x3\x1CC\x3\x1CC"+
		"\x3\x1CC\x3\x1CC\x5\x1CC\x290C\n\x1CC\x3\x1CD\x3\x1CD\x3\x1CD\x3\x1CD"+
		"\x3\x1CD\x3\x1CD\x5\x1CD\x2914\n\x1CD\x3\x1CE\x3\x1CE\x5\x1CE\x2918\n"+
		"\x1CE\x3\x1CF\x3\x1CF\x3\x1CF\x3\x1CF\x5\x1CF\x291E\n\x1CF\x3\x1CF\x5"+
		"\x1CF\x2921\n\x1CF\x3\x1CF\x3\x1CF\x5\x1CF\x2925\n\x1CF\x3\x1CF\x3\x1CF"+
		"\x3\x1CF\a\x1CF\x292A\n\x1CF\f\x1CF\xE\x1CF\x292D\v\x1CF\x3\x1D0\x3\x1D0"+
		"\x3\x1D0\x3\x1D0\x3\x1D0\x5\x1D0\x2934\n\x1D0\x3\x1D0\x5\x1D0\x2937\n"+
		"\x1D0\x3\x1D0\x3\x1D0\x3\x1D0\x3\x1D0\x5\x1D0\x293D\n\x1D0\x3\x1D0\x3"+
		"\x1D0\x3\x1D0\x3\x1D0\x5\x1D0\x2943\n\x1D0\x5\x1D0\x2945\n\x1D0\x3\x1D0"+
		"\x3\x1D0\x3\x1D0\x3\x1D0\x5\x1D0\x294B\n\x1D0\x3\x1D0\x5\x1D0\x294E\n"+
		"\x1D0\x5\x1D0\x2950\n\x1D0\x3\x1D0\x3\x1D0\x3\x1D0\x3\x1D0\x5\x1D0\x2956"+
		"\n\x1D0\x5\x1D0\x2958\n\x1D0\x3\x1D0\x3\x1D0\x3\x1D1\x3\x1D1\x3\x1D2\x3"+
		"\x1D2\x3\x1D2\x3\x1D2\x3\x1D2\x5\x1D2\x2963\n\x1D2\x3\x1D3\x3\x1D3\x3"+
		"\x1D3\x3\x1D3\x3\x1D3\x5\x1D3\x296A\n\x1D3\x3\x1D4\x3\x1D4\x3\x1D4\x3"+
		"\x1D4\x3\x1D4\x3\x1D4\x3\x1D4\x3\x1D4\x3\x1D4\x3\x1D4\x3\x1D4\x3\x1D4"+
		"\x3\x1D4\x3\x1D4\x3\x1D4\x3\x1D4\x3\x1D4\x3\x1D4\x3\x1D4\x5\x1D4\x297F"+
		"\n\x1D4\x3\x1D5\x3\x1D5\x3\x1D6\x3\x1D6\x3\x1D7\x3\x1D7\x3\x1D8\x3\x1D8"+
		"\x3\x1D9\x3\x1D9\x3\x1D9\x5\x1D9\x298C\n\x1D9\x3\x1D9\x3\x1D9\x3\x1DA"+
		"\x3\x1DA\x3\x1DA\x5\x1DA\x2993\n\x1DA\x3\x1DA\x3\x1DA\x3\x1DB\x3\x1DB"+
		"\x3\x1DB\x3\x1DB\x5\x1DB\x299B\n\x1DB\x3\x1DB\x3\x1DB\x5\x1DB\x299F\n"+
		"\x1DB\x3\x1DB\x5\x1DB\x29A2\n\x1DB\x3\x1DC\x3\x1DC\x3\x1DC\x3\x1DC\x3"+
		"\x1DC\x3\x1DC\x5\x1DC\x29AA\n\x1DC\x3\x1DC\x3\x1DC\x5\x1DC\x29AE\n\x1DC"+
		"\x3\x1DC\x5\x1DC\x29B1\n\x1DC\x3\x1DD\x3\x1DD\x5\x1DD\x29B5\n\x1DD\x3"+
		"\x1DE\x3\x1DE\x3\x1DE\x5\x1DE\x29BA\n\x1DE\x3\x1DE\x3\x1DE\x3\x1DE\x3"+
		"\x1DE\x5\x1DE\x29C0\n\x1DE\x3\x1DE\x3\x1DE\x3\x1DE\x3\x1DE\x5\x1DE\x29C6"+
		"\n\x1DE\x3\x1DE\x3\x1DE\x3\x1DE\x3\x1DE\x5\x1DE\x29CC\n\x1DE\x3\x1DE\x3"+
		"\x1DE\x3\x1DE\x3\x1DE\x5\x1DE\x29D2\n\x1DE\x3\x1DE\x3\x1DE\x3\x1DE\x3"+
		"\x1DE\x5\x1DE\x29D8\n\x1DE\x3\x1DE\x3\x1DE\x3\x1DE\x3\x1DE\x5\x1DE\x29DE"+
		"\n\x1DE\x3\x1DE\x3\x1DE\x3\x1DE\x3\x1DE\x5\x1DE\x29E4\n\x1DE\x3\x1DE\x5"+
		"\x1DE\x29E7\n\x1DE\x3\x1DF\x3\x1DF\x5\x1DF\x29EB\n\x1DF\x3\x1DF\x3\x1DF"+
		"\x3\x1DF\x5\x1DF\x29F0\n\x1DF\a\x1DF\x29F2\n\x1DF\f\x1DF\xE\x1DF\x29F5"+
		"\v\x1DF\x3\x1E0\x3\x1E0\x3\x1E0\a\x1E0\x29FA\n\x1E0\f\x1E0\xE\x1E0\x29FD"+
		"\v\x1E0\x3\x1E1\x3\x1E1\x5\x1E1\x2A01\n\x1E1\x3\x1E2\x3\x1E2\x3\x1E3\x3"+
		"\x1E3\x3\x1E4\x5\x1E4\x2A08\n\x1E4\x3\x1E4\x3\x1E4\x3\x1E5\x3\x1E5\x3"+
		"\x1E5\x3\x1E5\x3\x1E5\x5\x1E5\x2A11\n\x1E5\x5\x1E5\x2A13\n\x1E5\x3\x1E6"+
		"\x3\x1E6\x3\x1E6\x3\x1E6\x3\x1E6\x5\x1E6\x2A1A\n\x1E6\x3\x1E7\x3\x1E7"+
		"\x3\x1E7\x3\x1E7\x3\x1E7\x3\x1E7\x3\x1E7\x3\x1E7\x3\x1E7\x3\x1E7\x5\x1E7"+
		"\x2A26\n\x1E7\x3\x1E8\x3\x1E8\x3\x1E8\x5\x1E8\x2A2B\n\x1E8\x3\x1E8\x3"+
		"\x1E8\x3\x1E8\x3\x1E8\x3\x1E8\x3\x1E8\x3\x1E8\x3\x1E8\x3\x1E8\x5\x1E8"+
		"\x2A36\n\x1E8\x3\x1E8\x3\x1E8\x3\x1E8\x5\x1E8\x2A3B\n\x1E8\x3\x1E8\x3"+
		"\x1E8\x3\x1E8\x3\x1E8\x3\x1E8\x5\x1E8\x2A42\n\x1E8\x5\x1E8\x2A44\n\x1E8"+
		"\x3\x1E8\x3\x1E8\x3\x1E8\x3\x1E8\x5\x1E8\x2A4A\n\x1E8\x5\x1E8\x2A4C\n"+
		"\x1E8\x3\x1E8\x3\x1E8\x3\x1E8\x5\x1E8\x2A51\n\x1E8\x5\x1E8\x2A53\n\x1E8"+
		"\x3\x1E8\x5\x1E8\x2A56\n\x1E8\x3\x1E9\x3\x1E9\x5\x1E9\x2A5A\n\x1E9\x3"+
		"\x1EA\x3\x1EA\x5\x1EA\x2A5E\n\x1EA\x3\x1EB\x3\x1EB\x3\x1EB\x3\x1EB\x5"+
		"\x1EB\x2A64\n\x1EB\x3\x1EB\x3\x1EB\x3\x1EB\x3\x1EB\x3\x1EB\x3\x1EB\x3"+
		"\x1EB\x5\x1EB\x2A6D\n\x1EB\x3\x1EB\x5\x1EB\x2A70\n\x1EB\x5\x1EB\x2A72"+
		"\n\x1EB\x3\x1EC\x3\x1EC\x3\x1EC\x3\x1EC\x3\x1EC\x3\x1EC\x3\x1EC\x5\x1EC"+
		"\x2A7B\n\x1EC\x3\x1ED\x3\x1ED\x3\x1ED\x3\x1ED\x3\x1ED\x3\x1ED\x3\x1ED"+
		"\x5\x1ED\x2A84\n\x1ED\x3\x1EE\x3\x1EE\x3\x1EE\x3\x1EE\x3\x1EE\x3\x1EE"+
		"\x3\x1EE\x5\x1EE\x2A8D\n\x1EE\x3\x1EE\x3\x1EE\x3\x1EE\x5\x1EE\x2A92\n"+
		"\x1EE\x3\x1EE\x5\x1EE\x2A95\n\x1EE\x3\x1EF\x3\x1EF\x5\x1EF\x2A99\n\x1EF"+
		"\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x5\x1EF\x2A9F\n\x1EF\x3\x1EF\x5\x1EF"+
		"\x2AA2\n\x1EF\x3\x1EF\x3\x1EF\x5\x1EF\x2AA6\n\x1EF\x3\x1EF\x3\x1EF\x3"+
		"\x1EF\x3\x1EF\x5\x1EF\x2AAC\n\x1EF\x3\x1F0\x3\x1F0\x3\x1F0\x5\x1F0\x2AB1"+
		"\n\x1F0\x3\x1F1\x3\x1F1\x3\x1F1\x5\x1F1\x2AB6\n\x1F1\x3\x1F1\x3\x1F1\x5"+
		"\x1F1\x2ABA\n\x1F1\x3\x1F1\x3\x1F1\x5\x1F1\x2ABE\n\x1F1\x3\x1F1\x3\x1F1"+
		"\x5\x1F1\x2AC2\n\x1F1\x3\x1F2\x3\x1F2\x3\x1F3\x3\x1F3\x3\x1F3\x5\x1F3"+
		"\x2AC9\n\x1F3\x3\x1F4\x3\x1F4\x3\x1F5\x3\x1F5\x3\x1F5\x3\x1F5\x3\x1F5"+
		"\x3\x1F5\x3\x1F5\x3\x1F5\x3\x1F5\x3\x1F5\x3\x1F5\x3\x1F5\x3\x1F5\x3\x1F5"+
		"\x3\x1F5\x5\x1F5\x2ADC\n\x1F5\x3\x1F6\x3\x1F6\x3\x1F7\x3\x1F7\x5\x1F7"+
		"\x2AE2\n\x1F7\x3\x1F7\x2\x2\x4^\x2F0\x1F8\x2\x2\x4\x2\x6\x2\b\x2\n\x2"+
		"\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2"+
		"\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<"+
		"\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2X\x2Z"+
		"\x2\\\x2^\x2`\x2\x62\x2\x64\x2\x66\x2h\x2j\x2l\x2n\x2p\x2r\x2t\x2v\x2"+
		"x\x2z\x2|\x2~\x2\x80\x2\x82\x2\x84\x2\x86\x2\x88\x2\x8A\x2\x8C\x2\x8E"+
		"\x2\x90\x2\x92\x2\x94\x2\x96\x2\x98\x2\x9A\x2\x9C\x2\x9E\x2\xA0\x2\xA2"+
		"\x2\xA4\x2\xA6\x2\xA8\x2\xAA\x2\xAC\x2\xAE\x2\xB0\x2\xB2\x2\xB4\x2\xB6"+
		"\x2\xB8\x2\xBA\x2\xBC\x2\xBE\x2\xC0\x2\xC2\x2\xC4\x2\xC6\x2\xC8\x2\xCA"+
		"\x2\xCC\x2\xCE\x2\xD0\x2\xD2\x2\xD4\x2\xD6\x2\xD8\x2\xDA\x2\xDC\x2\xDE"+
		"\x2\xE0\x2\xE2\x2\xE4\x2\xE6\x2\xE8\x2\xEA\x2\xEC\x2\xEE\x2\xF0\x2\xF2"+
		"\x2\xF4\x2\xF6\x2\xF8\x2\xFA\x2\xFC\x2\xFE\x2\x100\x2\x102\x2\x104\x2"+
		"\x106\x2\x108\x2\x10A\x2\x10C\x2\x10E\x2\x110\x2\x112\x2\x114\x2\x116"+
		"\x2\x118\x2\x11A\x2\x11C\x2\x11E\x2\x120\x2\x122\x2\x124\x2\x126\x2\x128"+
		"\x2\x12A\x2\x12C\x2\x12E\x2\x130\x2\x132\x2\x134\x2\x136\x2\x138\x2\x13A"+
		"\x2\x13C\x2\x13E\x2\x140\x2\x142\x2\x144\x2\x146\x2\x148\x2\x14A\x2\x14C"+
		"\x2\x14E\x2\x150\x2\x152\x2\x154\x2\x156\x2\x158\x2\x15A\x2\x15C\x2\x15E"+
		"\x2\x160\x2\x162\x2\x164\x2\x166\x2\x168\x2\x16A\x2\x16C\x2\x16E\x2\x170"+
		"\x2\x172\x2\x174\x2\x176\x2\x178\x2\x17A\x2\x17C\x2\x17E\x2\x180\x2\x182"+
		"\x2\x184\x2\x186\x2\x188\x2\x18A\x2\x18C\x2\x18E\x2\x190\x2\x192\x2\x194"+
		"\x2\x196\x2\x198\x2\x19A\x2\x19C\x2\x19E\x2\x1A0\x2\x1A2\x2\x1A4\x2\x1A6"+
		"\x2\x1A8\x2\x1AA\x2\x1AC\x2\x1AE\x2\x1B0\x2\x1B2\x2\x1B4\x2\x1B6\x2\x1B8"+
		"\x2\x1BA\x2\x1BC\x2\x1BE\x2\x1C0\x2\x1C2\x2\x1C4\x2\x1C6\x2\x1C8\x2\x1CA"+
		"\x2\x1CC\x2\x1CE\x2\x1D0\x2\x1D2\x2\x1D4\x2\x1D6\x2\x1D8\x2\x1DA\x2\x1DC"+
		"\x2\x1DE\x2\x1E0\x2\x1E2\x2\x1E4\x2\x1E6\x2\x1E8\x2\x1EA\x2\x1EC\x2\x1EE"+
		"\x2\x1F0\x2\x1F2\x2\x1F4\x2\x1F6\x2\x1F8\x2\x1FA\x2\x1FC\x2\x1FE\x2\x200"+
		"\x2\x202\x2\x204\x2\x206\x2\x208\x2\x20A\x2\x20C\x2\x20E\x2\x210\x2\x212"+
		"\x2\x214\x2\x216\x2\x218\x2\x21A\x2\x21C\x2\x21E\x2\x220\x2\x222\x2\x224"+
		"\x2\x226\x2\x228\x2\x22A\x2\x22C\x2\x22E\x2\x230\x2\x232\x2\x234\x2\x236"+
		"\x2\x238\x2\x23A\x2\x23C\x2\x23E\x2\x240\x2\x242\x2\x244\x2\x246\x2\x248"+
		"\x2\x24A\x2\x24C\x2\x24E\x2\x250\x2\x252\x2\x254\x2\x256\x2\x258\x2\x25A"+
		"\x2\x25C\x2\x25E\x2\x260\x2\x262\x2\x264\x2\x266\x2\x268\x2\x26A\x2\x26C"+
		"\x2\x26E\x2\x270\x2\x272\x2\x274\x2\x276\x2\x278\x2\x27A\x2\x27C\x2\x27E"+
		"\x2\x280\x2\x282\x2\x284\x2\x286\x2\x288\x2\x28A\x2\x28C\x2\x28E\x2\x290"+
		"\x2\x292\x2\x294\x2\x296\x2\x298\x2\x29A\x2\x29C\x2\x29E\x2\x2A0\x2\x2A2"+
		"\x2\x2A4\x2\x2A6\x2\x2A8\x2\x2AA\x2\x2AC\x2\x2AE\x2\x2B0\x2\x2B2\x2\x2B4"+
		"\x2\x2B6\x2\x2B8\x2\x2BA\x2\x2BC\x2\x2BE\x2\x2C0\x2\x2C2\x2\x2C4\x2\x2C6"+
		"\x2\x2C8\x2\x2CA\x2\x2CC\x2\x2CE\x2\x2D0\x2\x2D2\x2\x2D4\x2\x2D6\x2\x2D8"+
		"\x2\x2DA\x2\x2DC\x2\x2DE\x2\x2E0\x2\x2E2\x2\x2E4\x2\x2E6\x2\x2E8\x2\x2EA"+
		"\x2\x2EC\x2\x2EE\x2\x2F0\x2\x2F2\x2\x2F4\x2\x2F6\x2\x2F8\x2\x2FA\x2\x2FC"+
		"\x2\x2FE\x2\x300\x2\x302\x2\x304\x2\x306\x2\x308\x2\x30A\x2\x30C\x2\x30E"+
		"\x2\x310\x2\x312\x2\x314\x2\x316\x2\x318\x2\x31A\x2\x31C\x2\x31E\x2\x320"+
		"\x2\x322\x2\x324\x2\x326\x2\x328\x2\x32A\x2\x32C\x2\x32E\x2\x330\x2\x332"+
		"\x2\x334\x2\x336\x2\x338\x2\x33A\x2\x33C\x2\x33E\x2\x340\x2\x342\x2\x344"+
		"\x2\x346\x2\x348\x2\x34A\x2\x34C\x2\x34E\x2\x350\x2\x352\x2\x354\x2\x356"+
		"\x2\x358\x2\x35A\x2\x35C\x2\x35E\x2\x360\x2\x362\x2\x364\x2\x366\x2\x368"+
		"\x2\x36A\x2\x36C\x2\x36E\x2\x370\x2\x372\x2\x374\x2\x376\x2\x378\x2\x37A"+
		"\x2\x37C\x2\x37E\x2\x380\x2\x382\x2\x384\x2\x386\x2\x388\x2\x38A\x2\x38C"+
		"\x2\x38E\x2\x390\x2\x392\x2\x394\x2\x396\x2\x398\x2\x39A\x2\x39C\x2\x39E"+
		"\x2\x3A0\x2\x3A2\x2\x3A4\x2\x3A6\x2\x3A8\x2\x3AA\x2\x3AC\x2\x3AE\x2\x3B0"+
		"\x2\x3B2\x2\x3B4\x2\x3B6\x2\x3B8\x2\x3BA\x2\x3BC\x2\x3BE\x2\x3C0\x2\x3C2"+
		"\x2\x3C4\x2\x3C6\x2\x3C8\x2\x3CA\x2\x3CC\x2\x3CE\x2\x3D0\x2\x3D2\x2\x3D4"+
		"\x2\x3D6\x2\x3D8\x2\x3DA\x2\x3DC\x2\x3DE\x2\x3E0\x2\x3E2\x2\x3E4\x2\x3E6"+
		"\x2\x3E8\x2\x3EA\x2\x3EC\x2\x2\x8D\x3\x2\x32C\x32D\x4\x2\x32C\x32C\x331"+
		"\x331\x4\x2\x1DE\x1DE\x2FF\x2FF\x4\x2\x32C\x32D\x331\x331\x5\x2\xBD\xBD"+
		"\x276\x276\x2DC\x2DC\x5\x2\x329\x329\x32C\x32C\x331\x331\x5\x2~~\x131"+
		"\x131\x16E\x16E\x4\x2\xE6\xE6\xE9\xE9\x3\x2\x331\x332\x3\x2\x12A\x12E"+
		"\x4\x2\x1C9\x1C9\x281\x281\x4\x2\x134\x134\x27B\x27B\x5\x2VV\x134\x134"+
		"\x27B\x27B\x5\x2\xD9\xD9\x104\x104\x2CD\x2CE\x4\x2\x13\x13\x2F6\x2F6\x4"+
		"\x2\x18\x18\x248\x248\x4\x2\x6\x6\x2A9\x2A9\x5\x2\x6\x6\x26D\x26D\x2A7"+
		"\x2A7\x4\x2\n\nKK\x4\x2\x4\x4ii\x4\x2\x1F8\x1F8\x2DD\x2DD\x4\x2\x1E9\x1E9"+
		"\x1F2\x1F2\x4\x2\x32D\x32D\x331\x331\x4\x2\x232\x232\x257\x257\x4\x2\b"+
		"\t\xDF\xDF\x5\x2\xD9\xD9\xFB\xFB\xFD\xFD\x4\x2\x151\x151\x154\x154\x4"+
		"\x2\v\v\xF1\xF1\x3\x2\x32F\x330\x4\x2\x1AD\x1AD\x21B\x21B\x4\x2\x4\x4"+
		"\x141\x141\x4\x2\xB8\xB8\x17E\x17E\x3\x2\x10B\x10C\x4\x2\x32D\x32D\x331"+
		"\x332\x4\x2\xD1\xD1\x16C\x16C\x4\x2\xCC\xCC\x14A\x14A\x4\x2\x112\x112"+
		"\x1E9\x1E9\x4\x2\x32F\x32F\x331\x331\x4\x2__\x93\x93\x6\x2^^\xA4\xA4\x137"+
		"\x137\x16F\x16F\x4\x2\x1F\x1F\x208\x208\x4\x2\xA4\xA4\x16F\x16F\x4\x2"+
		"^^\x16F\x16F\x5\x2\x213\x213\x257\x257\x2FB\x2FB\x4\x2\x311\x311\x32D"+
		"\x32D\x5\x2\x44\x44\x143\x143\x1FE\x1FE\x4\x2[[\x331\x331\x4\x2[[\x32D"+
		"\x32D\x4\x2\x241\x241\x331\x331\x5\x2\x213\x213\x232\x232\x257\x257\a"+
		"\x2\x18A\x18C\x1E3\x1E3\x1E5\x1E5\x2A3\x2A5\x305\x306\x4\x2\x87\x87\x8D"+
		"\x8D\x5\x2\x21F\x21F\x247\x247\x258\x258\x5\x2\r\r\x15C\x15C\x229\x229"+
		"\x4\x2\x6\x6\x64\x64\x4\x2\xD9\xD9\xF7\xF7\x3\x2\x106\x107\x4\x2\x32C"+
		"\x32C\x355\x35A\x5\x2^^\xA4\xA4\x16F\x16F\x4\x2\x87\x87\x18E\x18E\x4\x2"+
		"\x284\x285\x2AA\x2AA\x4\x2\xF9\xF9\x2C6\x2C6\x4\x2\x6\x6\xA0\xA0\x5\x2"+
		"\x1F5\x1F5\x2C8\x2C8\x319\x319\x5\x2\x159\x159\x19E\x19E\x1E9\x1E9\x5"+
		"\x2\x1D7\x1D7\x221\x221\x260\x260\x4\x2\x216\x216\x241\x241\x4\x2\x6\x6"+
		"\xA8\xA9\x5\x2\xAD\xAD\xD4\xD4\xE2\xE2\x5\x2\x118\x118\x157\x157\x1EB"+
		"\x1EB\x4\x2mm\x1EB\x1EB\x5\x2\x6\x6\x182\x182\x28C\x28C\x4\x2\x8E\x8E"+
		"\xE6\xE6\x5\x2\x1F0\x1F0\x27C\x27C\x27F\x27F\x4\x2\x2A7\x2A7\x2A9\x2A9"+
		"\x5\x2\x266\x266\x2BE\x2BE\x2E1\x2E1\x5\x2\x193\x193\x1EB\x1EB\x20E\x20E"+
		"\x4\x2\x11E\x11E\x2F4\x2F4\x4\x2\x20E\x20E\x2E0\x2E0\x5\x2\x8E\x8E\x1B1"+
		"\x1B1\x2E0\x2E0\x5\x2\xD9\xD9\x1B9\x1B9\x303\x303\x4\x2\x260\x260\x2D0"+
		"\x2D0\x4\x2\x83\x83\x204\x204\x5\x2\x63\x63\x15B\x15B\x171\x171\x4\x2"+
		"::\xDE\xDE\x4\x2\xA2\xA2\xD7\xD7\x4\x2\xDB\xDB\x145\x145\x4\x2\xD6\xD6"+
		"\x20F\x20F\x4\x2\xDD\xDD\x1B9\x1B9\x4\x2\x45\x45\x156\x156\x4\x2\xDA\xDA"+
		"\x124\x124\x4\x2\xBB\xBB\xDC\xDC\x4\x2\x18A\x18C\x306\x306\x4\x2\x174"+
		"\x174\x245\x245\x3\x2\x284\x285\x4\x2\x83\x83\x332\x332\x4\x2\x1DA\x1DA"+
		"\x1F5\x1F5\x4\x2\x1FC\x1FC\x2E7\x2E7\x4\x2\x159\x159\x178\x178\x3\x2\x163"+
		"\x164\x6\x2\x1B2\x1B2\x287\x287\x2D5\x2D5\x331\x331\x4\x2\x1C2\x1C2\x1ED"+
		"\x1ED\x4\x2\x10\x10<<\x4\x2\x22B\x22B\x2D6\x2D6\x4\x2\x210\x210\x2CA\x2CA"+
		"\x6\x2\x1EE\x1EE\x203\x203\x237\x237\x2E8\x2E8\x5\x2\x282\x282\x2A7\x2A7"+
		"\x2CB\x2CB\x4\x2\x184\x184\x2B0\x2B0\x3\x2\x34C\x34E\x5\x2\x341\x341\x34F"+
		"\x350\x352\x354\x3\x2\x34F\x350\x5\x2\x6\x6\r\r\x147\x147\x3\x2\x333\x334"+
		"\x4\x2\x2C3\x2C3\x2C6\x2C6\x4\x2\x209\x209\x26C\x26C\x4\x2\x3\x3\x324"+
		"\x324\x4\x2\x19E\x19E\x28D\x28D\x4\x2\x11\x11``\x4\x2\xF2\xF2\x21D\x21D"+
		"\x5\x2\xCC\xCC\x1C0\x1C0\x21D\x21D\x5\x2\xCC\xCC\x21D\x21D\x246\x246\x4"+
		"\x2\xE3\xE3\x32C\x32D\x5\x2\x8E\x8E\xB3\xB3\x125\x125\x6\x2\xCC\xCC\x21D"+
		"\x21D\x246\x246\x2B1\x2B1\x4\x2\x32C\x32C\x32E\x32E\x5\x2\x1E1\x1E1\x2A2"+
		"\x2A2\x2C4\x2C4\b\x2\x1A6\x1A6\x24B\x24B\x25B\x25B\x2EC\x2ED\x2F3\x2F3"+
		"\x317\x318\x3\x2\x1C5\x1C6\x4\x2\x20A\x20A\x23A\x23A\x4\x2\x238\x238\x23B"+
		"\x23B\x4\x2\x2A1\x2A1\x2C6\x2C6\x5\x2\x8E\x8E\xE6\xE6\x2A7\x2A7\x4\x2"+
		"\x36\x36\xD8\xD8\x3\x2\x115\x116\x4\x2\x24B\x24B\x32D\x32D\x4\x2\x32D"+
		"\x32D\x333\x333Z\x2\x3\x3\x5\x5\a\t\f\f\xE\xF\x12\x13\x16\x1A\x1C\x1C"+
		"\x1F!$%(),.\x31\x33\x35\x35::=>@@\x43\x43\x45HJJPQSUWW\\]\x61\x63ghjk"+
		"mmooruwwzz||~\x81\x84\x86\x88\x89\x90\x90\x92\x92\x96\x97\x99\x99\x9C"+
		"\x9C\x9E\x9F\xA1\xA2\xA5\xA5\xA8\xA9\xAB\xAB\xAD\xB0\xB2\xB2\xB4\xB5\xB8"+
		"\xCB\xCD\xD1\xD3\xD4\xD6\xD7\xD9\xDF\xE1\xE3\xE7\xE8\xEA\xEA\xF5\xF8\xFA"+
		"\xFD\x100\x103\x108\x10C\x10E\x10E\x111\x111\x114\x116\x118\x11A\x11D"+
		"\x121\x124\x124\x127\x12F\x131\x131\x133\x133\x135\x136\x13B\x140\x144"+
		"\x146\x148\x14D\x14F\x158\x15B\x15D\x162\x162\x165\x165\x169\x169\x16C"+
		"\x16C\x16E\x16E\x171\x171\x173\x174\x177\x177\x179\x179\x17E\x17E\x180"+
		"\x182\x184\x35B\x3\x2\x339\x340\a\x2\x213\x213\x232\x232\x257\x257\x2FB"+
		"\x2FB\x34E\x34E\x31D0\x2\x3F1\x3\x2\x2\x2\x4\x407\x3\x2\x2\x2\x6\x40D"+
		"\x3\x2\x2\x2\b\x418\x3\x2\x2\x2\n\x41F\x3\x2\x2\x2\f\x4C2\x3\x2\x2\x2"+
		"\xE\x4C9\x3\x2\x2\x2\x10\x4D7\x3\x2\x2\x2\x12\x4D9\x3\x2\x2\x2\x14\x4E4"+
		"\x3\x2\x2\x2\x16\x4E8\x3\x2\x2\x2\x18\x4F6\x3\x2\x2\x2\x1A\x4F8\x3\x2"+
		"\x2\x2\x1C\x4FF\x3\x2\x2\x2\x1E\x509\x3\x2\x2\x2 \x515\x3\x2\x2\x2\"\x517"+
		"\x3\x2\x2\x2$\x519\x3\x2\x2\x2&\x51B\x3\x2\x2\x2(\x535\x3\x2\x2\x2*\x545"+
		"\x3\x2\x2\x2,\x552\x3\x2\x2\x2.\x581\x3\x2\x2\x2\x30\x583\x3\x2\x2\x2"+
		"\x32\x596\x3\x2\x2\x2\x34\x598\x3\x2\x2\x2\x36\x5B5\x3\x2\x2\x2\x38\x5CA"+
		"\x3\x2\x2\x2:\x5D7\x3\x2\x2\x2<\x5DC\x3\x2\x2\x2>\x5E0\x3\x2\x2\x2@\x5E4"+
		"\x3\x2\x2\x2\x42\x5EF\x3\x2\x2\x2\x44\x5F4\x3\x2\x2\x2\x46\x5F6\x3\x2"+
		"\x2\x2H\x5FB\x3\x2\x2\x2J\x5FD\x3\x2\x2\x2L\x5FF\x3\x2\x2\x2N\x602\x3"+
		"\x2\x2\x2P\x606\x3\x2\x2\x2R\x60C\x3\x2\x2\x2T\x60E\x3\x2\x2\x2V\x611"+
		"\x3\x2\x2\x2X\x613\x3\x2\x2\x2Z\x616\x3\x2\x2\x2\\\x61B\x3\x2\x2\x2^\x626"+
		"\x3\x2\x2\x2`\x62F\x3\x2\x2\x2\x62\x633\x3\x2\x2\x2\x64\x635\x3\x2\x2"+
		"\x2\x66\x63B\x3\x2\x2\x2h\x63D\x3\x2\x2\x2j\x63F\x3\x2\x2\x2l\x642\x3"+
		"\x2\x2\x2n\x64A\x3\x2\x2\x2p\x64C\x3\x2\x2\x2r\x64E\x3\x2\x2\x2t\x664"+
		"\x3\x2\x2\x2v\x677\x3\x2\x2\x2x\x67F\x3\x2\x2\x2z\x683\x3\x2\x2\x2|\x68B"+
		"\x3\x2\x2\x2~\x69A\x3\x2\x2\x2\x80\x69C\x3\x2\x2\x2\x82\x6C8\x3\x2\x2"+
		"\x2\x84\x6D1\x3\x2\x2\x2\x86\x6DE\x3\x2\x2\x2\x88\x6E0\x3\x2\x2\x2\x8A"+
		"\x6E2\x3\x2\x2\x2\x8C\x6E5\x3\x2\x2\x2\x8E\x6E9\x3\x2\x2\x2\x90\x6F3\x3"+
		"\x2\x2\x2\x92\x6FD\x3\x2\x2\x2\x94\x729\x3\x2\x2\x2\x96\x740\x3\x2\x2"+
		"\x2\x98\x742\x3\x2\x2\x2\x9A\x744\x3\x2\x2\x2\x9C\x746\x3\x2\x2\x2\x9E"+
		"\x74B\x3\x2\x2\x2\xA0\x74E\x3\x2\x2\x2\xA2\x8B1\x3\x2\x2\x2\xA4\x8B3\x3"+
		"\x2\x2\x2\xA6\x8E9\x3\x2\x2\x2\xA8\x8EE\x3\x2\x2\x2\xAA\x91A\x3\x2\x2"+
		"\x2\xAC\x931\x3\x2\x2\x2\xAE\x94F\x3\x2\x2\x2\xB0\x953\x3\x2\x2\x2\xB2"+
		"\x959\x3\x2\x2\x2\xB4\x95F\x3\x2\x2\x2\xB6\x963\x3\x2\x2\x2\xB8\x967\x3"+
		"\x2\x2\x2\xBA\x96C\x3\x2\x2\x2\xBC\x97A\x3\x2\x2\x2\xBE\x980\x3\x2\x2"+
		"\x2\xC0\x986\x3\x2\x2\x2\xC2\x996\x3\x2\x2\x2\xC4\x99A\x3\x2\x2\x2\xC6"+
		"\x9A0\x3\x2\x2\x2\xC8\x9A6\x3\x2\x2\x2\xCA\x9AE\x3\x2\x2\x2\xCC\x9B4\x3"+
		"\x2\x2\x2\xCE\x9C3\x3\x2\x2\x2\xD0\x9D5\x3\x2\x2\x2\xD2\x9DC\x3\x2\x2"+
		"\x2\xD4\x9E1\x3\x2\x2\x2\xD6\x9EC\x3\x2\x2\x2\xD8\x9F1\x3\x2\x2\x2\xDA"+
		"\x9F5\x3\x2\x2\x2\xDC\x9F9\x3\x2\x2\x2\xDE\x9FE\x3\x2\x2\x2\xE0\xA03\x3"+
		"\x2\x2\x2\xE2\xA08\x3\x2\x2\x2\xE4\xA16\x3\x2\x2\x2\xE6\xA1C\x3\x2\x2"+
		"\x2\xE8\xA21\x3\x2\x2\x2\xEA\xA29\x3\x2\x2\x2\xEC\xA2D\x3\x2\x2\x2\xEE"+
		"\xA3E\x3\x2\x2\x2\xF0\xA46\x3\x2\x2\x2\xF2\xA4C\x3\x2\x2\x2\xF4\xA5A\x3"+
		"\x2\x2\x2\xF6\xA70\x3\x2\x2\x2\xF8\xA75\x3\x2\x2\x2\xFA\xA7B\x3\x2\x2"+
		"\x2\xFC\xA80\x3\x2\x2\x2\xFE\xA84\x3\x2\x2\x2\x100\xAA0\x3\x2\x2\x2\x102"+
		"\xAAB\x3\x2\x2\x2\x104\xAB4\x3\x2\x2\x2\x106\xAC1\x3\x2\x2\x2\x108\xAC9"+
		"\x3\x2\x2\x2\x10A\xACE\x3\x2\x2\x2\x10C\xAD9\x3\x2\x2\x2\x10E\xAF7\x3"+
		"\x2\x2\x2\x110\xB15\x3\x2\x2\x2\x112\xB23\x3\x2\x2\x2\x114\xB3B\x3\x2"+
		"\x2\x2\x116\xB4B\x3\x2\x2\x2\x118\xB58\x3\x2\x2\x2\x11A\xB6B\x3\x2\x2"+
		"\x2\x11C\xB7A\x3\x2\x2\x2\x11E\xB87\x3\x2\x2\x2\x120\xB90\x3\x2\x2\x2"+
		"\x122\xBAE\x3\x2\x2\x2\x124\xCA1\x3\x2\x2\x2\x126\xCAA\x3\x2\x2\x2\x128"+
		"\xCE4\x3\x2\x2\x2\x12A\xCE6\x3\x2\x2\x2\x12C\xD3A\x3\x2\x2\x2\x12E\xD3C"+
		"\x3\x2\x2\x2\x130\xD65\x3\x2\x2\x2\x132\xD97\x3\x2\x2\x2\x134\xDDD\x3"+
		"\x2\x2\x2\x136\xE20\x3\x2\x2\x2\x138\xE30\x3\x2\x2\x2\x13A\xE4C\x3\x2"+
		"\x2\x2\x13C\xE5F\x3\x2\x2\x2\x13E\xE74\x3\x2\x2\x2\x140\xEBC\x3\x2\x2"+
		"\x2\x142\xF1B\x3\x2\x2\x2\x144\xF31\x3\x2\x2\x2\x146\xF3D\x3\x2\x2\x2"+
		"\x148\xF59\x3\x2\x2\x2\x14A\xF6E\x3\x2\x2\x2\x14C\xF88\x3\x2\x2\x2\x14E"+
		"\xF91\x3\x2\x2\x2\x150\xFB1\x3\x2\x2\x2\x152\xFBB\x3\x2\x2\x2\x154\xFCB"+
		"\x3\x2\x2\x2\x156\xFD7\x3\x2\x2\x2\x158\xFE0\x3\x2\x2\x2\x15A\xFF1\x3"+
		"\x2\x2\x2\x15C\x1009\x3\x2\x2\x2\x15E\x1075\x3\x2\x2\x2\x160\x108F\x3"+
		"\x2\x2\x2\x162\x109B\x3\x2\x2\x2\x164\x10A2\x3\x2\x2\x2\x166\x10CE\x3"+
		"\x2\x2\x2\x168\x10D9\x3\x2\x2\x2\x16A\x10ED\x3\x2\x2\x2\x16C\x1117\x3"+
		"\x2\x2\x2\x16E\x111E\x3\x2\x2\x2\x170\x112C\x3\x2\x2\x2\x172\x113E\x3"+
		"\x2\x2\x2\x174\x1184\x3\x2\x2\x2\x176\x11AF\x3\x2\x2\x2\x178\x11E5\x3"+
		"\x2\x2\x2\x17A\x126E\x3\x2\x2\x2\x17C\x12FD\x3\x2\x2\x2\x17E\x131A\x3"+
		"\x2\x2\x2\x180\x1337\x3\x2\x2\x2\x182\x13A6\x3\x2\x2\x2\x184\x13B3\x3"+
		"\x2\x2\x2\x186\x13BB\x3\x2\x2\x2\x188\x13C3\x3\x2\x2\x2\x18A\x13D9\x3"+
		"\x2\x2\x2\x18C\x13F7\x3\x2\x2\x2\x18E\x1412\x3\x2\x2\x2\x190\x1426\x3"+
		"\x2\x2\x2\x192\x1456\x3\x2\x2\x2\x194\x147B\x3\x2\x2\x2\x196\x1547\x3"+
		"\x2\x2\x2\x198\x1565\x3\x2\x2\x2\x19A\x1567\x3\x2\x2\x2\x19C\x1587\x3"+
		"\x2\x2\x2\x19E\x15B6\x3\x2\x2\x2\x1A0\x15EA\x3\x2\x2\x2\x1A2\x15FA\x3"+
		"\x2\x2\x2\x1A4\x1608\x3\x2\x2\x2\x1A6\x1651\x3\x2\x2\x2\x1A8\x1670\x3"+
		"\x2\x2\x2\x1AA\x1672\x3\x2\x2\x2\x1AC\x1676\x3\x2\x2\x2\x1AE\x1693\x3"+
		"\x2\x2\x2\x1B0\x1695\x3\x2\x2\x2\x1B2\x16AA\x3\x2\x2\x2\x1B4\x1703\x3"+
		"\x2\x2\x2\x1B6\x1705\x3\x2\x2\x2\x1B8\x1712\x3\x2\x2\x2\x1BA\x174A\x3"+
		"\x2\x2\x2\x1BC\x174D\x3\x2\x2\x2\x1BE\x177B\x3\x2\x2\x2\x1C0\x177D\x3"+
		"\x2\x2\x2\x1C2\x178F\x3\x2\x2\x2\x1C4\x17A0\x3\x2\x2\x2\x1C6\x17A3\x3"+
		"\x2\x2\x2\x1C8\x17E3\x3\x2\x2\x2\x1CA\x17E5\x3\x2\x2\x2\x1CC\x17F9\x3"+
		"\x2\x2\x2\x1CE\x1804\x3\x2\x2\x2\x1D0\x1814\x3\x2\x2\x2\x1D2\x1816\x3"+
		"\x2\x2\x2\x1D4\x1847\x3\x2\x2\x2\x1D6\x1870\x3\x2\x2\x2\x1D8\x189C\x3"+
		"\x2\x2\x2\x1DA\x18C9\x3\x2\x2\x2\x1DC\x18CD\x3\x2\x2\x2\x1DE\x18D5\x3"+
		"\x2\x2\x2\x1E0\x1902\x3\x2\x2\x2\x1E2\x1904\x3\x2\x2\x2\x1E4\x190C\x3"+
		"\x2\x2\x2\x1E6\x192D\x3\x2\x2\x2\x1E8\x1935\x3\x2\x2\x2\x1EA\x1950\x3"+
		"\x2\x2\x2\x1EC\x1968\x3\x2\x2\x2\x1EE\x1988\x3\x2\x2\x2\x1F0\x19A6\x3"+
		"\x2\x2\x2\x1F2\x19C3\x3\x2\x2\x2\x1F4\x19D1\x3\x2\x2\x2\x1F6\x19D3\x3"+
		"\x2\x2\x2\x1F8\x19F2\x3\x2\x2\x2\x1FA\x1A00\x3\x2\x2\x2\x1FC\x1A20\x3"+
		"\x2\x2\x2\x1FE\x1A36\x3\x2\x2\x2\x200\x1A42\x3\x2\x2\x2\x202\x1A60\x3"+
		"\x2\x2\x2\x204\x1A62\x3\x2\x2\x2\x206\x1A95\x3\x2\x2\x2\x208\x1ACD\x3"+
		"\x2\x2\x2\x20A\x1AE0\x3\x2\x2\x2\x20C\x1AE2\x3\x2\x2\x2\x20E\x1AFB\x3"+
		"\x2\x2\x2\x210\x1AFD\x3\x2\x2\x2\x212\x1B05\x3\x2\x2\x2\x214\x1B07\x3"+
		"\x2\x2\x2\x216\x1B93\x3\x2\x2\x2\x218\x1B9B\x3\x2\x2\x2\x21A\x1B9D\x3"+
		"\x2\x2\x2\x21C\x1B9F\x3\x2\x2\x2\x21E\x1BA1\x3\x2\x2\x2\x220\x1BAF\x3"+
		"\x2\x2\x2\x222\x1BB5\x3\x2\x2\x2\x224\x1BB7\x3\x2\x2\x2\x226\x1BB9\x3"+
		"\x2\x2\x2\x228\x1BBE\x3\x2\x2\x2\x22A\x1BC0\x3\x2\x2\x2\x22C\x1BC4\x3"+
		"\x2\x2\x2\x22E\x1BD0\x3\x2\x2\x2\x230\x1BD2\x3\x2\x2\x2\x232\x1BD5\x3"+
		"\x2\x2\x2\x234\x1BD8\x3\x2\x2\x2\x236\x1BDA\x3\x2\x2\x2\x238\x1BDC\x3"+
		"\x2\x2\x2\x23A\x1BDE\x3\x2\x2\x2\x23C\x1BFB\x3\x2\x2\x2\x23E\x1BFD\x3"+
		"\x2\x2\x2\x240\x1C08\x3\x2\x2\x2\x242\x1C0B\x3\x2\x2\x2\x244\x1C14\x3"+
		"\x2\x2\x2\x246\x1C1C\x3\x2\x2\x2\x248\x1C25\x3\x2\x2\x2\x24A\x1C3C\x3"+
		"\x2\x2\x2\x24C\x1C3E\x3\x2\x2\x2\x24E\x1C49\x3\x2\x2\x2\x250\x1C4B\x3"+
		"\x2\x2\x2\x252\x1C66\x3\x2\x2\x2\x254\x1C6D\x3\x2\x2\x2\x256\x1C73\x3"+
		"\x2\x2\x2\x258\x1C86\x3\x2\x2\x2\x25A\x1C88\x3\x2\x2\x2\x25C\x1C99\x3"+
		"\x2\x2\x2\x25E\x1CB0\x3\x2\x2\x2\x260\x1CC1\x3\x2\x2\x2\x262\x1CD2\x3"+
		"\x2\x2\x2\x264\x1CDC\x3\x2\x2\x2\x266\x1CED\x3\x2\x2\x2\x268\x1CFE\x3"+
		"\x2\x2\x2\x26A\x1D08\x3\x2\x2\x2\x26C\x1D0A\x3\x2\x2\x2\x26E\x1D11\x3"+
		"\x2\x2\x2\x270\x1D4D\x3\x2\x2\x2\x272\x1D6C\x3\x2\x2\x2\x274\x1D6E\x3"+
		"\x2\x2\x2\x276\x1E6A\x3\x2\x2\x2\x278\x1F58\x3\x2\x2\x2\x27A\x1F80\x3"+
		"\x2\x2\x2\x27C\x1F8D\x3\x2\x2\x2\x27E\x1F9B\x3\x2\x2\x2\x280\x1FA3\x3"+
		"\x2\x2\x2\x282\x1FA9\x3\x2\x2\x2\x284\x1FB0\x3\x2\x2\x2\x286\x1FB4\x3"+
		"\x2\x2\x2\x288\x1FE5\x3\x2\x2\x2\x28A\x1FE9\x3\x2\x2\x2\x28C\x1FF6\x3"+
		"\x2\x2\x2\x28E\x200E\x3\x2\x2\x2\x290\x2010\x3\x2\x2\x2\x292\x2018\x3"+
		"\x2\x2\x2\x294\x2060\x3\x2\x2\x2\x296\x2062\x3\x2\x2\x2\x298\x2087\x3"+
		"\x2\x2\x2\x29A\x2089\x3\x2\x2\x2\x29C\x2099\x3\x2\x2\x2\x29E\x20A6\x3"+
		"\x2\x2\x2\x2A0\x20BA\x3\x2\x2\x2\x2A2\x20C7\x3\x2\x2\x2\x2A4\x20EC\x3"+
		"\x2\x2\x2\x2A6\x20FD\x3\x2\x2\x2\x2A8\x20FF\x3\x2\x2\x2\x2AA\x210C\x3"+
		"\x2\x2\x2\x2AC\x2125\x3\x2\x2\x2\x2AE\x2141\x3\x2\x2\x2\x2B0\x216A\x3"+
		"\x2\x2\x2\x2B2\x21BD\x3\x2\x2\x2\x2B4\x21BF\x3\x2\x2\x2\x2B6\x21C3\x3"+
		"\x2\x2\x2\x2B8\x21C8\x3\x2\x2\x2\x2BA\x21CC\x3\x2\x2\x2\x2BC\x21D1\x3"+
		"\x2\x2\x2\x2BE\x21D6\x3\x2\x2\x2\x2C0\x21E5\x3\x2\x2\x2\x2C2\x21EA\x3"+
		"\x2\x2\x2\x2C4\x21EE\x3\x2\x2\x2\x2C6\x21F7\x3\x2\x2\x2\x2C8\x21FC\x3"+
		"\x2\x2\x2\x2CA\x2204\x3\x2\x2\x2\x2CC\x2208\x3\x2\x2\x2\x2CE\x2215\x3"+
		"\x2\x2\x2\x2D0\x2217\x3\x2\x2\x2\x2D2\x2225\x3\x2\x2\x2\x2D4\x2227\x3"+
		"\x2\x2\x2\x2D6\x2254\x3\x2\x2\x2\x2D8\x225E\x3\x2\x2\x2\x2DA\x2289\x3"+
		"\x2\x2\x2\x2DC\x22DB\x3\x2\x2\x2\x2DE\x22E6\x3\x2\x2\x2\x2E0\x22F1\x3"+
		"\x2\x2\x2\x2E2\x22FD\x3\x2\x2\x2\x2E4\x2304\x3\x2\x2\x2\x2E6\x232D\x3"+
		"\x2\x2\x2\x2E8\x2338\x3\x2\x2\x2\x2EA\x233A\x3\x2\x2\x2\x2EC\x2389\x3"+
		"\x2\x2\x2\x2EE\x238D\x3\x2\x2\x2\x2F0\x2397\x3\x2\x2\x2\x2F2\x23B3\x3"+
		"\x2\x2\x2\x2F4\x23CE\x3\x2\x2\x2\x2F6\x23D4\x3\x2\x2\x2\x2F8\x23DE\x3"+
		"\x2\x2\x2\x2FA\x23E8\x3\x2\x2\x2\x2FC\x23EA\x3\x2\x2\x2\x2FE\x2406\x3"+
		"\x2\x2\x2\x300\x2408\x3\x2\x2\x2\x302\x2424\x3\x2\x2\x2\x304\x2426\x3"+
		"\x2\x2\x2\x306\x242E\x3\x2\x2\x2\x308\x2436\x3\x2\x2\x2\x30A\x243F\x3"+
		"\x2\x2\x2\x30C\x247A\x3\x2\x2\x2\x30E\x2481\x3\x2\x2\x2\x310\x248F\x3"+
		"\x2\x2\x2\x312\x2498\x3\x2\x2\x2\x314\x24BF\x3\x2\x2\x2\x316\x24CF\x3"+
		"\x2\x2\x2\x318\x24D6\x3\x2\x2\x2\x31A\x24D8\x3\x2\x2\x2\x31C\x2547\x3"+
		"\x2\x2\x2\x31E\x2549\x3\x2\x2\x2\x320\x2554\x3\x2\x2\x2\x322\x2558\x3"+
		"\x2\x2\x2\x324\x255A\x3\x2\x2\x2\x326\x2593\x3\x2\x2\x2\x328\x2595\x3"+
		"\x2\x2\x2\x32A\x259E\x3\x2\x2\x2\x32C\x25A6\x3\x2\x2\x2\x32E\x25B4\x3"+
		"\x2\x2\x2\x330\x25C5\x3\x2\x2\x2\x332\x25DB\x3\x2\x2\x2\x334\x25E5\x3"+
		"\x2\x2\x2\x336\x25EB\x3\x2\x2\x2\x338\x25ED\x3\x2\x2\x2\x33A\x25FA\x3"+
		"\x2\x2\x2\x33C\x25FC\x3\x2\x2\x2\x33E\x2636\x3\x2\x2\x2\x340\x2638\x3"+
		"\x2\x2\x2\x342\x2646\x3\x2\x2\x2\x344\x2657\x3\x2\x2\x2\x346\x265F\x3"+
		"\x2\x2\x2\x348\x2664\x3\x2\x2\x2\x34A\x268E\x3\x2\x2\x2\x34C\x2690\x3"+
		"\x2\x2\x2\x34E\x2698\x3\x2\x2\x2\x350\x26A2\x3\x2\x2\x2\x352\x26AA\x3"+
		"\x2\x2\x2\x354\x26C8\x3\x2\x2\x2\x356\x26CA\x3\x2\x2\x2\x358\x26D8\x3"+
		"\x2\x2\x2\x35A\x277A\x3\x2\x2\x2\x35C\x2781\x3\x2\x2\x2\x35E\x27AE\x3"+
		"\x2\x2\x2\x360\x27C6\x3\x2\x2\x2\x362\x27C8\x3\x2\x2\x2\x364\x27CF\x3"+
		"\x2\x2\x2\x366\x27D6\x3\x2\x2\x2\x368\x27DD\x3\x2\x2\x2\x36A\x27E2\x3"+
		"\x2\x2\x2\x36C\x27E8\x3\x2\x2\x2\x36E\x27ED\x3\x2\x2\x2\x370\x27F1\x3"+
		"\x2\x2\x2\x372\x27F6\x3\x2\x2\x2\x374\x2805\x3\x2\x2\x2\x376\x2814\x3"+
		"\x2\x2\x2\x378\x284A\x3\x2\x2\x2\x37A\x284C\x3\x2\x2\x2\x37C\x2859\x3"+
		"\x2\x2\x2\x37E\x285B\x3\x2\x2\x2\x380\x2869\x3\x2\x2\x2\x382\x287B\x3"+
		"\x2\x2\x2\x384\x289D\x3\x2\x2\x2\x386\x28B3\x3\x2\x2\x2\x388\x28B6\x3"+
		"\x2\x2\x2\x38A\x28BA\x3\x2\x2\x2\x38C\x28C9\x3\x2\x2\x2\x38E\x28D2\x3"+
		"\x2\x2\x2\x390\x28D6\x3\x2\x2\x2\x392\x28DE\x3\x2\x2\x2\x394\x28E4\x3"+
		"\x2\x2\x2\x396\x290B\x3\x2\x2\x2\x398\x2913\x3\x2\x2\x2\x39A\x2917\x3"+
		"\x2\x2\x2\x39C\x2919\x3\x2\x2\x2\x39E\x292E\x3\x2\x2\x2\x3A0\x295B\x3"+
		"\x2\x2\x2\x3A2\x2962\x3\x2\x2\x2\x3A4\x2969\x3\x2\x2\x2\x3A6\x297E\x3"+
		"\x2\x2\x2\x3A8\x2980\x3\x2\x2\x2\x3AA\x2982\x3\x2\x2\x2\x3AC\x2984\x3"+
		"\x2\x2\x2\x3AE\x2986\x3\x2\x2\x2\x3B0\x298B\x3\x2\x2\x2\x3B2\x2992\x3"+
		"\x2\x2\x2\x3B4\x29A1\x3\x2\x2\x2\x3B6\x29B0\x3\x2\x2\x2\x3B8\x29B4\x3"+
		"\x2\x2\x2\x3BA\x29E6\x3\x2\x2\x2\x3BC\x29E8\x3\x2\x2\x2\x3BE\x29F6\x3"+
		"\x2\x2\x2\x3C0\x2A00\x3\x2\x2\x2\x3C2\x2A02\x3\x2\x2\x2\x3C4\x2A04\x3"+
		"\x2\x2\x2\x3C6\x2A07\x3\x2\x2\x2\x3C8\x2A12\x3\x2\x2\x2\x3CA\x2A19\x3"+
		"\x2\x2\x2\x3CC\x2A1B\x3\x2\x2\x2\x3CE\x2A27\x3\x2\x2\x2\x3D0\x2A59\x3"+
		"\x2\x2\x2\x3D2\x2A5D\x3\x2\x2\x2\x3D4\x2A5F\x3\x2\x2\x2\x3D6\x2A73\x3"+
		"\x2\x2\x2\x3D8\x2A83\x3\x2\x2\x2\x3DA\x2A85\x3\x2\x2\x2\x3DC\x2AAB\x3"+
		"\x2\x2\x2\x3DE\x2AB0\x3\x2\x2\x2\x3E0\x2AC1\x3\x2\x2\x2\x3E2\x2AC3\x3"+
		"\x2\x2\x2\x3E4\x2AC8\x3\x2\x2\x2\x3E6\x2ACA\x3\x2\x2\x2\x3E8\x2ADB\x3"+
		"\x2\x2\x2\x3EA\x2ADD\x3\x2\x2\x2\x3EC\x2ADF\x3\x2\x2\x2\x3EE\x3F0\x5\x4"+
		"\x3\x2\x3EF\x3EE\x3\x2\x2\x2\x3F0\x3F3\x3\x2\x2\x2\x3F1\x3EF\x3\x2\x2"+
		"\x2\x3F1\x3F2\x3\x2\x2\x2\x3F2\x3F4\x3\x2\x2\x2\x3F3\x3F1\x3\x2\x2\x2"+
		"\x3F4\x3F5\a\x2\x2\x3\x3F5\x3\x3\x2\x2\x2\x3F6\x3FA\x5\x288\x145\x2\x3F7"+
		"\x3F9\x5\x2B4\x15B\x2\x3F8\x3F7\x3\x2\x2\x2\x3F9\x3FC\x3\x2\x2\x2\x3FA"+
		"\x3F8\x3\x2\x2\x2\x3FA\x3FB\x3\x2\x2\x2\x3FB\x408\x3\x2\x2\x2\x3FC\x3FA"+
		"\x3\x2\x2\x2\x3FD\x3FF\x5\x288\x145\x2\x3FE\x3FD\x3\x2\x2\x2\x3FE\x3FF"+
		"\x3\x2\x2\x2\x3FF\x400\x3\x2\x2\x2\x400\x404\x5\x6\x4\x2\x401\x403\x5"+
		"\x2B4\x15B\x2\x402\x401\x3\x2\x2\x2\x403\x406\x3\x2\x2\x2\x404\x402\x3"+
		"\x2\x2\x2\x404\x405\x3\x2\x2\x2\x405\x408\x3\x2\x2\x2\x406\x404\x3\x2"+
		"\x2\x2\x407\x3F6\x3\x2\x2\x2\x407\x3FE\x3\x2\x2\x2\x408\x5\x3\x2\x2\x2"+
		"\x409\x40B\x5\b\x5\x2\x40A\x40C\a\x34A\x2\x2\x40B\x40A\x3\x2\x2\x2\x40B"+
		"\x40C\x3\x2\x2\x2\x40C\x40E\x3\x2\x2\x2\x40D\x409\x3\x2\x2\x2\x40E\x40F"+
		"\x3\x2\x2\x2\x40F\x40D\x3\x2\x2\x2\x40F\x410\x3\x2\x2\x2\x410\a\x3\x2"+
		"\x2\x2\x411\x419\x5\n\x6\x2\x412\x419\x5\f\a\x2\x413\x419\x5\x10\t\x2"+
		"\x414\x419\x5\x2BE\x160\x2\x415\x419\x5\x30\x19\x2\x416\x419\x5\x32\x1A"+
		"\x2\x417\x419\x5\xE\b\x2\x418\x411\x3\x2\x2\x2\x418\x412\x3\x2\x2\x2\x418"+
		"\x413\x3\x2\x2\x2\x418\x414\x3\x2\x2\x2\x418\x415\x3\x2\x2\x2\x418\x416"+
		"\x3\x2\x2\x2\x418\x417\x3\x2\x2\x2\x419\t\x3\x2\x2\x2\x41A\x420\x5\x1B2"+
		"\xDA\x2\x41B\x420\x5\x1B8\xDD\x2\x41C\x420\x5\x1BC\xDF\x2\x41D\x420\x5"+
		"\x1C2\xE2\x2\x41E\x420\x5\x1C6\xE4\x2\x41F\x41A\x3\x2\x2\x2\x41F\x41B"+
		"\x3\x2\x2\x2\x41F\x41C\x3\x2\x2\x2\x41F\x41D\x3\x2\x2\x2\x41F\x41E\x3"+
		"\x2\x2\x2\x420\v\x3\x2\x2\x2\x421\x4C3\x5\x34\x1B\x2\x422\x4C3\x5<\x1F"+
		"\x2\x423\x4C3\x5v<\x2\x424\x4C3\x5\x84\x43\x2\x425\x4C3\x5\x90I\x2\x426"+
		"\x4C3\x5\x92J\x2\x427\x4C3\x5\x8EH\x2\x428\x4C3\x5\x9EP\x2\x429\x4C3\x5"+
		"\xA8U\x2\x42A\x4C3\x5\xAAV\x2\x42B\x4C3\x5\x116\x8C\x2\x42C\x4C3\x5\x11C"+
		"\x8F\x2\x42D\x4C3\x5\x206\x104\x2\x42E\x4C3\x5\x160\xB1\x2\x42F\x4C3\x5"+
		"\x214\x10B\x2\x430\x4C3\x5\x122\x92\x2\x431\x4C3\x5\x12A\x96\x2\x432\x4C3"+
		"\x5\x12C\x97\x2\x433\x4C3\x5\x12E\x98\x2\x434\x4C3\x5\x132\x9A\x2\x435"+
		"\x4C3\x5\x136\x9C\x2\x436\x4C3\x5\x13A\x9E\x2\x437\x4C3\x5\x142\xA2\x2"+
		"\x438\x4C3\x5\x146\xA4\x2\x439\x4C3\x5\x13E\xA0\x2\x43A\x4C3\x5\x14E\xA8"+
		"\x2\x43B\x4C3\x5\x14A\xA6\x2\x43C\x4C3\x5\x152\xAA\x2\x43D\x4C3\x5\x154"+
		"\xAB\x2\x43E\x4C3\x5\x156\xAC\x2\x43F\x4C3\x5\x158\xAD\x2\x440\x4C3\x5"+
		"\x15E\xB0\x2\x441\x4C3\x5\x16E\xB8\x2\x442\x4C3\x5\x168\xB5\x2\x443\x4C3"+
		"\x5\x174\xBB\x2\x444\x4C3\x5\x178\xBD\x2\x445\x4C3\x5\x17C\xBF\x2\x446"+
		"\x4C3\x5\x180\xC1\x2\x447\x4C3\x5\x182\xC2\x2\x448\x4C3\x5\x186\xC4\x2"+
		"\x449\x4C3\x5\x188\xC5\x2\x44A\x4C3\x5\x18C\xC7\x2\x44B\x4C3\x5\x18E\xC8"+
		"\x2\x44C\x4C3\x5\x204\x103\x2\x44D\x4C3\x5\x194\xCB\x2\x44E\x4C3\x5\x19A"+
		"\xCE\x2\x44F\x4C3\x5\x19C\xCF\x2\x450\x4C3\x5\x36\x1C\x2\x451\x4C3\x5"+
		"r:\x2\x452\x4C3\x5\x80\x41\x2\x453\x4C3\x5\xACW\x2\x454\x4C3\x5\x114\x8B"+
		"\x2\x455\x4C3\x5\x118\x8D\x2\x456\x4C3\x5\x11A\x8E\x2\x457\x4C3\x5\x11E"+
		"\x90\x2\x458\x4C3\x5\x1D2\xEA\x2\x459\x4C3\x5\x162\xB2\x2\x45A\x4C3\x5"+
		"\x120\x91\x2\x45B\x4C3\x5\x130\x99\x2\x45C\x4C3\x5\x134\x9B\x2\x45D\x4C3"+
		"\x5\x138\x9D\x2\x45E\x4C3\x5\x13C\x9F\x2\x45F\x4C3\x5\x1D4\xEB\x2\x460"+
		"\x4C3\x5\x144\xA3\x2\x461\x4C3\x5\x148\xA5\x2\x462\x4C3\x5\x140\xA1\x2"+
		"\x463\x4C3\x5\x150\xA9\x2\x464\x4C3\x5\x14C\xA7\x2\x465\x4C3\x5\xA4S\x2"+
		"\x466\x4C3\x5\x1E8\xF5\x2\x467\x4C3\x5\x1D6\xEC\x2\x468\x4C3\x5\x1DC\xEF"+
		"\x2\x469\x4C3\x5\x15A\xAE\x2\x46A\x4C3\x5\x15C\xAF\x2\x46B\x4C3\x5\x164"+
		"\xB3\x2\x46C\x4C3\x5\x166\xB4\x2\x46D\x4C3\x5\x16A\xB6\x2\x46E\x4C3\x5"+
		"\x16C\xB7\x2\x46F\x4C3\x5\x170\xB9\x2\x470\x4C3\x5\x172\xBA\x2\x471\x4C3"+
		"\x5\x176\xBC\x2\x472\x4C3\x5\x17A\xBE\x2\x473\x4C3\x5\x17E\xC0\x2\x474"+
		"\x4C3\x5\x184\xC3\x2\x475\x4C3\x5\x18A\xC6\x2\x476\x4C3\x5\x1F6\xFC\x2"+
		"\x477\x4C3\x5\x190\xC9\x2\x478\x4C3\x5\x192\xCA\x2\x479\x4C3\x5\x1FA\xFE"+
		"\x2\x47A\x4C3\x5\x266\x134\x2\x47B\x4C3\x5\x196\xCC\x2\x47C\x4C3\x5\x198"+
		"\xCD\x2\x47D\x4C3\x5\x200\x101\x2\x47E\x4C3\x5\x19E\xD0\x2\x47F\x4C3\x5"+
		"\x1A0\xD1\x2\x480\x4C3\x5\x38\x1D\x2\x481\x4C3\x5:\x1E\x2\x482\x4C3\x5"+
		"t;\x2\x483\x4C3\x5\x82\x42\x2\x484\x4C3\x5\x9CO\x2\x485\x4C3\x5\xA6T\x2"+
		"\x486\x4C3\x5\xAEX\x2\x487\x4C3\x5\xB0Y\x2\x488\x4C3\x5\xB2Z\x2\x489\x4C3"+
		"\x5\xB4[\x2\x48A\x4C3\x5\xB6\\\x2\x48B\x4C3\x5\xB8]\x2\x48C\x4C3\x5\xBA"+
		"^\x2\x48D\x4C3\x5\xBC_\x2\x48E\x4C3\x5\xBE`\x2\x48F\x4C3\x5\xE8u\x2\x490"+
		"\x4C3\x5\xC0\x61\x2\x491\x4C3\x5\xC2\x62\x2\x492\x4C3\x5\xCEh\x2\x493"+
		"\x4C3\x5\xD0i\x2\x494\x4C3\x5\xC4\x63\x2\x495\x4C3\x5\xC6\x64\x2\x496"+
		"\x4C3\x5\xC8\x65\x2\x497\x4C3\x5\xCA\x66\x2\x498\x4C3\x5\xCCg\x2\x499"+
		"\x4C3\x5\xD2j\x2\x49A\x4C3\x5\xD4k\x2\x49B\x4C3\x5\xD6l\x2\x49C\x4C3\x5"+
		"\x25E\x130\x2\x49D\x4C3\x5\x250\x129\x2\x49E\x4C3\x5\xD8m\x2\x49F\x4C3"+
		"\x5\xDAn\x2\x4A0\x4C3\x5\xDCo\x2\x4A1\x4C3\x5\xDEp\x2\x4A2\x4C3\x5\xE0"+
		"q\x2\x4A3\x4C3\x5\x256\x12C\x2\x4A4\x4C3\x5\xE2r\x2\x4A5\x4C3\x5\xE4s"+
		"\x2\x4A6\x4C3\x5\xE6t\x2\x4A7\x4C3\x5\xEAv\x2\x4A8\x4C3\x5\xECw\x2\x4A9"+
		"\x4C3\x5\xEEx\x2\x4AA\x4C3\x5\xF0y\x2\x4AB\x4C3\x5\xF2z\x2\x4AC\x4C3\x5"+
		"\xF4{\x2\x4AD\x4C3\x5\xF6|\x2\x4AE\x4C3\x5\xF8}\x2\x4AF\x4C3\x5\xFA~\x2"+
		"\x4B0\x4C3\x5\xFC\x7F\x2\x4B1\x4C3\x5\xFE\x80\x2\x4B2\x4C3\x5\x260\x131"+
		"\x2\x4B3\x4C3\x5\x100\x81\x2\x4B4\x4C3\x5\x102\x82\x2\x4B5\x4C3\x5\x104"+
		"\x83\x2\x4B6\x4C3\x5\x262\x132\x2\x4B7\x4C3\x5\x258\x12D\x2\x4B8\x4C3"+
		"\x5\x268\x135\x2\x4B9\x4C3\x5\x106\x84\x2\x4BA\x4C3\x5\x264\x133\x2\x4BB"+
		"\x4C3\x5\x108\x85\x2\x4BC\x4C3\x5\x10A\x86\x2\x4BD\x4C3\x5\x10C\x87\x2"+
		"\x4BE\x4C3\x5\x10E\x88\x2\x4BF\x4C3\x5\x110\x89\x2\x4C0\x4C3\x5\x112\x8A"+
		"\x2\x4C1\x4C3\x5\x1F8\xFD\x2\x4C2\x421\x3\x2\x2\x2\x4C2\x422\x3\x2\x2"+
		"\x2\x4C2\x423\x3\x2\x2\x2\x4C2\x424\x3\x2\x2\x2\x4C2\x425\x3\x2\x2\x2"+
		"\x4C2\x426\x3\x2\x2\x2\x4C2\x427\x3\x2\x2\x2\x4C2\x428\x3\x2\x2\x2\x4C2"+
		"\x429\x3\x2\x2\x2\x4C2\x42A\x3\x2\x2\x2\x4C2\x42B\x3\x2\x2\x2\x4C2\x42C"+
		"\x3\x2\x2\x2\x4C2\x42D\x3\x2\x2\x2\x4C2\x42E\x3\x2\x2\x2\x4C2\x42F\x3"+
		"\x2\x2\x2\x4C2\x430\x3\x2\x2\x2\x4C2\x431\x3\x2\x2\x2\x4C2\x432\x3\x2"+
		"\x2\x2\x4C2\x433\x3\x2\x2\x2\x4C2\x434\x3\x2\x2\x2\x4C2\x435\x3\x2\x2"+
		"\x2\x4C2\x436\x3\x2\x2\x2\x4C2\x437\x3\x2\x2\x2\x4C2\x438\x3\x2\x2\x2"+
		"\x4C2\x439\x3\x2\x2\x2\x4C2\x43A\x3\x2\x2\x2\x4C2\x43B\x3\x2\x2\x2\x4C2"+
		"\x43C\x3\x2\x2\x2\x4C2\x43D\x3\x2\x2\x2\x4C2\x43E\x3\x2\x2\x2\x4C2\x43F"+
		"\x3\x2\x2\x2\x4C2\x440\x3\x2\x2\x2\x4C2\x441\x3\x2\x2\x2\x4C2\x442\x3"+
		"\x2\x2\x2\x4C2\x443\x3\x2\x2\x2\x4C2\x444\x3\x2\x2\x2\x4C2\x445\x3\x2"+
		"\x2\x2\x4C2\x446\x3\x2\x2\x2\x4C2\x447\x3\x2\x2\x2\x4C2\x448\x3\x2\x2"+
		"\x2\x4C2\x449\x3\x2\x2\x2\x4C2\x44A\x3\x2\x2\x2\x4C2\x44B\x3\x2\x2\x2"+
		"\x4C2\x44C\x3\x2\x2\x2\x4C2\x44D\x3\x2\x2\x2\x4C2\x44E\x3\x2\x2\x2\x4C2"+
		"\x44F\x3\x2\x2\x2\x4C2\x450\x3\x2\x2\x2\x4C2\x451\x3\x2\x2\x2\x4C2\x452"+
		"\x3\x2\x2\x2\x4C2\x453\x3\x2\x2\x2\x4C2\x454\x3\x2\x2\x2\x4C2\x455\x3"+
		"\x2\x2\x2\x4C2\x456\x3\x2\x2\x2\x4C2\x457\x3\x2\x2\x2\x4C2\x458\x3\x2"+
		"\x2\x2\x4C2\x459\x3\x2\x2\x2\x4C2\x45A\x3\x2\x2\x2\x4C2\x45B\x3\x2\x2"+
		"\x2\x4C2\x45C\x3\x2\x2\x2\x4C2\x45D\x3\x2\x2\x2\x4C2\x45E\x3\x2\x2\x2"+
		"\x4C2\x45F\x3\x2\x2\x2\x4C2\x460\x3\x2\x2\x2\x4C2\x461\x3\x2\x2\x2\x4C2"+
		"\x462\x3\x2\x2\x2\x4C2\x463\x3\x2\x2\x2\x4C2\x464\x3\x2\x2\x2\x4C2\x465"+
		"\x3\x2\x2\x2\x4C2\x466\x3\x2\x2\x2\x4C2\x467\x3\x2\x2\x2\x4C2\x468\x3"+
		"\x2\x2\x2\x4C2\x469\x3\x2\x2\x2\x4C2\x46A\x3\x2\x2\x2\x4C2\x46B\x3\x2"+
		"\x2\x2\x4C2\x46C\x3\x2\x2\x2\x4C2\x46D\x3\x2\x2\x2\x4C2\x46E\x3\x2\x2"+
		"\x2\x4C2\x46F\x3\x2\x2\x2\x4C2\x470\x3\x2\x2\x2\x4C2\x471\x3\x2\x2\x2"+
		"\x4C2\x472\x3\x2\x2\x2\x4C2\x473\x3\x2\x2\x2\x4C2\x474\x3\x2\x2\x2\x4C2"+
		"\x475\x3\x2\x2\x2\x4C2\x476\x3\x2\x2\x2\x4C2\x477\x3\x2\x2\x2\x4C2\x478"+
		"\x3\x2\x2\x2\x4C2\x479\x3\x2\x2\x2\x4C2\x47A\x3\x2\x2\x2\x4C2\x47B\x3"+
		"\x2\x2\x2\x4C2\x47C\x3\x2\x2\x2\x4C2\x47D\x3\x2\x2\x2\x4C2\x47E\x3\x2"+
		"\x2\x2\x4C2\x47F\x3\x2\x2\x2\x4C2\x480\x3\x2\x2\x2\x4C2\x481\x3\x2\x2"+
		"\x2\x4C2\x482\x3\x2\x2\x2\x4C2\x483\x3\x2\x2\x2\x4C2\x484\x3\x2\x2\x2"+
		"\x4C2\x485\x3\x2\x2\x2\x4C2\x486\x3\x2\x2\x2\x4C2\x487\x3\x2\x2\x2\x4C2"+
		"\x488\x3\x2\x2\x2\x4C2\x489\x3\x2\x2\x2\x4C2\x48A\x3\x2\x2\x2\x4C2\x48B"+
		"\x3\x2\x2\x2\x4C2\x48C\x3\x2\x2\x2\x4C2\x48D\x3\x2\x2\x2\x4C2\x48E\x3"+
		"\x2\x2\x2\x4C2\x48F\x3\x2\x2\x2\x4C2\x490\x3\x2\x2\x2\x4C2\x491\x3\x2"+
		"\x2\x2\x4C2\x492\x3\x2\x2\x2\x4C2\x493\x3\x2\x2\x2\x4C2\x494\x3\x2\x2"+
		"\x2\x4C2\x495\x3\x2\x2\x2\x4C2\x496\x3\x2\x2\x2\x4C2\x497\x3\x2\x2\x2"+
		"\x4C2\x498\x3\x2\x2\x2\x4C2\x499\x3\x2\x2\x2\x4C2\x49A\x3\x2\x2\x2\x4C2"+
		"\x49B\x3\x2\x2\x2\x4C2\x49C\x3\x2\x2\x2\x4C2\x49D\x3\x2\x2\x2\x4C2\x49E"+
		"\x3\x2\x2\x2\x4C2\x49F\x3\x2\x2\x2\x4C2\x4A0\x3\x2\x2\x2\x4C2\x4A1\x3"+
		"\x2\x2\x2\x4C2\x4A2\x3\x2\x2\x2\x4C2\x4A3\x3\x2\x2\x2\x4C2\x4A4\x3\x2"+
		"\x2\x2\x4C2\x4A5\x3\x2\x2\x2\x4C2\x4A6\x3\x2\x2\x2\x4C2\x4A7\x3\x2\x2"+
		"\x2\x4C2\x4A8\x3\x2\x2\x2\x4C2\x4A9\x3\x2\x2\x2\x4C2\x4AA\x3\x2\x2\x2"+
		"\x4C2\x4AB\x3\x2\x2\x2\x4C2\x4AC\x3\x2\x2\x2\x4C2\x4AD\x3\x2\x2\x2\x4C2"+
		"\x4AE\x3\x2\x2\x2\x4C2\x4AF\x3\x2\x2\x2\x4C2\x4B0\x3\x2\x2\x2\x4C2\x4B1"+
		"\x3\x2\x2\x2\x4C2\x4B2\x3\x2\x2\x2\x4C2\x4B3\x3\x2\x2\x2\x4C2\x4B4\x3"+
		"\x2\x2\x2\x4C2\x4B5\x3\x2\x2\x2\x4C2\x4B6\x3\x2\x2\x2\x4C2\x4B7\x3\x2"+
		"\x2\x2\x4C2\x4B8\x3\x2\x2\x2\x4C2\x4B9\x3\x2\x2\x2\x4C2\x4BA\x3\x2\x2"+
		"\x2\x4C2\x4BB\x3\x2\x2\x2\x4C2\x4BC\x3\x2\x2\x2\x4C2\x4BD\x3\x2\x2\x2"+
		"\x4C2\x4BE\x3\x2\x2\x2\x4C2\x4BF\x3\x2\x2\x2\x4C2\x4C0\x3\x2\x2\x2\x4C2"+
		"\x4C1\x3\x2\x2\x2\x4C3\r\x3\x2\x2\x2\x4C4\x4CA\x5\x274\x13B\x2\x4C5\x4CA"+
		"\x5\x276\x13C\x2\x4C6\x4CA\x5\x278\x13D\x2\x4C7\x4CA\x5\x27A\x13E\x2\x4C8"+
		"\x4CA\x5\x27C\x13F\x2\x4C9\x4C4\x3\x2\x2\x2\x4C9\x4C5\x3\x2\x2\x2\x4C9"+
		"\x4C6\x3\x2\x2\x2\x4C9\x4C7\x3\x2\x2\x2\x4C9\x4C8\x3\x2\x2\x2\x4CA\xF"+
		"\x3\x2\x2\x2\x4CB\x4D8\x5\x12\n\x2\x4CC\x4D8\x5\x14\v\x2\x4CD\x4D8\x5"+
		"\x16\f\x2\x4CE\x4D8\x5\x18\r\x2\x4CF\x4D8\x5\x1C\xF\x2\x4D0\x4D8\x5\x1A"+
		"\xE\x2\x4D1\x4D8\x5\x1E\x10\x2\x4D2\x4D8\x5&\x14\x2\x4D3\x4D8\x5(\x15"+
		"\x2\x4D4\x4D8\x5*\x16\x2\x4D5\x4D8\x5,\x17\x2\x4D6\x4D8\x5.\x18\x2\x4D7"+
		"\x4CB\x3\x2\x2\x2\x4D7\x4CC\x3\x2\x2\x2\x4D7\x4CD\x3\x2\x2\x2\x4D7\x4CE"+
		"\x3\x2\x2\x2\x4D7\x4CF\x3\x2\x2\x2\x4D7\x4D0\x3\x2\x2\x2\x4D7\x4D1\x3"+
		"\x2\x2\x2\x4D7\x4D2\x3\x2\x2\x2\x4D7\x4D3\x3\x2\x2\x2\x4D7\x4D4\x3\x2"+
		"\x2\x2\x4D7\x4D5\x3\x2\x2\x2\x4D7\x4D6\x3\x2\x2\x2\x4D8\x11\x3\x2\x2\x2"+
		"\x4D9\x4DB\a\x1D\x2\x2\x4DA\x4DC\a\x34A\x2\x2\x4DB\x4DA\x3\x2\x2\x2\x4DB"+
		"\x4DC\x3\x2\x2\x2\x4DC\x4DE\x3\x2\x2\x2\x4DD\x4DF\x5\x6\x4\x2\x4DE\x4DD"+
		"\x3\x2\x2\x2\x4DE\x4DF\x3\x2\x2\x2\x4DF\x4E0\x3\x2\x2\x2\x4E0\x4E2\an"+
		"\x2\x2\x4E1\x4E3\a\x34A\x2\x2\x4E2\x4E1\x3\x2\x2\x2\x4E2\x4E3\x3\x2\x2"+
		"\x2\x4E3\x13\x3\x2\x2\x2\x4E4\x4E6\a\"\x2\x2\x4E5\x4E7\a\x34A\x2\x2\x4E6"+
		"\x4E5\x3\x2\x2\x2\x4E6\x4E7\x3\x2\x2\x2\x4E7\x15\x3\x2\x2\x2\x4E8\x4EA"+
		"\a\x44\x2\x2\x4E9\x4EB\a\x34A\x2\x2\x4EA\x4E9\x3\x2\x2\x2\x4EA\x4EB\x3"+
		"\x2\x2\x2\x4EB\x17\x3\x2\x2\x2\x4EC\x4ED\a\x91\x2\x2\x4ED\x4EF\x5\x3E4"+
		"\x1F3\x2\x4EE\x4F0\a\x34A\x2\x2\x4EF\x4EE\x3\x2\x2\x2\x4EF\x4F0\x3\x2"+
		"\x2\x2\x4F0\x4F7\x3\x2\x2\x2\x4F1\x4F2\x5\x3E4\x1F3\x2\x4F2\x4F4\a\x34B"+
		"\x2\x2\x4F3\x4F5\a\x34A\x2\x2\x4F4\x4F3\x3\x2\x2\x2\x4F4\x4F5\x3\x2\x2"+
		"\x2\x4F5\x4F7\x3\x2\x2\x2\x4F6\x4EC\x3\x2\x2\x2\x4F6\x4F1\x3\x2\x2\x2"+
		"\x4F7\x19\x3\x2\x2\x2\x4F8\x4FA\a\x120\x2\x2\x4F9\x4FB\x5\x2F0\x179\x2"+
		"\x4FA\x4F9\x3\x2\x2\x2\x4FA\x4FB\x3\x2\x2\x2\x4FB\x4FD\x3\x2\x2\x2\x4FC"+
		"\x4FE\a\x34A\x2\x2\x4FD\x4FC\x3\x2\x2\x2\x4FD\x4FE\x3\x2\x2\x2\x4FE\x1B"+
		"\x3\x2\x2\x2\x4FF\x500\a\x9B\x2\x2\x500\x501\x5\x306\x184\x2\x501\x504"+
		"\x5\b\x5\x2\x502\x503\al\x2\x2\x503\x505\x5\b\x5\x2\x504\x502\x3\x2\x2"+
		"\x2\x504\x505\x3\x2\x2\x2\x505\x507\x3\x2\x2\x2\x506\x508\a\x34A\x2\x2"+
		"\x507\x506\x3\x2\x2\x2\x507\x508\x3\x2\x2\x2\x508\x1D\x3\x2\x2\x2\x509"+
		"\x510\a\x2FD\x2\x2\x50A\x50B\x5 \x11\x2\x50B\x50C\a\x349\x2\x2\x50C\x50D"+
		"\x5\"\x12\x2\x50D\x50E\a\x349\x2\x2\x50E\x50F\x5$\x13\x2\x50F\x511\x3"+
		"\x2\x2\x2\x510\x50A\x3\x2\x2\x2\x510\x511\x3\x2\x2\x2\x511\x513\x3\x2"+
		"\x2\x2\x512\x514\a\x34A\x2\x2\x513\x512\x3\x2\x2\x2\x513\x514\x3\x2\x2"+
		"\x2\x514\x1F\x3\x2\x2\x2\x515\x516\t\x2\x2\x2\x516!\x3\x2\x2\x2\x517\x518"+
		"\t\x3\x2\x2\x518#\x3\x2\x2\x2\x519\x51A\t\x2\x2\x2\x51A%\x3\x2\x2\x2\x51B"+
		"\x51C\a\x1D\x2\x2\x51C\x51E\a\x308\x2\x2\x51D\x51F\a\x34A\x2\x2\x51E\x51D"+
		"\x3\x2\x2\x2\x51E\x51F\x3\x2\x2\x2\x51F\x521\x3\x2\x2\x2\x520\x522\x5"+
		"\x6\x4\x2\x521\x520\x3\x2\x2\x2\x521\x522\x3\x2\x2\x2\x522\x523\x3\x2"+
		"\x2\x2\x523\x524\an\x2\x2\x524\x526\a\x308\x2\x2\x525\x527\a\x34A\x2\x2"+
		"\x526\x525\x3\x2\x2\x2\x526\x527\x3\x2\x2\x2\x527\x528\x3\x2\x2\x2\x528"+
		"\x529\a\x1D\x2\x2\x529\x52B\a\x1B6\x2\x2\x52A\x52C\a\x34A\x2\x2\x52B\x52A"+
		"\x3\x2\x2\x2\x52B\x52C\x3\x2\x2\x2\x52C\x52E\x3\x2\x2\x2\x52D\x52F\x5"+
		"\x6\x4\x2\x52E\x52D\x3\x2\x2\x2\x52E\x52F\x3\x2\x2\x2\x52F\x530\x3\x2"+
		"\x2\x2\x530\x531\an\x2\x2\x531\x533\a\x1B6\x2\x2\x532\x534\a\x34A\x2\x2"+
		"\x533\x532\x3\x2\x2\x2\x533\x534\x3\x2\x2\x2\x534\'\x3\x2\x2\x2\x535\x543"+
		"\a\x17A\x2\x2\x536\x537\t\x4\x2\x2\x537\x544\x5\x1C4\xE3\x2\x538\x53B"+
		"\a\x347\x2\x2\x539\x53C\x5\x1C0\xE1\x2\x53A\x53C\x5\x3D6\x1EC\x2\x53B"+
		"\x539\x3\x2\x2\x2\x53B\x53A\x3\x2\x2\x2\x53C\x53D\x3\x2\x2\x2\x53D\x541"+
		"\a\x348\x2\x2\x53E\x53F\a\x349\x2\x2\x53F\x540\a\x300\x2\x2\x540\x542"+
		"\x5\x1C4\xE3\x2\x541\x53E\x3\x2\x2\x2\x541\x542\x3\x2\x2\x2\x542\x544"+
		"\x3\x2\x2\x2\x543\x536\x3\x2\x2\x2\x543\x538\x3\x2\x2\x2\x544)\x3\x2\x2"+
		"\x2\x545\x546\a\x17D\x2\x2\x546\x550\x5\x306\x184\x2\x547\x551\x5\b\x5"+
		"\x2\x548\x54A\a\"\x2\x2\x549\x54B\a\x34A\x2\x2\x54A\x549\x3\x2\x2\x2\x54A"+
		"\x54B\x3\x2\x2\x2\x54B\x551\x3\x2\x2\x2\x54C\x54E\a\x44\x2\x2\x54D\x54F"+
		"\a\x34A\x2\x2\x54E\x54D\x3\x2\x2\x2\x54E\x54F\x3\x2\x2\x2\x54F\x551\x3"+
		"\x2\x2\x2\x550\x547\x3\x2\x2\x2\x550\x548\x3\x2\x2\x2\x550\x54C\x3\x2"+
		"\x2\x2\x551+\x3\x2\x2\x2\x552\x555\a\x105\x2\x2\x553\x556\x5\x2F0\x179"+
		"\x2\x554\x556\a\x329\x2\x2\x555\x553\x3\x2\x2\x2\x555\x554\x3\x2\x2\x2"+
		"\x556\x55B\x3\x2\x2\x2\x557\x558\a\x349\x2\x2\x558\x55A\a\x32C\x2\x2\x559"+
		"\x557\x3\x2\x2\x2\x55A\x55D\x3\x2\x2\x2\x55B\x559\x3\x2\x2\x2\x55B\x55C"+
		"\x3\x2\x2\x2\x55C\x55F\x3\x2\x2\x2\x55D\x55B\x3\x2\x2\x2\x55E\x560\a\x34A"+
		"\x2\x2\x55F\x55E\x3\x2\x2\x2\x55F\x560\x3\x2\x2\x2\x560-\x3\x2\x2\x2\x561"+
		"\x562\a\x10D\x2\x2\x562\x563\a\x347\x2\x2\x563\x564\t\x5\x2\x2\x564\x565"+
		"\a\x349\x2\x2\x565\x566\x5\x2EE\x178\x2\x566\x567\a\x349\x2\x2\x567\x56C"+
		"\x5\x2EE\x178\x2\x568\x569\a\x349\x2\x2\x569\x56B\x5\x2EE\x178\x2\x56A"+
		"\x568\x3\x2\x2\x2\x56B\x56E\x3\x2\x2\x2\x56C\x56A\x3\x2\x2\x2\x56C\x56D"+
		"\x3\x2\x2\x2\x56D\x56F\x3\x2\x2\x2\x56E\x56C\x3\x2\x2\x2\x56F\x572\a\x348"+
		"\x2\x2\x570\x571\a\x17F\x2\x2\x571\x573\t\x6\x2\x2\x572\x570\x3\x2\x2"+
		"\x2\x572\x573\x3\x2\x2\x2\x573\x575\x3\x2\x2\x2\x574\x576\a\x34A\x2\x2"+
		"\x575\x574\x3\x2\x2\x2\x575\x576\x3\x2\x2\x2\x576\x582\x3\x2\x2\x2\x577"+
		"\x578\a\x10D\x2\x2\x578\x579\a\x32D\x2\x2\x579\x57E\t\a\x2\x2\x57A\x57B"+
		"\a\x349\x2\x2\x57B\x57D\t\x5\x2\x2\x57C\x57A\x3\x2\x2\x2\x57D\x580\x3"+
		"\x2\x2\x2\x57E\x57C\x3\x2\x2\x2\x57E\x57F\x3\x2\x2\x2\x57F\x582\x3\x2"+
		"\x2\x2\x580\x57E\x3\x2\x2\x2\x581\x561\x3\x2\x2\x2\x581\x577\x3\x2\x2"+
		"\x2\x582/\x3\x2\x2\x2\x583\x584\a\x34A\x2\x2\x584\x31\x3\x2\x2\x2\x585"+
		"\x597\x5\x270\x139\x2\x586\x597\x5\x272\x13A\x2\x587\x597\x5\x1AE\xD8"+
		"\x2\x588\x597\x5\x1AC\xD7\x2\x589\x597\x5\x1A2\xD2\x2\x58A\x597\x5\x1A6"+
		"\xD4\x2\x58B\x597\x5\x286\x144\x2\x58C\x597\x5\x27E\x140\x2\x58D\x597"+
		"\x5\x1B0\xD9\x2\x58E\x597\x5\x294\x14B\x2\x58F\x597\x5\x2B0\x159\x2\x590"+
		"\x597\x5\x2B2\x15A\x2\x591\x597\x5\x2B6\x15C\x2\x592\x597\x5\x2B8\x15D"+
		"\x2\x593\x597\x5\x2BA\x15E\x2\x594\x597\x5\x2BC\x15F\x2\x595\x597\x5\x1C0"+
		"\xE1\x2\x596\x585\x3\x2\x2\x2\x596\x586\x3\x2\x2\x2\x596\x587\x3\x2\x2"+
		"\x2\x596\x588\x3\x2\x2\x2\x596\x589\x3\x2\x2\x2\x596\x58A\x3\x2\x2\x2"+
		"\x596\x58B\x3\x2\x2\x2\x596\x58C\x3\x2\x2\x2\x596\x58D\x3\x2\x2\x2\x596"+
		"\x58E\x3\x2\x2\x2\x596\x58F\x3\x2\x2\x2\x596\x590\x3\x2\x2\x2\x596\x591"+
		"\x3\x2\x2\x2\x596\x592\x3\x2\x2\x2\x596\x593\x3\x2\x2\x2\x596\x594\x3"+
		"\x2\x2\x2\x596\x595\x3\x2\x2\x2\x597\x33\x3\x2\x2\x2\x598\x599\a\n\x2"+
		"\x2\x599\x59A\a\xF\x2\x2\x59A\x59B\a\x127\x2\x2\x59B\x59C\x5\x3E4\x1F3"+
		"\x2\x59C\x5A3\a\x17F\x2\x2\x59D\x59F\a\x349\x2\x2\x59E\x59D\x3\x2\x2\x2"+
		"\x59E\x59F\x3\x2\x2\x2\x59F\x5A0\x3\x2\x2\x2\x5A0\x5A1\a\x267\x2\x2\x5A1"+
		"\x5A2\a\x335\x2\x2\x5A2\x5A4\x5\x3E4\x1F3\x2\x5A3\x59E\x3\x2\x2\x2\x5A3"+
		"\x5A4\x3\x2\x2\x2\x5A4\x5AB\x3\x2\x2\x2\x5A5\x5A7\a\x349\x2\x2\x5A6\x5A5"+
		"\x3\x2\x2\x2\x5A6\x5A7\x3\x2\x2\x2\x5A7\x5A8\x3\x2\x2\x2\x5A8\x5A9\a\xF8"+
		"\x2\x2\x5A9\x5AA\a\x335\x2\x2\x5AA\x5AC\a\x331\x2\x2\x5AB\x5A6\x3\x2\x2"+
		"\x2\x5AB\x5AC\x3\x2\x2\x2\x5AC\x5B3\x3\x2\x2\x2\x5AD\x5AF\a\x349\x2\x2"+
		"\x5AE\x5AD\x3\x2\x2\x2\x5AE\x5AF\x3\x2\x2\x2\x5AF\x5B0\x3\x2\x2\x2\x5B0"+
		"\x5B1\a]\x2\x2\x5B1\x5B2\a\x335\x2\x2\x5B2\x5B4\x5\x3E4\x1F3\x2\x5B3\x5AE"+
		"\x3\x2\x2\x2\x5B3\x5B4\x3\x2\x2\x2\x5B4\x35\x3\x2\x2\x2\x5B5\x5B6\aK\x2"+
		"\x2\x5B6\x5B7\a\xF\x2\x2\x5B7\x5B8\a\x127\x2\x2\x5B8\x5B9\x5\x3E4\x1F3"+
		"\x2\x5B9\x5C0\a\x17F\x2\x2\x5BA\x5BC\a\x349\x2\x2\x5BB\x5BA\x3\x2\x2\x2"+
		"\x5BB\x5BC\x3\x2\x2\x2\x5BC\x5BD\x3\x2\x2\x2\x5BD\x5BE\a\xF8\x2\x2\x5BE"+
		"\x5BF\a\x335\x2\x2\x5BF\x5C1\a\x331\x2\x2\x5C0\x5BB\x3\x2\x2\x2\x5C0\x5C1"+
		"\x3\x2\x2\x2\x5C1\x5C8\x3\x2\x2\x2\x5C2\x5C4\a\x349\x2\x2\x5C3\x5C2\x3"+
		"\x2\x2\x2\x5C3\x5C4\x3\x2\x2\x2\x5C4\x5C5\x3\x2\x2\x2\x5C5\x5C6\a]\x2"+
		"\x2\x5C6\x5C7\a\x335\x2\x2\x5C7\x5C9\x5\x3E4\x1F3\x2\x5C8\x5C3\x3\x2\x2"+
		"\x2\x5C8\x5C9\x3\x2\x2\x2\x5C9\x37\x3\x2\x2\x2\x5CA\x5CB\ai\x2\x2\x5CB"+
		"\x5CE\a\x18F\x2\x2\x5CC\x5CD\a\x9B\x2\x2\x5CD\x5CF\ay\x2\x2\x5CE\x5CC"+
		"\x3\x2\x2\x2\x5CE\x5CF\x3\x2\x2\x2\x5CF\x5D3\x3\x2\x2\x2\x5D0\x5D1\x5"+
		"\x3AE\x1D8\x2\x5D1\x5D2\a\x342\x2\x2\x5D2\x5D4\x3\x2\x2\x2\x5D3\x5D0\x3"+
		"\x2\x2\x2\x5D3\x5D4\x3\x2\x2\x2\x5D4\x5D5\x3\x2\x2\x2\x5D5\x5D6\x5\x3E4"+
		"\x1F3\x2\x5D6\x39\x3\x2\x2\x2\x5D7\x5D8\ai\x2\x2\x5D8\x5D9\a\xF\x2\x2"+
		"\x5D9\x5DA\a\x127\x2\x2\x5DA\x5DB\x5\x3E4\x1F3\x2\x5DB;\x3\x2\x2\x2\x5DC"+
		"\x5DD\x5> \x2\x5DD\x5DE\x5\x3E4\x1F3\x2\x5DE\x5DF\x5@!\x2\x5DF=\x3\x2"+
		"\x2\x2\x5E0\x5E1\a\n\x2\x2\x5E1\x5E2\a\x19B\x2\x2\x5E2?\x3\x2\x2\x2\x5E3"+
		"\x5E5\x5\x42\"\x2\x5E4\x5E3\x3\x2\x2\x2\x5E4\x5E5\x3\x2\x2\x2\x5E5\x5E7"+
		"\x3\x2\x2\x2\x5E6\x5E8\x5X-\x2\x5E7\x5E6\x3\x2\x2\x2\x5E7\x5E8\x3\x2\x2"+
		"\x2\x5E8\x5EA\x3\x2\x2\x2\x5E9\x5EB\x5\x46$\x2\x5EA\x5E9\x3\x2\x2\x2\x5EA"+
		"\x5EB\x3\x2\x2\x2\x5EB\x5ED\x3\x2\x2\x2\x5EC\x5EE\x5L\'\x2\x5ED\x5EC\x3"+
		"\x2\x2\x2\x5ED\x5EE\x3\x2\x2\x2\x5EE\x41\x3\x2\x2\x2\x5EF\x5F2\x5\x44"+
		"#\x2\x5F0\x5F3\x5\\/\x2\x5F1\x5F3\x5T+\x2\x5F2\x5F0\x3\x2\x2\x2\x5F2\x5F1"+
		"\x3\x2\x2\x2\x5F3\x43\x3\x2\x2\x2\x5F4\x5F5\a\x8D\x2\x2\x5F5\x45\x3\x2"+
		"\x2\x2\x5F6\x5F7\x5J&\x2\x5F7\x5F8\x5H%\x2\x5F8G\x3\x2\x2\x2\x5F9\x5FC"+
		"\a\x6\x2\x2\x5FA\x5FC\x5n\x38\x2\x5FB\x5F9\x3\x2\x2\x2\x5FB\x5FA\x3\x2"+
		"\x2\x2\x5FCI\x3\x2\x2\x2\x5FD\x5FE\ai\x2\x2\x5FEK\x3\x2\x2\x2\x5FF\x600"+
		"\x5N(\x2\x600\x601\x5P)\x2\x601M\x3\x2\x2\x2\x602\x603\a\x4\x2\x2\x603"+
		"\x604\a\x83\x2\x2\x604\x605\a\x8D\x2\x2\x605O\x3\x2\x2\x2\x606\x60A\x5"+
		"R*\x2\x607\x608\x5V,\x2\x608\x609\x5\x3E4\x1F3\x2\x609\x60B\x3\x2\x2\x2"+
		"\x60A\x607\x3\x2\x2\x2\x60A\x60B\x3\x2\x2\x2\x60BQ\x3\x2\x2\x2\x60C\x60D"+
		"\a\x331\x2\x2\x60DS\x3\x2\x2\x2\x60E\x60F\x5V,\x2\x60F\x610\x5\x3E4\x1F3"+
		"\x2\x610U\x3\x2\x2\x2\x611\x612\a\x10\x2\x2\x612W\x3\x2\x2\x2\x613\x614"+
		"\x5Z.\x2\x614\x615\x5^\x30\x2\x615Y\x3\x2\x2\x2\x616\x617\a\x17F\x2\x2"+
		"\x617[\x3\x2\x2\x2\x618\x61C\x5`\x31\x2\x619\x61C\x5j\x36\x2\x61A\x61C"+
		"\a\x331\x2\x2\x61B\x618\x3\x2\x2\x2\x61B\x619\x3\x2\x2\x2\x61B\x61A\x3"+
		"\x2\x2\x2\x61C]\x3\x2\x2\x2\x61D\x61E\b\x30\x1\x2\x61E\x61F\a\xFA\x2\x2"+
		"\x61F\x620\a\x335\x2\x2\x620\x627\t\b\x2\x2\x621\x622\a\x179\x2\x2\x622"+
		"\x623\a\x335\x2\x2\x623\x627\t\t\x2\x2\x624\x625\a\x169\x2\x2\x625\x627"+
		"\a\x1CF\x2\x2\x626\x61D\x3\x2\x2\x2\x626\x621\x3\x2\x2\x2\x626\x624\x3"+
		"\x2\x2\x2\x627\x62C\x3\x2\x2\x2\x628\x629\f\x3\x2\x2\x629\x62B\a\x349"+
		"\x2\x2\x62A\x628\x3\x2\x2\x2\x62B\x62E\x3\x2\x2\x2\x62C\x62A\x3\x2\x2"+
		"\x2\x62C\x62D\x3\x2\x2\x2\x62D_\x3\x2\x2\x2\x62E\x62C\x3\x2\x2\x2\x62F"+
		"\x630\x5\x64\x33\x2\x630\x631\x5\x62\x32\x2\x631\x632\x5\x66\x34\x2\x632"+
		"\x61\x3\x2\x2\x2\x633\x634\x5\x3E4\x1F3\x2\x634\x63\x3\x2\x2\x2\x635\x636"+
		"\ag\x2\x2\x636\x65\x3\x2\x2\x2\x637\x638\x5h\x35\x2\x638\x639\x5\x66\x34"+
		"\x2\x639\x63C\x3\x2\x2\x2\x63A\x63C\x5\x3E4\x1F3\x2\x63B\x637\x3\x2\x2"+
		"\x2\x63B\x63A\x3\x2\x2\x2\x63Cg\x3\x2\x2\x2\x63D\x63E\a\x1A\x2\x2\x63E"+
		"i\x3\x2\x2\x2\x63F\x640\x5l\x37\x2\x640\x641\x5\x66\x34\x2\x641k\x3\x2"+
		"\x2\x2\x642\x643\a\x1EC\x2\x2\x643m\x3\x2\x2\x2\x644\x645\x5p\x39\x2\x645"+
		"\x646\x5j\x36\x2\x646\x647\a\x32A\x2\x2\x647\x648\a\x349\x2\x2\x648\x64B"+
		"\x3\x2\x2\x2\x649\x64B\x5j\x36\x2\x64A\x644\x3\x2\x2\x2\x64A\x649\x3\x2"+
		"\x2\x2\x64Bo\x3\x2\x2\x2\x64C\x64D\a\x32A\x2\x2\x64Dq\x3\x2\x2\x2\x64E"+
		"\x64F\aK\x2\x2\x64F\x650\a\x19B\x2\x2\x650\x653\x5\x3E4\x1F3\x2\x651\x652"+
		"\a\x15\x2\x2\x652\x654\x5\x3E4\x1F3\x2\x653\x651\x3\x2\x2\x2\x653\x654"+
		"\x3\x2\x2\x2\x654\x655\x3\x2\x2\x2\x655\x65A\a\x8D\x2\x2\x656\x658\a\x349"+
		"\x2\x2\x657\x656\x3\x2\x2\x2\x657\x658\x3\x2\x2\x2\x658\x659\x3\x2\x2"+
		"\x2\x659\x65B\t\n\x2\x2\x65A\x657\x3\x2\x2\x2\x65B\x65C\x3\x2\x2\x2\x65C"+
		"\x65A\x3\x2\x2\x2\x65C\x65D\x3\x2\x2\x2\x65D\x662\x3\x2\x2\x2\x65E\x65F"+
		"\a\x17F\x2\x2\x65F\x660\a\xFA\x2\x2\x660\x661\a\x335\x2\x2\x661\x663\t"+
		"\b\x2\x2\x662\x65E\x3\x2\x2\x2\x662\x663\x3\x2\x2\x2\x663s\x3\x2\x2\x2"+
		"\x664\x665\ai\x2\x2\x665\x668\a\x19B\x2\x2\x666\x667\a\x9B\x2\x2\x667"+
		"\x669\ay\x2\x2\x668\x666\x3\x2\x2\x2\x668\x669\x3\x2\x2\x2\x669\x66E\x3"+
		"\x2\x2\x2\x66A\x66C\a\x349\x2\x2\x66B\x66A\x3\x2\x2\x2\x66B\x66C\x3\x2"+
		"\x2\x2\x66C\x66D\x3\x2\x2\x2\x66D\x66F\x5\x3E4\x1F3\x2\x66E\x66B\x3\x2"+
		"\x2\x2\x66F\x670\x3\x2\x2\x2\x670\x66E\x3\x2\x2\x2\x670\x671\x3\x2\x2"+
		"\x2\x671\x675\x3\x2\x2\x2\x672\x673\a\x17F\x2\x2\x673\x674\a\x26D\x2\x2"+
		"\x674\x676\a\x1E2\x2\x2\x675\x672\x3\x2\x2\x2\x675\x676\x3\x2\x2\x2\x676"+
		"u\x3\x2\x2\x2\x677\x678\x5x=\x2\x678\x67D\x5\x3E4\x1F3\x2\x679\x67E\x5"+
		"z>\x2\x67A\x67B\a\x2B3\x2\x2\x67B\x67C\a\x296\x2\x2\x67C\x67E\a\xAE\x2"+
		"\x2\x67D\x679\x3\x2\x2\x2\x67D\x67A\x3\x2\x2\x2\x67Ew\x3\x2\x2\x2\x67F"+
		"\x680\a\n\x2\x2\x680\x681\a\x12\x2\x2\x681\x682\a\xAE\x2\x2\x682y\x3\x2"+
		"\x2\x2\x683\x684\x5|?\x2\x684\x687\x5~@\x2\x685\x686\a\x349\x2\x2\x686"+
		"\x688\x5~@\x2\x687\x685\x3\x2\x2\x2\x687\x688\x3\x2\x2\x2\x688\x689\x3"+
		"\x2\x2\x2\x689\x68A\a\x348\x2\x2\x68A{\x3\x2\x2\x2\x68B\x68C\a\x17F\x2"+
		"\x2\x68C\x68D\a\x296\x2\x2\x68D\x68E\a\xAE\x2\x2\x68E\x68F\a\x347\x2\x2"+
		"\x68F}\x3\x2\x2\x2\x690\x691\a\x1DA\x2\x2\x691\x692\a\'\x2\x2\x692\x693"+
		"\a\xF8\x2\x2\x693\x694\a\x335\x2\x2\x694\x69B\a\x331\x2\x2\x695\x696\a"+
		"\x1F5\x2\x2\x696\x697\a\'\x2\x2\x697\x698\a\xF8\x2\x2\x698\x699\a\x335"+
		"\x2\x2\x699\x69B\a\x331\x2\x2\x69A\x690\x3\x2\x2\x2\x69A\x695\x3\x2\x2"+
		"\x2\x69B\x7F\x3\x2\x2\x2\x69C\x69D\aK\x2\x2\x69D\x69E\a\x12\x2\x2\x69E"+
		"\x69F\a\xAE\x2\x2\x69F\x6A2\x5\x3E4\x1F3\x2\x6A0\x6A1\a\x15\x2\x2\x6A1"+
		"\x6A3\x5\x3E4\x1F3\x2\x6A2\x6A0\x3\x2\x2\x2\x6A2\x6A3\x3\x2\x2\x2\x6A3"+
		"\x6B1\x3\x2\x2\x2\x6A4\x6AF\a\x8D\x2\x2\x6A5\x6A6\a\x83\x2\x2\x6A6\x6A7"+
		"\a\x335\x2\x2\x6A7\x6B0\a\x331\x2\x2\x6A8\x6A9\aw\x2\x2\x6A9\x6AA\a\x335"+
		"\x2\x2\x6AA\x6B0\a\x331\x2\x2\x6AB\x6AC\a\x19B\x2\x2\x6AC\x6B0\x5\x3E4"+
		"\x1F3\x2\x6AD\x6AE\a\x29B\x2\x2\x6AE\x6B0\x5\x3E4\x1F3\x2\x6AF\x6A5\x3"+
		"\x2\x2\x2\x6AF\x6A8\x3\x2\x2\x2\x6AF\x6AB\x3\x2\x2\x2\x6AF\x6AD\x3\x2"+
		"\x2\x2\x6B0\x6B2\x3\x2\x2\x2\x6B1\x6A4\x3\x2\x2\x2\x6B1\x6B2\x3\x2\x2"+
		"\x2\x6B2\x6BF\x3\x2\x2\x2\x6B3\x6BD\a\x17F\x2\x2\x6B4\x6B5\a\x190\x2\x2"+
		"\x6B5\x6B6\a\x335\x2\x2\x6B6\x6BE\t\v\x2\x2\x6B7\x6B8\a\x29C\x2\x2\x6B8"+
		"\x6B9\a\x335\x2\x2\x6B9\x6BE\a\x331\x2\x2\x6BA\x6BB\a\x1CA\x2\x2\x6BB"+
		"\x6BC\a\x335\x2\x2\x6BC\x6BE\t\f\x2\x2\x6BD\x6B4\x3\x2\x2\x2\x6BD\x6B7"+
		"\x3\x2\x2\x2\x6BD\x6BA\x3\x2\x2\x2\x6BE\x6C0\x3\x2\x2\x2\x6BF\x6B3\x3"+
		"\x2\x2\x2\x6BF\x6C0\x3\x2\x2\x2\x6C0\x6C6\x3\x2\x2\x2\x6C1\x6C2\a\x1F5"+
		"\x2\x2\x6C2\x6C3\a\'\x2\x2\x6C3\x6C4\a\xF8\x2\x2\x6C4\x6C5\a\x335\x2\x2"+
		"\x6C5\x6C7\a\x331\x2\x2\x6C6\x6C1\x3\x2\x2\x2\x6C6\x6C7\x3\x2\x2\x2\x6C7"+
		"\x81\x3\x2\x2\x2\x6C8\x6C9\ai\x2\x2\x6C9\x6CA\a\x12\x2\x2\x6CA\x6CB\a"+
		"\xAE\x2\x2\x6CB\x6CF\x5\x3E4\x1F3\x2\x6CC\x6CD\a\x2B3\x2\x2\x6CD\x6CE"+
		"\a\x29B\x2\x2\x6CE\x6D0\a\xAE\x2\x2\x6CF\x6CC\x3\x2\x2\x2\x6CF\x6D0\x3"+
		"\x2\x2\x2\x6D0\x83\x3\x2\x2\x2\x6D1\x6D5\x5\x8CG\x2\x6D2\x6D3\x5\x94K"+
		"\x2\x6D3\x6D4\x5\x8A\x46\x2\x6D4\x6D6\x3\x2\x2\x2\x6D5\x6D2\x3\x2\x2\x2"+
		"\x6D5\x6D6\x3\x2\x2\x2\x6D6\x6D7\x3\x2\x2\x2\x6D7\x6D8\x5\x3A0\x1D1\x2"+
		"\x6D8\x6D9\x5\x88\x45\x2\x6D9\x6DA\x5\x86\x44\x2\x6DA\x85\x3\x2\x2\x2"+
		"\x6DB\x6DF\x5\x3E4\x1F3\x2\x6DC\x6DD\a\x134\x2\x2\x6DD\x6DF\a\x287\x2"+
		"\x2\x6DE\x6DB\x3\x2\x2\x2\x6DE\x6DC\x3\x2\x2\x2\x6DF\x87\x3\x2\x2\x2\x6E0"+
		"\x6E1\a\x160\x2\x2\x6E1\x89\x3\x2\x2\x2\x6E2\x6E3\a\x34B\x2\x2\x6E3\x6E4"+
		"\a\x34B\x2\x2\x6E4\x8B\x3\x2\x2\x2\x6E5\x6E6\a\n\x2\x2\x6E6\x6E7\a\x15"+
		"\x2\x2\x6E7\x6E8\a\xE9\x2\x2\x6E8\x8D\x3\x2\x2\x2\x6E9\x6ED\x5\x8CG\x2"+
		"\x6EA\x6EB\x5\x96L\x2\x6EB\x6EC\x5\x8A\x46\x2\x6EC\x6EE\x3\x2\x2\x2\x6ED"+
		"\x6EA\x3\x2\x2\x2\x6ED\x6EE\x3\x2\x2\x2\x6EE\x6EF\x3\x2\x2\x2\x6EF\x6F0"+
		"\x5\x3A0\x1D1\x2\x6F0\x6F1\x5\x88\x45\x2\x6F1\x6F2\x5\x86\x44\x2\x6F2"+
		"\x8F\x3\x2\x2\x2\x6F3\x6F7\x5\x8CG\x2\x6F4\x6F5\x5\x98M\x2\x6F5\x6F6\x5"+
		"\x8A\x46\x2\x6F6\x6F8\x3\x2\x2\x2\x6F7\x6F4\x3\x2\x2\x2\x6F7\x6F8\x3\x2"+
		"\x2\x2\x6F8\x6F9\x3\x2\x2\x2\x6F9\x6FA\x5\x3A2\x1D2\x2\x6FA\x6FB\x5\x88"+
		"\x45\x2\x6FB\x6FC\x5\x86\x44\x2\x6FC\x91\x3\x2\x2\x2\x6FD\x701\x5\x8C"+
		"G\x2\x6FE\x6FF\x5\x9AN\x2\x6FF\x700\x5\x8A\x46\x2\x700\x702\x3\x2\x2\x2"+
		"\x701\x6FE\x3\x2\x2\x2\x701\x702\x3\x2\x2\x2\x702\x703\x3\x2\x2\x2\x703"+
		"\x704\x5\x3A4\x1D3\x2\x704\x705\x5\x88\x45\x2\x705\x706\x5\x86\x44\x2"+
		"\x706\x93\x3\x2\x2\x2\x707\x72A\a\x27B\x2\x2\x708\x72A\a\x19B\x2\x2\x709"+
		"\x70A\a\x12\x2\x2\x70A\x72A\a\xAE\x2\x2\x70B\x70C\a\x1A5\x2\x2\x70C\x72A"+
		"\a\x94\x2\x2\x70D\x72A\a,\x2\x2\x70E\x72A\a\x46\x2\x2\x70F\x72A\a\x30B"+
		"\x2\x2\x710\x72A\aV\x2\x2\x711\x72A\ao\x2\x2\x712\x713\a\x212\x2\x2\x713"+
		"\x72A\a\x1B5\x2\x2\x714\x715\a\x212\x2\x2\x715\x72A\a\x2EE\x2\x2\x716"+
		"\x717\a\x25A\x2\x2\x717\x72A\a\x30B\x2\x2\x718\x719\a\x2B1\x2\x2\x719"+
		"\x71A\a\x13C\x2\x2\x71A\x72A\a\x1AC\x2\x2\x71B\x72A\a\x127\x2\x2\x71C"+
		"\x72A\a\x2C2\x2\x2\x71D\x72A\a\x134\x2\x2\x71E\x71F\a\x2CC\x2\x2\x71F"+
		"\x720\a\x29A\x2\x2\x720\x72A\a\x23D\x2\x2\x721\x722\a\x13B\x2\x2\x722"+
		"\x72A\a\x127\x2\x2\x723\x72A\a\x13C\x2\x2\x724\x725\a\x2F5\x2\x2\x725"+
		"\x72A\a\xAE\x2\x2\x726\x727\a\x320\x2\x2\x727\x728\a\x134\x2\x2\x728\x72A"+
		"\a\x1BC\x2\x2\x729\x707\x3\x2\x2\x2\x729\x708\x3\x2\x2\x2\x729\x709\x3"+
		"\x2\x2\x2\x729\x70B\x3\x2\x2\x2\x729\x70D\x3\x2\x2\x2\x729\x70E\x3\x2"+
		"\x2\x2\x729\x70F\x3\x2\x2\x2\x729\x710\x3\x2\x2\x2\x729\x711\x3\x2\x2"+
		"\x2\x729\x712\x3\x2\x2\x2\x729\x714\x3\x2\x2\x2\x729\x716\x3\x2\x2\x2"+
		"\x729\x718\x3\x2\x2\x2\x729\x71B\x3\x2\x2\x2\x729\x71C\x3\x2\x2\x2\x729"+
		"\x71D\x3\x2\x2\x2\x729\x71E\x3\x2\x2\x2\x729\x721\x3\x2\x2\x2\x729\x723"+
		"\x3\x2\x2\x2\x729\x724\x3\x2\x2\x2\x729\x726\x3\x2\x2\x2\x72A\x95\x3\x2"+
		"\x2\x2\x72B\x741\a\x27B\x2\x2\x72C\x741\a\x19B\x2\x2\x72D\x72E\a\x12\x2"+
		"\x2\x72E\x741\a\xAE\x2\x2\x72F\x741\a,\x2\x2\x730\x741\a\x30B\x2\x2\x731"+
		"\x741\aV\x2\x2\x732\x733\a\x212\x2\x2\x733\x741\a\x1B5\x2\x2\x734\x735"+
		"\a\x212\x2\x2\x735\x741\a\x2EE\x2\x2\x736\x741\a\x127\x2\x2\x737\x741"+
		"\a\x134\x2\x2\x738\x739\a\x2CC\x2\x2\x739\x73A\a\x29A\x2\x2\x73A\x741"+
		"\a\x23D\x2\x2\x73B\x73C\a\x2F5\x2\x2\x73C\x741\a\xAE\x2\x2\x73D\x73E\a"+
		"\x320\x2\x2\x73E\x73F\a\x134\x2\x2\x73F\x741\a\x1BC\x2\x2\x740\x72B\x3"+
		"\x2\x2\x2\x740\x72C\x3\x2\x2\x2\x740\x72D\x3\x2\x2\x2\x740\x72F\x3\x2"+
		"\x2\x2\x740\x730\x3\x2\x2\x2\x740\x731\x3\x2\x2\x2\x740\x732\x3\x2\x2"+
		"\x2\x740\x734\x3\x2\x2\x2\x740\x736\x3\x2\x2\x2\x740\x737\x3\x2\x2\x2"+
		"\x740\x738\x3\x2\x2\x2\x740\x73B\x3\x2\x2\x2\x740\x73D\x3\x2\x2\x2\x741"+
		"\x97\x3\x2\x2\x2\x742\x743\t\r\x2\x2\x743\x99\x3\x2\x2\x2\x744\x745\t"+
		"\xE\x2\x2\x745\x9B\x3\x2\x2\x2\x746\x747\ai\x2\x2\x747\x748\a\x1A5\x2"+
		"\x2\x748\x749\a\x94\x2\x2\x749\x74A\x5\x3E4\x1F3\x2\x74A\x9D\x3\x2\x2"+
		"\x2\x74B\x74C\x5\xA0Q\x2\x74C\x74D\x5\xA2R\x2\x74D\x9F\x3\x2\x2\x2\x74E"+
		"\x74F\a\n\x2\x2\x74F\x750\a\x1A5\x2\x2\x750\x751\a\x94\x2\x2\x751\x752"+
		"\x5\x3E4\x1F3\x2\x752\xA1\x3\x2\x2\x2\x753\x754\a\x141\x2\x2\x754\x764"+
		"\a\x347\x2\x2\x755\x756\a\x17\x2\x2\x756\x757\a\x335\x2\x2\x757\x765\t"+
		"\xF\x2\x2\x758\x759\a\x201\x2\x2\x759\x75A\a\x335\x2\x2\x75A\x765\a\x32D"+
		"\x2\x2\x75B\x75C\a\x21E\x2\x2\x75C\x75D\a\x335\x2\x2\x75D\x765\a\x32D"+
		"\x2\x2\x75E\x75F\a\x1D9\x2\x2\x75F\x760\a\x335\x2\x2\x760\x765\t\t\x2"+
		"\x2\x761\x762\a\x2BA\x2\x2\x762\x763\a\x335\x2\x2\x763\x765\a\x32D\x2"+
		"\x2\x764\x755\x3\x2\x2\x2\x764\x758\x3\x2\x2\x2\x764\x75B\x3\x2\x2\x2"+
		"\x764\x75E\x3\x2\x2\x2\x764\x761\x3\x2\x2\x2\x765\x766\x3\x2\x2\x2\x766"+
		"\x8B2\a\x348\x2\x2\x767\x768\a\x4\x2\x2\x768\x769\aV\x2\x2\x769\x8B2\x5"+
		"\x3AC\x1D7\x2\x76A\x76B\a\x2B3\x2\x2\x76B\x76C\aV\x2\x2\x76C\x8B2\x5\x3AC"+
		"\x1D7\x2\x76D\x76E\a\x4\x2\x2\x76E\x76F\a\x2B6\x2\x2\x76F\x770\a\xE9\x2"+
		"\x2\x770\x771\a\x331\x2\x2\x771\x772\a\x17F\x2\x2\x772\x776\a\x347\x2"+
		"\x2\x773\x774\a\x1F6\x2\x2\x774\x775\a\x335\x2\x2\x775\x777\a\x331\x2"+
		"\x2\x776\x773\x3\x2\x2\x2\x776\x777\x3\x2\x2\x2\x777\x77E\x3\x2\x2\x2"+
		"\x778\x77A\a\x349\x2\x2\x779\x778\x3\x2\x2\x2\x779\x77A\x3\x2\x2\x2\x77A"+
		"\x77B\x3\x2\x2\x2\x77B\x77C\a\x19\x2\x2\x77C\x77D\a\x335\x2\x2\x77D\x77F"+
		"\t\x10\x2\x2\x77E\x779\x3\x2\x2\x2\x77E\x77F\x3\x2\x2\x2\x77F\x786\x3"+
		"\x2\x2\x2\x780\x782\a\x349\x2\x2\x781\x780\x3\x2\x2\x2\x781\x782\x3\x2"+
		"\x2\x2\x782\x783\x3\x2\x2\x2\x783\x784\a\x1FF\x2\x2\x784\x785\a\x335\x2"+
		"\x2\x785\x787\t\x11\x2\x2\x786\x781\x3\x2\x2\x2\x786\x787\x3\x2\x2\x2"+
		"\x787\x78E\x3\x2\x2\x2\x788\x78A\a\x349\x2\x2\x789\x788\x3\x2\x2\x2\x789"+
		"\x78A\x3\x2\x2\x2\x78A\x78B\x3\x2\x2\x2\x78B\x78C\a\x2D4\x2\x2\x78C\x78D"+
		"\a\x335\x2\x2\x78D\x78F\t\x11\x2\x2\x78E\x789\x3\x2\x2\x2\x78E\x78F\x3"+
		"\x2\x2\x2\x78F\x796\x3\x2\x2\x2\x790\x792\a\x349\x2\x2\x791\x790\x3\x2"+
		"\x2\x2\x791\x792\x3\x2\x2\x2\x792\x793\x3\x2\x2\x2\x793\x794\a\x1A7\x2"+
		"\x2\x794\x795\a\x335\x2\x2\x795\x797\a\x32D\x2\x2\x796\x791\x3\x2\x2\x2"+
		"\x796\x797\x3\x2\x2\x2\x797\x7A1\x3\x2\x2\x2\x798\x79A\a\x349\x2\x2\x799"+
		"\x798\x3\x2\x2\x2\x799\x79A\x3\x2\x2\x2\x79A\x79B\x3\x2\x2\x2\x79B\x79C"+
		"\a\x292\x2\x2\x79C\x79D\a\x347\x2\x2\x79D\x79E\a\a\x2\x2\x79E\x79F\a\x335"+
		"\x2\x2\x79F\x7A0\t\x12\x2\x2\x7A0\x7A2\a\x348\x2\x2\x7A1\x799\x3\x2\x2"+
		"\x2\x7A1\x7A2\x3\x2\x2\x2\x7A2\x7AC\x3\x2\x2\x2\x7A3\x7A5\a\x349\x2\x2"+
		"\x7A4\x7A3\x3\x2\x2\x2\x7A4\x7A5\x3\x2\x2\x2\x7A5\x7A6\x3\x2\x2\x2\x7A6"+
		"\x7A7\a\x2CF\x2\x2\x7A7\x7A8\a\x347\x2\x2\x7A8\x7A9\a\a\x2\x2\x7A9\x7AA"+
		"\a\x335\x2\x2\x7AA\x7AB\a\x2A7\x2\x2\x7AB\x7AD\a\x348\x2\x2\x7AC\x7A4"+
		"\x3\x2\x2\x2\x7AC\x7AD\x3\x2\x2\x2\x7AD\x7AE\x3\x2\x2\x2\x7AE\x8B2\a\x348"+
		"\x2\x2\x7AF\x7B0\a\x2CF\x2\x2\x7B0\x7B9\a\x347\x2\x2\x7B1\x7B2\a\a\x2"+
		"\x2\x7B2\x7B3\a\x335\x2\x2\x7B3\x7BA\t\x13\x2\x2\x7B4\x7B5\a\x2A8\x2\x2"+
		"\x7B5\x7B6\a\x335\x2\x2\x7B6\x7B7\a\x347\x2\x2\x7B7\x7B8\a\x331\x2\x2"+
		"\x7B8\x7BA\a\x348\x2\x2\x7B9\x7B1\x3\x2\x2\x2\x7B9\x7B4\x3\x2\x2\x2\x7BA"+
		"\x8B2\x3\x2\x2\x2\x7BB\x7BC\a\x292\x2\x2\x7BC\x7D3\a\x347\x2\x2\x7BD\x7BE"+
		"\a\a\x2\x2\x7BE\x7BF\a\x335\x2\x2\x7BF\x7D4\t\x13\x2\x2\x7C0\x7C1\a\x2A8"+
		"\x2\x2\x7C1\x7C2\a\x335\x2\x2\x7C2\x7CD\a\x347\x2\x2\x7C3\x7C5\a\x349"+
		"\x2\x2\x7C4\x7C3\x3\x2\x2\x2\x7C4\x7C5\x3\x2\x2\x2\x7C5\x7C6\x3\x2\x2"+
		"\x2\x7C6\x7C8\a\x331\x2\x2\x7C7\x7C4\x3\x2\x2\x2\x7C8\x7CB\x3\x2\x2\x2"+
		"\x7C9\x7C7\x3\x2\x2\x2\x7C9\x7CA\x3\x2\x2\x2\x7CA\x7CE\x3\x2\x2\x2\x7CB"+
		"\x7C9\x3\x2\x2\x2\x7CC\x7CE\a\xD9\x2\x2\x7CD\x7C9\x3\x2\x2\x2\x7CD\x7CC"+
		"\x3\x2\x2\x2\x7CE\x7CF\x3\x2\x2\x2\x7CF\x7D4\a\x348\x2\x2\x7D0\x7D1\a"+
		"\x2DB\x2\x2\x7D1\x7D2\a\x335\x2\x2\x7D2\x7D4\a\x32D\x2\x2\x7D3\x7BD\x3"+
		"\x2\x2\x2\x7D3\x7C0\x3\x2\x2\x2\x7D3\x7D0\x3\x2\x2\x2\x7D4\x8B2\x3\x2"+
		"\x2\x2\x7D5\x7D6\a\x264\x2\x2\x7D6\x7D7\a\x2B6\x2\x2\x7D7\x7D8\a\xE9\x2"+
		"\x2\x7D8\x812\a\x331\x2\x2\x7D9\x7DA\a\x17F\x2\x2\x7DA\x7EA\a\x347\x2"+
		"\x2\x7DB\x7DC\a\x1F6\x2\x2\x7DC\x7DD\a\x335\x2\x2\x7DD\x7EB\a\x331\x2"+
		"\x2\x7DE\x7DF\a\x19\x2\x2\x7DF\x7E0\a\x335\x2\x2\x7E0\x7EB\t\x10\x2\x2"+
		"\x7E1\x7E2\a\x1FF\x2\x2\x7E2\x7E3\a\x335\x2\x2\x7E3\x7EB\t\x11\x2\x2\x7E4"+
		"\x7E5\a\x2D4\x2\x2\x7E5\x7E6\a\x335\x2\x2\x7E6\x7EB\t\x11\x2\x2\x7E7\x7E8"+
		"\a\x1A7\x2\x2\x7E8\x7E9\a\x335\x2\x2\x7E9\x7EB\a\x32D\x2\x2\x7EA\x7DB"+
		"\x3\x2\x2\x2\x7EA\x7DE\x3\x2\x2\x2\x7EA\x7E1\x3\x2\x2\x2\x7EA\x7E4\x3"+
		"\x2\x2\x2\x7EA\x7E7\x3\x2\x2\x2\x7EB\x813\x3\x2\x2\x2\x7EC\x7ED\a\x2CF"+
		"\x2\x2\x7ED\x7F6\a\x347\x2\x2\x7EE\x7EF\a\a\x2\x2\x7EF\x7F0\a\x335\x2"+
		"\x2\x7F0\x7F7\t\x13\x2\x2\x7F1\x7F2\a\x2A8\x2\x2\x7F2\x7F3\a\x335\x2\x2"+
		"\x7F3\x7F4\a\x347\x2\x2\x7F4\x7F5\a\x331\x2\x2\x7F5\x7F7\a\x348\x2\x2"+
		"\x7F6\x7EE\x3\x2\x2\x2\x7F6\x7F1\x3\x2\x2\x2\x7F7\x813\x3\x2\x2\x2\x7F8"+
		"\x7F9\a\x292\x2\x2\x7F9\x810\a\x347\x2\x2\x7FA\x7FB\a\a\x2\x2\x7FB\x7FC"+
		"\a\x335\x2\x2\x7FC\x811\t\x13\x2\x2\x7FD\x7FE\a\x2A8\x2\x2\x7FE\x7FF\a"+
		"\x335\x2\x2\x7FF\x80A\a\x347\x2\x2\x800\x802\a\x349\x2\x2\x801\x800\x3"+
		"\x2\x2\x2\x801\x802\x3\x2\x2\x2\x802\x803\x3\x2\x2\x2\x803\x805\a\x331"+
		"\x2\x2\x804\x801\x3\x2\x2\x2\x805\x808\x3\x2\x2\x2\x806\x804\x3\x2\x2"+
		"\x2\x806\x807\x3\x2\x2\x2\x807\x80B\x3\x2\x2\x2\x808\x806\x3\x2\x2\x2"+
		"\x809\x80B\a\xD9\x2\x2\x80A\x806\x3\x2\x2\x2\x80A\x809\x3\x2\x2\x2\x80B"+
		"\x80C\x3\x2\x2\x2\x80C\x811\a\x348\x2\x2\x80D\x80E\a\x2DB\x2\x2\x80E\x80F"+
		"\a\x335\x2\x2\x80F\x811\a\x32D\x2\x2\x810\x7FA\x3\x2\x2\x2\x810\x7FD\x3"+
		"\x2\x2\x2\x810\x80D\x3\x2\x2\x2\x811\x813\x3\x2\x2\x2\x812\x7D9\x3\x2"+
		"\x2\x2\x812\x7EC\x3\x2\x2\x2\x812\x7F8\x3\x2\x2\x2\x813\x814\x3\x2\x2"+
		"\x2\x814\x8B2\a\x348\x2\x2\x815\x816\a\x2B3\x2\x2\x816\x817\a\x2B6\x2"+
		"\x2\x817\x818\a\xE9\x2\x2\x818\x8B2\a\x331\x2\x2\x819\x8B2\a\xAC\x2\x2"+
		"\x81A\x81B\a\xAC\x2\x2\x81B\x81C\a\x1A5\x2\x2\x81C\x81D\a\x94\x2\x2\x81D"+
		"\x834\a\xE9\x2\x2\x81E\x820\a\x349\x2\x2\x81F\x81E\x3\x2\x2\x2\x81F\x820"+
		"\x3\x2\x2\x2\x820\x821\x3\x2\x2\x2\x821\x822\a\x331\x2\x2\x822\x823\a"+
		"\x17F\x2\x2\x823\x824\a\x347\x2\x2\x824\x825\a\x23F\x2\x2\x825\x826\a"+
		"\x335\x2\x2\x826\x827\a\x331\x2\x2\x827\x828\a\x349\x2\x2\x828\x829\a"+
		"\x19\x2\x2\x829\x82A\a\x335\x2\x2\x82A\x82B\t\x10\x2\x2\x82B\x82C\a\x349"+
		"\x2\x2\x82C\x82D\a\x1FF\x2\x2\x82D\x82E\a\x335\x2\x2\x82E\x82F\a\x248"+
		"\x2\x2\x82F\x830\a\x349\x2\x2\x830\x831\a\x2D4\x2\x2\x831\x832\a\x335"+
		"\x2\x2\x832\x833\t\x11\x2\x2\x833\x835\a\x348\x2\x2\x834\x81F\x3\x2\x2"+
		"\x2\x835\x836\x3\x2\x2\x2\x836\x834\x3\x2\x2\x2\x836\x837\x3\x2\x2\x2"+
		"\x837\x8B2\x3\x2\x2\x2\x838\x839\a\x264\x2\x2\x839\x83A\a\x1A5\x2\x2\x83A"+
		"\x83B\a\x94\x2\x2\x83B\x85E\a\xE9\x2\x2\x83C\x83E\a\x349\x2\x2\x83D\x83C"+
		"\x3\x2\x2\x2\x83D\x83E\x3\x2\x2\x2\x83E\x83F\x3\x2\x2\x2\x83F\x840\a\x331"+
		"\x2\x2\x840\x841\a\x17F\x2\x2\x841\x842\a\x347\x2\x2\x842\x843\a\x23F"+
		"\x2\x2\x843\x844\a\x335\x2\x2\x844\x84B\a\x331\x2\x2\x845\x847\a\x349"+
		"\x2\x2\x846\x845\x3\x2\x2\x2\x846\x847\x3\x2\x2\x2\x847\x848\x3\x2\x2"+
		"\x2\x848\x849\a\x19\x2\x2\x849\x84A\a\x335\x2\x2\x84A\x84C\t\x10\x2\x2"+
		"\x84B\x846\x3\x2\x2\x2\x84B\x84C\x3\x2\x2\x2\x84C\x853\x3\x2\x2\x2\x84D"+
		"\x84F\a\x349\x2\x2\x84E\x84D\x3\x2\x2\x2\x84E\x84F\x3\x2\x2\x2\x84F\x850"+
		"\x3\x2\x2\x2\x850\x851\a\x1FF\x2\x2\x851\x852\a\x335\x2\x2\x852\x854\a"+
		"\x248\x2\x2\x853\x84E\x3\x2\x2\x2\x853\x854\x3\x2\x2\x2\x854\x85B\x3\x2"+
		"\x2\x2\x855\x857\a\x349\x2\x2\x856\x855\x3\x2\x2\x2\x856\x857\x3\x2\x2"+
		"\x2\x857\x858\x3\x2\x2\x2\x858\x859\a\x2D4\x2\x2\x859\x85A\a\x335\x2\x2"+
		"\x85A\x85C\t\x11\x2\x2\x85B\x856\x3\x2\x2\x2\x85B\x85C\x3\x2\x2\x2\x85C"+
		"\x85D\x3\x2\x2\x2\x85D\x85F\a\x348\x2\x2\x85E\x83D\x3\x2\x2\x2\x85F\x860"+
		"\x3\x2\x2\x2\x860\x85E\x3\x2\x2\x2\x860\x861\x3\x2\x2\x2\x861\x8B2\x3"+
		"\x2\x2\x2\x862\x863\a\x93\x2\x2\x863\x864\aK\x2\x2\x864\x865\a\r\x2\x2"+
		"\x865\x8B2\aV\x2\x2\x866\x867\a_\x2\x2\x867\x868\aK\x2\x2\x868\x869\a"+
		"\r\x2\x2\x869\x8B2\aV\x2\x2\x86A\x8B2\a\x7F\x2\x2\x86B\x8B2\a\x20D\x2"+
		"\x2\x86C\x86D\a\x4\x2\x2\x86D\x86E\a\x23E\x2\x2\x86E\x86F\a\x331\x2\x2"+
		"\x86F\x891\a\x347\x2\x2\x870\x871\a\x17F\x2\x2\x871\x872\a\x1E6\x2\x2"+
		"\x872\x873\a\xE9\x2\x2\x873\x874\a\x347\x2\x2\x874\x875\a\xA8\x2\x2\x875"+
		"\x876\a\xA8\x2\x2\x876\x877\x3\x2\x2\x2\x877\x892\a\x348\x2\x2\x878\x879"+
		"\a\x17F\x2\x2\x879\x87A\a\x22E\x2\x2\x87A\x886\a\x347\x2\x2\x87B\x87D"+
		"\a\x349\x2\x2\x87C\x87B\x3\x2\x2\x2\x87C\x87D\x3\x2\x2\x2\x87D\x87E\x3"+
		"\x2\x2\x2\x87E\x883\a\x347\x2\x2\x87F\x880\a\xA8\x2\x2\x880\x881\a\x349"+
		"\x2\x2\x881\x884\a\xA8\x2\x2\x882\x884\a\xA9\x2\x2\x883\x87F\x3\x2\x2"+
		"\x2\x883\x882\x3\x2\x2\x2\x884\x885\x3\x2\x2\x2\x885\x887\a\x348\x2\x2"+
		"\x886\x87C\x3\x2\x2\x2\x887\x888\x3\x2\x2\x2\x888\x886\x3\x2\x2\x2\x888"+
		"\x889\x3\x2\x2\x2\x889\x88A\x3\x2\x2\x2\x88A\x88F\a\x348\x2\x2\x88B\x88C"+
		"\a\x349\x2\x2\x88C\x88D\a\x290\x2\x2\x88D\x88E\a\x335\x2\x2\x88E\x890"+
		"\a\x32D\x2\x2\x88F\x88B\x3\x2\x2\x2\x88F\x890\x3\x2\x2\x2\x890\x892\x3"+
		"\x2\x2\x2\x891\x870\x3\x2\x2\x2\x891\x878\x3\x2\x2\x2\x892\x893\x3\x2"+
		"\x2\x2\x893\x8B2\a\x348\x2\x2\x894\x895\a\x264\x2\x2\x895\x8A2\a\x23E"+
		"\x2\x2\x896\x897\a\x4\x2\x2\x897\x898\a\x22E\x2\x2\x898\x89C\a\x347\x2"+
		"\x2\x899\x89A\a\xA8\x2\x2\x89A\x89D\a\xA8\x2\x2\x89B\x89D\a\xA9\x2\x2"+
		"\x89C\x899\x3\x2\x2\x2\x89C\x89B\x3\x2\x2\x2\x89D\x89E\x3\x2\x2\x2\x89E"+
		"\x8A3\a\x348\x2\x2\x89F\x8A0\a\x290\x2\x2\x8A0\x8A1\a\x335\x2\x2\x8A1"+
		"\x8A3\a\x32D\x2\x2\x8A2\x896\x3\x2\x2\x2\x8A2\x89F\x3\x2\x2\x2\x8A3\x8B2"+
		"\x3\x2\x2\x2\x8A4\x8A5\a\x11A\x2\x2\x8A5\x8A6\a\x23E\x2\x2\x8A6\x8B2\a"+
		"\x331\x2\x2\x8A7\x8A8\a\x2B3\x2\x2\x8A8\x8A9\a\x23E\x2\x2\x8A9\x8B2\a"+
		"\x331\x2\x2\x8AA\x8B2\a\x27C\x2\x2\x8AB\x8AC\a\x17F\x2\x2\x8AC\x8AD\a"+
		"\x347\x2\x2\x8AD\x8AE\aj\x2\x2\x8AE\x8AF\a\x335\x2\x2\x8AF\x8B0\a\xFC"+
		"\x2\x2\x8B0\x8B2\a\x348\x2\x2\x8B1\x753\x3\x2\x2\x2\x8B1\x767\x3\x2\x2"+
		"\x2\x8B1\x76A\x3\x2\x2\x2\x8B1\x76D\x3\x2\x2\x2\x8B1\x7AF\x3\x2\x2\x2"+
		"\x8B1\x7BB\x3\x2\x2\x2\x8B1\x7D5\x3\x2\x2\x2\x8B1\x815\x3\x2\x2\x2\x8B1"+
		"\x819\x3\x2\x2\x2\x8B1\x81A\x3\x2\x2\x2\x8B1\x838\x3\x2\x2\x2\x8B1\x862"+
		"\x3\x2\x2\x2\x8B1\x866\x3\x2\x2\x2\x8B1\x86A\x3\x2\x2\x2\x8B1\x86B\x3"+
		"\x2\x2\x2\x8B1\x86C\x3\x2\x2\x2\x8B1\x894\x3\x2\x2\x2\x8B1\x8A4\x3\x2"+
		"\x2\x2\x8B1\x8A7\x3\x2\x2\x2\x8B1\x8AA\x3\x2\x2\x2\x8B1\x8AB\x3\x2\x2"+
		"\x2\x8B2\xA3\x3\x2\x2\x2\x8B3\x8B4\t\x14\x2\x2\x8B4\x8B5\a\x1AE\x2\x2"+
		"\x8B5\x8B6\a\x294\x2\x2\x8B6\x8B7\x5\x3E4\x1F3\x2\x8B7\x8B8\a\x87\x2\x2"+
		"\x8B8\x8B9\aH\x2\x2\x8B9\x8BA\a\x141\x2\x2\x8BA\x8C4\a\x347\x2\x2\x8BB"+
		"\x8BC\aG\x2\x2\x8BC\x8BF\a\x335\x2\x2\x8BD\x8C0\x5\x3E4\x1F3\x2\x8BE\x8C0"+
		"\a\r\x2\x2\x8BF\x8BD\x3\x2\x2\x2\x8BF\x8BE\x3\x2\x2\x2\x8C0\x8C2\x3\x2"+
		"\x2\x2\x8C1\x8C3\a\x349\x2\x2\x8C2\x8C1\x3\x2\x2\x2\x8C2\x8C3\x3\x2\x2"+
		"\x2\x8C3\x8C5\x3\x2\x2\x2\x8C4\x8BB\x3\x2\x2\x2\x8C4\x8C5\x3\x2\x2\x2"+
		"\x8C5\x8D2\x3\x2\x2\x2\x8C6\x8C7\a\xBC\x2\x2\x8C7\x8CD\a\x335\x2\x2\x8C8"+
		"\x8CA\ah\x2\x2\x8C9\x8C8\x3\x2\x2\x2\x8C9\x8CA\x3\x2\x2\x2\x8CA\x8CB\x3"+
		"\x2\x2\x2\x8CB\x8CE\x5\x3E4\x1F3\x2\x8CC\x8CE\a\r\x2\x2\x8CD\x8C9\x3\x2"+
		"\x2\x2\x8CD\x8CC\x3\x2\x2\x2\x8CE\x8D0\x3\x2\x2\x2\x8CF\x8D1\a\x349\x2"+
		"\x2\x8D0\x8CF\x3\x2\x2\x2\x8D0\x8D1\x3\x2\x2\x2\x8D1\x8D3\x3\x2\x2\x2"+
		"\x8D2\x8C6\x3\x2\x2\x2\x8D2\x8D3\x3\x2\x2\x2\x8D3\x8DD\x3\x2\x2\x2\x8D4"+
		"\x8D5\a\x2B2\x2\x2\x8D5\x8D8\a\x335\x2\x2\x8D6\x8D9\a\x331\x2\x2\x8D7"+
		"\x8D9\a\r\x2\x2\x8D8\x8D6\x3\x2\x2\x2\x8D8\x8D7\x3\x2\x2\x2\x8D9\x8DB"+
		"\x3\x2\x2\x2\x8DA\x8DC\a\x349\x2\x2\x8DB\x8DA\x3\x2\x2\x2\x8DB\x8DC\x3"+
		"\x2\x2\x2\x8DC\x8DE\x3\x2\x2\x2\x8DD\x8D4\x3\x2\x2\x2\x8DD\x8DE\x3\x2"+
		"\x2\x2\x8DE\x8E5\x3\x2\x2\x2\x8DF\x8E0\a\x295\x2\x2\x8E0\x8E3\a\x335\x2"+
		"\x2\x8E1\x8E4\a\x32D\x2\x2\x8E2\x8E4\a[\x2\x2\x8E3\x8E1\x3\x2\x2\x2\x8E3"+
		"\x8E2\x3\x2\x2\x2\x8E4\x8E6\x3\x2\x2\x2\x8E5\x8DF\x3\x2\x2\x2\x8E5\x8E6"+
		"\x3\x2\x2\x2\x8E6\x8E7\x3\x2\x2\x2\x8E7\x8E8\a\x348\x2\x2\x8E8\xA5\x3"+
		"\x2\x2\x2\x8E9\x8EA\ai\x2\x2\x8EA\x8EB\a\x1AE\x2\x2\x8EB\x8EC\a\x294\x2"+
		"\x2\x8EC\x8ED\x5\x3E4\x1F3\x2\x8ED\xA7\x3\x2\x2\x2\x8EE\x8EF\a\n\x2\x2"+
		"\x8EF\x8F0\a,\x2\x2\x8F0\x918\x5\x3E4\x1F3\x2\x8F1\x8F2\a\x2B3\x2\x2\x8F2"+
		"\x919\a\x297\x2\x2\x8F3\x8F4\a\x17F\x2\x2\x8F4\x8F5\a\x296\x2\x2\x8F5"+
		"\x8F6\a\xAE\x2\x2\x8F6\x90D\a\x347\x2\x2\x8F7\x8F8\a\x83\x2\x2\x8F8\x8F9"+
		"\a\x335\x2\x2\x8F9\x8FB\a\x331\x2\x2\x8FA\x8FC\a\x349\x2\x2\x8FB\x8FA"+
		"\x3\x2\x2\x2\x8FB\x8FC\x3\x2\x2\x2\x8FC\x90E\x3\x2\x2\x2\x8FD\x8FE\a\x1DA"+
		"\x2\x2\x8FE\x8FF\a\'\x2\x2\x8FF\x900\a\xF8\x2\x2\x900\x901\a\x335\x2\x2"+
		"\x901\x903\a\x331\x2\x2\x902\x904\a\x349\x2\x2\x903\x902\x3\x2\x2\x2\x903"+
		"\x904\x3\x2\x2\x2\x904\x90E\x3\x2\x2\x2\x905\x906\a\x1F5\x2\x2\x906\x907"+
		"\a\'\x2\x2\x907\x908\a\xF8\x2\x2\x908\x909\a\x335\x2\x2\x909\x90B\a\x331"+
		"\x2\x2\x90A\x90C\a\x349\x2\x2\x90B\x90A\x3\x2\x2\x2\x90B\x90C\x3\x2\x2"+
		"\x2\x90C\x90E\x3\x2\x2\x2\x90D\x8F7\x3\x2\x2\x2\x90D\x8FD\x3\x2\x2\x2"+
		"\x90D\x905\x3\x2\x2\x2\x90E\x90F\x3\x2\x2\x2\x90F\x90D\x3\x2\x2\x2\x90F"+
		"\x910\x3\x2\x2\x2\x910\x911\x3\x2\x2\x2\x911\x919\a\x348\x2\x2\x912\x913"+
		"\a\x17F\x2\x2\x913\x914\a\x188\x2\x2\x914\x915\a\x87\x2\x2\x915\x916\a"+
		"\x1A8\x2\x2\x916\x917\a\x335\x2\x2\x917\x919\t\t\x2\x2\x918\x8F1\x3\x2"+
		"\x2\x2\x918\x8F3\x3\x2\x2\x2\x918\x912\x3\x2\x2\x2\x919\xA9\x3\x2\x2\x2"+
		"\x91A\x91B\a\n\x2\x2\x91B\x91C\a\x39\x2\x2\x91C\x91D\a\x1F5\x2\x2\x91D"+
		"\x91E\a\xAE\x2\x2\x91E\x91F\x5\x3E4\x1F3\x2\x91F\x920\t\x15\x2\x2\x920"+
		"\x921\a\x316\x2\x2\x921\x922\a\x347\x2\x2\x922\x923\a\x1BD\x2\x2\x923"+
		"\x924\a\x335\x2\x2\x924\x92D\x5\x3E4\x1F3\x2\x925\x926\a\x349\x2\x2\x926"+
		"\x927\a\x190\x2\x2\x927\x928\a\x335\x2\x2\x928\x929\a\x331\x2\x2\x929"+
		"\x92A\a\x349\x2\x2\x92A\x92B\a\x1F4\x2\x2\x92B\x92C\a\x335\x2\x2\x92C"+
		"\x92E\a\x332\x2\x2\x92D\x925\x3\x2\x2\x2\x92D\x92E\x3\x2\x2\x2\x92E\x92F"+
		"\x3\x2\x2\x2\x92F\x930\a\x348\x2\x2\x930\xAB\x3\x2\x2\x2\x931\x932\aK"+
		"\x2\x2\x932\x933\a\x39\x2\x2\x933\x934\a\x1F5\x2\x2\x934\x935\a\xAE\x2"+
		"\x2\x935\x936\x5\x3E4\x1F3\x2\x936\x937\a\x17F\x2\x2\x937\x94B\a\x175"+
		"\x2\x2\x938\x93A\a\x347\x2\x2\x939\x93B\a\x349\x2\x2\x93A\x939\x3\x2\x2"+
		"\x2\x93A\x93B\x3\x2\x2\x2\x93B\x93C\x3\x2\x2\x2\x93C\x93D\a\x1BD\x2\x2"+
		"\x93D\x93E\a\x335\x2\x2\x93E\x93F\x5\x3E4\x1F3\x2\x93F\x940\a\x349\x2"+
		"\x2\x940\x941\a\x190\x2\x2\x941\x942\a\x335\x2\x2\x942\x943\a\x331\x2"+
		"\x2\x943\x944\a\x349\x2\x2\x944\x945\a\x1F4\x2\x2\x945\x946\a\x335\x2"+
		"\x2\x946\x947\a\x332\x2\x2\x947\x949\a\x348\x2\x2\x948\x94A\a\x349\x2"+
		"\x2\x949\x948\x3\x2\x2\x2\x949\x94A\x3\x2\x2\x2\x94A\x94C\x3\x2\x2\x2"+
		"\x94B\x938\x3\x2\x2\x2\x94C\x94D\x3\x2\x2\x2\x94D\x94B\x3\x2\x2\x2\x94D"+
		"\x94E\x3\x2\x2\x2\x94E\xAD\x3\x2\x2\x2\x94F\x950\ai\x2\x2\x950\x951\a"+
		",\x2\x2\x951\x952\x5\x3E4\x1F3\x2\x952\xAF\x3\x2\x2\x2\x953\x954\ai\x2"+
		"\x2\x954\x955\a\x39\x2\x2\x955\x956\a\x1F5\x2\x2\x956\x957\a\xAE\x2\x2"+
		"\x957\x958\x5\x3E4\x1F3\x2\x958\xB1\x3\x2\x2\x2\x959\x95A\ai\x2\x2\x95A"+
		"\x95B\a\x39\x2\x2\x95B\x95C\a\xBF\x2\x2\x95C\x95D\a\xAE\x2\x2\x95D\x95E"+
		"\x5\x3E4\x1F3\x2\x95E\xB3\x3\x2\x2\x2\x95F\x960\ai\x2\x2\x960\x961\a\x46"+
		"\x2\x2\x961\x962\x5\x3E4\x1F3\x2\x962\xB5\x3\x2\x2\x2\x963\x964\ai\x2"+
		"\x2\x964\x965\a\x1CB\x2\x2\x965\x966\x5\x3E4\x1F3\x2\x966\xB7\x3\x2\x2"+
		"\x2\x967\x968\ai\x2\x2\x968\x969\a\x1CC\x2\x2\x969\x96A\a\x29B\x2\x2\x96A"+
		"\x96B\x5\x3E4\x1F3\x2\x96B\xB9\x3\x2\x2\x2\x96C\x96D\ai\x2\x2\x96D\x970"+
		"\aV\x2\x2\x96E\x96F\a\x9B\x2\x2\x96F\x971\ay\x2\x2\x970\x96E\x3\x2\x2"+
		"\x2\x970\x971\x3\x2\x2\x2\x971\x976\x3\x2\x2\x2\x972\x974\a\x349\x2\x2"+
		"\x973\x972\x3\x2\x2\x2\x973\x974\x3\x2\x2\x2\x974\x975\x3\x2\x2\x2\x975"+
		"\x977\x5\x3E4\x1F3\x2\x976\x973\x3\x2\x2\x2\x977\x978\x3\x2\x2\x2\x978"+
		"\x976\x3\x2\x2\x2\x978\x979\x3\x2\x2\x2\x979\xBB\x3\x2\x2\x2\x97A\x97B"+
		"\ai\x2\x2\x97B\x97C\aV\x2\x2\x97C\x97D\a\x19C\x2\x2\x97D\x97E\a\x149\x2"+
		"\x2\x97E\x97F\x5\x3E4\x1F3\x2\x97F\xBD\x3\x2\x2\x2\x980\x981\ai\x2\x2"+
		"\x981\x982\aV\x2\x2\x982\x983\a\x2C9\x2\x2\x983\x984\a\x1CB\x2\x2\x984"+
		"\x985\x5\x3E4\x1F3\x2\x985\xBF\x3\x2\x2\x2\x986\x987\ai\x2\x2\x987\x98A"+
		"\a[\x2\x2\x988\x989\a\x9B\x2\x2\x989\x98B\ay\x2\x2\x98A\x988\x3\x2\x2"+
		"\x2\x98A\x98B\x3\x2\x2\x2\x98B\x98D\x3\x2\x2\x2\x98C\x98E\a\x349\x2\x2"+
		"\x98D\x98C\x3\x2\x2\x2\x98D\x98E\x3\x2\x2\x2\x98E\x992\x3\x2\x2\x2\x98F"+
		"\x990\x5\x3AE\x1D8\x2\x990\x991\a\x342\x2\x2\x991\x993\x3\x2\x2\x2\x992"+
		"\x98F\x3\x2\x2\x2\x992\x993\x3\x2\x2\x2\x993\x994\x3\x2\x2\x2\x994\x995"+
		"\x5\x3E4\x1F3\x2\x995\xC1\x3\x2\x2\x2\x996\x997\ai\x2\x2\x997\x998\ao"+
		"\x2\x2\x998\x999\x5\x3E4\x1F3\x2\x999\xC3\x3\x2\x2\x2\x99A\x99B\ai\x2"+
		"\x2\x99B\x99C\a}\x2\x2\x99C\x99D\a\x1CF\x2\x2\x99D\x99E\a\x148\x2\x2\x99E"+
		"\x99F\x5\x3E4\x1F3\x2\x99F\xC5\x3\x2\x2\x2\x9A0\x9A1\ai\x2\x2\x9A1\x9A2"+
		"\a}\x2\x2\x9A2\x9A3\a\x83\x2\x2\x9A3\x9A4\a\x20F\x2\x2\x9A4\x9A5\x5\x3E4"+
		"\x1F3\x2\x9A5\xC7\x3\x2\x2\x2\x9A6\x9A7\ai\x2\x2\x9A7\x9A8\a}\x2\x2\x9A8"+
		"\x9A9\a\xB4\x2\x2\x9A9\x9AC\x5\x3E4\x1F3\x2\x9AA\x9AB\a\x15\x2\x2\x9AB"+
		"\x9AD\x5\x3E4\x1F3\x2\x9AC\x9AA\x3\x2\x2\x2\x9AC\x9AD\x3\x2\x2\x2\x9AD"+
		"\xC9\x3\x2\x2\x2\x9AE\x9AF\ai\x2\x2\x9AF\x9B0\a}\x2\x2\x9B0\x9B1\a\x2BC"+
		"\x2\x2\x9B1\x9B2\a\x28F\x2\x2\x9B2\x9B3\x5\x3E4\x1F3\x2\x9B3\xCB\x3\x2"+
		"\x2\x2\x9B4\x9B5\ai\x2\x2\x9B5\x9B6\a}\x2\x2\x9B6\x9BA\a\x159\x2\x2\x9B7"+
		"\x9B8\x5\x3AC\x1D7\x2\x9B8\x9B9\a\x342\x2\x2\x9B9\x9BB\x3\x2\x2\x2\x9BA"+
		"\x9B7\x3\x2\x2\x2\x9BA\x9BB\x3\x2\x2\x2\x9BB\x9BF\x3\x2\x2\x2\x9BC\x9BD"+
		"\x5\x3AE\x1D8\x2\x9BD\x9BE\a\x342\x2\x2\x9BE\x9C0\x3\x2\x2\x2\x9BF\x9BC"+
		"\x3\x2\x2\x2\x9BF\x9C0\x3\x2\x2\x2\x9C0\x9C1\x3\x2\x2\x2\x9C1\x9C2\x5"+
		"\x3AA\x1D6\x2\x9C2\xCD\x3\x2\x2\x2\x9C3\x9C4\ai\x2\x2\x9C4\x9C5\as\x2"+
		"\x2\x9C5\x9CA\a\xE1\x2\x2\x9C6\x9C8\a\x349\x2\x2\x9C7\x9C6\x3\x2\x2\x2"+
		"\x9C7\x9C8\x3\x2\x2\x2\x9C8\x9C9\x3\x2\x2\x2\x9C9\x9CB\x5\x3E4\x1F3\x2"+
		"\x9CA\x9C7\x3\x2\x2\x2\x9CB\x9CC\x3\x2\x2\x2\x9CC\x9CA\x3\x2\x2\x2\x9CC"+
		"\x9CD\x3\x2\x2\x2\x9CD\x9CE\x3\x2\x2\x2\x9CE\x9D3\a\xE9\x2\x2\x9CF\x9D4"+
		"\a\x13B\x2\x2\x9D0\x9D4\aV\x2\x2\x9D1\x9D2\a\x29E\x2\x2\x9D2\x9D4\x5\x3E4"+
		"\x1F3\x2\x9D3\x9CF\x3\x2\x2\x2\x9D3\x9D0\x3\x2\x2\x2\x9D3\x9D1\x3\x2\x2"+
		"\x2\x9D4\xCF\x3\x2\x2\x2\x9D5\x9D6\ai\x2\x2\x9D6\x9D7\as\x2\x2\x9D7\x9D8"+
		"\a\x13F\x2\x2\x9D8\x9D9\x5\x3E4\x1F3\x2\x9D9\x9DA\a\xE9\x2\x2\x9DA\x9DB"+
		"\a\x13B\x2\x2\x9DB\xD1\x3\x2\x2\x2\x9DC\x9DD\ai\x2\x2\x9DD\x9DE\a\x212"+
		"\x2\x2\x9DE\x9DF\a\x1B5\x2\x2\x9DF\x9E0\x5\x3E4\x1F3\x2\x9E0\xD3\x3\x2"+
		"\x2\x2\x9E1\x9E2\ai\x2\x2\x9E2\x9E3\a\x212\x2\x2\x9E3\x9E4\a\xA0\x2\x2"+
		"\x9E4\x9E8\a\xE9\x2\x2\x9E5\x9E6\x5\x3AE\x1D8\x2\x9E6\x9E7\a\x342\x2\x2"+
		"\x9E7\x9E9\x3\x2\x2\x2\x9E8\x9E5\x3\x2\x2\x2\x9E8\x9E9\x3\x2\x2\x2\x9E9"+
		"\x9EA\x3\x2\x2\x2\x9EA\x9EB\x5\x3AA\x1D6\x2\x9EB\xD5\x3\x2\x2\x2\x9EC"+
		"\x9ED\ai\x2\x2\x9ED\x9EE\a\x212\x2\x2\x9EE\x9EF\a\x2EE\x2\x2\x9EF\x9F0"+
		"\x5\x3E4\x1F3\x2\x9F0\xD7\x3\x2\x2\x2\x9F1\x9F2\ai\x2\x2\x9F2\x9F3\a\x245"+
		"\x2\x2\x9F3\x9F4\x5\x3E4\x1F3\x2\x9F4\xD9\x3\x2\x2\x2\x9F5\x9F6\ai\x2"+
		"\x2\x9F6\x9F7\a\xBF\x2\x2\x9F7\x9F8\a\xAE\x2\x2\x9F8\xDB\x3\x2\x2\x2\x9F9"+
		"\x9FA\ai\x2\x2\x9FA\x9FB\a\x25A\x2\x2\x9FB\x9FC\a\x30B\x2\x2\x9FC\x9FD"+
		"\x5\x3E4\x1F3\x2\x9FD\xDD\x3\x2\x2\x2\x9FE\x9FF\ai\x2\x2\x9FF\xA00\a\x28A"+
		"\x2\x2\xA00\xA01\a\x8F\x2\x2\xA01\xA02\x5\x3E4\x1F3\x2\xA02\xDF\x3\x2"+
		"\x2\x2\xA03\xA04\ai\x2\x2\xA04\xA05\a\x28A\x2\x2\xA05\xA06\a\x135\x2\x2"+
		"\xA06\xA07\x5\x3E4\x1F3\x2\xA07\xE1\x3\x2\x2\x2\xA08\xA09\ai\x2\x2\xA09"+
		"\xA0D\a\x29E\x2\x2\xA0A\xA0B\x5\x3AC\x1D7\x2\xA0B\xA0C\a\x342\x2\x2\xA0C"+
		"\xA0E\x3\x2\x2\x2\xA0D\xA0A\x3\x2\x2\x2\xA0D\xA0E\x3\x2\x2\x2\xA0E\xA12"+
		"\x3\x2\x2\x2\xA0F\xA10\x5\x3AE\x1D8\x2\xA10\xA11\a\x342\x2\x2\xA11\xA13"+
		"\x3\x2\x2\x2\xA12\xA0F\x3\x2\x2\x2\xA12\xA13\x3\x2\x2\x2\xA13\xA14\x3"+
		"\x2\x2\x2\xA14\xA15\x5\x3E4\x1F3\x2\xA15\xE3\x3\x2\x2\x2\xA16\xA17\ai"+
		"\x2\x2\xA17\xA18\a\x2B1\x2\x2\xA18\xA19\a\x13C\x2\x2\xA19\xA1A\a\x1AC"+
		"\x2\x2\xA1A\xA1B\x5\x3E4\x1F3\x2\xA1B\xE5\x3\x2\x2\x2\xA1C\xA1D\ai\x2"+
		"\x2\xA1D\xA1E\a\x2BC\x2\x2\xA1E\xA1F\a\x28F\x2\x2\xA1F\xA20\x5\x3E4\x1F3"+
		"\x2\xA20\xE7\x3\x2\x2\x2\xA21\xA22\ai\x2\x2\xA22\xA25\a\x127\x2\x2\xA23"+
		"\xA24\a\x9B\x2\x2\xA24\xA26\ay\x2\x2\xA25\xA23\x3\x2\x2\x2\xA25\xA26\x3"+
		"\x2\x2\x2\xA26\xA27\x3\x2\x2\x2\xA27\xA28\x5\x3E4\x1F3\x2\xA28\xE9\x3"+
		"\x2\x2\x2\xA29\xA2A\ai\x2\x2\xA2A\xA2B\a\x2C2\x2\x2\xA2B\xA2C\x5\x3E4"+
		"\x1F3\x2\xA2C\xEB\x3\x2\x2\x2\xA2D\xA2E\ai\x2\x2\xA2E\xA31\a\x130\x2\x2"+
		"\xA2F\xA30\a\x9B\x2\x2\xA30\xA32\ay\x2\x2\xA31\xA2F\x3\x2\x2\x2\xA31\xA32"+
		"\x3\x2\x2\x2\xA32\xA3C\x3\x2\x2\x2\xA33\xA35\a\x349\x2\x2\xA34\xA33\x3"+
		"\x2\x2\x2\xA34\xA35\x3\x2\x2\x2\xA35\xA39\x3\x2\x2\x2\xA36\xA37\x5\x3AE"+
		"\x1D8\x2\xA37\xA38\a\x342\x2\x2\xA38\xA3A\x3\x2\x2\x2\xA39\xA36\x3\x2"+
		"\x2\x2\xA39\xA3A\x3\x2\x2\x2\xA3A\xA3B\x3\x2\x2\x2\xA3B\xA3D\x5\x3E4\x1F3"+
		"\x2\xA3C\xA34\x3\x2\x2\x2\xA3C\xA3D\x3\x2\x2\x2\xA3D\xED\x3\x2\x2\x2\xA3E"+
		"\xA3F\ai\x2\x2\xA3F\xA42\a\x134\x2\x2\xA40\xA41\a\x9B\x2\x2\xA41\xA43"+
		"\ay\x2\x2\xA42\xA40\x3\x2\x2\x2\xA42\xA43\x3\x2\x2\x2\xA43\xA44\x3\x2"+
		"\x2\x2\xA44\xA45\x5\x3AE\x1D8\x2\xA45\xEF\x3\x2\x2\x2\xA46\xA47\ai\x2"+
		"\x2\xA47\xA48\a\x2CC\x2\x2\xA48\xA49\a\x29A\x2\x2\xA49\xA4A\a\x23D\x2"+
		"\x2\xA4A\xA4B\x5\x3E4\x1F3\x2\xA4B\xF1\x3\x2\x2\x2\xA4C\xA4D\ai\x2\x2"+
		"\xA4D\xA4E\a\x2D2\x2\x2\xA4E\xA51\a\x101\x2\x2\xA4F\xA50\a\x9B\x2\x2\xA50"+
		"\xA52\ay\x2\x2\xA51\xA4F\x3\x2\x2\x2\xA51\xA52\x3\x2\x2\x2\xA52\xA56\x3"+
		"\x2\x2\x2\xA53\xA54\x5\x3AE\x1D8\x2\xA54\xA55\a\x342\x2\x2\xA55\xA57\x3"+
		"\x2\x2\x2\xA56\xA53\x3\x2\x2\x2\xA56\xA57\x3\x2\x2\x2\xA57\xA58\x3\x2"+
		"\x2\x2\xA58\xA59\x5\x3E4\x1F3\x2\xA59\xF3\x3\x2\x2\x2\xA5A\xA5B\ai\x2"+
		"\x2\xA5B\xA5E\a\x2D9\x2\x2\xA5C\xA5D\a\x9B\x2\x2\xA5D\xA5F\ay\x2\x2\xA5E"+
		"\xA5C\x3\x2\x2\x2\xA5E\xA5F\x3\x2\x2\x2\xA5F\xA6E\x3\x2\x2\x2\xA60\xA62"+
		"\a\x349\x2\x2\xA61\xA60\x3\x2\x2\x2\xA61\xA62\x3\x2\x2\x2\xA62\xA66\x3"+
		"\x2\x2\x2\xA63\xA64\x5\x3AC\x1D7\x2\xA64\xA65\a\x342\x2\x2\xA65\xA67\x3"+
		"\x2\x2\x2\xA66\xA63\x3\x2\x2\x2\xA66\xA67\x3\x2\x2\x2\xA67\xA6B\x3\x2"+
		"\x2\x2\xA68\xA69\x5\x3AE\x1D8\x2\xA69\xA6A\a\x342\x2\x2\xA6A\xA6C\x3\x2"+
		"\x2\x2\xA6B\xA68\x3\x2\x2\x2\xA6B\xA6C\x3\x2\x2\x2\xA6C\xA6D\x3\x2\x2"+
		"\x2\xA6D\xA6F\x5\x3E4\x1F3\x2\xA6E\xA61\x3\x2\x2\x2\xA6E\xA6F\x3\x2\x2"+
		"\x2\xA6F\xF5\x3\x2\x2\x2\xA70\xA71\ai\x2\x2\xA71\xA72\a\x13B\x2\x2\xA72"+
		"\xA73\a\x19C\x2\x2\xA73\xA74\x5\x3E4\x1F3\x2\xA74\xF7\x3\x2\x2\x2\xA75"+
		"\xA76\ai\x2\x2\xA76\xA77\a\x13B\x2\x2\xA77\xA78\a\x19C\x2\x2\xA78\xA79"+
		"\a\x149\x2\x2\xA79\xA7A\x5\x3E4\x1F3\x2\xA7A\xF9\x3\x2\x2\x2\xA7B\xA7C"+
		"\ai\x2\x2\xA7C\xA7D\a\x13B\x2\x2\xA7D\xA7E\a\x127\x2\x2\xA7E\xA7F\x5\x3E4"+
		"\x1F3\x2\xA7F\xFB\x3\x2\x2\x2\xA80\xA81\ai\x2\x2\xA81\xA82\a\x13C\x2\x2"+
		"\xA82\xA83\x5\x3E4\x1F3\x2\xA83\xFD\x3\x2\x2\x2\xA84\xA86\ai\x2\x2\xA85"+
		"\xA87\a\x1C7\x2\x2\xA86\xA85\x3\x2\x2\x2\xA86\xA87\x3\x2\x2\x2\xA87\xA88"+
		"\x3\x2\x2\x2\xA88\xA89\a\x2DF\x2\x2\xA89\xA8D\a\x8D\x2\x2\xA8A\xA8B\x5"+
		"\x3AE\x1D8\x2\xA8B\xA8C\a\x342\x2\x2\xA8C\xA8E\x3\x2\x2\x2\xA8D\xA8A\x3"+
		"\x2\x2\x2\xA8D\xA8E\x3\x2\x2\x2\xA8E\xA8F\x3\x2\x2\x2\xA8F\xA90\x5\x3E4"+
		"\x1F3\x2\xA90\xA9C\a\'\x2\x2\xA91\xA93\a\x349\x2\x2\xA92\xA91\x3\x2\x2"+
		"\x2\xA92\xA93\x3\x2\x2\x2\xA93\xA94\x3\x2\x2\x2\xA94\xA95\a,\x2\x2\xA95"+
		"\xA9D\x5\x3E4\x1F3\x2\xA96\xA98\a\x349\x2\x2\xA97\xA96\x3\x2\x2\x2\xA97"+
		"\xA98\x3\x2\x2\x2\xA98\xA99\x3\x2\x2\x2\xA99\xA9A\a\x12\x2\x2\xA9A\xA9B"+
		"\a\xAE\x2\x2\xA9B\xA9D\x5\x3E4\x1F3\x2\xA9C\xA92\x3\x2\x2\x2\xA9C\xA97"+
		"\x3\x2\x2\x2\xA9D\xA9E\x3\x2\x2\x2\xA9E\xA9C\x3\x2\x2\x2\xA9E\xA9F\x3"+
		"\x2\x2\x2\xA9F\xFF\x3\x2\x2\x2\xAA0\xAA1\ai\x2\x2\xAA1\xAA5\a\x14E\x2"+
		"\x2\xAA2\xAA3\x5\x3AE\x1D8\x2\xAA3\xAA4\a\x342\x2\x2\xAA4\xAA6\x3\x2\x2"+
		"\x2\xAA5\xAA2\x3\x2\x2\x2\xAA5\xAA6\x3\x2\x2\x2\xAA6\xAA7\x3\x2\x2\x2"+
		"\xAA7\xAA8\x5\x3E4\x1F3\x2\xAA8\xAA9\a\x342\x2\x2\xAA9\xAAA\x5\x3E4\x1F3"+
		"\x2\xAAA\x101\x3\x2\x2\x2\xAAB\xAAC\ai\x2\x2\xAAC\xAAD\a\x2F5\x2\x2\xAAD"+
		"\xAAE\a\xAE\x2\x2\xAAE\xAB2\x5\x3E4\x1F3\x2\xAAF\xAB0\a\x2B3\x2\x2\xAB0"+
		"\xAB1\a\x29B\x2\x2\xAB1\xAB3\a\xAE\x2\x2\xAB2\xAAF\x3\x2\x2\x2\xAB2\xAB3"+
		"\x3\x2\x2\x2\xAB3\x103\x3\x2\x2\x2\xAB4\xAB5\ai\x2\x2\xAB5\xAB8\a\x2F7"+
		"\x2\x2\xAB6\xAB7\a\x9B\x2\x2\xAB7\xAB9\ay\x2\x2\xAB8\xAB6\x3\x2\x2\x2"+
		"\xAB8\xAB9\x3\x2\x2\x2\xAB9\xABD\x3\x2\x2\x2\xABA\xABB\x5\x3AE\x1D8\x2"+
		"\xABB\xABC\a\x342\x2\x2\xABC\xABE\x3\x2\x2\x2\xABD\xABA\x3\x2\x2\x2\xABD"+
		"\xABE\x3\x2\x2\x2\xABE\xABF\x3\x2\x2\x2\xABF\xAC0\x5\x3E4\x1F3\x2\xAC0"+
		"\x105\x3\x2\x2\x2\xAC1\xAC2\ai\x2\x2\xAC2\xAC5\a\x174\x2\x2\xAC3\xAC4"+
		"\a\x9B\x2\x2\xAC4\xAC6\ay\x2\x2\xAC5\xAC3\x3\x2\x2\x2\xAC5\xAC6\x3\x2"+
		"\x2\x2\xAC6\xAC7\x3\x2\x2\x2\xAC7\xAC8\x5\x3E4\x1F3\x2\xAC8\x107\x3\x2"+
		"\x2\x2\xAC9\xACA\ai\x2\x2\xACA\xACB\a\x31F\x2\x2\xACB\xACC\a\x94\x2\x2"+
		"\xACC\xACD\x5\x3E4\x1F3\x2\xACD\x109\x3\x2\x2\x2\xACE\xACF\ai\x2\x2\xACF"+
		"\xAD0\a\x320\x2\x2\xAD0\xAD1\a\x134\x2\x2\xAD1\xAD5\a\x1BC\x2\x2\xAD2"+
		"\xAD3\x5\x3E4\x1F3\x2\xAD3\xAD4\a\x342\x2\x2\xAD4\xAD6\x3\x2\x2\x2\xAD5"+
		"\xAD2\x3\x2\x2\x2\xAD5\xAD6\x3\x2\x2\x2\xAD6\xAD7\x3\x2\x2\x2\xAD7\xAD8"+
		"\x5\x3E4\x1F3\x2\xAD8\x10B\x3\x2\x2\x2\xAD9\xADA\a\x1E9\x2\x2\xADA\xAE9"+
		"\a\x166\x2\x2\xADB\xADD\a\x349\x2\x2\xADC\xADB\x3\x2\x2\x2\xADC\xADD\x3"+
		"\x2\x2\x2\xADD\xAE1\x3\x2\x2\x2\xADE\xADF\x5\x3AE\x1D8\x2\xADF\xAE0\a"+
		"\x342\x2\x2\xAE0\xAE2\x3\x2\x2\x2\xAE1\xADE\x3\x2\x2\x2\xAE1\xAE2\x3\x2"+
		"\x2\x2\xAE2\xAE3\x3\x2\x2\x2\xAE3\xAE5\x5\x3E4\x1F3\x2\xAE4\xADC\x3\x2"+
		"\x2\x2\xAE5\xAE6\x3\x2\x2\x2\xAE6\xAE4\x3\x2\x2\x2\xAE6\xAE7\x3\x2\x2"+
		"\x2\xAE7\xAEA\x3\x2\x2\x2\xAE8\xAEA\a\x6\x2\x2\xAE9\xAE4\x3\x2\x2\x2\xAE9"+
		"\xAE8\x3\x2\x2\x2\xAEA\xAEB\x3\x2\x2\x2\xAEB\xAF5\a\xE9\x2\x2\xAEC\xAED"+
		"\x5\x3E4\x1F3\x2\xAED\xAEE\a\x342\x2\x2\xAEE\xAF0\x3\x2\x2\x2\xAEF\xAEC"+
		"\x3\x2\x2\x2\xAEF\xAF0\x3\x2\x2\x2\xAF0\xAF1\x3\x2\x2\x2\xAF1\xAF6\x5"+
		"\x3E4\x1F3\x2\xAF2\xAF6\aV\x2\x2\xAF3\xAF4\a\x6\x2\x2\xAF4\xAF6\a\x13B"+
		"\x2\x2\xAF5\xAEF\x3\x2\x2\x2\xAF5\xAF2\x3\x2\x2\x2\xAF5\xAF3\x3\x2\x2"+
		"\x2\xAF6\x10D\x3\x2\x2\x2\xAF7\xAF8\a\x1F2\x2\x2\xAF8\xB07\a\x166\x2\x2"+
		"\xAF9\xAFB\a\x349\x2\x2\xAFA\xAF9\x3\x2\x2\x2\xAFA\xAFB\x3\x2\x2\x2\xAFB"+
		"\xAFF\x3\x2\x2\x2\xAFC\xAFD\x5\x3AE\x1D8\x2\xAFD\xAFE\a\x342\x2\x2\xAFE"+
		"\xB00\x3\x2\x2\x2\xAFF\xAFC\x3\x2\x2\x2\xAFF\xB00\x3\x2\x2\x2\xB00\xB01"+
		"\x3\x2\x2\x2\xB01\xB03\x5\x3E4\x1F3\x2\xB02\xAFA\x3\x2\x2\x2\xB03\xB04"+
		"\x3\x2\x2\x2\xB04\xB02\x3\x2\x2\x2\xB04\xB05\x3\x2\x2\x2\xB05\xB08\x3"+
		"\x2\x2\x2\xB06\xB08\a\x6\x2\x2\xB07\xB02\x3\x2\x2\x2\xB07\xB06\x3\x2\x2"+
		"\x2\xB08\xB09\x3\x2\x2\x2\xB09\xB13\a\xE9\x2\x2\xB0A\xB0B\x5\x3E4\x1F3"+
		"\x2\xB0B\xB0C\a\x342\x2\x2\xB0C\xB0E\x3\x2\x2\x2\xB0D\xB0A\x3\x2\x2\x2"+
		"\xB0D\xB0E\x3\x2\x2\x2\xB0E\xB0F\x3\x2\x2\x2\xB0F\xB14\x5\x3E4\x1F3\x2"+
		"\xB10\xB14\aV\x2\x2\xB11\xB12\a\x6\x2\x2\xB12\xB14\a\x13B\x2\x2\xB13\xB0D"+
		"\x3\x2\x2\x2\xB13\xB10\x3\x2\x2\x2\xB13\xB11\x3\x2\x2\x2\xB14\x10F\x3"+
		"\x2\x2\x2\xB15\xB16\a\x243\x2\x2\xB16\xB17\a\x159\x2\x2\xB17\xB18\x5\x3A6"+
		"\x1D4\x2\xB18\xB19\a\x9D\x2\x2\xB19\xB1A\t\x16\x2\x2\xB1A\xB1E\a\x263"+
		"\x2\x2\xB1B\xB1C\a\x31B\x2\x2\xB1C\xB1F\a\x32D\x2\x2\xB1D\xB1F\a\x276"+
		"\x2\x2\xB1E\xB1B\x3\x2\x2\x2\xB1E\xB1D\x3\x2\x2\x2\xB1E\xB1F\x3\x2\x2"+
		"\x2\xB1F\xB21\x3\x2\x2\x2\xB20\xB22\a\x34A\x2\x2\xB21\xB20\x3\x2\x2\x2"+
		"\xB21\xB22\x3\x2\x2\x2\xB22\x111\x3\x2\x2\x2\xB23\xB24\a\x167\x2\x2\xB24"+
		"\xB25\a\x159\x2\x2\xB25\xB39\x5\x3A6\x1D4\x2\xB26\xB27\a\x17F\x2\x2\xB27"+
		"\xB28\a\x347\x2\x2\xB28\xB29\a\x28B\x2\x2\xB29\xB33\a\x347\x2\x2\xB2A"+
		"\xB2C\a\x349\x2\x2\xB2B\xB2A\x3\x2\x2\x2\xB2B\xB2C\x3\x2\x2\x2\xB2C\xB31"+
		"\x3\x2\x2\x2\xB2D\xB32\a\x32D\x2\x2\xB2E\xB2F\a\x32D\x2\x2\xB2F\xB30\a"+
		"\x160\x2\x2\xB30\xB32\a\x32D\x2\x2\xB31\xB2D\x3\x2\x2\x2\xB31\xB2E\x3"+
		"\x2\x2\x2\xB32\xB34\x3\x2\x2\x2\xB33\xB2B\x3\x2\x2\x2\xB34\xB35\x3\x2"+
		"\x2\x2\xB35\xB33\x3\x2\x2\x2\xB35\xB36\x3\x2\x2\x2\xB36\xB37\x3\x2\x2"+
		"\x2\xB37\xB38\a\x348\x2\x2\xB38\xB3A\a\x348\x2\x2\xB39\xB26\x3\x2\x2\x2"+
		"\xB39\xB3A\x3\x2\x2\x2\xB3A\x113\x3\x2\x2\x2\xB3B\xB3C\aK\x2\x2\xB3C\xB3D"+
		"\a\x39\x2\x2\xB3D\xB3E\a\xBF\x2\x2\xB3E\xB3F\a\xAE\x2\x2\xB3F\xB40\x5"+
		"\x3E4\x1F3\x2\xB40\xB41\a\x17F\x2\x2\xB41\xB42\a\x347\x2\x2\xB42\xB43"+
		"\a\xB0\x2\x2\xB43\xB44\a\x335\x2\x2\xB44\xB45\a\x331\x2\x2\xB45\xB46\a"+
		"\x349\x2\x2\xB46\xB47\a\xAF\x2\x2\xB47\xB48\a\x335\x2\x2\xB48\xB49\a\x331"+
		"\x2\x2\xB49\xB4A\a\x348\x2\x2\xB4A\x115\x3\x2\x2\x2\xB4B\xB4C\a\n\x2\x2"+
		"\xB4C\xB4D\a\x1CB\x2\x2\xB4D\xB4E\x5\x3E4\x1F3\x2\xB4E\xB4F\a\x17F\x2"+
		"\x2\xB4F\xB50\a\x98\x2\x2\xB50\xB51\a\x335\x2\x2\xB51\xB56\a\x331\x2\x2"+
		"\xB52\xB53\a\x349\x2\x2\xB53\xB54\a\x2D1\x2\x2\xB54\xB55\a\x335\x2\x2"+
		"\xB55\xB57\a\x331\x2\x2\xB56\xB52\x3\x2\x2\x2\xB56\xB57\x3\x2\x2\x2\xB57"+
		"\x117\x3\x2\x2\x2\xB58\xB59\aK\x2\x2\xB59\xB5A\a\x1CB\x2\x2\xB5A\xB5B"+
		"\x5\x3E4\x1F3\x2\xB5B\xB5C\a\x17F\x2\x2\xB5C\xB5D\a\x98\x2\x2\xB5D\xB5E"+
		"\a\x335\x2\x2\xB5E\xB63\a\x331\x2\x2\xB5F\xB60\a\x349\x2\x2\xB60\xB61"+
		"\a\x2D1\x2\x2\xB61\xB62\a\x335\x2\x2\xB62\xB64\a\x331\x2\x2\xB63\xB5F"+
		"\x3\x2\x2\x2\xB63\xB64\x3\x2\x2\x2\xB64\xB69\x3\x2\x2\x2\xB65\xB66\a\x87"+
		"\x2\x2\xB66\xB67\a\x1CC\x2\x2\xB67\xB68\a\x29B\x2\x2\xB68\xB6A\x5\x3E4"+
		"\x1F3\x2\xB69\xB65\x3\x2\x2\x2\xB69\xB6A\x3\x2\x2\x2\xB6A\x119\x3\x2\x2"+
		"\x2\xB6B\xB6C\aK\x2\x2\xB6C\xB6D\aV\x2\x2\xB6D\xB6E\a\x2C9\x2\x2\xB6E"+
		"\xB6F\a\x1CB\x2\x2\xB6F\xB70\x5\x3E4\x1F3\x2\xB70\xB71\a\x17F\x2\x2\xB71"+
		"\xB72\a\x98\x2\x2\xB72\xB73\a\x335\x2\x2\xB73\xB78\a\x331\x2\x2\xB74\xB75"+
		"\a\x349\x2\x2\xB75\xB76\a\x2D1\x2\x2\xB76\xB77\a\x335\x2\x2\xB77\xB79"+
		"\a\x331\x2\x2\xB78\xB74\x3\x2\x2\x2\xB78\xB79\x3\x2\x2\x2\xB79\x11B\x3"+
		"\x2\x2\x2\xB7A\xB7B\a\n\x2\x2\xB7B\xB7C\a\x1CC\x2\x2\xB7C\xB7D\a\x29B"+
		"\x2\x2\xB7D\xB82\x5\x3E4\x1F3\x2\xB7E\xB7F\a\x8D\x2\x2\xB7F\xB80\a\x83"+
		"\x2\x2\xB80\xB81\a\x335\x2\x2\xB81\xB83\a\x331\x2\x2\xB82\xB7E\x3\x2\x2"+
		"\x2\xB82\xB83\x3\x2\x2\x2\xB83\xB85\x3\x2\x2\x2\xB84\xB86\t\x17\x2\x2"+
		"\xB85\xB84\x3\x2\x2\x2\xB85\xB86\x3\x2\x2\x2\xB86\x11D\x3\x2\x2\x2\xB87"+
		"\xB88\aK\x2\x2\xB88\xB89\a\x1CC\x2\x2\xB89\xB8A\a\x29B\x2\x2\xB8A\xB8B"+
		"\x5\x3E4\x1F3\x2\xB8B\xB8C\a\x8D\x2\x2\xB8C\xB8D\a\x83\x2\x2\xB8D\xB8E"+
		"\a\x335\x2\x2\xB8E\xB8F\a\x331\x2\x2\xB8F\x11F\x3\x2\x2\x2\xB90\xB91\a"+
		"K\x2\x2\xB91\xB92\as\x2\x2\xB92\xB93\a\xE1\x2\x2\xB93\xB94\x5\x3E4\x1F3"+
		"\x2\xB94\xB99\a\xE9\x2\x2\xB95\xB9A\a\x13B\x2\x2\xB96\xB9A\aV\x2\x2\xB97"+
		"\xB98\a\x29E\x2\x2\xB98\xB9A\x5\x3E4\x1F3\x2\xB99\xB95\x3\x2\x2\x2\xB99"+
		"\xB96\x3\x2\x2\x2\xB99\xB97\x3\x2\x2\x2\xB9A\xB9D\x3\x2\x2\x2\xB9B\xB9C"+
		"\a\x17F\x2\x2\xB9C\xB9E\a\x81\x2\x2\xB9D\xB9B\x3\x2\x2\x2\xB9D\xB9E\x3"+
		"\x2\x2\x2\xB9E\xB9F\x3\x2\x2\x2\xB9F\xBA4\a\x87\x2\x2\xBA0\xBA2\a\x349"+
		"\x2\x2\xBA1\xBA0\x3\x2\x2\x2\xBA1\xBA2\x3\x2\x2\x2\xBA2\xBA3\x3\x2\x2"+
		"\x2\xBA3\xBA5\x5\x3E4\x1F3\x2\xBA4\xBA1\x3\x2\x2\x2\xBA5\xBA6\x3\x2\x2"+
		"\x2\xBA6\xBA4\x3\x2\x2\x2\xBA6\xBA7\x3\x2\x2\x2\xBA7\xBA8\x3\x2\x2\x2"+
		"\xBA8\xBA9\a\x160\x2\x2\xBA9\xBAA\a\x13C\x2\x2\xBAA\xBAB\a\x331\x2\x2"+
		"\xBAB\xBAC\a\x349\x2\x2\xBAC\xBAD\a\x331\x2\x2\xBAD\x121\x3\x2\x2\x2\xBAE"+
		"\xBAF\t\x14\x2\x2\xBAF\xBB0\as\x2\x2\xBB0\xBB1\a\x13F\x2\x2\xBB1\xBB2"+
		"\x5\x3E4\x1F3\x2\xBB2\xBB3\a\xE9\x2\x2\xBB3\xBF7\a\x13B\x2\x2\xBB4\xBB6"+
		"\a\x349\x2\x2\xBB5\xBB4\x3\x2\x2\x2\xBB5\xBB6\x3\x2\x2\x2\xBB6\xBB7\x3"+
		"\x2\x2\x2\xBB7\xBB8\a\x4\x2\x2\xBB8\xBBC\as\x2\x2\xBB9\xBBA\x5\x3E4\x1F3"+
		"\x2\xBBA\xBBB\a\x342\x2\x2\xBBB\xBBD\x3\x2\x2\x2\xBBC\xBB9\x3\x2\x2\x2"+
		"\xBBC\xBBD\x3\x2\x2\x2\xBBD\xBBE\x3\x2\x2\x2\xBBE\xBBF\x5\x3E4\x1F3\x2"+
		"\xBBF\xBC0\a\x342\x2\x2\xBC0\xBC1\x5\x3E4\x1F3\x2\xBC1\xBF2\x3\x2\x2\x2"+
		"\xBC2\xBD0\a\x347\x2\x2\xBC3\xBCD\a\x141\x2\x2\xBC4\xBC6\a\x349\x2\x2"+
		"\xBC5\xBC4\x3\x2\x2\x2\xBC5\xBC6\x3\x2\x2\x2\xBC6\xBC7\x3\x2\x2\x2\xBC7"+
		"\xBC8\x5\x3E4\x1F3\x2\xBC8\xBC9\a\x335\x2\x2\xBC9\xBCA\t\x18\x2\x2\xBCA"+
		"\xBCC\x3\x2\x2\x2\xBCB\xBC5\x3\x2\x2\x2\xBCC\xBCF\x3\x2\x2\x2\xBCD\xBCB"+
		"\x3\x2\x2\x2\xBCD\xBCE\x3\x2\x2\x2\xBCE\xBD1\x3\x2\x2\x2\xBCF\xBCD\x3"+
		"\x2\x2\x2\xBD0\xBC3\x3\x2\x2\x2\xBD0\xBD1\x3\x2\x2\x2\xBD1\xBE6\x3\x2"+
		"\x2\x2\xBD2\xBD3\a\x186\x2\x2\xBD3\xBE0\a\x347\x2\x2\xBD4\xBD6\a\x349"+
		"\x2\x2\xBD5\xBD4\x3\x2\x2\x2\xBD5\xBD6\x3\x2\x2\x2\xBD6\xBDA\x3\x2\x2"+
		"\x2\xBD7\xBD8\x5\x3E4\x1F3\x2\xBD8\xBD9\a\x342\x2\x2\xBD9\xBDB\x3\x2\x2"+
		"\x2\xBDA\xBD7\x3\x2\x2\x2\xBDA\xBDB\x3\x2\x2\x2\xBDB\xBDC\x3\x2\x2\x2"+
		"\xBDC\xBDD\x5\x3E4\x1F3\x2\xBDD\xBDE\a\x342\x2\x2\xBDE\xBDF\x5\x3E4\x1F3"+
		"\x2\xBDF\xBE1\x3\x2\x2\x2\xBE0\xBD5\x3\x2\x2\x2\xBE1\xBE2\x3\x2\x2\x2"+
		"\xBE2\xBE0\x3\x2\x2\x2\xBE2\xBE3\x3\x2\x2\x2\xBE3\xBE4\x3\x2\x2\x2\xBE4"+
		"\xBE5\a\x348\x2\x2\xBE5\xBE7\x3\x2\x2\x2\xBE6\xBD2\x3\x2\x2\x2\xBE7\xBE8"+
		"\x3\x2\x2\x2\xBE8\xBE6\x3\x2\x2\x2\xBE8\xBE9\x3\x2\x2\x2\xBE9\xBEC\x3"+
		"\x2\x2\x2\xBEA\xBEB\a\x17C\x2\x2\xBEB\xBED\x5\x124\x93\x2\xBEC\xBEA\x3"+
		"\x2\x2\x2\xBEC\xBED\x3\x2\x2\x2\xBED\xBEE\x3\x2\x2\x2\xBEE\xBEF\a\x348"+
		"\x2\x2\xBEF\xBF1\x3\x2\x2\x2\xBF0\xBC2\x3\x2\x2\x2\xBF1\xBF4\x3\x2\x2"+
		"\x2\xBF2\xBF0\x3\x2\x2\x2\xBF2\xBF3\x3\x2\x2\x2\xBF3\xBF6\x3\x2\x2\x2"+
		"\xBF4\xBF2\x3\x2\x2\x2\xBF5\xBB5\x3\x2\x2\x2\xBF6\xBF9\x3\x2\x2\x2\xBF7"+
		"\xBF5\x3\x2\x2\x2\xBF7\xBF8\x3\x2\x2\x2\xBF8\xC0A\x3\x2\x2\x2\xBF9\xBF7"+
		"\x3\x2\x2\x2\xBFA\xBFC\a\x349\x2\x2\xBFB\xBFA\x3\x2\x2\x2\xBFB\xBFC\x3"+
		"\x2\x2\x2\xBFC\xBFD\x3\x2\x2\x2\xBFD\xBFE\ai\x2\x2\xBFE\xC02\as\x2\x2"+
		"\xBFF\xC00\x5\x3E4\x1F3\x2\xC00\xC01\a\x342\x2\x2\xC01\xC03\x3\x2\x2\x2"+
		"\xC02\xBFF\x3\x2\x2\x2\xC02\xC03\x3\x2\x2\x2\xC03\xC04\x3\x2\x2\x2\xC04"+
		"\xC05\x5\x3E4\x1F3\x2\xC05\xC06\a\x342\x2\x2\xC06\xC07\x5\x3E4\x1F3\x2"+
		"\xC07\xC09\x3\x2\x2\x2\xC08\xBFB\x3\x2\x2\x2\xC09\xC0C\x3\x2\x2\x2\xC0A"+
		"\xC08\x3\x2\x2\x2\xC0A\xC0B\x3\x2\x2\x2\xC0B\xC36\x3\x2\x2\x2\xC0C\xC0A"+
		"\x3\x2\x2\x2\xC0D\xC0E\a\x4\x2\x2\xC0E\xC12\a\x15C\x2\x2\xC0F\xC10\x5"+
		"\x3E4\x1F3\x2\xC10\xC11\a\x342\x2\x2\xC11\xC13\x3\x2\x2\x2\xC12\xC0F\x3"+
		"\x2\x2\x2\xC12\xC13\x3\x2\x2\x2\xC13\xC14\x3\x2\x2\x2\xC14\xC15\x5\x3E4"+
		"\x1F3\x2\xC15\xC16\a\x342\x2\x2\xC16\xC17\x5\x3E4\x1F3\x2\xC17\xC31\x3"+
		"\x2\x2\x2\xC18\xC19\a\x347\x2\x2\xC19\xC29\a\x141\x2\x2\xC1A\xC1C\a\x349"+
		"\x2\x2\xC1B\xC1A\x3\x2\x2\x2\xC1B\xC1C\x3\x2\x2\x2\xC1C\xC1D\x3\x2\x2"+
		"\x2\xC1D\xC1E\x5\x3E4\x1F3\x2\xC1E\xC27\a\x335\x2\x2\xC1F\xC21\a\x347"+
		"\x2\x2\xC20\xC1F\x3\x2\x2\x2\xC20\xC21\x3\x2\x2\x2\xC21\xC22\x3\x2\x2"+
		"\x2\xC22\xC24\a\x32D\x2\x2\xC23\xC25\a\x348\x2\x2\xC24\xC23\x3\x2\x2\x2"+
		"\xC24\xC25\x3\x2\x2\x2\xC25\xC28\x3\x2\x2\x2\xC26\xC28\a\x331\x2\x2\xC27"+
		"\xC20\x3\x2\x2\x2\xC27\xC26\x3\x2\x2\x2\xC28\xC2A\x3\x2\x2\x2\xC29\xC1B"+
		"\x3\x2\x2\x2\xC2A\xC2B\x3\x2\x2\x2\xC2B\xC29\x3\x2\x2\x2\xC2B\xC2C\x3"+
		"\x2\x2\x2\xC2C\xC2D\x3\x2\x2\x2\xC2D\xC2E\a\x348\x2\x2\xC2E\xC30\x3\x2"+
		"\x2\x2\xC2F\xC18\x3\x2\x2\x2\xC30\xC33\x3\x2\x2\x2\xC31\xC2F\x3\x2\x2"+
		"\x2\xC31\xC32\x3\x2\x2\x2\xC32\xC35\x3\x2\x2\x2\xC33\xC31\x3\x2\x2\x2"+
		"\xC34\xC0D\x3\x2\x2\x2\xC35\xC38\x3\x2\x2\x2\xC36\xC34\x3\x2\x2\x2\xC36"+
		"\xC37\x3\x2\x2\x2\xC37\xC46\x3\x2\x2\x2\xC38\xC36\x3\x2\x2\x2\xC39\xC3A"+
		"\ai\x2\x2\xC3A\xC3E\a\x15C\x2\x2\xC3B\xC3C\x5\x3E4\x1F3\x2\xC3C\xC3D\a"+
		"\x342\x2\x2\xC3D\xC3F\x3\x2\x2\x2\xC3E\xC3B\x3\x2\x2\x2\xC3E\xC3F\x3\x2"+
		"\x2\x2\xC3F\xC40\x3\x2\x2\x2\xC40\xC41\x5\x3E4\x1F3\x2\xC41\xC42\a\x342"+
		"\x2\x2\xC42\xC43\x5\x3E4\x1F3\x2\xC43\xC45\x3\x2\x2\x2\xC44\xC39\x3\x2"+
		"\x2\x2\xC45\xC48\x3\x2\x2\x2\xC46\xC44\x3\x2\x2\x2\xC46\xC47\x3\x2\x2"+
		"\x2\xC47\xC8A\x3\x2\x2\x2\xC48\xC46\x3\x2\x2\x2\xC49\xC4A\a\x17F\x2\x2"+
		"\xC4A\xC52\a\x347\x2\x2\xC4B\xC4D\a\x349\x2\x2\xC4C\xC4B\x3\x2\x2\x2\xC4C"+
		"\xC4D\x3\x2\x2\x2\xC4D\xC4E\x3\x2\x2\x2\xC4E\xC4F\a\xC0\x2\x2\xC4F\xC50"+
		"\a\x335\x2\x2\xC50\xC51\a\x32D\x2\x2\xC51\xC53\t\x19\x2\x2\xC52\xC4C\x3"+
		"\x2\x2\x2\xC52\xC53\x3\x2\x2\x2\xC53\xC5A\x3\x2\x2\x2\xC54\xC56\a\x349"+
		"\x2\x2\xC55\xC54\x3\x2\x2\x2\xC55\xC56\x3\x2\x2\x2\xC56\xC57\x3\x2\x2"+
		"\x2\xC57\xC58\au\x2\x2\xC58\xC59\a\x335\x2\x2\xC59\xC5B\t\x1A\x2\x2\xC5A"+
		"\xC55\x3\x2\x2\x2\xC5A\xC5B\x3\x2\x2\x2\xC5B\xC66\x3\x2\x2\x2\xC5C\xC5E"+
		"\a\x349\x2\x2\xC5D\xC5C\x3\x2\x2\x2\xC5D\xC5E\x3\x2\x2\x2\xC5E\xC5F\x3"+
		"\x2\x2\x2\xC5F\xC60\a\xC3\x2\x2\xC60\xC64\a\x335\x2\x2\xC61\xC62\a\x32D"+
		"\x2\x2\xC62\xC65\a\x2D0\x2\x2\xC63\xC65\a\xA1\x2\x2\xC64\xC61\x3\x2\x2"+
		"\x2\xC64\xC63\x3\x2\x2\x2\xC65\xC67\x3\x2\x2\x2\xC66\xC5D\x3\x2\x2\x2"+
		"\xC66\xC67\x3\x2\x2\x2\xC67\xC6F\x3\x2\x2\x2\xC68\xC6A\a\x349\x2\x2\xC69"+
		"\xC68\x3\x2\x2\x2\xC69\xC6A\x3\x2\x2\x2\xC6A\xC6B\x3\x2\x2\x2\xC6B\xC6C"+
		"\a\xC4\x2\x2\xC6C\xC6D\a\x335\x2\x2\xC6D\xC6E\a\x32D\x2\x2\xC6E\xC70\t"+
		"\x19\x2\x2\xC6F\xC69\x3\x2\x2\x2\xC6F\xC70\x3\x2\x2\x2\xC70\xC77\x3\x2"+
		"\x2\x2\xC71\xC73\a\x349\x2\x2\xC72\xC71\x3\x2\x2\x2\xC72\xC73\x3\x2\x2"+
		"\x2\xC73\xC74\x3\x2\x2\x2\xC74\xC75\a\xCA\x2\x2\xC75\xC76\a\x335\x2\x2"+
		"\xC76\xC78\t\x1B\x2\x2\xC77\xC72\x3\x2\x2\x2\xC77\xC78\x3\x2\x2\x2\xC78"+
		"\xC7F\x3\x2\x2\x2\xC79\xC7B\a\x349\x2\x2\xC7A\xC79\x3\x2\x2\x2\xC7A\xC7B"+
		"\x3\x2\x2\x2\xC7B\xC7C\x3\x2\x2\x2\xC7C\xC7D\a\x162\x2\x2\xC7D\xC7E\a"+
		"\x335\x2\x2\xC7E\xC80\t\t\x2\x2\xC7F\xC7A\x3\x2\x2\x2\xC7F\xC80\x3\x2"+
		"\x2\x2\xC80\xC87\x3\x2\x2\x2\xC81\xC83\a\x349\x2\x2\xC82\xC81\x3\x2\x2"+
		"\x2\xC82\xC83\x3\x2\x2\x2\xC83\xC84\x3\x2\x2\x2\xC84\xC85\a\x153\x2\x2"+
		"\xC85\xC86\a\x335\x2\x2\xC86\xC88\t\t\x2\x2\xC87\xC82\x3\x2\x2\x2\xC87"+
		"\xC88\x3\x2\x2\x2\xC88\xC89\x3\x2\x2\x2\xC89\xC8B\a\x348\x2\x2\xC8A\xC49"+
		"\x3\x2\x2\x2\xC8A\xC8B\x3\x2\x2\x2\xC8B\xC8F\x3\x2\x2\x2\xC8C\xC8D\a\x14F"+
		"\x2\x2\xC8D\xC8E\a\x335\x2\x2\xC8E\xC90\t\x1C\x2\x2\xC8F\xC8C\x3\x2\x2"+
		"\x2\xC8F\xC90\x3\x2\x2\x2\xC90\x123\x3\x2\x2\x2\xC91\xC93\a\x349\x2\x2"+
		"\xC92\xC91\x3\x2\x2\x2\xC92\xC93\x3\x2\x2\x2\xC93\xC95\x3\x2\x2\x2\xC94"+
		"\xC96\t\x1D\x2\x2\xC95\xC94\x3\x2\x2\x2\xC95\xC96\x3\x2\x2\x2\xC96\xC98"+
		"\x3\x2\x2\x2\xC97\xC99\a\xE0\x2\x2\xC98\xC97\x3\x2\x2\x2\xC98\xC99\x3"+
		"\x2\x2\x2\xC99\xC9F\x3\x2\x2\x2\xC9A\xCA0\x5\x126\x94\x2\xC9B\xC9C\a\x347"+
		"\x2\x2\xC9C\xC9D\x5\x124\x93\x2\xC9D\xC9E\a\x348\x2\x2\xC9E\xCA0\x3\x2"+
		"\x2\x2\xC9F\xC9A\x3\x2\x2\x2\xC9F\xC9B\x3\x2\x2\x2\xCA0\xCA2\x3\x2\x2"+
		"\x2\xCA1\xC92\x3\x2\x2\x2\xCA2\xCA3\x3\x2\x2\x2\xCA3\xCA1\x3\x2\x2\x2"+
		"\xCA3\xCA4\x3\x2\x2\x2\xCA4\x125\x3\x2\x2\x2\xCA5\xCAB\x5\x128\x95\x2"+
		"\xCA6\xCA7\a\x347\x2\x2\xCA7\xCA8\x5\x124\x93\x2\xCA8\xCA9\a\x348\x2\x2"+
		"\xCA9\xCAB\x3\x2\x2\x2\xCAA\xCA5\x3\x2\x2\x2\xCAA\xCA6\x3\x2\x2\x2\xCAB"+
		"\x127\x3\x2\x2\x2\xCAC\xCC9\x5\x3E4\x1F3\x2\xCAD\xCB8\x5\x3E4\x1F3\x2"+
		"\xCAE\xCAF\x5\x3E4\x1F3\x2\xCAF\xCB0\a\x342\x2\x2\xCB0\xCB2\x3\x2\x2\x2"+
		"\xCB1\xCAE\x3\x2\x2\x2\xCB1\xCB2\x3\x2\x2\x2\xCB2\xCB3\x3\x2\x2\x2\xCB3"+
		"\xCB4\x5\x3E4\x1F3\x2\xCB4\xCB5\a\x342\x2\x2\xCB5\xCB6\x5\x3E4\x1F3\x2"+
		"\xCB6\xCB8\x3\x2\x2\x2\xCB7\xCAD\x3\x2\x2\x2\xCB7\xCB1\x3\x2\x2\x2\xCB8"+
		"\xCC4\x3\x2\x2\x2\xCB9\xCC5\a\x335\x2\x2\xCBA\xCBB\a\x337\x2\x2\xCBB\xCC5"+
		"\a\x336\x2\x2\xCBC\xCBD\a\x338\x2\x2\xCBD\xCC5\a\x335\x2\x2\xCBE\xCC5"+
		"\a\x336\x2\x2\xCBF\xCC0\a\x336\x2\x2\xCC0\xCC5\a\x335\x2\x2\xCC1\xCC5"+
		"\a\x337\x2\x2\xCC2\xCC3\a\x337\x2\x2\xCC3\xCC5\a\x335\x2\x2\xCC4\xCB9"+
		"\x3\x2\x2\x2\xCC4\xCBA\x3\x2\x2\x2\xCC4\xCBC\x3\x2\x2\x2\xCC4\xCBE\x3"+
		"\x2\x2\x2\xCC4\xCBF\x3\x2\x2\x2\xCC4\xCC1\x3\x2\x2\x2\xCC4\xCC2\x3\x2"+
		"\x2\x2\xCC5\xCC6\x3\x2\x2\x2\xCC6\xCC7\t\x18\x2\x2\xCC7\xCC9\x3\x2\x2"+
		"\x2\xCC8\xCAC\x3\x2\x2\x2\xCC8\xCB7\x3\x2\x2\x2\xCC9\xCE5\x3\x2\x2\x2"+
		"\xCCA\xCCB\x5\x3E4\x1F3\x2\xCCB\xCCC\a\x342\x2\x2\xCCC\xCCE\x3\x2\x2\x2"+
		"\xCCD\xCCA\x3\x2\x2\x2\xCCD\xCCE\x3\x2\x2\x2\xCCE\xCCF\x3\x2\x2\x2\xCCF"+
		"\xCD0\x5\x3E4\x1F3\x2\xCD0\xCD1\a\x342\x2\x2\xCD1\xCD2\x5\x3E4\x1F3\x2"+
		"\xCD2\xCE0\a\x347\x2\x2\xCD3\xCE1\x5\x3E4\x1F3\x2\xCD4\xCD5\x5\x3E4\x1F3"+
		"\x2\xCD5\xCD6\a\x342\x2\x2\xCD6\xCD8\x3\x2\x2\x2\xCD7\xCD4\x3\x2\x2\x2"+
		"\xCD7\xCD8\x3\x2\x2\x2\xCD8\xCD9\x3\x2\x2\x2\xCD9\xCDA\x5\x3E4\x1F3\x2"+
		"\xCDA\xCDB\a\x342\x2\x2\xCDB\xCDC\x5\x3E4\x1F3\x2\xCDC\xCDD\x3\x2\x2\x2"+
		"\xCDD\xCDE\a\x349\x2\x2\xCDE\xCDF\t\x18\x2\x2\xCDF\xCE1\x3\x2\x2\x2\xCE0"+
		"\xCD3\x3\x2\x2\x2\xCE0\xCD7\x3\x2\x2\x2\xCE1\xCE2\x3\x2\x2\x2\xCE2\xCE3"+
		"\a\x348\x2\x2\xCE3\xCE5\x3\x2\x2\x2\xCE4\xCC8\x3\x2\x2\x2\xCE4\xCCD\x3"+
		"\x2\x2\x2\xCE5\x129\x3\x2\x2\x2\xCE6\xCE7\aK\x2\x2\xCE7\xCE8\a}\x2\x2"+
		"\xCE8\xCE9\a\x1CF\x2\x2\xCE9\xCEA\a\x148\x2\x2\xCEA\xCEB\x5\x3E4\x1F3"+
		"\x2\xCEB\xCEC\a\x17F\x2\x2\xCEC\xD05\a\x347\x2\x2\xCED\xCEE\a\x242\x2"+
		"\x2\xCEE\xCEF\a\x335\x2\x2\xCEF\xCF1\t\x1E\x2\x2\xCF0\xCF2\a\x349\x2\x2"+
		"\xCF1\xCF0\x3\x2\x2\x2\xCF1\xCF2\x3\x2\x2\x2\xCF2\xD06\x3\x2\x2\x2\xCF3"+
		"\xCF4\a\x2BD\x2\x2\xCF4\xCF5\a\x335\x2\x2\xCF5\xCF7\t\x1E\x2\x2\xCF6\xCF8"+
		"\a\x349\x2\x2\xCF7\xCF6\x3\x2\x2\x2\xCF7\xCF8\x3\x2\x2\x2\xCF8\xD06\x3"+
		"\x2\x2\x2\xCF9\xCFA\a\x1CB\x2\x2\xCFA\xCFB\a\x335\x2\x2\xCFB\xD06\x5\x3E4"+
		"\x1F3\x2\xCFC\xCFD\a=\x2\x2\xCFD\xCFE\a\x335\x2\x2\xCFE\xD06\a\x331\x2"+
		"\x2\xCFF\xD00\a\x10A\x2\x2\xD00\xD01\a\x335\x2\x2\xD01\xD06\x5\x3C2\x1E2"+
		"\x2\xD02\xD03\a\x30B\x2\x2\xD03\xD04\a\x335\x2\x2\xD04\xD06\t\x1F\x2\x2"+
		"\xD05\xCED\x3\x2\x2\x2\xD05\xCF3\x3\x2\x2\x2\xD05\xCF9\x3\x2\x2\x2\xD05"+
		"\xCFC\x3\x2\x2\x2\xD05\xCFF\x3\x2\x2\x2\xD05\xD02\x3\x2\x2\x2\xD06\xD07"+
		"\x3\x2\x2\x2\xD07\xD05\x3\x2\x2\x2\xD07\xD08\x3\x2\x2\x2\xD08\xD09\x3"+
		"\x2\x2\x2\xD09\xD0A\a\x348\x2\x2\xD0A\x12B\x3\x2\x2\x2\xD0B\xD0C\a\n\x2"+
		"\x2\xD0C\xD0D\a}\x2\x2\xD0D\xD0E\a\x1CF\x2\x2\xD0E\xD0F\a\x148\x2\x2\xD0F"+
		"\xD10\x5\x3E4\x1F3\x2\xD10\xD20\a\x141\x2\x2\xD11\xD12\a\x242\x2\x2\xD12"+
		"\xD13\a\x335\x2\x2\xD13\xD15\t\x1E\x2\x2\xD14\xD16\a\x349\x2\x2\xD15\xD14"+
		"\x3\x2\x2\x2\xD15\xD16\x3\x2\x2\x2\xD16\xD21\x3\x2\x2\x2\xD17\xD18\a\x2BD"+
		"\x2\x2\xD18\xD19\a\x335\x2\x2\xD19\xD1B\t\x1E\x2\x2\xD1A\xD1C\a\x349\x2"+
		"\x2\xD1B\xD1A\x3\x2\x2\x2\xD1B\xD1C\x3\x2\x2\x2\xD1C\xD21\x3\x2\x2\x2"+
		"\xD1D\xD1E\a\x1CB\x2\x2\xD1E\xD1F\a\x335\x2\x2\xD1F\xD21\x5\x3E4\x1F3"+
		"\x2\xD20\xD11\x3\x2\x2\x2\xD20\xD17\x3\x2\x2\x2\xD20\xD1D\x3\x2\x2\x2"+
		"\xD21\xD22\x3\x2\x2\x2\xD22\xD20\x3\x2\x2\x2\xD22\xD23\x3\x2\x2\x2\xD23"+
		"\xD3B\x3\x2\x2\x2\xD24\xD25\a\n\x2\x2\xD25\xD26\a}\x2\x2\xD26\xD27\a\x1CF"+
		"\x2\x2\xD27\xD28\a\x148\x2\x2\xD28\xD29\x5\x3E4\x1F3\x2\xD29\xD2A\a\x17F"+
		"\x2\x2\xD2A\xD2B\a\x347\x2\x2\xD2B\xD2C\a\x30B\x2\x2\xD2C\xD2D\a\x335"+
		"\x2\x2\xD2D\xD2E\a\x1AD\x2\x2\xD2E\xD2F\a\x349\x2\x2\xD2F\xD30\a\x242"+
		"\x2\x2\xD30\xD31\a\x335\x2\x2\xD31\xD36\a\x331\x2\x2\xD32\xD33\a\x349"+
		"\x2\x2\xD33\xD34\a\x1CB\x2\x2\xD34\xD35\a\x335\x2\x2\xD35\xD37\x5\x3E4"+
		"\x1F3\x2\xD36\xD32\x3\x2\x2\x2\xD36\xD37\x3\x2\x2\x2\xD37\xD38\x3\x2\x2"+
		"\x2\xD38\xD39\a\x348\x2\x2\xD39\xD3B\x3\x2\x2\x2\xD3A\xD0B\x3\x2\x2\x2"+
		"\xD3A\xD24\x3\x2\x2\x2\xD3B\x12D\x3\x2\x2\x2\xD3C\xD3D\a\n\x2\x2\xD3D"+
		"\xD3E\a}\x2\x2\xD3E\xD3F\a\xB4\x2\x2\xD3F\xD42\x5\x3E4\x1F3\x2\xD40\xD41"+
		"\a\x15\x2\x2\xD41\xD43\x5\x3E4\x1F3\x2\xD42\xD40\x3\x2\x2\x2\xD42\xD43"+
		"\x3\x2\x2\x2\xD43\xD44\x3\x2\x2\x2\xD44\xD45\t \x2\x2\xD45\xD46\a\x347"+
		"\x2\x2\xD46\xD47\a\x1C2\x2\x2\xD47\xD4B\a\x335\x2\x2\xD48\xD4C\a\x331"+
		"\x2\x2\xD49\xD4C\a\x332\x2\x2\xD4A\xD4C\a\xD9\x2\x2\xD4B\xD48\x3\x2\x2"+
		"\x2\xD4B\xD49\x3\x2\x2\x2\xD4B\xD4A\x3\x2\x2\x2\xD4C\xD4D\x3\x2\x2\x2"+
		"\xD4D\xD4E\a\x349\x2\x2\xD4E\xD4F\a\x100\x2\x2\xD4F\xD51\a\x335\x2\x2"+
		"\xD50\xD52\t!\x2\x2\xD51\xD50\x3\x2\x2\x2\xD51\xD52\x3\x2\x2\x2\xD52\xD53"+
		"\x3\x2\x2\x2\xD53\xD54\a\x348\x2\x2\xD54\xD55\x3\x2\x2\x2\xD55\xD5F\a"+
		"\x17F\x2\x2\xD56\xD58\a\x349\x2\x2\xD57\xD56\x3\x2\x2\x2\xD57\xD58\x3"+
		"\x2\x2\x2\xD58\xD59\x3\x2\x2\x2\xD59\xD5A\a\xB2\x2\x2\xD5A\xD5B\a\x335"+
		"\x2\x2\xD5B\xD60\t\"\x2\x2\xD5C\xD5D\aU\x2\x2\xD5D\xD5E\a\x335\x2\x2\xD5E"+
		"\xD60\x5\x3E4\x1F3\x2\xD5F\xD57\x3\x2\x2\x2\xD5F\xD5C\x3\x2\x2\x2\xD60"+
		"\xD61\x3\x2\x2\x2\xD61\xD5F\x3\x2\x2\x2\xD61\xD62\x3\x2\x2\x2\xD62\xD63"+
		"\x3\x2\x2\x2\xD63\xD64\a\x348\x2\x2\xD64\x12F\x3\x2\x2\x2\xD65\xD66\a"+
		"K\x2\x2\xD66\xD67\a}\x2\x2\xD67\xD68\a\xB4\x2\x2\xD68\xD6B\x5\x3E4\x1F3"+
		"\x2\xD69\xD6A\a\x15\x2\x2\xD6A\xD6C\x5\x3E4\x1F3\x2\xD6B\xD69\x3\x2\x2"+
		"\x2\xD6B\xD6C\x3\x2\x2\x2\xD6C\xD6D\x3\x2\x2\x2\xD6D\xD6F\a\x8D\x2\x2"+
		"\xD6E\xD70\a\x349\x2\x2\xD6F\xD6E\x3\x2\x2\x2\xD6F\xD70\x3\x2\x2\x2\xD70"+
		"\xD72\x3\x2\x2\x2\xD71\xD73\a\x347\x2\x2\xD72\xD71\x3\x2\x2\x2\xD72\xD73"+
		"\x3\x2\x2\x2\xD73\xD76\x3\x2\x2\x2\xD74\xD75\a\x1C2\x2\x2\xD75\xD77\a"+
		"\x335\x2\x2\xD76\xD74\x3\x2\x2\x2\xD76\xD77\x3\x2\x2\x2\xD77\xD7B\x3\x2"+
		"\x2\x2\xD78\xD7C\a\x331\x2\x2\xD79\xD7C\a\x332\x2\x2\xD7A\xD7C\a\xD9\x2"+
		"\x2\xD7B\xD78\x3\x2\x2\x2\xD7B\xD79\x3\x2\x2\x2\xD7B\xD7A\x3\x2\x2\x2"+
		"\xD7C\xD84\x3\x2\x2\x2\xD7D\xD7E\a\x349\x2\x2\xD7E\xD7F\a\x100\x2\x2\xD7F"+
		"\xD81\a\x335\x2\x2\xD80\xD82\t!\x2\x2\xD81\xD80\x3\x2\x2\x2\xD81\xD82"+
		"\x3\x2\x2\x2\xD82\xD83\x3\x2\x2\x2\xD83\xD85\a\x348\x2\x2\xD84\xD7D\x3"+
		"\x2\x2\x2\xD84\xD85\x3\x2\x2\x2\xD85\xD95\x3\x2\x2\x2\xD86\xD90\a\x17F"+
		"\x2\x2\xD87\xD89\a\x349\x2\x2\xD88\xD87\x3\x2\x2\x2\xD88\xD89\x3\x2\x2"+
		"\x2\xD89\xD8A\x3\x2\x2\x2\xD8A\xD8B\a\xB2\x2\x2\xD8B\xD8C\a\x335\x2\x2"+
		"\xD8C\xD91\t\"\x2\x2\xD8D\xD8E\aU\x2\x2\xD8E\xD8F\a\x335\x2\x2\xD8F\xD91"+
		"\x5\x3E4\x1F3\x2\xD90\xD88\x3\x2\x2\x2\xD90\xD8D\x3\x2\x2\x2\xD91\xD92"+
		"\x3\x2\x2\x2\xD92\xD90\x3\x2\x2\x2\xD92\xD93\x3\x2\x2\x2\xD93\xD94\x3"+
		"\x2\x2\x2\xD94\xD96\a\x348\x2\x2\xD95\xD86\x3\x2\x2\x2\xD95\xD96\x3\x2"+
		"\x2\x2\xD96\x131\x3\x2\x2\x2\xD97\xD98\a\n\x2\x2\xD98\xD99\a}\x2\x2\xD99"+
		"\xD9A\a\x2BC\x2\x2\xD9A\xD9D\a\x28F\x2\x2\xD9B\xD9E\x5\x3E4\x1F3\x2\xD9C"+
		"\xD9E\a\x1DB\x2\x2\xD9D\xD9B\x3\x2\x2\x2\xD9D\xD9C\x3\x2\x2\x2\xD9E\xD9F"+
		"\x3\x2\x2\x2\xD9F\xDA0\a\x17F\x2\x2\xDA0\xDA1\a\x347\x2\x2\xDA1\xDA2\a"+
		"\x24C\x2\x2\xDA2\xDA3\a\x335\x2\x2\xDA3\xDC9\a\x32D\x2\x2\xDA4\xDA6\a"+
		"\x349\x2\x2\xDA5\xDA4\x3\x2\x2\x2\xDA5\xDA6\x3\x2\x2\x2\xDA6\xDA7\x3\x2"+
		"\x2\x2\xDA7\xDA8\a\x18D\x2\x2\xDA8\xDA9\a\x1C8\x2\x2\xDA9\xDB7\a\x335"+
		"\x2\x2\xDAA\xDB8\a\x19E\x2\x2\xDAB\xDAD\a\x349\x2\x2\xDAC\xDAB\x3\x2\x2"+
		"\x2\xDAC\xDAD\x3\x2\x2\x2\xDAD\xDAE\x3\x2\x2\x2\xDAE\xDAF\a\x32D\x2\x2"+
		"\xDAF\xDB0\a\x160\x2\x2\xDB0\xDB4\a\x32D\x2\x2\xDB1\xDB2\a\x349\x2\x2"+
		"\xDB2\xDB4\a\x32D\x2\x2\xDB3\xDAC\x3\x2\x2\x2\xDB3\xDB1\x3\x2\x2\x2\xDB4"+
		"\xDB5\x3\x2\x2\x2\xDB5\xDB3\x3\x2\x2\x2\xDB5\xDB6\x3\x2\x2\x2\xDB6\xDB8"+
		"\x3\x2\x2\x2\xDB7\xDAA\x3\x2\x2\x2\xDB7\xDB3\x3\x2\x2\x2\xDB8\xDCA\x3"+
		"\x2\x2\x2\xDB9\xDBA\a\x278\x2\x2\xDBA\xDC5\a\x335\x2\x2\xDBB\xDBD\a\x349"+
		"\x2\x2\xDBC\xDBB\x3\x2\x2\x2\xDBC\xDBD\x3\x2\x2\x2\xDBD\xDBE\x3\x2\x2"+
		"\x2\xDBE\xDBF\a\x32D\x2\x2\xDBF\xDC0\a\x160\x2\x2\xDC0\xDC6\a\x32D\x2"+
		"\x2\xDC1\xDC3\a\x349\x2\x2\xDC2\xDC1\x3\x2\x2\x2\xDC2\xDC3\x3\x2\x2\x2"+
		"\xDC3\xDC4\x3\x2\x2\x2\xDC4\xDC6\a\x32D\x2\x2\xDC5\xDBC\x3\x2\x2\x2\xDC5"+
		"\xDC2\x3\x2\x2\x2\xDC6\xDC7\x3\x2\x2\x2\xDC7\xDC5\x3\x2\x2\x2\xDC7\xDC8"+
		"\x3\x2\x2\x2\xDC8\xDCA\x3\x2\x2\x2\xDC9\xDA5\x3\x2\x2\x2\xDC9\xDB9\x3"+
		"\x2\x2\x2\xDCA\xDD1\x3\x2\x2\x2\xDCB\xDCD\a\x349\x2\x2\xDCC\xDCB\x3\x2"+
		"\x2\x2\xDCC\xDCD\x3\x2\x2\x2\xDCD\xDCE\x3\x2\x2\x2\xDCE\xDCF\a\x250\x2"+
		"\x2\xDCF\xDD0\a\x335\x2\x2\xDD0\xDD2\a\x32D\x2\x2\xDD1\xDCC\x3\x2\x2\x2"+
		"\xDD1\xDD2\x3\x2\x2\x2\xDD2\xDD9\x3\x2\x2\x2\xDD3\xDD5\a\x349\x2\x2\xDD4"+
		"\xDD3\x3\x2\x2\x2\xDD4\xDD5\x3\x2\x2\x2\xDD5\xDD6\x3\x2\x2\x2\xDD6\xDD7"+
		"\a\x251\x2\x2\xDD7\xDD8\a\x335\x2\x2\xDD8\xDDA\a\x32D\x2\x2\xDD9\xDD4"+
		"\x3\x2\x2\x2\xDD9\xDDA\x3\x2\x2\x2\xDDA\xDDB\x3\x2\x2\x2\xDDB\xDDC\a\x348"+
		"\x2\x2\xDDC\x133\x3\x2\x2\x2\xDDD\xDDE\aK\x2\x2\xDDE\xDDF\a}\x2\x2\xDDF"+
		"\xDE0\a\x2BC\x2\x2\xDE0\xDE1\a\x28F\x2\x2\xDE1\xDE2\x5\x3E4\x1F3\x2\xDE2"+
		"\xDE3\a\x17F\x2\x2\xDE3\xDE4\a\x347\x2\x2\xDE4\xDE5\a\x24C\x2\x2\xDE5"+
		"\xDE6\a\x335\x2\x2\xDE6\xE0C\a\x32D\x2\x2\xDE7\xDE9\a\x349\x2\x2\xDE8"+
		"\xDE7\x3\x2\x2\x2\xDE8\xDE9\x3\x2\x2\x2\xDE9\xDEA\x3\x2\x2\x2\xDEA\xDEB"+
		"\a\x18D\x2\x2\xDEB\xDEC\a\x1C8\x2\x2\xDEC\xDFA\a\x335\x2\x2\xDED\xDFB"+
		"\a\x19E\x2\x2\xDEE\xDF0\a\x349\x2\x2\xDEF\xDEE\x3\x2\x2\x2\xDEF\xDF0\x3"+
		"\x2\x2\x2\xDF0\xDF1\x3\x2\x2\x2\xDF1\xDF2\a\x32D\x2\x2\xDF2\xDF3\a\x160"+
		"\x2\x2\xDF3\xDF7\a\x32D\x2\x2\xDF4\xDF5\a\x349\x2\x2\xDF5\xDF7\a\x32D"+
		"\x2\x2\xDF6\xDEF\x3\x2\x2\x2\xDF6\xDF4\x3\x2\x2\x2\xDF7\xDF8\x3\x2\x2"+
		"\x2\xDF8\xDF6\x3\x2\x2\x2\xDF8\xDF9\x3\x2\x2\x2\xDF9\xDFB\x3\x2\x2\x2"+
		"\xDFA\xDED\x3\x2\x2\x2\xDFA\xDF6\x3\x2\x2\x2\xDFB\xE0D\x3\x2\x2\x2\xDFC"+
		"\xDFD\a\x278\x2\x2\xDFD\xE08\a\x335\x2\x2\xDFE\xE00\a\x349\x2\x2\xDFF"+
		"\xDFE\x3\x2\x2\x2\xDFF\xE00\x3\x2\x2\x2\xE00\xE01\x3\x2\x2\x2\xE01\xE02"+
		"\a\x32D\x2\x2\xE02\xE03\a\x160\x2\x2\xE03\xE09\a\x32D\x2\x2\xE04\xE06"+
		"\a\x349\x2\x2\xE05\xE04\x3\x2\x2\x2\xE05\xE06\x3\x2\x2\x2\xE06\xE07\x3"+
		"\x2\x2\x2\xE07\xE09\a\x32D\x2\x2\xE08\xDFF\x3\x2\x2\x2\xE08\xE05\x3\x2"+
		"\x2\x2\xE09\xE0A\x3\x2\x2\x2\xE0A\xE08\x3\x2\x2\x2\xE0A\xE0B\x3\x2\x2"+
		"\x2\xE0B\xE0D\x3\x2\x2\x2\xE0C\xDE8\x3\x2\x2\x2\xE0C\xDFC\x3\x2\x2\x2"+
		"\xE0D\xE14\x3\x2\x2\x2\xE0E\xE10\a\x349\x2\x2\xE0F\xE0E\x3\x2\x2\x2\xE0F"+
		"\xE10\x3\x2\x2\x2\xE10\xE11\x3\x2\x2\x2\xE11\xE12\a\x250\x2\x2\xE12\xE13"+
		"\a\x335\x2\x2\xE13\xE15\a\x32D\x2\x2\xE14\xE0F\x3\x2\x2\x2\xE14\xE15\x3"+
		"\x2\x2\x2\xE15\xE1C\x3\x2\x2\x2\xE16\xE18\a\x349\x2\x2\xE17\xE16\x3\x2"+
		"\x2\x2\xE17\xE18\x3\x2\x2\x2\xE18\xE19\x3\x2\x2\x2\xE19\xE1A\a\x251\x2"+
		"\x2\xE1A\xE1B\a\x335\x2\x2\xE1B\xE1D\a\x32D\x2\x2\xE1C\xE17\x3\x2\x2\x2"+
		"\xE1C\xE1D\x3\x2\x2\x2\xE1D\xE1E\x3\x2\x2\x2\xE1E\xE1F\a\x348\x2\x2\xE1F"+
		"\x135\x3\x2\x2\x2\xE20\xE21\a\n\x2\x2\xE21\xE22\a\x212\x2\x2\xE22\xE23"+
		"\a\x1B5\x2\x2\xE23\xE2E\x5\x3E4\x1F3\x2\xE24\xE29\a\x2AB\x2\x2\xE25\xE26"+
		"\a\x17F\x2\x2\xE26\xE27\a\x185\x2\x2\xE27\xE28\a\x335\x2\x2\xE28\xE2A"+
		"\t\t\x2\x2\xE29\xE25\x3\x2\x2\x2\xE29\xE2A\x3\x2\x2\x2\xE2A\xE2F\x3\x2"+
		"\x2\x2\xE2B\xE2F\a\x2B4\x2\x2\xE2C\xE2D\a\x10\x2\x2\xE2D\xE2F\a[\x2\x2"+
		"\xE2E\xE24\x3\x2\x2\x2\xE2E\xE2B\x3\x2\x2\x2\xE2E\xE2C\x3\x2\x2\x2\xE2F"+
		"\x137\x3\x2\x2\x2\xE30\xE31\aK\x2\x2\xE31\xE32\a\x212\x2\x2\xE32\xE33"+
		"\a\x1B5\x2\x2\xE33\xE37\x5\x3E4\x1F3\x2\xE34\xE35\a\xE9\x2\x2\xE35\xE36"+
		"\a\x204\x2\x2\xE36\xE38\x5\x3E4\x1F3\x2\xE37\xE34\x3\x2\x2\x2\xE37\xE38"+
		"\x3\x2\x2\x2\xE38\xE3C\x3\x2\x2\x2\xE39\xE3A\a\x9D\x2\x2\xE3A\xE3B\a\x28D"+
		"\x2\x2\xE3B\xE3D\a\x331\x2\x2\xE3C\xE39\x3\x2\x2\x2\xE3C\xE3D\x3\x2\x2"+
		"\x2\xE3D\xE42\x3\x2\x2\x2\xE3E\xE3F\a\x17F\x2\x2\xE3F\xE40\a\x185\x2\x2"+
		"\xE40\xE41\a\x335\x2\x2\xE41\xE43\t\t\x2\x2\xE42\xE3E\x3\x2\x2\x2\xE42"+
		"\xE43\x3\x2\x2\x2\xE43\xE46\x3\x2\x2\x2\xE44\xE45\a\x10\x2\x2\xE45\xE47"+
		"\a[\x2\x2\xE46\xE44\x3\x2\x2\x2\xE46\xE47\x3\x2\x2\x2\xE47\xE4A\x3\x2"+
		"\x2\x2\xE48\xE49\a\x15\x2\x2\xE49\xE4B\x5\x3E4\x1F3\x2\xE4A\xE48\x3\x2"+
		"\x2\x2\xE4A\xE4B\x3\x2\x2\x2\xE4B\x139\x3\x2\x2\x2\xE4C\xE4D\a\n\x2\x2"+
		"\xE4D\xE4E\a\x212\x2\x2\xE4E\xE4F\a\x2EE\x2\x2\xE4F\xE5D\x5\x3E4\x1F3"+
		"\x2\xE50\xE51\a\x4\x2\x2\xE51\xE52\a\x331\x2\x2\xE52\xE53\a\xB2\x2\x2"+
		"\xE53\xE5E\t#\x2\x2\xE54\xE5B\ai\x2\x2\xE55\xE56\a\x331\x2\x2\xE56\xE57"+
		"\a\xB2\x2\x2\xE57\xE5C\t#\x2\x2\xE58\xE59\a\x6\x2\x2\xE59\xE5C\t#\x2\x2"+
		"\xE5A\xE5C\a\x6\x2\x2\xE5B\xE55\x3\x2\x2\x2\xE5B\xE58\x3\x2\x2\x2\xE5B"+
		"\xE5A\x3\x2\x2\x2\xE5C\xE5E\x3\x2\x2\x2\xE5D\xE50\x3\x2\x2\x2\xE5D\xE54"+
		"\x3\x2\x2\x2\xE5E\x13B\x3\x2\x2\x2\xE5F\xE60\aK\x2\x2\xE60\xE61\a\x212"+
		"\x2\x2\xE61\xE62\a\x2EE\x2\x2\xE62\xE6E\x5\x3E4\x1F3\x2\xE63\xE6C\a\x8D"+
		"\x2\x2\xE64\xE65\x5\x3AC\x1D7\x2\xE65\xE66\a\x342\x2\x2\xE66\xE68\x3\x2"+
		"\x2\x2\xE67\xE64\x3\x2\x2\x2\xE67\xE68\x3\x2\x2\x2\xE68\xE69\x3\x2\x2"+
		"\x2\xE69\xE6D\x5\x3E4\x1F3\x2\xE6A\xE6B\a\x2F8\x2\x2\xE6B\xE6D\a\x2EE"+
		"\x2\x2\xE6C\xE67\x3\x2\x2\x2\xE6C\xE6A\x3\x2\x2\x2\xE6D\xE6F\x3\x2\x2"+
		"\x2\xE6E\xE63\x3\x2\x2\x2\xE6E\xE6F\x3\x2\x2\x2\xE6F\xE72\x3\x2\x2\x2"+
		"\xE70\xE71\a\x15\x2\x2\xE71\xE73\x5\x3E4\x1F3\x2\xE72\xE70\x3\x2\x2\x2"+
		"\xE72\xE73\x3\x2\x2\x2\xE73\x13D\x3\x2\x2\x2\xE74\xE75\a\n\x2\x2\xE75"+
		"\xE76\a\x245\x2\x2\xE76\xEBA\x5\x3E4\x1F3\x2\xE77\xE79\t\x17\x2\x2\xE78"+
		"\xE77\x3\x2\x2\x2\xE78\xE79\x3\x2\x2\x2\xE79\xEBB\x3\x2\x2\x2\xE7A\xE88"+
		"\a\x17F\x2\x2\xE7B\xE7C\a\xF8\x2\x2\xE7C\xE80\a\x335\x2\x2\xE7D\xE81\a"+
		"\x331\x2\x2\xE7E\xE7F\a\x332\x2\x2\xE7F\xE81\a\x96\x2\x2\xE80\xE7D\x3"+
		"\x2\x2\x2\xE80\xE7E\x3\x2\x2\x2\xE81\xE85\x3\x2\x2\x2\xE82\xE84\t$\x2"+
		"\x2\xE83\xE82\x3\x2\x2\x2\xE84\xE87\x3\x2\x2\x2\xE85\xE83\x3\x2\x2\x2"+
		"\xE85\xE86\x3\x2\x2\x2\xE86\xE89\x3\x2\x2\x2\xE87\xE85\x3\x2\x2\x2\xE88"+
		"\xE7B\x3\x2\x2\x2\xE88\xE89\x3\x2\x2\x2\xE89\xE93\x3\x2\x2\x2\xE8A\xE8B"+
		"\a\xE8\x2\x2\xE8B\xE8C\a\x335\x2\x2\xE8C\xE90\a\x331\x2\x2\xE8D\xE8F\t"+
		"$\x2\x2\xE8E\xE8D\x3\x2\x2\x2\xE8F\xE92\x3\x2\x2\x2\xE90\xE8E\x3\x2\x2"+
		"\x2\xE90\xE91\x3\x2\x2\x2\xE91\xE94\x3\x2\x2\x2\xE92\xE90\x3\x2\x2\x2"+
		"\xE93\xE8A\x3\x2\x2\x2\xE93\xE94\x3\x2\x2\x2\xE94\xE98\x3\x2\x2\x2\xE95"+
		"\xE96\a\\\x2\x2\xE96\xE97\a\x335\x2\x2\xE97\xE99\x5\x3E4\x1F3\x2\xE98"+
		"\xE95\x3\x2\x2\x2\xE98\xE99\x3\x2\x2\x2\xE99\xE9D\x3\x2\x2\x2\xE9A\xE9B"+
		"\a\x1DD\x2\x2\xE9B\xE9C\a\x335\x2\x2\xE9C\xE9E\x5\x3E4\x1F3\x2\xE9D\xE9A"+
		"\x3\x2\x2\x2\xE9D\xE9E\x3\x2\x2\x2\xE9E\xEA2\x3\x2\x2\x2\xE9F\xEA0\a\x267"+
		"\x2\x2\xEA0\xEA1\a\x335\x2\x2\xEA1\xEA3\x5\x3E4\x1F3\x2\xEA2\xE9F\x3\x2"+
		"\x2\x2\xEA2\xEA3\x3\x2\x2\x2\xEA3\xEA7\x3\x2\x2\x2\xEA4\xEA5\a\x31\x2"+
		"\x2\xEA5\xEA6\a\x335\x2\x2\xEA6\xEA8\t\t\x2\x2\xEA7\xEA4\x3\x2\x2\x2\xEA7"+
		"\xEA8\x3\x2\x2\x2\xEA8\xEAC\x3\x2\x2\x2\xEA9\xEAA\a\x32\x2\x2\xEAA\xEAB"+
		"\a\x335\x2\x2\xEAB\xEAD\t\t\x2\x2\xEAC\xEA9\x3\x2\x2\x2\xEAC\xEAD\x3\x2"+
		"\x2\x2\xEAD\xEB1\x3\x2\x2\x2\xEAE\xEAF\a\x1CB\x2\x2\xEAF\xEB0\a\x335\x2"+
		"\x2\xEB0\xEB2\x5\x3E4\x1F3\x2\xEB1\xEAE\x3\x2\x2\x2\xEB1\xEB2\x3\x2\x2"+
		"\x2\xEB2\xEB5\x3\x2\x2\x2\xEB3\xEB4\a\x26D\x2\x2\xEB4\xEB6\a\x1CB\x2\x2"+
		"\xEB5\xEB3\x3\x2\x2\x2\xEB5\xEB6\x3\x2\x2\x2\xEB6\xEBB\x3\x2\x2\x2\xEB7"+
		"\xEB8\t\x15\x2\x2\xEB8\xEB9\a\x1CB\x2\x2\xEB9\xEBB\x5\x3E4\x1F3\x2\xEBA"+
		"\xE78\x3\x2\x2\x2\xEBA\xE7A\x3\x2\x2\x2\xEBA\xEB7\x3\x2\x2\x2\xEBB\x13F"+
		"\x3\x2\x2\x2\xEBC\xEBD\aK\x2\x2\xEBD\xEBE\a\x245\x2\x2\xEBE\xF19\x5\x3E4"+
		"\x1F3\x2\xEBF\xECD\a\x17F\x2\x2\xEC0\xEC1\a\xF8\x2\x2\xEC1\xEC5\a\x335"+
		"\x2\x2\xEC2\xEC6\a\x331\x2\x2\xEC3\xEC4\a\x332\x2\x2\xEC4\xEC6\a\x96\x2"+
		"\x2\xEC5\xEC2\x3\x2\x2\x2\xEC5\xEC3\x3\x2\x2\x2\xEC6\xECA\x3\x2\x2\x2"+
		"\xEC7\xEC9\t$\x2\x2\xEC8\xEC7\x3\x2\x2\x2\xEC9\xECC\x3\x2\x2\x2\xECA\xEC8"+
		"\x3\x2\x2\x2\xECA\xECB\x3\x2\x2\x2\xECB\xECE\x3\x2\x2\x2\xECC\xECA\x3"+
		"\x2\x2\x2\xECD\xEC0\x3\x2\x2\x2\xECD\xECE\x3\x2\x2\x2\xECE\xED5\x3\x2"+
		"\x2\x2\xECF\xED1\a\x349\x2\x2\xED0\xECF\x3\x2\x2\x2\xED0\xED1\x3\x2\x2"+
		"\x2\xED1\xED2\x3\x2\x2\x2\xED2\xED3\a\x144\x2\x2\xED3\xED4\a\x335\x2\x2"+
		"\xED4\xED6\a\x332\x2\x2\xED5\xED0\x3\x2\x2\x2\xED5\xED6\x3\x2\x2\x2\xED6"+
		"\xEDD\x3\x2\x2\x2\xED7\xED9\a\x349\x2\x2\xED8\xED7\x3\x2\x2\x2\xED8\xED9"+
		"\x3\x2\x2\x2\xED9\xEDA\x3\x2\x2\x2\xEDA\xEDB\a\\\x2\x2\xEDB\xEDC\a\x335"+
		"\x2\x2\xEDC\xEDE\x5\x3E4\x1F3\x2\xEDD\xED8\x3\x2\x2\x2\xEDD\xEDE\x3\x2"+
		"\x2\x2\xEDE\xEE5\x3\x2\x2\x2\xEDF\xEE1\a\x349\x2\x2\xEE0\xEDF\x3\x2\x2"+
		"\x2\xEE0\xEE1\x3\x2\x2\x2\xEE1\xEE2\x3\x2\x2\x2\xEE2\xEE3\a\x1DD\x2\x2"+
		"\xEE3\xEE4\a\x335\x2\x2\xEE4\xEE6\x5\x3E4\x1F3\x2\xEE5\xEE0\x3\x2\x2\x2"+
		"\xEE5\xEE6\x3\x2\x2\x2\xEE6\xEED\x3\x2\x2\x2\xEE7\xEE9\a\x349\x2\x2\xEE8"+
		"\xEE7\x3\x2\x2\x2\xEE8\xEE9\x3\x2\x2\x2\xEE9\xEEA\x3\x2\x2\x2\xEEA\xEEB"+
		"\a\x32\x2\x2\xEEB\xEEC\a\x335\x2\x2\xEEC\xEEE\t\t\x2\x2\xEED\xEE8\x3\x2"+
		"\x2\x2\xEED\xEEE\x3\x2\x2\x2\xEEE\xEF5\x3\x2\x2\x2\xEEF\xEF1\a\x349\x2"+
		"\x2\xEF0\xEEF\x3\x2\x2\x2\xEF0\xEF1\x3\x2\x2\x2\xEF1\xEF2\x3\x2\x2\x2"+
		"\xEF2\xEF3\a\x31\x2\x2\xEF3\xEF4\a\x335\x2\x2\xEF4\xEF6\t\t\x2\x2\xEF5"+
		"\xEF0\x3\x2\x2\x2\xEF5\xEF6\x3\x2\x2\x2\xEF6\xEFD\x3\x2\x2\x2\xEF7\xEF9"+
		"\a\x349\x2\x2\xEF8\xEF7\x3\x2\x2\x2\xEF8\xEF9\x3\x2\x2\x2\xEF9\xEFA\x3"+
		"\x2\x2\x2\xEFA\xEFB\a\x1CB\x2\x2\xEFB\xEFC\a\x335\x2\x2\xEFC\xEFE\x5\x3E4"+
		"\x1F3\x2\xEFD\xEF8\x3\x2\x2\x2\xEFD\xEFE\x3\x2\x2\x2\xEFE\xF1A\x3\x2\x2"+
		"\x2\xEFF\xF17\a\x8D\x2\x2\xF00\xF01\a\x17E\x2\x2\xF01\xF08\a\x17F\x2\x2"+
		"\xF02\xF04\a\x349\x2\x2\xF03\xF02\x3\x2\x2\x2\xF03\xF04\x3\x2\x2\x2\xF04"+
		"\xF05\x3\x2\x2\x2\xF05\xF06\a\\\x2\x2\xF06\xF07\a\x335\x2\x2\xF07\xF09"+
		"\x5\x3E4\x1F3\x2\xF08\xF03\x3\x2\x2\x2\xF08\xF09\x3\x2\x2\x2\xF09\xF10"+
		"\x3\x2\x2\x2\xF0A\xF0C\a\x349\x2\x2\xF0B\xF0A\x3\x2\x2\x2\xF0B\xF0C\x3"+
		"\x2\x2\x2\xF0C\xF0D\x3\x2\x2\x2\xF0D\xF0E\a\x1DD\x2\x2\xF0E\xF0F\a\x335"+
		"\x2\x2\xF0F\xF11\a\x331\x2\x2\xF10\xF0B\x3\x2\x2\x2\xF10\xF11\x3\x2\x2"+
		"\x2\xF11\xF18\x3\x2\x2\x2\xF12\xF13\a,\x2\x2\xF13\xF18\x5\x3E4\x1F3\x2"+
		"\xF14\xF15\a\x12\x2\x2\xF15\xF16\a\xAE\x2\x2\xF16\xF18\x5\x3E4\x1F3\x2"+
		"\xF17\xF00\x3\x2\x2\x2\xF17\xF12\x3\x2\x2\x2\xF17\xF14\x3\x2\x2\x2\xF18"+
		"\xF1A\x3\x2\x2\x2\xF19\xEBF\x3\x2\x2\x2\xF19\xEFF\x3\x2\x2\x2\xF1A\x141"+
		"\x3\x2\x2\x2\xF1B\xF1C\a\n\x2\x2\xF1C\xF1D\a\x245\x2\x2\xF1D\xF2F\x5\x3E4"+
		"\x1F3\x2\xF1E\xF20\t\x17\x2\x2\xF1F\xF1E\x3\x2\x2\x2\xF1F\xF20\x3\x2\x2"+
		"\x2\xF20\xF30\x3\x2\x2\x2\xF21\xF2D\a\x17F\x2\x2\xF22\xF23\a\xF8\x2\x2"+
		"\xF23\xF24\a\x335\x2\x2\xF24\xF28\a\x331\x2\x2\xF25\xF26\a\xE8\x2\x2\xF26"+
		"\xF27\a\x335\x2\x2\xF27\xF29\a\x331\x2\x2\xF28\xF25\x3\x2\x2\x2\xF28\xF29"+
		"\x3\x2\x2\x2\xF29\xF2E\x3\x2\x2\x2\xF2A\xF2B\a\x267\x2\x2\xF2B\xF2C\a"+
		"\x335\x2\x2\xF2C\xF2E\x5\x3E4\x1F3\x2\xF2D\xF22\x3\x2\x2\x2\xF2D\xF2A"+
		"\x3\x2\x2\x2\xF2E\xF30\x3\x2\x2\x2\xF2F\xF1F\x3\x2\x2\x2\xF2F\xF21\x3"+
		"\x2\x2\x2\xF30\x143\x3\x2\x2\x2\xF31\xF32\aK\x2\x2\xF32\xF33\a\x245\x2"+
		"\x2\xF33\xF34\x5\x3E4\x1F3\x2\xF34\xF35\a\x17F\x2\x2\xF35\xF36\a\xF8\x2"+
		"\x2\xF36\xF37\a\x335\x2\x2\xF37\xF3B\a\x331\x2\x2\xF38\xF39\a\x144\x2"+
		"\x2\xF39\xF3A\a\x335\x2\x2\xF3A\xF3C\a\x332\x2\x2\xF3B\xF38\x3\x2\x2\x2"+
		"\xF3B\xF3C\x3\x2\x2\x2\xF3C\x145\x3\x2\x2\x2\xF3D\xF3E\a\n\x2\x2\xF3E"+
		"\xF3F\a\x245\x2\x2\xF3F\xF57\x5\x3E4\x1F3\x2\xF40\xF42\t\x17\x2\x2\xF41"+
		"\xF40\x3\x2\x2\x2\xF41\xF42\x3\x2\x2\x2\xF42\xF58\x3\x2\x2\x2\xF43\xF55"+
		"\a\x17F\x2\x2\xF44\xF45\a\xF8\x2\x2\xF45\xF46\a\x335\x2\x2\xF46\xF50\a"+
		"\x331\x2\x2\xF47\xF48\a\xE8\x2\x2\xF48\xF49\a\x335\x2\x2\xF49\xF4D\a\x331"+
		"\x2\x2\xF4A\xF4C\t$\x2\x2\xF4B\xF4A\x3\x2\x2\x2\xF4C\xF4F\x3\x2\x2\x2"+
		"\xF4D\xF4B\x3\x2\x2\x2\xF4D\xF4E\x3\x2\x2\x2\xF4E\xF51\x3\x2\x2\x2\xF4F"+
		"\xF4D\x3\x2\x2\x2\xF50\xF47\x3\x2\x2\x2\xF50\xF51\x3\x2\x2\x2\xF51\xF56"+
		"\x3\x2\x2\x2\xF52\xF53\a\x267\x2\x2\xF53\xF54\a\x335\x2\x2\xF54\xF56\x5"+
		"\x3E4\x1F3\x2\xF55\xF44\x3\x2\x2\x2\xF55\xF52\x3\x2\x2\x2\xF56\xF58\x3"+
		"\x2\x2\x2\xF57\xF41\x3\x2\x2\x2\xF57\xF43\x3\x2\x2\x2\xF58\x147\x3\x2"+
		"\x2\x2\xF59\xF5A\aK\x2\x2\xF5A\xF5B\a\x245\x2\x2\xF5B\xF6C\x5\x3E4\x1F3"+
		"\x2\xF5C\xF5D\a\x17F\x2\x2\xF5D\xF5E\a\xF8\x2\x2\xF5E\xF5F\a\x335\x2\x2"+
		"\xF5F\xF61\a\x331\x2\x2\xF60\xF62\a\xD1\x2\x2\xF61\xF60\x3\x2\x2\x2\xF61"+
		"\xF62\x3\x2\x2\x2\xF62\xF68\x3\x2\x2\x2\xF63\xF64\a\x31\x2\x2\xF64\xF66"+
		"\a\x335\x2\x2\xF65\xF67\t\t\x2\x2\xF66\xF65\x3\x2\x2\x2\xF66\xF67\x3\x2"+
		"\x2\x2\xF67\xF69\x3\x2\x2\x2\xF68\xF63\x3\x2\x2\x2\xF68\xF69\x3\x2\x2"+
		"\x2\xF69\xF6D\x3\x2\x2\x2\xF6A\xF6B\a\x8D\x2\x2\xF6B\xF6D\a\x17E\x2\x2"+
		"\xF6C\xF5C\x3\x2\x2\x2\xF6C\xF6A\x3\x2\x2\x2\xF6D\x149\x3\x2\x2\x2\xF6E"+
		"\xF6F\a\n\x2\x2\xF6F\xF70\a\xBF\x2\x2\xF70\xF86\a\xAE\x2\x2\xF71\xF73"+
		"\a\x20C\x2\x2\xF72\xF71\x3\x2\x2\x2\xF72\xF73\x3\x2\x2\x2\xF73\xF74\x3"+
		"\x2\x2\x2\xF74\xF75\a\x114\x2\x2\xF75\xF76\a\x17F\x2\x2\xF76\xF77\a\x1F5"+
		"\x2\x2\xF77\xF78\a\'\x2\x2\xF78\xF79\a\xF8\x2\x2\xF79\xF7A\a\x335\x2\x2"+
		"\xF7A\xF87\a\x331\x2\x2\xF7B\xF7C\t\x15\x2\x2\xF7C\xF7D\a\x1F5\x2\x2\xF7D"+
		"\xF84\a\'\x2\x2\xF7E\xF7F\a\x13C\x2\x2\xF7F\xF80\a\xBF\x2\x2\xF80\xF85"+
		"\a\xAE\x2\x2\xF81\xF82\a\xF8\x2\x2\xF82\xF83\a\x335\x2\x2\xF83\xF85\a"+
		"\x331\x2\x2\xF84\xF7E\x3\x2\x2\x2\xF84\xF81\x3\x2\x2\x2\xF85\xF87\x3\x2"+
		"\x2\x2\xF86\xF72\x3\x2\x2\x2\xF86\xF7B\x3\x2\x2\x2\xF87\x14B\x3\x2\x2"+
		"\x2\xF88\xF89\aK\x2\x2\xF89\xF8A\a\xBF\x2\x2\xF8A\xF8B\a\xAE\x2\x2\xF8B"+
		"\xF8C\a\x1F5\x2\x2\xF8C\xF8D\a\'\x2\x2\xF8D\xF8E\a\xF8\x2\x2\xF8E\xF8F"+
		"\a\x335\x2\x2\xF8F\xF90\a\x331\x2\x2\xF90\x14D\x3\x2\x2\x2\xF91\xF92\a"+
		"\n\x2\x2\xF92\xF93\a\xBF\x2\x2\xF93\xFAF\a\xAE\x2\x2\xF94\xF96\a\x20C"+
		"\x2\x2\xF95\xF94\x3\x2\x2\x2\xF95\xF96\x3\x2\x2\x2\xF96\xF97\x3\x2\x2"+
		"\x2\xF97\xF98\a\x114\x2\x2\xF98\xF99\a\x17F\x2\x2\xF99\xF9A\a\x1F5\x2"+
		"\x2\xF9A\xF9B\a\'\x2\x2\xF9B\xF9C\a\xF8\x2\x2\xF9C\xF9D\a\x335\x2\x2\xF9D"+
		"\xFB0\a\x331\x2\x2\xF9E\xF9F\a\x4\x2\x2\xF9F\xFA0\a\x1F5\x2\x2\xFA0\xFA7"+
		"\a\'\x2\x2\xFA1\xFA2\a\x13C\x2\x2\xFA2\xFA3\a\xBF\x2\x2\xFA3\xFA8\a\xAE"+
		"\x2\x2\xFA4\xFA5\a\xF8\x2\x2\xFA5\xFA6\a\x335\x2\x2\xFA6\xFA8\a\x331\x2"+
		"\x2\xFA7\xFA1\x3\x2\x2\x2\xFA7\xFA4\x3\x2\x2\x2\xFA8\xFB0\x3\x2\x2\x2"+
		"\xFA9\xFAA\ai\x2\x2\xFAA\xFAB\a\x1F5\x2\x2\xFAB\xFAC\a\'\x2\x2\xFAC\xFAD"+
		"\a\xF8\x2\x2\xFAD\xFAE\a\x335\x2\x2\xFAE\xFB0\a\x331\x2\x2\xFAF\xF95\x3"+
		"\x2\x2\x2\xFAF\xF9E\x3\x2\x2\x2\xFAF\xFA9\x3\x2\x2\x2\xFB0\x14F\x3\x2"+
		"\x2\x2\xFB1\xFB2\aK\x2\x2\xFB2\xFB3\a\xBF\x2\x2\xFB3\xFB9\a\xAE\x2\x2"+
		"\xFB4\xFB5\a\x1F5\x2\x2\xFB5\xFB6\a\'\x2\x2\xFB6\xFB7\a\xF8\x2\x2\xFB7"+
		"\xFB8\a\x335\x2\x2\xFB8\xFBA\a\x331\x2\x2\xFB9\xFB4\x3\x2\x2\x2\xFB9\xFBA"+
		"\x3\x2\x2\x2\xFBA\x151\x3\x2\x2\x2\xFBB\xFBC\a\n\x2\x2\xFBC\xFBD\a\x25A"+
		"\x2\x2\xFBD\xFBE\a\x30B\x2\x2\xFBE\xFBF\x5\x3E4\x1F3\x2\xFBF\xFC0\a\x315"+
		"\x2\x2\xFC0\xFC9\a\x335\x2\x2\xFC1\xFCA\a\xD9\x2\x2\xFC2\xFCA\a\x1F1\x2"+
		"\x2\xFC3\xFCA\a\x31C\x2\x2\xFC4\xFC5\a\x314\x2\x2\xFC5\xFC6\a\x17F\x2"+
		"\x2\xFC6\xFC7\a\x134\x2\x2\xFC7\xFC8\a\x1BC\x2\x2\xFC8\xFCA\x5\x3E4\x1F3"+
		"\x2\xFC9\xFC1\x3\x2\x2\x2\xFC9\xFC2\x3\x2\x2\x2\xFC9\xFC3\x3\x2\x2\x2"+
		"\xFC9\xFC4\x3\x2\x2\x2\xFCA\x153\x3\x2\x2\x2\xFCB\xFCC\a\n\x2\x2\xFCC"+
		"\xFCD\a\x28A\x2\x2\xFCD\xFCE\a\x8F\x2\x2\xFCE\xFCF\x5\x3E4\x1F3\x2\xFCF"+
		"\xFD0\a\x347\x2\x2\xFD0\xFD1\a\x348\x2\x2\xFD1\xFD2\t%\x2\x2\xFD2\xFD3"+
		"\a\x2A1\x2\x2\xFD3\xFD4\a\x347\x2\x2\xFD4\xFD5\a\x32D\x2\x2\xFD5\xFD6"+
		"\a\x348\x2\x2\xFD6\x155\x3\x2\x2\x2\xFD7\xFD8\a\n\x2\x2\xFD8\xFD9\a\x28A"+
		"\x2\x2\xFD9\xFDA\a\x135\x2\x2\xFDA\xFDB\x5\x3E4\x1F3\x2\xFDB\xFDC\a\x26C"+
		"\x2\x2\xFDC\xFDE\a\x173\x2\x2\xFDD\xFDF\x5\x3E4\x1F3\x2\xFDE\xFDD\x3\x2"+
		"\x2\x2\xFDE\xFDF\x3\x2\x2\x2\xFDF\x157\x3\x2\x2\x2\xFE0\xFE1\a\n\x2\x2"+
		"\xFE1\xFE2\a\x2B1\x2\x2\xFE2\xFE3\a\x13C\x2\x2\xFE3\xFE4\a\x1AC\x2\x2"+
		"\xFE4\xFE5\x5\x3E4\x1F3\x2\xFE5\xFE9\a\x17F\x2\x2\xFE6\xFE7\a\x174\x2"+
		"\x2\xFE7\xFE8\a\x335\x2\x2\xFE8\xFEA\x5\x3E4\x1F3\x2\xFE9\xFE6\x3\x2\x2"+
		"\x2\xFE9\xFEA\x3\x2\x2\x2\xFEA\xFEF\x3\x2\x2\x2\xFEB\xFEC\a\x349\x2\x2"+
		"\xFEC\xFED\a\f\x2\x2\xFED\xFEE\a\x335\x2\x2\xFEE\xFF0\t\t\x2\x2\xFEF\xFEB"+
		"\x3\x2\x2\x2\xFEF\xFF0\x3\x2\x2\x2\xFF0\x159\x3\x2\x2\x2\xFF1\xFF2\aK"+
		"\x2\x2\xFF2\xFF3\a\x2B1\x2\x2\xFF3\xFF4\a\x13C\x2\x2\xFF4\xFF5\a\x1AC"+
		"\x2\x2\xFF5\xFF8\x5\x3E4\x1F3\x2\xFF6\xFF7\a\x15\x2\x2\xFF7\xFF9\x5\x3E4"+
		"\x1F3\x2\xFF8\xFF6\x3\x2\x2\x2\xFF8\xFF9\x3\x2\x2\x2\xFF9\xFFA\x3\x2\x2"+
		"\x2\xFFA\xFFB\a\x160\x2\x2\xFFB\xFFC\a\x13C\x2\x2\xFFC\xFFD\a\x331\x2"+
		"\x2\xFFD\x1001\a\x17F\x2\x2\xFFE\xFFF\a\x174\x2\x2\xFFF\x1000\a\x335\x2"+
		"\x2\x1000\x1002\x5\x3E4\x1F3\x2\x1001\xFFE\x3\x2\x2\x2\x1001\x1002\x3"+
		"\x2\x2\x2\x1002\x1007\x3\x2\x2\x2\x1003\x1004\a\x349\x2\x2\x1004\x1005"+
		"\a\f\x2\x2\x1005\x1006\a\x335\x2\x2\x1006\x1008\t\t\x2\x2\x1007\x1003"+
		"\x3\x2\x2\x2\x1007\x1008\x3\x2\x2\x2\x1008\x15B\x3\x2\x2\x2\x1009\x100A"+
		"\aK\x2\x2\x100A\x100B\a\x2BC\x2\x2\x100B\x100C\a\x28F\x2\x2\x100C\x1073"+
		"\x5\x3E4\x1F3\x2\x100D\x100E\a\x17F\x2\x2\x100E\x1015\a\x347\x2\x2\x100F"+
		"\x1011\a\x349\x2\x2\x1010\x100F\x3\x2\x2\x2\x1010\x1011\x3\x2\x2\x2\x1011"+
		"\x1012\x3\x2\x2\x2\x1012\x1013\a\x25D\x2\x2\x1013\x1014\a\x335\x2\x2\x1014"+
		"\x1016\a\x32D\x2\x2\x1015\x1010\x3\x2\x2\x2\x1015\x1016\x3\x2\x2\x2\x1016"+
		"\x101D\x3\x2\x2\x2\x1017\x1019\a\x349\x2\x2\x1018\x1017\x3\x2\x2\x2\x1018"+
		"\x1019\x3\x2\x2\x2\x1019\x101A\x3\x2\x2\x2\x101A\x101B\a\x24C\x2\x2\x101B"+
		"\x101C\a\x335\x2\x2\x101C\x101E\a\x32D\x2\x2\x101D\x1018\x3\x2\x2\x2\x101D"+
		"\x101E\x3\x2\x2\x2\x101E\x1025\x3\x2\x2\x2\x101F\x1021\a\x349\x2\x2\x1020"+
		"\x101F\x3\x2\x2\x2\x1020\x1021\x3\x2\x2\x2\x1021\x1022\x3\x2\x2\x2\x1022"+
		"\x1023\a\x1B3\x2\x2\x1023\x1024\a\x335\x2\x2\x1024\x1026\a\x32D\x2\x2"+
		"\x1025\x1020\x3\x2\x2\x2\x1025\x1026\x3\x2\x2\x2\x1026\x1050\x3\x2\x2"+
		"\x2\x1027\x1029\a\x349\x2\x2\x1028\x1027\x3\x2\x2\x2\x1028\x1029\x3\x2"+
		"\x2\x2\x1029\x102A\x3\x2\x2\x2\x102A\x102B\a\x18D\x2\x2\x102B\x102C\a"+
		"\x133\x2\x2\x102C\x104E\a\x335\x2\x2\x102D\x104F\a\x19E\x2\x2\x102E\x1038"+
		"\a\x347\x2\x2\x102F\x1031\a\x349\x2\x2\x1030\x102F\x3\x2\x2\x2\x1030\x1031"+
		"\x3\x2\x2\x2\x1031\x1036\x3\x2\x2\x2\x1032\x1037\a\x32D\x2\x2\x1033\x1034"+
		"\a\x32D\x2\x2\x1034\x1035\a\x160\x2\x2\x1035\x1037\a\x32D\x2\x2\x1036"+
		"\x1032\x3\x2\x2\x2\x1036\x1033\x3\x2\x2\x2\x1037\x1039\x3\x2\x2\x2\x1038"+
		"\x1030\x3\x2\x2\x2\x1039\x103A\x3\x2\x2\x2\x103A\x1038\x3\x2\x2\x2\x103A"+
		"\x103B\x3\x2\x2\x2\x103B\x103C\x3\x2\x2\x2\x103C\x104F\a\x348\x2\x2\x103D"+
		"\x103E\a\x278\x2\x2\x103E\x103F\a\x335\x2\x2\x103F\x1049\a\x347\x2\x2"+
		"\x1040\x1042\a\x349\x2\x2\x1041\x1040\x3\x2\x2\x2\x1041\x1042\x3\x2\x2"+
		"\x2\x1042\x1047\x3\x2\x2\x2\x1043\x1048\a\x32D\x2\x2\x1044\x1045\a\x32D"+
		"\x2\x2\x1045\x1046\a\x160\x2\x2\x1046\x1048\a\x32D\x2\x2\x1047\x1043\x3"+
		"\x2\x2\x2\x1047\x1044\x3\x2\x2\x2\x1048\x104A\x3\x2\x2\x2\x1049\x1041"+
		"\x3\x2\x2\x2\x104A\x104B\x3\x2\x2\x2\x104B\x1049\x3\x2\x2\x2\x104B\x104C"+
		"\x3\x2\x2\x2\x104C\x104D\x3\x2\x2\x2\x104D\x104F\a\x348\x2\x2\x104E\x102D"+
		"\x3\x2\x2\x2\x104E\x102E\x3\x2\x2\x2\x104E\x103D\x3\x2\x2\x2\x104F\x1051"+
		"\x3\x2\x2\x2\x1050\x1028\x3\x2\x2\x2\x1050\x1051\x3\x2\x2\x2\x1051\x1058"+
		"\x3\x2\x2\x2\x1052\x1054\a\x349\x2\x2\x1053\x1052\x3\x2\x2\x2\x1053\x1054"+
		"\x3\x2\x2\x2\x1054\x1055\x3\x2\x2\x2\x1055\x1056\a\x25F\x2\x2\x1056\x1057"+
		"\a\x335\x2\x2\x1057\x1059\a\x32D\x2\x2\x1058\x1053\x3\x2\x2\x2\x1058\x1059"+
		"\x3\x2\x2\x2\x1059\x1060\x3\x2\x2\x2\x105A\x105C\a\x349\x2\x2\x105B\x105A"+
		"\x3\x2\x2\x2\x105B\x105C\x3\x2\x2\x2\x105C\x105D\x3\x2\x2\x2\x105D\x105E"+
		"\a\x250\x2\x2\x105E\x105F\a\x335\x2\x2\x105F\x1061\a\x32D\x2\x2\x1060"+
		"\x105B\x3\x2\x2\x2\x1060\x1061\x3\x2\x2\x2\x1061\x1068\x3\x2\x2\x2\x1062"+
		"\x1064\a\x349\x2\x2\x1063\x1062\x3\x2\x2\x2\x1063\x1064\x3\x2\x2\x2\x1064"+
		"\x1065\x3\x2\x2\x2\x1065\x1066\a\x25E\x2\x2\x1066\x1067\a\x335\x2\x2\x1067"+
		"\x1069\a\x32D\x2\x2\x1068\x1063\x3\x2\x2\x2\x1068\x1069\x3\x2\x2\x2\x1069"+
		"\x1070\x3\x2\x2\x2\x106A\x106C\a\x349\x2\x2\x106B\x106A\x3\x2\x2\x2\x106B"+
		"\x106C\x3\x2\x2\x2\x106C\x106D\x3\x2\x2\x2\x106D\x106E\a\x24F\x2\x2\x106E"+
		"\x106F\a\x335\x2\x2\x106F\x1071\a\x32D\x2\x2\x1070\x106B\x3\x2\x2\x2\x1070"+
		"\x1071\x3\x2\x2\x2\x1071\x1072\x3\x2\x2\x2\x1072\x1074\a\x348\x2\x2\x1073"+
		"\x100D\x3\x2\x2\x2\x1073\x1074\x3\x2\x2\x2\x1074\x15D\x3\x2\x2\x2\x1075"+
		"\x1076\a\n\x2\x2\x1076\x1077\a\x2BC\x2\x2\x1077\x108D\a\x92\x2\x2\x1078"+
		"\x108E\t&\x2\x2\x1079\x107A\a\x17F\x2\x2\x107A\x107B\a\x347\x2\x2\x107B"+
		"\x107C\a\x33\x2\x2\x107C\x1082\a\x335\x2\x2\x107D\x107E\x5\x3AE\x1D8\x2"+
		"\x107E\x107F\a\x342\x2\x2\x107F\x1080\x5\x3E4\x1F3\x2\x1080\x1083\x3\x2"+
		"\x2\x2\x1081\x1083\a\xE3\x2\x2\x1082\x107D\x3\x2\x2\x2\x1082\x1081\x3"+
		"\x2\x2\x2\x1083\x1084\x3\x2\x2\x2\x1084\x108E\a\x348\x2\x2\x1085\x1086"+
		"\a\x119\x2\x2\x1086\x108E\a\x14E\x2\x2\x1087\x1088\a\x17F\x2\x2\x1088"+
		"\x1089\a\x347\x2\x2\x1089\x108A\a\xC6\x2\x2\x108A\x108B\a\x335\x2\x2\x108B"+
		"\x108C\a\x32D\x2\x2\x108C\x108E\a\x348\x2\x2\x108D\x1078\x3\x2\x2\x2\x108D"+
		"\x1079\x3\x2\x2\x2\x108D\x1085\x3\x2\x2\x2\x108D\x1087\x3\x2\x2\x2\x108E"+
		"\x15F\x3\x2\x2\x2\x108F\x1090\a\n\x2\x2\x1090\x1091\a\x127\x2\x2\x1091"+
		"\x1099\x5\x3E4\x1F3\x2\x1092\x1093\t\x15\x2\x2\x1093\x1094\a\xC9\x2\x2"+
		"\x1094\x109A\x5\x3E4\x1F3\x2\x1095\x1096\a\x17F\x2\x2\x1096\x1097\a\x267"+
		"\x2\x2\x1097\x1098\a\x335\x2\x2\x1098\x109A\x5\x3E4\x1F3\x2\x1099\x1092"+
		"\x3\x2\x2\x2\x1099\x1095\x3\x2\x2\x2\x109A\x161\x3\x2\x2\x2\x109B\x109C"+
		"\aK\x2\x2\x109C\x109D\a\x127\x2\x2\x109D\x10A0\x5\x3E4\x1F3\x2\x109E\x109F"+
		"\a\x15\x2\x2\x109F\x10A1\x5\x3E4\x1F3\x2\x10A0\x109E\x3\x2\x2\x2\x10A0"+
		"\x10A1\x3\x2\x2\x2\x10A1\x163\x3\x2\x2\x2\x10A2\x10A3\aK\x2\x2\x10A3\x10A4"+
		"\a\x2C2\x2\x2\x10A4\x10A7\x5\x3E4\x1F3\x2\x10A5\x10A6\a\x15\x2\x2\x10A6"+
		"\x10A8\x5\x3E4\x1F3\x2\x10A7\x10A5\x3\x2\x2\x2\x10A7\x10A8\x3\x2\x2\x2"+
		"\x10A8\x10A9\x3\x2\x2\x2\x10A9\x10B0\a\x17F\x2\x2\x10AA\x10AC\a\x349\x2"+
		"\x2\x10AB\x10AA\x3\x2\x2\x2\x10AB\x10AC\x3\x2\x2\x2\x10AC\x10AD\x3\x2"+
		"\x2\x2\x10AD\x10AE\a\x13E\x2\x2\x10AE\x10AF\a\x335\x2\x2\x10AF\x10B1\a"+
		"\x331\x2\x2\x10B0\x10AB\x3\x2\x2\x2\x10B0\x10B1\x3\x2\x2\x2\x10B1\x10B8"+
		"\x3\x2\x2\x2\x10B2\x10B4\a\x349\x2\x2\x10B3\x10B2\x3\x2\x2\x2\x10B3\x10B4"+
		"\x3\x2\x2\x2\x10B4\x10B5\x3\x2\x2\x2\x10B5\x10B6\a\x1AF\x2\x2\x10B6\x10B7"+
		"\a\x335\x2\x2\x10B7\x10B9\a\x331\x2\x2\x10B8\x10B3\x3\x2\x2\x2\x10B8\x10B9"+
		"\x3\x2\x2\x2\x10B9\x10C0\x3\x2\x2\x2\x10BA\x10BC\a\x349\x2\x2\x10BB\x10BA"+
		"\x3\x2\x2\x2\x10BB\x10BC\x3\x2\x2\x2\x10BC\x10BD\x3\x2\x2\x2\x10BD\x10BE"+
		"\a\xB5\x2\x2\x10BE\x10BF\a\x335\x2\x2\x10BF\x10C1\a\x32D\x2\x2\x10C0\x10BB"+
		"\x3\x2\x2\x2\x10C0\x10C1\x3\x2\x2\x2\x10C1\x10C3\x3\x2\x2\x2\x10C2\x10C4"+
		"\a\x349\x2\x2\x10C3\x10C2\x3\x2\x2\x2\x10C3\x10C4\x3\x2\x2\x2\x10C4\x10C5"+
		"\x3\x2\x2\x2\x10C5\x10C6\a\x189\x2\x2\x10C6\x10C7\a\x335\x2\x2\x10C7\x10CC"+
		"\t\'\x2\x2\x10C8\x10C9\a\x349\x2\x2\x10C9\x10CA\a\x261\x2\x2\x10CA\x10CB"+
		"\a\x335\x2\x2\x10CB\x10CD\t\'\x2\x2\x10CC\x10C8\x3\x2\x2\x2\x10CC\x10CD"+
		"\x3\x2\x2\x2\x10CD\x165\x3\x2\x2\x2\x10CE\x10CF\aK\x2\x2\x10CF\x10D3\a"+
		"\x130\x2\x2\x10D0\x10D1\x5\x3AE\x1D8\x2\x10D1\x10D2\a\x342\x2\x2\x10D2"+
		"\x10D4\x3\x2\x2\x2\x10D3\x10D0\x3\x2\x2\x2\x10D3\x10D4\x3\x2\x2\x2\x10D4"+
		"\x10D5\x3\x2\x2\x2\x10D5\x10D6\x5\x3E4\x1F3\x2\x10D6\x10D7\a\x10\x2\x2"+
		"\x10D7\x10D8\x5\x306\x184\x2\x10D8\x167\x3\x2\x2\x2\x10D9\x10DA\a\n\x2"+
		"\x2\x10DA\x10DB\a\x134\x2\x2\x10DB\x10DC\x5\x3AE\x1D8\x2\x10DC\x10E6\a"+
		"\x165\x2\x2\x10DD\x10E3\a\x27B\x2\x2\x10DE\x10E3\a\x30B\x2\x2\x10DF\x10E0"+
		"\a\x320\x2\x2\x10E0\x10E1\a\x134\x2\x2\x10E1\x10E3\a\x1BC\x2\x2\x10E2"+
		"\x10DD\x3\x2\x2\x2\x10E2\x10DE\x3\x2\x2\x2\x10E2\x10DF\x3\x2\x2\x2\x10E3"+
		"\x10E4\x3\x2\x2\x2\x10E4\x10E5\a\x34B\x2\x2\x10E5\x10E7\a\x34B\x2\x2\x10E6"+
		"\x10E2\x3\x2\x2\x2\x10E6\x10E7\x3\x2\x2\x2\x10E7\x10E8\x3\x2\x2\x2\x10E8"+
		"\x10EB\x5\x3E4\x1F3\x2\x10E9\x10EA\a\x342\x2\x2\x10EA\x10EC\x5\x3E4\x1F3"+
		"\x2\x10EB\x10E9\x3\x2\x2\x2\x10EB\x10EC\x3\x2\x2\x2\x10EC\x169\x3\x2\x2"+
		"\x2\x10ED\x10EE\aK\x2\x2\x10EE\x10F6\a\x134\x2\x2\x10EF\x10F7\x5\x3AE"+
		"\x1D8\x2\x10F0\x10F1\a\x15\x2\x2\x10F1\x10F7\x5\x3E4\x1F3\x2\x10F2\x10F3"+
		"\x5\x3AE\x1D8\x2\x10F3\x10F4\a\x15\x2\x2\x10F4\x10F5\x5\x3E4\x1F3\x2\x10F5"+
		"\x10F7\x3\x2\x2\x2\x10F6\x10EF\x3\x2\x2\x2\x10F6\x10F0\x3\x2\x2\x2\x10F6"+
		"\x10F2\x3\x2\x2\x2\x10F7\x1114\x3\x2\x2\x2\x10F8\x1113\x5\x1FA\xFE\x2"+
		"\x10F9\x1113\x5\x200\x101\x2\x10FA\x10FB\t(\x2\x2\x10FB\x10FC\t)\x2\x2"+
		"\x10FC\x1100\a\xE9\x2\x2\x10FD\x10FE\a\x134\x2\x2\x10FE\x10FF\a\x34B\x2"+
		"\x2\x10FF\x1101\a\x34B\x2\x2\x1100\x10FD\x3\x2\x2\x2\x1100\x1101\x3\x2"+
		"\x2\x2\x1101\x1102\x3\x2\x2\x2\x1102\x1103\x5\x3E4\x1F3\x2\x1103\x1104"+
		"\a\x160\x2\x2\x1104\x1105\x5\x3E4\x1F3\x2\x1105\x1113\x3\x2\x2\x2\x1106"+
		"\x1107\a\x123\x2\x2\x1107\x1108\t)\x2\x2\x1108\x110C\a\xE9\x2\x2\x1109"+
		"\x110A\a\x134\x2\x2\x110A\x110B\a\x34B\x2\x2\x110B\x110D\a\x34B\x2\x2"+
		"\x110C\x1109\x3\x2\x2\x2\x110C\x110D\x3\x2\x2\x2\x110D\x110E\x3\x2\x2"+
		"\x2\x110E\x110F\x5\x3E4\x1F3\x2\x110F\x1110\a\x8D\x2\x2\x1110\x1111\x5"+
		"\x3E4\x1F3\x2\x1111\x1113\x3\x2\x2\x2\x1112\x10F8\x3\x2\x2\x2\x1112\x10F9"+
		"\x3\x2\x2\x2\x1112\x10FA\x3\x2\x2\x2\x1112\x1106\x3\x2\x2\x2\x1113\x1116"+
		"\x3\x2\x2\x2\x1114\x1112\x3\x2\x2\x2\x1114\x1115\x3\x2\x2\x2\x1115\x16B"+
		"\x3\x2\x2\x2\x1116\x1114\x3\x2\x2\x2\x1117\x1118\aK\x2\x2\x1118\x1119"+
		"\a\x134\x2\x2\x1119\x111C\x5\x3AE\x1D8\x2\x111A\x111B\a\x15\x2\x2\x111B"+
		"\x111D\x5\x3E4\x1F3\x2\x111C\x111A\x3\x2\x2\x2\x111C\x111D\x3\x2\x2\x2"+
		"\x111D\x16D\x3\x2\x2\x2\x111E\x111F\a\n\x2\x2\x111F\x1120\a\x134\x2\x2"+
		"\x1120\x1121\x5\x3AE\x1D8\x2\x1121\x1125\a\x165\x2\x2\x1122\x1123\a\x27B"+
		"\x2\x2\x1123\x1124\a\x34B\x2\x2\x1124\x1126\a\x34B\x2\x2\x1125\x1122\x3"+
		"\x2\x2\x2\x1125\x1126\x3\x2\x2\x2\x1126\x1127\x3\x2\x2\x2\x1127\x112A"+
		"\x5\x3E4\x1F3\x2\x1128\x1129\a\x342\x2\x2\x1129\x112B\a\x32E\x2\x2\x112A"+
		"\x1128\x3\x2\x2\x2\x112A\x112B\x3\x2\x2\x2\x112B\x16F\x3\x2\x2\x2\x112C"+
		"\x112D\aK\x2\x2\x112D\x112E\a\x2CC\x2\x2\x112E\x112F\a\x29A\x2\x2\x112F"+
		"\x1130\a\x23D\x2\x2\x1130\x1138\x5\x3E4\x1F3\x2\x1131\x1135\a\x8D\x2\x2"+
		"\x1132\x1133\x5\x3AC\x1D7\x2\x1133\x1134\a\x342\x2\x2\x1134\x1136\x3\x2"+
		"\x2\x2\x1135\x1132\x3\x2\x2\x2\x1135\x1136\x3\x2\x2\x2\x1136\x1137\x3"+
		"\x2\x2\x2\x1137\x1139\x5\x3E4\x1F3\x2\x1138\x1131\x3\x2\x2\x2\x1138\x1139"+
		"\x3\x2\x2\x2\x1139\x113C\x3\x2\x2\x2\x113A\x113B\a\x15\x2\x2\x113B\x113D"+
		"\x5\x3E4\x1F3\x2\x113C\x113A\x3\x2\x2\x2\x113C\x113D\x3\x2\x2\x2\x113D"+
		"\x171\x3\x2\x2\x2\x113E\x113F\aK\x2\x2\x113F\x1140\a\x2D2\x2\x2\x1140"+
		"\x1144\a\x101\x2\x2\x1141\x1142\x5\x3AE\x1D8\x2\x1142\x1143\a\x342\x2"+
		"\x2\x1143\x1145\x3\x2\x2\x2\x1144\x1141\x3\x2\x2\x2\x1144\x1145\x3\x2"+
		"\x2\x2\x1145\x1146\x3\x2\x2\x2\x1146\x116F\x5\x3E4\x1F3\x2\x1147\x1149"+
		"\a\x349\x2\x2\x1148\x1147\x3\x2\x2\x2\x1148\x1149\x3\x2\x2\x2\x1149\x114A"+
		"\x3\x2\x2\x2\x114A\x114C\a\x4\x2\x2\x114B\x114D\t*\x2\x2\x114C\x114B\x3"+
		"\x2\x2\x2\x114C\x114D\x3\x2\x2\x2\x114D\x114E\x3\x2\x2\x2\x114E\x114F"+
		"\a\x103\x2\x2\x114F\x1150\x5\x3E4\x1F3\x2\x1150\x1151\a\x342\x2\x2\x1151"+
		"\x1152\x5\x3E4\x1F3\x2\x1152\x1157\a\x347\x2\x2\x1153\x1155\a\x349\x2"+
		"\x2\x1154\x1153\x3\x2\x2\x2\x1154\x1155\x3\x2\x2\x2\x1155\x1156\x3\x2"+
		"\x2\x2\x1156\x1158\x5\x3E4\x1F3\x2\x1157\x1154\x3\x2\x2\x2\x1158\x1159"+
		"\x3\x2\x2\x2\x1159\x1157\x3\x2\x2\x2\x1159\x115A\x3\x2\x2\x2\x115A\x115B"+
		"\x3\x2\x2\x2\x115B\x115C\a\x348\x2\x2\x115C\x115D\a\xE9\x2\x2\x115D\x115E"+
		"\x5\x3E4\x1F3\x2\x115E\x115F\a\x342\x2\x2\x115F\x116C\x5\x3E4\x1F3\x2"+
		"\x1160\x1162\a\x349\x2\x2\x1161\x1160\x3\x2\x2\x2\x1161\x1162\x3\x2\x2"+
		"\x2\x1162\x1163\x3\x2\x2\x2\x1163\x1164\a\x18E\x2\x2\x1164\x116B\t+\x2"+
		"\x2\x1165\x1167\a\x349\x2\x2\x1166\x1165\x3\x2\x2\x2\x1166\x1167\x3\x2"+
		"\x2\x2\x1167\x1168\x3\x2\x2\x2\x1168\x1169\a\x1C\x2\x2\x1169\x116B\t,"+
		"\x2\x2\x116A\x1161\x3\x2\x2\x2\x116A\x1166\x3\x2\x2\x2\x116B\x116E\x3"+
		"\x2\x2\x2\x116C\x116A\x3\x2\x2\x2\x116C\x116D\x3\x2\x2\x2\x116D\x1170"+
		"\x3\x2\x2\x2\x116E\x116C\x3\x2\x2\x2\x116F\x1148\x3\x2\x2\x2\x1170\x1171"+
		"\x3\x2\x2\x2\x1171\x116F\x3\x2\x2\x2\x1171\x1172\x3\x2\x2\x2\x1172\x117D"+
		"\x3\x2\x2\x2\x1173\x1174\a\x17F\x2\x2\x1174\x1175\a\x347\x2\x2\x1175\x1176"+
		"\a\x14F\x2\x2\x1176\x1177\a\x335\x2\x2\x1177\x117A\t\t\x2\x2\x1178\x1179"+
		"\a\x2C8\x2\x2\x1179\x117B\t\t\x2\x2\x117A\x1178\x3\x2\x2\x2\x117A\x117B"+
		"\x3\x2\x2\x2\x117B\x117C\x3\x2\x2\x2\x117C\x117E\a\x348\x2\x2\x117D\x1173"+
		"\x3\x2\x2\x2\x117D\x117E\x3\x2\x2\x2\x117E\x1182\x3\x2\x2\x2\x117F\x1180"+
		"\a\xE0\x2\x2\x1180\x1181\a\x87\x2\x2\x1181\x1183\a\x117\x2\x2\x1182\x117F"+
		"\x3\x2\x2\x2\x1182\x1183\x3\x2\x2\x2\x1183\x173\x3\x2\x2\x2\x1184\x1185"+
		"\a\n\x2\x2\x1185\x1189\a\x2D9\x2\x2\x1186\x1187\x5\x3AE\x1D8\x2\x1187"+
		"\x1188\a\x342\x2\x2\x1188\x118A\x3\x2\x2\x2\x1189\x1186\x3\x2\x2\x2\x1189"+
		"\x118A\x3\x2\x2\x2\x118A\x118B\x3\x2\x2\x2\x118B\x1191\x5\x3E4\x1F3\x2"+
		"\x118C\x118F\a\x11A\x2\x2\x118D\x118E\a\x17F\x2\x2\x118E\x1190\a\x32D"+
		"\x2\x2\x118F\x118D\x3\x2\x2\x2\x118F\x1190\x3\x2\x2\x2\x1190\x1192\x3"+
		"\x2\x2\x2\x1191\x118C\x3\x2\x2\x2\x1191\x1192\x3\x2\x2\x2\x1192\x1196"+
		"\x3\x2\x2\x2\x1193\x1194\a\x9F\x2\x2\x1194\x1195\a\'\x2\x2\x1195\x1197"+
		"\a\x32D\x2\x2\x1196\x1193\x3\x2\x2\x2\x1196\x1197\x3\x2\x2\x2\x1197\x119C"+
		"\x3\x2\x2\x2\x1198\x1199\a\xCF\x2\x2\x1199\x119D\a\x32D\x2\x2\x119A\x119B"+
		"\a\x26D\x2\x2\x119B\x119D\a\xCF\x2\x2\x119C\x1198\x3\x2\x2\x2\x119C\x119A"+
		"\x3\x2\x2\x2\x119C\x119D\x3\x2\x2\x2\x119D\x11A2\x3\x2\x2\x2\x119E\x119F"+
		"\a\xC2\x2\x2\x119F\x11A3\a\x32D\x2\x2\x11A0\x11A1\a\x26D\x2\x2\x11A1\x11A3"+
		"\a\xC2\x2\x2\x11A2\x119E\x3\x2\x2\x2\x11A2\x11A0\x3\x2\x2\x2\x11A2\x11A3"+
		"\x3\x2\x2\x2\x11A3\x11A7\x3\x2\x2\x2\x11A4\x11A8\aS\x2\x2\x11A5\x11A6"+
		"\a\x26D\x2\x2\x11A6\x11A8\aS\x2\x2\x11A7\x11A4\x3\x2\x2\x2\x11A7\x11A5"+
		"\x3\x2\x2\x2\x11A7\x11A8\x3\x2\x2\x2\x11A8\x11AD\x3\x2\x2\x2\x11A9\x11AA"+
		"\a(\x2\x2\x11AA\x11AE\a\x32D\x2\x2\x11AB\x11AC\a\x26D\x2\x2\x11AC\x11AE"+
		"\a(\x2\x2\x11AD\x11A9\x3\x2\x2\x2\x11AD\x11AB\x3\x2\x2\x2\x11AD\x11AE"+
		"\x3\x2\x2\x2\x11AE\x175\x3\x2\x2\x2\x11AF\x11B0\aK\x2\x2\x11B0\x11B4\a"+
		"\x2D9\x2\x2\x11B1\x11B2\x5\x3AE\x1D8\x2\x11B2\x11B3\a\x342\x2\x2\x11B3"+
		"\x11B5\x3\x2\x2\x2\x11B4\x11B1\x3\x2\x2\x2\x11B4\x11B5\x3\x2\x2\x2\x11B5"+
		"\x11B6\x3\x2\x2\x2\x11B6\x11B9\x5\x3E4\x1F3\x2\x11B7\x11B8\a\x10\x2\x2"+
		"\x11B8\x11BA\x5\x3DC\x1EF\x2\x11B9\x11B7\x3\x2\x2\x2\x11B9\x11BA\x3\x2"+
		"\x2\x2\x11BA\x11BE\x3\x2\x2\x2\x11BB\x11BC\a\x151\x2\x2\x11BC\x11BD\a"+
		"\x17F\x2\x2\x11BD\x11BF\a\x32D\x2\x2\x11BE\x11BB\x3\x2\x2\x2\x11BE\x11BF"+
		"\x3\x2\x2\x2\x11BF\x11C6\x3\x2\x2\x2\x11C0\x11C1\a\x9F\x2\x2\x11C1\x11C3"+
		"\a\'\x2\x2\x11C2\x11C4\a\x350\x2\x2\x11C3\x11C2\x3\x2\x2\x2\x11C3\x11C4"+
		"\x3\x2\x2\x2\x11C4\x11C5\x3\x2\x2\x2\x11C5\x11C7\a\x32D\x2\x2\x11C6\x11C0"+
		"\x3\x2\x2\x2\x11C6\x11C7\x3\x2\x2\x2\x11C7\x11CE\x3\x2\x2\x2\x11C8\x11CA"+
		"\a\xCF\x2\x2\x11C9\x11CB\a\x32D\x2\x2\x11CA\x11C9\x3\x2\x2\x2\x11CA\x11CB"+
		"\x3\x2\x2\x2\x11CB\x11CF\x3\x2\x2\x2\x11CC\x11CD\a\x26D\x2\x2\x11CD\x11CF"+
		"\a\xCF\x2\x2\x11CE\x11C8\x3\x2\x2\x2\x11CE\x11CC\x3\x2\x2\x2\x11CE\x11CF"+
		"\x3\x2\x2\x2\x11CF\x11D6\x3\x2\x2\x2\x11D0\x11D2\a\xC2\x2\x2\x11D1\x11D3"+
		"\a\x32D\x2\x2\x11D2\x11D1\x3\x2\x2\x2\x11D2\x11D3\x3\x2\x2\x2\x11D3\x11D7"+
		"\x3\x2\x2\x2\x11D4\x11D5\a\x26D\x2\x2\x11D5\x11D7\a\xC2\x2\x2\x11D6\x11D0"+
		"\x3\x2\x2\x2\x11D6\x11D4\x3\x2\x2\x2\x11D6\x11D7\x3\x2\x2\x2\x11D7\x11DB"+
		"\x3\x2\x2\x2\x11D8\x11DC\aS\x2\x2\x11D9\x11DA\a\x26D\x2\x2\x11DA\x11DC"+
		"\aS\x2\x2\x11DB\x11D8\x3\x2\x2\x2\x11DB\x11D9\x3\x2\x2\x2\x11DB\x11DC"+
		"\x3\x2\x2\x2\x11DC\x11E3\x3\x2\x2\x2\x11DD\x11DF\a(\x2\x2\x11DE\x11E0"+
		"\a\x32D\x2\x2\x11DF\x11DE\x3\x2\x2\x2\x11DF\x11E0\x3\x2\x2\x2\x11E0\x11E4"+
		"\x3\x2\x2\x2\x11E1\x11E2\a\x26D\x2\x2\x11E2\x11E4\a(\x2\x2\x11E3\x11DD"+
		"\x3\x2\x2\x2\x11E3\x11E1\x3\x2\x2\x2\x11E3\x11E4\x3\x2\x2\x2\x11E4\x177"+
		"\x3\x2\x2\x2\x11E5\x11E6\a\n\x2\x2\x11E6\x11E7\a\x13B\x2\x2\x11E7\x11E8"+
		"\a\x19C\x2\x2\x11E8\x126C\x5\x3E4\x1F3\x2\x11E9\x1216\a\x160\x2\x2\x11EA"+
		"\x11EB\a\x83\x2\x2\x11EB\x1210\a\x347\x2\x2\x11EC\x11EE\a\x349\x2\x2\x11ED"+
		"\x11EC\x3\x2\x2\x2\x11ED\x11EE\x3\x2\x2\x2\x11EE\x11EF\x3\x2\x2\x2\x11EF"+
		"\x11F0\a\x206\x2\x2\x11F0\x11F1\a\x335\x2\x2\x11F1\x120F\a\x331\x2\x2"+
		"\x11F2\x11F4\a\x349\x2\x2\x11F3\x11F2\x3\x2\x2\x2\x11F3\x11F4\x3\x2\x2"+
		"\x2\x11F4\x11F5\x3\x2\x2\x2\x11F5\x11F6\a\x256\x2\x2\x11F6\x11FA\a\x335"+
		"\x2\x2\x11F7\x11F8\a\x32D\x2\x2\x11F8\x11FB\t-\x2\x2\x11F9\x11FB\a\x311"+
		"\x2\x2\x11FA\x11F7\x3\x2\x2\x2\x11FA\x11F9\x3\x2\x2\x2\x11FB\x120F\x3"+
		"\x2\x2\x2\x11FC\x11FE\a\x349\x2\x2\x11FD\x11FC\x3\x2\x2\x2\x11FD\x11FE"+
		"\x3\x2\x2\x2\x11FE\x11FF\x3\x2\x2\x2\x11FF\x1200\a\x253\x2\x2\x1200\x1201"+
		"\a\x335\x2\x2\x1201\x120F\t.\x2\x2\x1202\x1204\a\x349\x2\x2\x1203\x1202"+
		"\x3\x2\x2\x2\x1203\x1204\x3\x2\x2\x2\x1204\x1205\x3\x2\x2\x2\x1205\x1206"+
		"\a\x24E\x2\x2\x1206\x1207\a\x335\x2\x2\x1207\x120F\a\x32D\x2\x2\x1208"+
		"\x120A\a\x349\x2\x2\x1209\x1208\x3\x2\x2\x2\x1209\x120A\x3\x2\x2\x2\x120A"+
		"\x120B\x3\x2\x2\x2\x120B\x120C\a\x2BB\x2\x2\x120C\x120D\a\x335\x2\x2\x120D"+
		"\x120F\t\t\x2\x2\x120E\x11ED\x3\x2\x2\x2\x120E\x11F3\x3\x2\x2\x2\x120E"+
		"\x11FD\x3\x2\x2\x2\x120E\x1203\x3\x2\x2\x2\x120E\x1209\x3\x2\x2\x2\x120F"+
		"\x1212\x3\x2\x2\x2\x1210\x120E\x3\x2\x2\x2\x1210\x1211\x3\x2\x2\x2\x1211"+
		"\x1213\x3\x2\x2\x2\x1212\x1210\x3\x2\x2\x2\x1213\x1217\a\x348\x2\x2\x1214"+
		"\x1217\a\x198\x2\x2\x1215\x1217\a\x2D3\x2\x2\x1216\x11EA\x3\x2\x2\x2\x1216"+
		"\x1214\x3\x2\x2\x2\x1216\x1215\x3\x2\x2\x2\x1217\x1219\x3\x2\x2\x2\x1218"+
		"\x11E9\x3\x2\x2\x2\x1218\x1219\x3\x2\x2\x2\x1219\x1234\x3\x2\x2\x2\x121A"+
		"\x121B\a\x17F\x2\x2\x121B\x1230\a\x347\x2\x2\x121C\x121E\a\x349\x2\x2"+
		"\x121D\x121C\x3\x2\x2\x2\x121D\x121E\x3\x2\x2\x2\x121E\x121F\x3\x2\x2"+
		"\x2\x121F\x1220\a\x29F\x2\x2\x1220\x1221\a\x335\x2\x2\x1221\x122F\a\x32D"+
		"\x2\x2\x1222\x1224\a\x349\x2\x2\x1223\x1222\x3\x2\x2\x2\x1223\x1224\x3"+
		"\x2\x2\x2\x1224\x1225\x3\x2\x2\x2\x1225\x1226\a\xEA\x2\x2\x1226\x1227"+
		"\a\x335\x2\x2\x1227\x122F\t/\x2\x2\x1228\x122A\a\x349\x2\x2\x1229\x1228"+
		"\x3\x2\x2\x2\x1229\x122A\x3\x2\x2\x2\x122A\x122B\x3\x2\x2\x2\x122B\x122C"+
		"\a\x14F\x2\x2\x122C\x122D\a\x335\x2\x2\x122D\x122F\t\t\x2\x2\x122E\x121D"+
		"\x3\x2\x2\x2\x122E\x1223\x3\x2\x2\x2\x122E\x1229\x3\x2\x2\x2\x122F\x1232"+
		"\x3\x2\x2\x2\x1230\x122E\x3\x2\x2\x2\x1230\x1231\x3\x2\x2\x2\x1231\x1233"+
		"\x3\x2\x2\x2\x1232\x1230\x3\x2\x2\x2\x1233\x1235\a\x348\x2\x2\x1234\x121A"+
		"\x3\x2\x2\x2\x1234\x1235\x3\x2\x2\x2\x1235\x1264\x3\x2\x2\x2\x1236\x1262"+
		"\a\x17C\x2\x2\x1237\x1239\a\x349\x2\x2\x1238\x1237\x3\x2\x2\x2\x1238\x1239"+
		"\x3\x2\x2\x2\x1239\x123B\x3\x2\x2\x2\x123A\x123C\a\xE0\x2\x2\x123B\x123A"+
		"\x3\x2\x2\x2\x123B\x123C\x3\x2\x2\x2\x123C\x123D\x3\x2\x2\x2\x123D\x1249"+
		"\x5\x3E4\x1F3\x2\x123E\x124A\a\x335\x2\x2\x123F\x1240\a\x337\x2\x2\x1240"+
		"\x124A\a\x336\x2\x2\x1241\x1242\a\x338\x2\x2\x1242\x124A\a\x335\x2\x2"+
		"\x1243\x124A\a\x336\x2\x2\x1244\x1245\a\x336\x2\x2\x1245\x124A\a\x335"+
		"\x2\x2\x1246\x124A\a\x337\x2\x2\x1247\x1248\a\x337\x2\x2\x1248\x124A\a"+
		"\x335\x2\x2\x1249\x123E\x3\x2\x2\x2\x1249\x123F\x3\x2\x2\x2\x1249\x1241"+
		"\x3\x2\x2\x2\x1249\x1243\x3\x2\x2\x2\x1249\x1244\x3\x2\x2\x2\x1249\x1246"+
		"\x3\x2\x2\x2\x1249\x1247\x3\x2\x2\x2\x124A\x124B\x3\x2\x2\x2\x124B\x124C"+
		"\t\x18\x2\x2\x124C\x1263\x3\x2\x2\x2\x124D\x124F\a\x349\x2\x2\x124E\x124D"+
		"\x3\x2\x2\x2\x124E\x124F\x3\x2\x2\x2\x124F\x1250\x3\x2\x2\x2\x1250\x1252"+
		"\t\x1D\x2\x2\x1251\x1253\a\xE0\x2\x2\x1252\x1251\x3\x2\x2\x2\x1252\x1253"+
		"\x3\x2\x2\x2\x1253\x125F\x3\x2\x2\x2\x1254\x1260\a\x335\x2\x2\x1255\x1256"+
		"\a\x337\x2\x2\x1256\x1260\a\x336\x2\x2\x1257\x1258\a\x338\x2\x2\x1258"+
		"\x1260\a\x335\x2\x2\x1259\x1260\a\x336\x2\x2\x125A\x125B\a\x336\x2\x2"+
		"\x125B\x1260\a\x335\x2\x2\x125C\x1260\a\x337\x2\x2\x125D\x125E\a\x337"+
		"\x2\x2\x125E\x1260\a\x335\x2\x2\x125F\x1254\x3\x2\x2\x2\x125F\x1255\x3"+
		"\x2\x2\x2\x125F\x1257\x3\x2\x2\x2\x125F\x1259\x3\x2\x2\x2\x125F\x125A"+
		"\x3\x2\x2\x2\x125F\x125C\x3\x2\x2\x2\x125F\x125D\x3\x2\x2\x2\x1260\x1261"+
		"\x3\x2\x2\x2\x1261\x1263\t\x18\x2\x2\x1262\x1238\x3\x2\x2\x2\x1262\x124E"+
		"\x3\x2\x2\x2\x1263\x1265\x3\x2\x2\x2\x1264\x1236\x3\x2\x2\x2\x1264\x1265"+
		"\x3\x2\x2\x2\x1265\x126D\x3\x2\x2\x2\x1266\x1267\a\x2B3\x2\x2\x1267\x126D"+
		"\a\x17C\x2\x2\x1268\x1269\a\x264\x2\x2\x1269\x126A\a\x267\x2\x2\x126A"+
		"\x126B\a\x335\x2\x2\x126B\x126D\x5\x3E4\x1F3\x2\x126C\x1218\x3\x2\x2\x2"+
		"\x126C\x1266\x3\x2\x2\x2\x126C\x1268\x3\x2\x2\x2\x126D\x179\x3\x2\x2\x2"+
		"\x126E\x126F\aK\x2\x2\x126F\x1270\a\x13B\x2\x2\x1270\x1271\a\x19C\x2\x2"+
		"\x1271\x12FB\x5\x3E4\x1F3\x2\x1272\x129F\a\x160\x2\x2\x1273\x1274\a\x83"+
		"\x2\x2\x1274\x1299\a\x347\x2\x2\x1275\x1277\a\x349\x2\x2\x1276\x1275\x3"+
		"\x2\x2\x2\x1276\x1277\x3\x2\x2\x2\x1277\x1278\x3\x2\x2\x2\x1278\x1279"+
		"\a\x206\x2\x2\x1279\x127A\a\x335\x2\x2\x127A\x1298\a\x331\x2\x2\x127B"+
		"\x127D\a\x349\x2\x2\x127C\x127B\x3\x2\x2\x2\x127C\x127D\x3\x2\x2\x2\x127D"+
		"\x127E\x3\x2\x2\x2\x127E\x127F\a\x256\x2\x2\x127F\x1283\a\x335\x2\x2\x1280"+
		"\x1281\a\x32D\x2\x2\x1281\x1284\t-\x2\x2\x1282\x1284\a\x311\x2\x2\x1283"+
		"\x1280\x3\x2\x2\x2\x1283\x1282\x3\x2\x2\x2\x1284\x1298\x3\x2\x2\x2\x1285"+
		"\x1287\a\x349\x2\x2\x1286\x1285\x3\x2\x2\x2\x1286\x1287\x3\x2\x2\x2\x1287"+
		"\x1288\x3\x2\x2\x2\x1288\x1289\a\x253\x2\x2\x1289\x128A\a\x335\x2\x2\x128A"+
		"\x1298\t.\x2\x2\x128B\x128D\a\x349\x2\x2\x128C\x128B\x3\x2\x2\x2\x128C"+
		"\x128D\x3\x2\x2\x2\x128D\x128E\x3\x2\x2\x2\x128E\x128F\a\x24E\x2\x2\x128F"+
		"\x1290\a\x335\x2\x2\x1290\x1298\a\x32D\x2\x2\x1291\x1293\a\x349\x2\x2"+
		"\x1292\x1291\x3\x2\x2\x2\x1292\x1293\x3\x2\x2\x2\x1293\x1294\x3\x2\x2"+
		"\x2\x1294\x1295\a\x2BB\x2\x2\x1295\x1296\a\x335\x2\x2\x1296\x1298\t\t"+
		"\x2\x2\x1297\x1276\x3\x2\x2\x2\x1297\x127C\x3\x2\x2\x2\x1297\x1286\x3"+
		"\x2\x2\x2\x1297\x128C\x3\x2\x2\x2\x1297\x1292\x3\x2\x2\x2\x1298\x129B"+
		"\x3\x2\x2\x2\x1299\x1297\x3\x2\x2\x2\x1299\x129A\x3\x2\x2\x2\x129A\x129C"+
		"\x3\x2\x2\x2\x129B\x1299\x3\x2\x2\x2\x129C\x12A0\a\x348\x2\x2\x129D\x12A0"+
		"\a\x198\x2\x2\x129E\x12A0\a\x2D3\x2\x2\x129F\x1273\x3\x2\x2\x2\x129F\x129D"+
		"\x3\x2\x2\x2\x129F\x129E\x3\x2\x2\x2\x12A0\x12A2\x3\x2\x2\x2\x12A1\x1272"+
		"\x3\x2\x2\x2\x12A1\x12A2\x3\x2\x2\x2\x12A2\x12C3\x3\x2\x2\x2\x12A3\x12A4"+
		"\a\x17F\x2\x2\x12A4\x12BF\a\x347\x2\x2\x12A5\x12A7\a\x349\x2\x2\x12A6"+
		"\x12A5\x3\x2\x2\x2\x12A6\x12A7\x3\x2\x2\x2\x12A7\x12A8\x3\x2\x2\x2\x12A8"+
		"\x12A9\a\x29F\x2\x2\x12A9\x12AA\a\x335\x2\x2\x12AA\x12BE\a\x32D\x2\x2"+
		"\x12AB\x12AD\a\x349\x2\x2\x12AC\x12AB\x3\x2\x2\x2\x12AC\x12AD\x3\x2\x2"+
		"\x2\x12AD\x12AE\x3\x2\x2\x2\x12AE\x12AF\a\xEA\x2\x2\x12AF\x12B0\a\x335"+
		"\x2\x2\x12B0\x12BE\t/\x2\x2\x12B1\x12B3\a\x349\x2\x2\x12B2\x12B1\x3\x2"+
		"\x2\x2\x12B2\x12B3\x3\x2\x2\x2\x12B3\x12B4\x3\x2\x2\x2\x12B4\x12B5\a\x14F"+
		"\x2\x2\x12B5\x12B6\a\x335\x2\x2\x12B6\x12BE\t\t\x2\x2\x12B7\x12B9\a\x349"+
		"\x2\x2\x12B8\x12B7\x3\x2\x2\x2\x12B8\x12B9\x3\x2\x2\x2\x12B9\x12BA\x3"+
		"\x2\x2\x2\x12BA\x12BB\a\x19D\x2\x2\x12BB\x12BC\a\x335\x2\x2\x12BC\x12BE"+
		"\x5\x3E4\x1F3\x2\x12BD\x12A6\x3\x2\x2\x2\x12BD\x12AC\x3\x2\x2\x2\x12BD"+
		"\x12B2\x3\x2\x2\x2\x12BD\x12B8\x3\x2\x2\x2\x12BE\x12C1\x3\x2\x2\x2\x12BF"+
		"\x12BD\x3\x2\x2\x2\x12BF\x12C0\x3\x2\x2\x2\x12C0\x12C2\x3\x2\x2\x2\x12C1"+
		"\x12BF\x3\x2\x2\x2\x12C2\x12C4\a\x348\x2\x2\x12C3\x12A3\x3\x2\x2\x2\x12C3"+
		"\x12C4\x3\x2\x2\x2\x12C4\x12F3\x3\x2\x2\x2\x12C5\x12F1\a\x17C\x2\x2\x12C6"+
		"\x12C8\a\x349\x2\x2\x12C7\x12C6\x3\x2\x2\x2\x12C7\x12C8\x3\x2\x2\x2\x12C8"+
		"\x12CA\x3\x2\x2\x2\x12C9\x12CB\a\xE0\x2\x2\x12CA\x12C9\x3\x2\x2\x2\x12CA"+
		"\x12CB\x3\x2\x2\x2\x12CB\x12CC\x3\x2\x2\x2\x12CC\x12D8\x5\x3E4\x1F3\x2"+
		"\x12CD\x12D9\a\x335\x2\x2\x12CE\x12CF\a\x337\x2\x2\x12CF\x12D9\a\x336"+
		"\x2\x2\x12D0\x12D1\a\x338\x2\x2\x12D1\x12D9\a\x335\x2\x2\x12D2\x12D9\a"+
		"\x336\x2\x2\x12D3\x12D4\a\x336\x2\x2\x12D4\x12D9\a\x335\x2\x2\x12D5\x12D9"+
		"\a\x337\x2\x2\x12D6\x12D7\a\x337\x2\x2\x12D7\x12D9\a\x335\x2\x2\x12D8"+
		"\x12CD\x3\x2\x2\x2\x12D8\x12CE\x3\x2\x2\x2\x12D8\x12D0\x3\x2\x2\x2\x12D8"+
		"\x12D2\x3\x2\x2\x2\x12D8\x12D3\x3\x2\x2\x2\x12D8\x12D5\x3\x2\x2\x2\x12D8"+
		"\x12D6\x3\x2\x2\x2\x12D9\x12DA\x3\x2\x2\x2\x12DA\x12DB\t\x18\x2\x2\x12DB"+
		"\x12F2\x3\x2\x2\x2\x12DC\x12DE\a\x349\x2\x2\x12DD\x12DC\x3\x2\x2\x2\x12DD"+
		"\x12DE\x3\x2\x2\x2\x12DE\x12DF\x3\x2\x2\x2\x12DF\x12E1\t\x1D\x2\x2\x12E0"+
		"\x12E2\a\xE0\x2\x2\x12E1\x12E0\x3\x2\x2\x2\x12E1\x12E2\x3\x2\x2\x2\x12E2"+
		"\x12EE\x3\x2\x2\x2\x12E3\x12EF\a\x335\x2\x2\x12E4\x12E5\a\x337\x2\x2\x12E5"+
		"\x12EF\a\x336\x2\x2\x12E6\x12E7\a\x338\x2\x2\x12E7\x12EF\a\x335\x2\x2"+
		"\x12E8\x12EF\a\x336\x2\x2\x12E9\x12EA\a\x336\x2\x2\x12EA\x12EF\a\x335"+
		"\x2\x2\x12EB\x12EF\a\x337\x2\x2\x12EC\x12ED\a\x337\x2\x2\x12ED\x12EF\a"+
		"\x335\x2\x2\x12EE\x12E3\x3\x2\x2\x2\x12EE\x12E4\x3\x2\x2\x2\x12EE\x12E6"+
		"\x3\x2\x2\x2\x12EE\x12E8\x3\x2\x2\x2\x12EE\x12E9\x3\x2\x2\x2\x12EE\x12EB"+
		"\x3\x2\x2\x2\x12EE\x12EC\x3\x2\x2\x2\x12EF\x12F0\x3\x2\x2\x2\x12F0\x12F2"+
		"\t\x18\x2\x2\x12F1\x12C7\x3\x2\x2\x2\x12F1\x12DD\x3\x2\x2\x2\x12F2\x12F4"+
		"\x3\x2\x2\x2\x12F3\x12C5\x3\x2\x2\x2\x12F3\x12F4\x3\x2\x2\x2\x12F4\x12FC"+
		"\x3\x2\x2\x2\x12F5\x12F6\a\x2B3\x2\x2\x12F6\x12FC\a\x17C\x2\x2\x12F7\x12F8"+
		"\a\x264\x2\x2\x12F8\x12F9\a\x267\x2\x2\x12F9\x12FA\a\x335\x2\x2\x12FA"+
		"\x12FC\x5\x3E4\x1F3\x2\x12FB\x12A1\x3\x2\x2\x2\x12FB\x12F5\x3\x2\x2\x2"+
		"\x12FB\x12F7\x3\x2\x2\x2\x12FC\x17B\x3\x2\x2\x2\x12FD\x12FE\a\n\x2\x2"+
		"\x12FE\x12FF\a\x13B\x2\x2\x12FF\x1300\a\x19C\x2\x2\x1300\x1301\a\x149"+
		"\x2\x2\x1301\x1306\x5\x3E4\x1F3\x2\x1302\x1303\a\x87\x2\x2\x1303\x1304"+
		"\a\x13B\x2\x2\x1304\x1305\a\x19C\x2\x2\x1305\x1307\x5\x3E4\x1F3\x2\x1306"+
		"\x1302\x3\x2\x2\x2\x1306\x1307\x3\x2\x2\x2\x1307\x130F\x3\x2\x2\x2\x1308"+
		"\x1309\t\x15\x2\x2\x1309\x130A\a\x347\x2\x2\x130A\x130B\x5\x3E4\x1F3\x2"+
		"\x130B\x130C\a\x348\x2\x2\x130C\x130E\x3\x2\x2\x2\x130D\x1308\x3\x2\x2"+
		"\x2\x130E\x1311\x3\x2\x2\x2\x130F\x130D\x3\x2\x2\x2\x130F\x1310\x3\x2"+
		"\x2\x2\x1310\x1318\x3\x2\x2\x2\x1311\x130F\x3\x2\x2\x2\x1312\x1313\a\x17F"+
		"\x2\x2\x1313\x1314\a\x347\x2\x2\x1314\x1315\a\x14F\x2\x2\x1315\x1316\a"+
		"\x335\x2\x2\x1316\x1317\t\t\x2\x2\x1317\x1319\a\x348\x2\x2\x1318\x1312"+
		"\x3\x2\x2\x2\x1318\x1319\x3\x2\x2\x2\x1319\x17D\x3\x2\x2\x2\x131A\x131B"+
		"\aK\x2\x2\x131B\x131C\a\x13B\x2\x2\x131C\x131D\a\x19C\x2\x2\x131D\x131E"+
		"\a\x149\x2\x2\x131E\x1323\x5\x3E4\x1F3\x2\x131F\x1320\a\x87\x2\x2\x1320"+
		"\x1321\a\x13B\x2\x2\x1321\x1322\a\x19C\x2\x2\x1322\x1324\x5\x3E4\x1F3"+
		"\x2\x1323\x131F\x3\x2\x2\x2\x1323\x1324\x3\x2\x2\x2\x1324\x132C\x3\x2"+
		"\x2\x2\x1325\x1326\a\x4\x2\x2\x1326\x1327\a\x347\x2\x2\x1327\x1328\x5"+
		"\x3E4\x1F3\x2\x1328\x1329\a\x348\x2\x2\x1329\x132B\x3\x2\x2\x2\x132A\x1325"+
		"\x3\x2\x2\x2\x132B\x132E\x3\x2\x2\x2\x132C\x132A\x3\x2\x2\x2\x132C\x132D"+
		"\x3\x2\x2\x2\x132D\x1335\x3\x2\x2\x2\x132E\x132C\x3\x2\x2\x2\x132F\x1330"+
		"\a\x17F\x2\x2\x1330\x1331\a\x347\x2\x2\x1331\x1332\a\x14F\x2\x2\x1332"+
		"\x1333\a\x335\x2\x2\x1333\x1334\t\t\x2\x2\x1334\x1336\a\x348\x2\x2\x1335"+
		"\x132F\x3\x2\x2\x2\x1335\x1336\x3\x2\x2\x2\x1336\x17F\x3\x2\x2\x2\x1337"+
		"\x1338\a\n\x2\x2\x1338\x1339\a\x13B\x2\x2\x1339\x133A\a>\x2\x2\x133A\x13A4"+
		"\a\x141\x2\x2\x133B\x133C\a\x108\x2\x2\x133C\x1360\a\x18D\x2\x2\x133D"+
		"\x133E\a\x1C8\x2\x2\x133E\x134E\a\x335\x2\x2\x133F\x134F\a\x19E\x2\x2"+
		"\x1340\x1342\a\x349\x2\x2\x1341\x1340\x3\x2\x2\x2\x1341\x1342\x3\x2\x2"+
		"\x2\x1342\x1343\x3\x2\x2\x2\x1343\x134B\a\x32D\x2\x2\x1344\x1346\a\x349"+
		"\x2\x2\x1345\x1344\x3\x2\x2\x2\x1345\x1346\x3\x2\x2\x2\x1346\x1347\x3"+
		"\x2\x2\x2\x1347\x1348\a\x32D\x2\x2\x1348\x1349\a\x160\x2\x2\x1349\x134B"+
		"\a\x32D\x2\x2\x134A\x1341\x3\x2\x2\x2\x134A\x1345\x3\x2\x2\x2\x134B\x134C"+
		"\x3\x2\x2\x2\x134C\x134A\x3\x2\x2\x2\x134C\x134D\x3\x2\x2\x2\x134D\x134F"+
		"\x3\x2\x2\x2\x134E\x133F\x3\x2\x2\x2\x134E\x134A\x3\x2\x2\x2\x134F\x1361"+
		"\x3\x2\x2\x2\x1350\x1351\a\x278\x2\x2\x1351\x135C\a\x335\x2\x2\x1352\x1354"+
		"\a\x349\x2\x2\x1353\x1352\x3\x2\x2\x2\x1353\x1354\x3\x2\x2\x2\x1354\x1355"+
		"\x3\x2\x2\x2\x1355\x135D\a\x32D\x2\x2\x1356\x1358\a\x349\x2\x2\x1357\x1356"+
		"\x3\x2\x2\x2\x1357\x1358\x3\x2\x2\x2\x1358\x1359\x3\x2\x2\x2\x1359\x135A"+
		"\a\x32D\x2\x2\x135A\x135B\a\x160\x2\x2\x135B\x135D\a\x32D\x2\x2\x135C"+
		"\x1353\x3\x2\x2\x2\x135C\x1357\x3\x2\x2\x2\x135D\x135E\x3\x2\x2\x2\x135E"+
		"\x135C\x3\x2\x2\x2\x135E\x135F\x3\x2\x2\x2\x135F\x1361\x3\x2\x2\x2\x1360"+
		"\x133D\x3\x2\x2\x2\x1360\x1350\x3\x2\x2\x2\x1361\x13A5\x3\x2\x2\x2\x1362"+
		"\x1363\a\x61\x2\x2\x1363\x1373\a\xBD\x2\x2\x1364\x1374\a\xE9\x2\x2\x1365"+
		"\x1374\a\xE6\x2\x2\x1366\x1367\a\x28D\x2\x2\x1367\x1368\a\x335\x2\x2\x1368"+
		"\x1374\t\x30\x2\x2\x1369\x136A\a\xC5\x2\x2\x136A\x136E\a\x335\x2\x2\x136B"+
		"\x136C\a\x32D\x2\x2\x136C\x136F\a\x257\x2\x2\x136D\x136F\a[\x2\x2\x136E"+
		"\x136B\x3\x2\x2\x2\x136E\x136D\x3\x2\x2\x2\x136F\x1374\x3\x2\x2\x2\x1370"+
		"\x1371\a\x24E\x2\x2\x1371\x1372\a\x335\x2\x2\x1372\x1374\t\x31\x2\x2\x1373"+
		"\x1364\x3\x2\x2\x2\x1373\x1365\x3\x2\x2\x2\x1373\x1366\x3\x2\x2\x2\x1373"+
		"\x1369\x3\x2\x2\x2\x1373\x1370\x3\x2\x2\x2\x1374\x13A5\x3\x2\x2\x2\x1375"+
		"\x1376\a\x7F\x2\x2\x1376\x1377\a\x35\x2\x2\x1377\x1389\a\x29A\x2\x2\x1378"+
		"\x1379\a\x177\x2\x2\x1379\x137A\a\x335\x2\x2\x137A\x138A\t\x30\x2\x2\x137B"+
		"\x137C\a\x14B\x2\x2\x137C\x137D\a\x335\x2\x2\x137D\x138A\t\x30\x2\x2\x137E"+
		"\x137F\a\x14C\x2\x2\x137F\x1380\a\x335\x2\x2\x1380\x138A\t\x30\x2\x2\x1381"+
		"\x1382\a\x14D\x2\x2\x1382\x138A\t\x30\x2\x2\x1383\x1384\a\x80\x2\x2\x1384"+
		"\x1385\a\x335\x2\x2\x1385\x138A\t\x30\x2\x2\x1386\x1387\a\x97\x2\x2\x1387"+
		"\x1388\a\x335\x2\x2\x1388\x138A\t\x31\x2\x2\x1389\x1378\x3\x2\x2\x2\x1389"+
		"\x137B\x3\x2\x2\x2\x1389\x137E\x3\x2\x2\x2\x1389\x1381\x3\x2\x2\x2\x1389"+
		"\x1383\x3\x2\x2\x2\x1389\x1386\x3\x2\x2\x2\x138A\x13A5\x3\x2\x2\x2\x138B"+
		"\x138C\a\x21C\x2\x2\x138C\x138D\a\x35\x2\x2\x138D\x138E\a\x43\x2\x2\x138E"+
		"\x138F\a\x335\x2\x2\x138F\x13A5\t\x32\x2\x2\x1390\x1391\a$\x2\x2\x1391"+
		"\x1392\a\x28F\x2\x2\x1392\x139F\a|\x2\x2\x1393\x1394\a\xE9\x2\x2\x1394"+
		"\x1395\a\x347\x2\x2\x1395\x1396\a\x84\x2\x2\x1396\x1397\a\x335\x2\x2\x1397"+
		"\x1398\a\x331\x2\x2\x1398\x1399\a\x349\x2\x2\x1399\x139A\a\x2E2\x2\x2"+
		"\x139A\x139B\a\x335\x2\x2\x139B\x139C\a\x32D\x2\x2\x139C\x139D\t\x33\x2"+
		"\x2\x139D\x13A0\a\x348\x2\x2\x139E\x13A0\a\xE6\x2\x2\x139F\x1393\x3\x2"+
		"\x2\x2\x139F\x139E\x3\x2\x2\x2\x13A0\x13A5\x3\x2\x2\x2\x13A1\x13A2\a\x141"+
		"\x2\x2\x13A2\x13A3\a\x146\x2\x2\x13A3\x13A5\t\t\x2\x2\x13A4\x133B\x3\x2"+
		"\x2\x2\x13A4\x1362\x3\x2\x2\x2\x13A4\x1375\x3\x2\x2\x2\x13A4\x138B\x3"+
		"\x2\x2\x2\x13A4\x1390\x3\x2\x2\x2\x13A4\x13A1\x3\x2\x2\x2\x13A5\x181\x3"+
		"\x2\x2\x2\x13A6\x13A7\a\n\x2\x2\x13A7\x13A8\a\x13B\x2\x2\x13A8\x13A9\a"+
		"\x127\x2\x2\x13A9\x13B1\x5\x3E4\x1F3\x2\x13AA\x13AB\t\x15\x2\x2\x13AB"+
		"\x13AC\a\xC9\x2\x2\x13AC\x13B2\x5\x3E4\x1F3\x2\x13AD\x13AE\a\x17F\x2\x2"+
		"\x13AE\x13AF\a\x267\x2\x2\x13AF\x13B0\a\x335\x2\x2\x13B0\x13B2\x5\x3E4"+
		"\x1F3\x2\x13B1\x13AA\x3\x2\x2\x2\x13B1\x13AD\x3\x2\x2\x2\x13B2\x183\x3"+
		"\x2\x2\x2\x13B3\x13B4\aK\x2\x2\x13B4\x13B5\a\x13B\x2\x2\x13B5\x13B6\a"+
		"\x127\x2\x2\x13B6\x13B9\x5\x3E4\x1F3\x2\x13B7\x13B8\a\x15\x2\x2\x13B8"+
		"\x13BA\x5\x3E4\x1F3\x2\x13B9\x13B7\x3\x2\x2\x2\x13B9\x13BA\x3\x2\x2\x2"+
		"\x13BA\x185\x3\x2\x2\x2\x13BB\x13BC\a\n\x2\x2\x13BC\x13BD\a\x13B\x2\x2"+
		"\x13BD\x13BE\a\x127\x2\x2\x13BE\x13BF\x5\x3E4\x1F3\x2\x13BF\x13C0\t\x15"+
		"\x2\x2\x13C0\x13C1\a\xC9\x2\x2\x13C1\x13C2\x5\x3E4\x1F3\x2\x13C2\x187"+
		"\x3\x2\x2\x2\x13C3\x13C4\a\n\x2\x2\x13C4\x13C5\a\x13C\x2\x2\x13C5\x13CD"+
		"\x5\x3E4\x1F3\x2\x13C6\x13C7\a\xE9\x2\x2\x13C7\x13C8\a\x29E\x2\x2\x13C8"+
		"\x13C9\x5\x3AE\x1D8\x2\x13C9\x13CA\a\x342\x2\x2\x13CA\x13CB\x3\x2\x2\x2"+
		"\x13CB\x13CC\x5\x3E4\x1F3\x2\x13CC\x13CE\x3\x2\x2\x2\x13CD\x13C6\x3\x2"+
		"\x2\x2\x13CD\x13CE\x3\x2\x2\x2\x13CE\x13D6\x3\x2\x2\x2\x13CF\x13D1\a\x349"+
		"\x2\x2\x13D0\x13CF\x3\x2\x2\x2\x13D0\x13D1\x3\x2\x2\x2\x13D1\x13D2\x3"+
		"\x2\x2\x2\x13D2\x13D3\t\x15\x2\x2\x13D3\x13D5\x5\x3E4\x1F3\x2\x13D4\x13D0"+
		"\x3\x2\x2\x2\x13D5\x13D8\x3\x2\x2\x2\x13D6\x13D4\x3\x2\x2\x2\x13D6\x13D7"+
		"\x3\x2\x2\x2\x13D7\x189\x3\x2\x2\x2\x13D8\x13D6\x3\x2\x2\x2\x13D9\x13DA"+
		"\aK\x2\x2\x13DA\x13DB\a\x13C\x2\x2\x13DB\x13DE\x5\x3E4\x1F3\x2\x13DC\x13DD"+
		"\a\x15\x2\x2\x13DD\x13DF\x5\x3E4\x1F3\x2\x13DE\x13DC\x3\x2\x2\x2\x13DE"+
		"\x13DF\x3\x2\x2\x2\x13DF\x13E0\x3\x2\x2\x2\x13E0\x13E1\a\xE9\x2\x2\x13E1"+
		"\x13E5\a\x29E\x2\x2\x13E2\x13E3\x5\x3AE\x1D8\x2\x13E3\x13E4\a\x342\x2"+
		"\x2\x13E4\x13E6\x3\x2\x2\x2\x13E5\x13E2\x3\x2\x2\x2\x13E5\x13E6\x3\x2"+
		"\x2\x2\x13E6\x13E7\x3\x2\x2\x2\x13E7\x13F5\x5\x3E4\x1F3\x2\x13E8\x13F0"+
		"\a\x347\x2\x2\x13E9\x13EB\a\x349\x2\x2\x13EA\x13E9\x3\x2\x2\x2\x13EA\x13EB"+
		"\x3\x2\x2\x2\x13EB\x13EE\x3\x2\x2\x2\x13EC\x13EF\x5\x3E4\x1F3\x2\x13ED"+
		"\x13EF\a[\x2\x2\x13EE\x13EC\x3\x2\x2\x2\x13EE\x13ED\x3\x2\x2\x2\x13EF"+
		"\x13F1\x3\x2\x2\x2\x13F0\x13EA\x3\x2\x2\x2\x13F1\x13F2\x3\x2\x2\x2\x13F2"+
		"\x13F0\x3\x2\x2\x2\x13F2\x13F3\x3\x2\x2\x2\x13F3\x13F4\x3\x2\x2\x2\x13F4"+
		"\x13F6\a\x348\x2\x2\x13F5\x13E8\x3\x2\x2\x2\x13F5\x13F6\x3\x2\x2\x2\x13F6"+
		"\x18B\x3\x2\x2\x2\x13F7\x13F8\a\n\x2\x2\x13F8\x13F9\a\x13C\x2\x2\x13F9"+
		"\x13FA\a\xBF\x2\x2\x13FA\x1410\a\xAE\x2\x2\x13FB\x13FD\a\x20C\x2\x2\x13FC"+
		"\x13FB\x3\x2\x2\x2\x13FC\x13FD\x3\x2\x2\x2\x13FD\x13FE\x3\x2\x2\x2\x13FE"+
		"\x1411\a\x114\x2\x2\x13FF\x140E\a\x17F\x2\x2\x1400\x1401\a\x27E\x2\x2"+
		"\x1401\x1402\a\x335\x2\x2\x1402\x1403\a\x331\x2\x2\x1403\x1404\a\x349"+
		"\x2\x2\x1404\x1405\a\xE8\x2\x2\x1405\x1406\a\x335\x2\x2\x1406\x140F\a"+
		"\x331\x2\x2\x1407\x1408\a\x269\x2\x2\x1408\x1409\a\x335\x2\x2\x1409\x140A"+
		"\a\x331\x2\x2\x140A\x140B\a\x349\x2\x2\x140B\x140C\a\x26B\x2\x2\x140C"+
		"\x140D\a\x335\x2\x2\x140D\x140F\a\x331\x2\x2\x140E\x1400\x3\x2\x2\x2\x140E"+
		"\x1407\x3\x2\x2\x2\x140E\x140F\x3\x2\x2\x2\x140F\x1411\x3\x2\x2\x2\x1410"+
		"\x13FC\x3\x2\x2\x2\x1410\x13FF\x3\x2\x2\x2\x1411\x18D\x3\x2\x2\x2\x1412"+
		"\x1413\a\n\x2\x2\x1413\x1414\a\x2F5\x2\x2\x1414\x1415\a\xAE\x2\x2\x1415"+
		"\x1416\x5\x3E4\x1F3\x2\x1416\x1417\t\x15\x2\x2\x1417\x1418\a\x1F5\x2\x2"+
		"\x1418\x1424\a\'\x2\x2\x1419\x141A\a,\x2\x2\x141A\x1425\x5\x3E4\x1F3\x2"+
		"\x141B\x141C\a\xF8\x2\x2\x141C\x141D\a\x335\x2\x2\x141D\x1425\a\x331\x2"+
		"\x2\x141E\x141F\a\x2F5\x2\x2\x141F\x1420\a\xAE\x2\x2\x1420\x1425\x5\x3E4"+
		"\x1F3\x2\x1421\x1422\a\x12\x2\x2\x1422\x1423\a\xAE\x2\x2\x1423\x1425\x5"+
		"\x3E4\x1F3\x2\x1424\x1419\x3\x2\x2\x2\x1424\x141B\x3\x2\x2\x2\x1424\x141E"+
		"\x3\x2\x2\x2\x1424\x1421\x3\x2\x2\x2\x1425\x18F\x3\x2\x2\x2\x1426\x1427"+
		"\a\n\x2\x2\x1427\x1428\a\x2F5\x2\x2\x1428\x1429\a\xAE\x2\x2\x1429\x142C"+
		"\x5\x3E4\x1F3\x2\x142A\x142B\a\x15\x2\x2\x142B\x142D\x5\x3E4\x1F3\x2\x142C"+
		"\x142A\x3\x2\x2\x2\x142C\x142D\x3\x2\x2\x2\x142D\x1431\x3\x2\x2\x2\x142E"+
		"\x142F\a\x8D\x2\x2\x142F\x1430\a\x29B\x2\x2\x1430\x1432\x5\x3E4\x1F3\x2"+
		"\x1431\x142E\x3\x2\x2\x2\x1431\x1432\x3\x2\x2\x2\x1432\x1433\x3\x2\x2"+
		"\x2\x1433\x1454\a\x17F\x2\x2\x1434\x1435\a\x235\x2\x2\x1435\x1436\a\x335"+
		"\x2\x2\x1436\x1444\a\x331\x2\x2\x1437\x1438\a\x190\x2\x2\x1438\x1439\a"+
		"\x335\x2\x2\x1439\x1444\t\x34\x2\x2\x143A\x143B\a\x222\x2\x2\x143B\x143C"+
		"\a\x335\x2\x2\x143C\x1444\a\x331\x2\x2\x143D\x143E\a\x29C\x2\x2\x143E"+
		"\x143F\a\x335\x2\x2\x143F\x1444\a\x331\x2\x2\x1440\x1441\a\x1CA\x2\x2"+
		"\x1441\x1442\a\x335\x2\x2\x1442\x1444\t\f\x2\x2\x1443\x1434\x3\x2\x2\x2"+
		"\x1443\x1437\x3\x2\x2\x2\x1443\x143A\x3\x2\x2\x2\x1443\x143D\x3\x2\x2"+
		"\x2\x1443\x1440\x3\x2\x2\x2\x1444\x1455\x3\x2\x2\x2\x1445\x1446\a\x1F5"+
		"\x2\x2\x1446\x1452\a\'\x2\x2\x1447\x1448\a,\x2\x2\x1448\x1453\x5\x3E4"+
		"\x1F3\x2\x1449\x144A\a\xF8\x2\x2\x144A\x144B\a\x335\x2\x2\x144B\x1453"+
		"\a\x331\x2\x2\x144C\x144D\a\x2F5\x2\x2\x144D\x144E\a\xAE\x2\x2\x144E\x1453"+
		"\x5\x3E4\x1F3\x2\x144F\x1450\a\x12\x2\x2\x1450\x1451\a\xAE\x2\x2\x1451"+
		"\x1453\x5\x3E4\x1F3\x2\x1452\x1447\x3\x2\x2\x2\x1452\x1449\x3\x2\x2\x2"+
		"\x1452\x144C\x3\x2\x2\x2\x1452\x144F\x3\x2\x2\x2\x1453\x1455\x3\x2\x2"+
		"\x2\x1454\x1443\x3\x2\x2\x2\x1454\x1445\x3\x2\x2\x2\x1455\x191\x3\x2\x2"+
		"\x2\x1456\x1457\aK\x2\x2\x1457\x145B\a\x2F7\x2\x2\x1458\x1459\x5\x3E4"+
		"\x1F3\x2\x1459\x145A\a\x342\x2\x2\x145A\x145C\x3\x2\x2\x2\x145B\x1458"+
		"\x3\x2\x2\x2\x145B\x145C\x3\x2\x2\x2\x145C\x145D\x3\x2\x2\x2\x145D\x145E"+
		"\x5\x3E4\x1F3\x2\x145E\x1479\a\x87\x2\x2\x145F\x1460\x5\x3A8\x1D5\x2\x1460"+
		"\x1461\a\x342\x2\x2\x1461\x1463\x3\x2\x2\x2\x1462\x145F\x3\x2\x2\x2\x1462"+
		"\x1463\x3\x2\x2\x2\x1463\x1467\x3\x2\x2\x2\x1464\x1465\x5\x3AC\x1D7\x2"+
		"\x1465\x1466\a\x342\x2\x2\x1466\x1468\x3\x2\x2\x2\x1467\x1464\x3\x2\x2"+
		"\x2\x1467\x1468\x3\x2\x2\x2\x1468\x146C\x3\x2\x2\x2\x1469\x146A\x5\x3E4"+
		"\x1F3\x2\x146A\x146B\a\x342\x2\x2\x146B\x146D\x3\x2\x2\x2\x146C\x1469"+
		"\x3\x2\x2\x2\x146C\x146D\x3\x2\x2\x2\x146D\x146E\x3\x2\x2\x2\x146E\x147A"+
		"\x5\x3E4\x1F3\x2\x146F\x1470\x5\x3E4\x1F3\x2\x1470\x1471\a\x342\x2\x2"+
		"\x1471\x1473\x3\x2\x2\x2\x1472\x146F\x3\x2\x2\x2\x1472\x1473\x3\x2\x2"+
		"\x2\x1473\x1477\x3\x2\x2\x2\x1474\x1475\x5\x3E4\x1F3\x2\x1475\x1476\a"+
		"\x342\x2\x2\x1476\x1478\x3\x2\x2\x2\x1477\x1474\x3\x2\x2\x2\x1477\x1478"+
		"\x3\x2\x2\x2\x1478\x147A\x3\x2\x2\x2\x1479\x1462\x3\x2\x2\x2\x1479\x1472"+
		"\x3\x2\x2\x2\x147A\x193\x3\x2\x2\x2\x147B\x147C\a\n\x2\x2\x147C\x147D"+
		"\a\x174\x2\x2\x147D\x147E\x5\x3E4\x1F3\x2\x147E\x14B1\a\x17F\x2\x2\x147F"+
		"\x1481\a\x349\x2\x2\x1480\x147F\x3\x2\x2\x2\x1480\x1481\x3\x2\x2\x2\x1481"+
		"\x1482\x3\x2\x2\x2\x1482\x1483\a\x267\x2\x2\x1483\x1484\a\x335\x2\x2\x1484"+
		"\x14B2\x5\x3E4\x1F3\x2\x1485\x1487\a\x349\x2\x2\x1486\x1485\x3\x2\x2\x2"+
		"\x1486\x1487\x3\x2\x2\x2\x1487\x1488\x3\x2\x2\x2\x1488\x1489\a]\x2\x2"+
		"\x1489\x148C\a\x335\x2\x2\x148A\x148D\x5\x3AE\x1D8\x2\x148B\x148D\a\xE3"+
		"\x2\x2\x148C\x148A\x3\x2\x2\x2\x148C\x148B\x3\x2\x2\x2\x148D\x14B2\x3"+
		"\x2\x2\x2\x148E\x1490\a\x349\x2\x2\x148F\x148E\x3\x2\x2\x2\x148F\x1490"+
		"\x3\x2\x2\x2\x1490\x1491\x3\x2\x2\x2\x1491\x1492\a\x245\x2\x2\x1492\x1493"+
		"\a\x335\x2\x2\x1493\x14B2\x5\x3E4\x1F3\x2\x1494\x1496\a\x349\x2\x2\x1495"+
		"\x1494\x3\x2\x2\x2\x1495\x1496\x3\x2\x2\x2\x1496\x1497\x3\x2\x2\x2\x1497"+
		"\x1498\a\xF8\x2\x2\x1498\x1499\a\x335\x2\x2\x1499\x149D\a\x331\x2\x2\x149A"+
		"\x149B\a\xE8\x2\x2\x149B\x149C\a\x335\x2\x2\x149C\x149E\a\x331\x2\x2\x149D"+
		"\x149A\x3\x2\x2\x2\x149E\x149F\x3\x2\x2\x2\x149F\x149D\x3\x2\x2\x2\x149F"+
		"\x14A0\x3\x2\x2\x2\x14A0\x14B2\x3\x2\x2\x2\x14A1\x14A3\a\x349\x2\x2\x14A2"+
		"\x14A1\x3\x2\x2\x2\x14A2\x14A3\x3\x2\x2\x2\x14A3\x14A4\x3\x2\x2\x2\x14A4"+
		"\x14A5\a\x1DD\x2\x2\x14A5\x14A9\a\x335\x2\x2\x14A6\x14AA\a\xD9\x2\x2\x14A7"+
		"\x14AA\a\x32D\x2\x2\x14A8\x14AA\x5\x3E4\x1F3\x2\x14A9\x14A6\x3\x2\x2\x2"+
		"\x14A9\x14A7\x3\x2\x2\x2\x14A9\x14A8\x3\x2\x2\x2\x14AA\x14B2\x3\x2\x2"+
		"\x2\x14AB\x14AD\a\x349\x2\x2\x14AC\x14AB\x3\x2\x2\x2\x14AC\x14AD\x3\x2"+
		"\x2\x2\x14AD\x14AE\x3\x2\x2\x2\x14AE\x14AF\a\x191\x2\x2\x14AF\x14B0\a"+
		"\x335\x2\x2\x14B0\x14B2\t\t\x2\x2\x14B1\x1480\x3\x2\x2\x2\x14B1\x1486"+
		"\x3\x2\x2\x2\x14B1\x148F\x3\x2\x2\x2\x14B1\x1495\x3\x2\x2\x2\x14B1\x14A2"+
		"\x3\x2\x2\x2\x14B1\x14AC\x3\x2\x2\x2\x14B2\x14B3\x3\x2\x2\x2\x14B3\x14B1"+
		"\x3\x2\x2\x2\x14B3\x14B4\x3\x2\x2\x2\x14B4\x195\x3\x2\x2\x2\x14B5\x14B6"+
		"\aK\x2\x2\x14B6\x14B7\a\x174\x2\x2\x14B7\x14BB\x5\x3E4\x1F3\x2\x14B8\x14B9"+
		"\t\x35\x2\x2\x14B9\x14BA\a\x245\x2\x2\x14BA\x14BC\x5\x3E4\x1F3\x2\x14BB"+
		"\x14B8\x3\x2\x2\x2\x14BB\x14BC\x3\x2\x2\x2\x14BC\x14CF\x3\x2\x2\x2\x14BD"+
		"\x14CC\a\x17F\x2\x2\x14BE\x14C0\a\x349\x2\x2\x14BF\x14BE\x3\x2\x2\x2\x14BF"+
		"\x14C0\x3\x2\x2\x2\x14C0\x14C1\x3\x2\x2\x2\x14C1\x14C2\a]\x2\x2\x14C2"+
		"\x14C3\a\x335\x2\x2\x14C3\x14CB\x5\x3AE\x1D8\x2\x14C4\x14C6\a\x349\x2"+
		"\x2\x14C5\x14C4\x3\x2\x2\x2\x14C5\x14C6\x3\x2\x2\x2\x14C6\x14C7\x3\x2"+
		"\x2\x2\x14C7\x14C8\a\x191\x2\x2\x14C8\x14C9\a\x335\x2\x2\x14C9\x14CB\t"+
		"\t\x2\x2\x14CA\x14BF\x3\x2\x2\x2\x14CA\x14C5\x3\x2\x2\x2\x14CB\x14CE\x3"+
		"\x2\x2\x2\x14CC\x14CA\x3\x2\x2\x2\x14CC\x14CD\x3\x2\x2\x2\x14CD\x14D0"+
		"\x3\x2\x2\x2\x14CE\x14CC\x3\x2\x2\x2\x14CF\x14BD\x3\x2\x2\x2\x14CF\x14D0"+
		"\x3\x2\x2\x2\x14D0\x1548\x3\x2\x2\x2\x14D1\x14D2\aK\x2\x2\x14D2\x1523"+
		"\a\x174\x2\x2\x14D3\x14F6\x5\x3E4\x1F3\x2\x14D4\x14F3\a\x17F\x2\x2\x14D5"+
		"\x14D7\a\x349\x2\x2\x14D6\x14D5\x3\x2\x2\x2\x14D6\x14D7\x3\x2\x2\x2\x14D7"+
		"\x14D8\x3\x2\x2\x2\x14D8\x14D9\a]\x2\x2\x14D9\x14DA\a\x335\x2\x2\x14DA"+
		"\x14F2\x5\x3AE\x1D8\x2\x14DB\x14DD\a\x349\x2\x2\x14DC\x14DB\x3\x2\x2\x2"+
		"\x14DC\x14DD\x3\x2\x2\x2\x14DD\x14DE\x3\x2\x2\x2\x14DE\x14DF\a\x1DD\x2"+
		"\x2\x14DF\x14E3\a\x335\x2\x2\x14E0\x14E4\a\xD9\x2\x2\x14E1\x14E4\a\x32D"+
		"\x2\x2\x14E2\x14E4\x5\x3E4\x1F3\x2\x14E3\x14E0\x3\x2\x2\x2\x14E3\x14E1"+
		"\x3\x2\x2\x2\x14E3\x14E2\x3\x2\x2\x2\x14E4\x14F2\x3\x2\x2\x2\x14E5\x14E7"+
		"\a\x349\x2\x2\x14E6\x14E5\x3\x2\x2\x2\x14E6\x14E7\x3\x2\x2\x2\x14E7\x14E8"+
		"\x3\x2\x2\x2\x14E8\x14E9\a\x144\x2\x2\x14E9\x14EA\a\x335\x2\x2\x14EA\x14F2"+
		"\a\x332\x2\x2\x14EB\x14ED\a\x349\x2\x2\x14EC\x14EB\x3\x2\x2\x2\x14EC\x14ED"+
		"\x3\x2\x2\x2\x14ED\x14EE\x3\x2\x2\x2\x14EE\x14EF\a\x191\x2\x2\x14EF\x14F0"+
		"\a\x335\x2\x2\x14F0\x14F2\t\t\x2\x2\x14F1\x14D6\x3\x2\x2\x2\x14F1\x14DC"+
		"\x3\x2\x2\x2\x14F1\x14E6\x3\x2\x2\x2\x14F1\x14EC\x3\x2\x2\x2\x14F2\x14F5"+
		"\x3\x2\x2\x2\x14F3\x14F1\x3\x2\x2\x2\x14F3\x14F4\x3\x2\x2\x2\x14F4\x14F7"+
		"\x3\x2\x2\x2\x14F5\x14F3\x3\x2\x2\x2\x14F6\x14D4\x3\x2\x2\x2\x14F6\x14F7"+
		"\x3\x2\x2\x2\x14F7\x1524\x3\x2\x2\x2\x14F8\x14F9\x5\x3E4\x1F3\x2\x14F9"+
		"\x14FA\a\x17F\x2\x2\x14FA\x14FB\a\xF8\x2\x2\x14FB\x14FC\a\x335\x2\x2\x14FC"+
		"\x151B\a\x331\x2\x2\x14FD\x14FF\a\x349\x2\x2\x14FE\x14FD\x3\x2\x2\x2\x14FE"+
		"\x14FF\x3\x2\x2\x2\x14FF\x1500\x3\x2\x2\x2\x1500\x1501\a]\x2\x2\x1501"+
		"\x1502\a\x335\x2\x2\x1502\x151A\x5\x3AE\x1D8\x2\x1503\x1505\a\x349\x2"+
		"\x2\x1504\x1503\x3\x2\x2\x2\x1504\x1505\x3\x2\x2\x2\x1505\x1506\x3\x2"+
		"\x2\x2\x1506\x1507\a\x1DD\x2\x2\x1507\x150B\a\x335\x2\x2\x1508\x150C\a"+
		"\xD9\x2\x2\x1509\x150C\a\x32D\x2\x2\x150A\x150C\x5\x3E4\x1F3\x2\x150B"+
		"\x1508\x3\x2\x2\x2\x150B\x1509\x3\x2\x2\x2\x150B\x150A\x3\x2\x2\x2\x150C"+
		"\x151A\x3\x2\x2\x2\x150D\x150F\a\x349\x2\x2\x150E\x150D\x3\x2\x2\x2\x150E"+
		"\x150F\x3\x2\x2\x2\x150F\x1510\x3\x2\x2\x2\x1510\x1511\a\x144\x2\x2\x1511"+
		"\x1512\a\x335\x2\x2\x1512\x151A\a\x332\x2\x2\x1513\x1515\a\x349\x2\x2"+
		"\x1514\x1513\x3\x2\x2\x2\x1514\x1515\x3\x2\x2\x2\x1515\x1516\x3\x2\x2"+
		"\x2\x1516\x1517\a\x191\x2\x2\x1517\x1518\a\x335\x2\x2\x1518\x151A\t\t"+
		"\x2\x2\x1519\x14FE\x3\x2\x2\x2\x1519\x1504\x3\x2\x2\x2\x1519\x150E\x3"+
		"\x2\x2\x2\x1519\x1514\x3\x2\x2\x2\x151A\x151D\x3\x2\x2\x2\x151B\x1519"+
		"\x3\x2\x2\x2\x151B\x151C\x3\x2\x2\x2\x151C\x1524\x3\x2\x2\x2\x151D\x151B"+
		"\x3\x2\x2\x2\x151E\x151F\x5\x3E4\x1F3\x2\x151F\x1520\a\x8D\x2\x2\x1520"+
		"\x1521\a}\x2\x2\x1521\x1522\a\x29B\x2\x2\x1522\x1524\x3\x2\x2\x2\x1523"+
		"\x14D3\x3\x2\x2\x2\x1523\x14F8\x3\x2\x2\x2\x1523\x151E\x3\x2\x2\x2\x1524"+
		"\x1548\x3\x2\x2\x2\x1525\x1526\aK\x2\x2\x1526\x1527\a\x174\x2\x2\x1527"+
		"\x1542\x5\x3E4\x1F3\x2\x1528\x1529\a\x181\x2\x2\x1529\x1538\a\x245\x2"+
		"\x2\x152A\x152C\a\x349\x2\x2\x152B\x152A\x3\x2\x2\x2\x152B\x152C\x3\x2"+
		"\x2\x2\x152C\x152D\x3\x2\x2\x2\x152D\x152E\a]\x2\x2\x152E\x152F\a\x335"+
		"\x2\x2\x152F\x1537\x5\x3AE\x1D8\x2\x1530\x1532\a\x349\x2\x2\x1531\x1530"+
		"\x3\x2\x2\x2\x1531\x1532\x3\x2\x2\x2\x1532\x1533\x3\x2\x2\x2\x1533\x1534"+
		"\a\x191\x2\x2\x1534\x1535\a\x335\x2\x2\x1535\x1537\t\t\x2\x2\x1536\x152B"+
		"\x3\x2\x2\x2\x1536\x1531\x3\x2\x2\x2\x1537\x153A\x3\x2\x2\x2\x1538\x1536"+
		"\x3\x2\x2\x2\x1538\x1539\x3\x2\x2\x2\x1539\x1543\x3\x2\x2\x2\x153A\x1538"+
		"\x3\x2\x2\x2\x153B\x153C\t\x35\x2\x2\x153C\x153D\a,\x2\x2\x153D\x1543"+
		"\x5\x3E4\x1F3\x2\x153E\x153F\t\x35\x2\x2\x153F\x1540\a\x12\x2\x2\x1540"+
		"\x1541\a\xAE\x2\x2\x1541\x1543\x5\x3E4\x1F3\x2\x1542\x1528\x3\x2\x2\x2"+
		"\x1542\x153B\x3\x2\x2\x2\x1542\x153E\x3\x2\x2\x2\x1543\x1548\x3\x2\x2"+
		"\x2\x1544\x1545\aK\x2\x2\x1545\x1546\a\x174\x2\x2\x1546\x1548\x5\x3E4"+
		"\x1F3\x2\x1547\x14B5\x3\x2\x2\x2\x1547\x14D1\x3\x2\x2\x2\x1547\x1525\x3"+
		"\x2\x2\x2\x1547\x1544\x3\x2\x2\x2\x1548\x197\x3\x2\x2\x2\x1549\x154A\a"+
		"K\x2\x2\x154A\x154B\a\x174\x2\x2\x154B\x1551\x5\x3E4\x1F3\x2\x154C\x154D"+
		"\t\x35\x2\x2\x154D\x154E\a\x245\x2\x2\x154E\x1552\x5\x3E4\x1F3\x2\x154F"+
		"\x1550\a\x181\x2\x2\x1550\x1552\a\x245\x2\x2\x1551\x154C\x3\x2\x2\x2\x1551"+
		"\x154F\x3\x2\x2\x2\x1551\x1552\x3\x2\x2\x2\x1552\x1557\x3\x2\x2\x2\x1553"+
		"\x1554\a\x17F\x2\x2\x1554\x1555\a]\x2\x2\x1555\x1556\a\x335\x2\x2\x1556"+
		"\x1558\x5\x3AE\x1D8\x2\x1557\x1553\x3\x2\x2\x2\x1557\x1558\x3\x2\x2\x2"+
		"\x1558\x1566\x3\x2\x2\x2\x1559\x155A\aK\x2\x2\x155A\x155B\a\x174\x2\x2"+
		"\x155B\x155C\x5\x3E4\x1F3\x2\x155C\x155D\a\x8D\x2\x2\x155D\x155E\a}\x2"+
		"\x2\x155E\x1563\a\x29B\x2\x2\x155F\x1560\a\x17F\x2\x2\x1560\x1561\a]\x2"+
		"\x2\x1561\x1562\a\x335\x2\x2\x1562\x1564\x5\x3AE\x1D8\x2\x1563\x155F\x3"+
		"\x2\x2\x2\x1563\x1564\x3\x2\x2\x2\x1564\x1566\x3\x2\x2\x2\x1565\x1549"+
		"\x3\x2\x2\x2\x1565\x1559\x3\x2\x2\x2\x1566\x199\x3\x2\x2\x2\x1567\x1568"+
		"\a\n\x2\x2\x1568\x1569\a\x174\x2\x2\x1569\x156A\x5\x3E4\x1F3\x2\x156A"+
		"\x1583\a\x17F\x2\x2\x156B\x156D\a\x349\x2\x2\x156C\x156B\x3\x2\x2\x2\x156C"+
		"\x156D\x3\x2\x2\x2\x156D\x156E\x3\x2\x2\x2\x156E\x156F\a\x267\x2\x2\x156F"+
		"\x1570\a\x335\x2\x2\x1570\x1584\x5\x3E4\x1F3\x2\x1571\x1573\a\x349\x2"+
		"\x2\x1572\x1571\x3\x2\x2\x2\x1572\x1573\x3\x2\x2\x2\x1573\x1574\x3\x2"+
		"\x2\x2\x1574\x1575\a]\x2\x2\x1575\x1576\a\x335\x2\x2\x1576\x1584\x5\x3AE"+
		"\x1D8\x2\x1577\x1579\a\x349\x2\x2\x1578\x1577\x3\x2\x2\x2\x1578\x1579"+
		"\x3\x2\x2\x2\x1579\x157A\x3\x2\x2\x2\x157A\x157B\a\x245\x2\x2\x157B\x157C"+
		"\a\x335\x2\x2\x157C\x1584\x5\x3E4\x1F3\x2\x157D\x157F\a\x349\x2\x2\x157E"+
		"\x157D\x3\x2\x2\x2\x157E\x157F\x3\x2\x2\x2\x157F\x1580\x3\x2\x2\x2\x1580"+
		"\x1581\a\x191\x2\x2\x1581\x1582\a\x335\x2\x2\x1582\x1584\t\t\x2\x2\x1583"+
		"\x156C\x3\x2\x2\x2\x1583\x1572\x3\x2\x2\x2\x1583\x1578\x3\x2\x2\x2\x1583"+
		"\x157E\x3\x2\x2\x2\x1584\x1585\x3\x2\x2\x2\x1585\x1583\x3\x2\x2\x2\x1585"+
		"\x1586\x3\x2\x2\x2\x1586\x19B\x3\x2\x2\x2\x1587\x1588\a\n\x2\x2\x1588"+
		"\x1589\a\x31F\x2\x2\x1589\x158C\a\x94\x2\x2\x158A\x158D\x5\x3E4\x1F3\x2"+
		"\x158B\x158D\a\x1DB\x2\x2\x158C\x158A\x3\x2\x2\x2\x158C\x158B\x3\x2\x2"+
		"\x2\x158D\x15AD\x3\x2\x2\x2\x158E\x158F\a\x17F\x2\x2\x158F\x15A8\a\x347"+
		"\x2\x2\x1590\x1591\a\x226\x2\x2\x1591\x1592\a\x335\x2\x2\x1592\x15A9\t"+
		"\x36\x2\x2\x1593\x1595\a\x349\x2\x2\x1594\x1593\x3\x2\x2\x2\x1594\x1595"+
		"\x3\x2\x2\x2\x1595\x1596\x3\x2\x2\x2\x1596\x1597\a\x2B8\x2\x2\x1597\x1598"+
		"\a\x335\x2\x2\x1598\x15A9\a\x32D\x2\x2\x1599\x159B\a\x349\x2\x2\x159A"+
		"\x1599\x3\x2\x2\x2\x159A\x159B\x3\x2\x2\x2\x159B\x159C\x3\x2\x2\x2\x159C"+
		"\x159D\a\x2B7\x2\x2\x159D\x159E\a\x335\x2\x2\x159E\x15A9\a\x32D\x2\x2"+
		"\x159F\x15A0\a\x2B9\x2\x2\x15A0\x15A1\a\x335\x2\x2\x15A1\x15A9\a\x32D"+
		"\x2\x2\x15A2\x15A3\a\x24D\x2\x2\x15A3\x15A4\a\x335\x2\x2\x15A4\x15A9\a"+
		"\x32D\x2\x2\x15A5\x15A6\a\x218\x2\x2\x15A6\x15A7\a\x335\x2\x2\x15A7\x15A9"+
		"\a\x32D\x2\x2\x15A8\x1590\x3\x2\x2\x2\x15A8\x1594\x3\x2\x2\x2\x15A8\x159A"+
		"\x3\x2\x2\x2\x15A8\x159F\x3\x2\x2\x2\x15A8\x15A2\x3\x2\x2\x2\x15A8\x15A5"+
		"\x3\x2\x2\x2\x15A9\x15AA\x3\x2\x2\x2\x15AA\x15A8\x3\x2\x2\x2\x15AA\x15AB"+
		"\x3\x2\x2\x2\x15AB\x15AC\x3\x2\x2\x2\x15AC\x15AE\a\x348\x2\x2\x15AD\x158E"+
		"\x3\x2\x2\x2\x15AD\x15AE\x3\x2\x2\x2\x15AE\x15B4\x3\x2\x2\x2\x15AF\x15B2"+
		"\a\x313\x2\x2\x15B0\x15B3\x5\x3E4\x1F3\x2\x15B1\x15B3\a\x1DB\x2\x2\x15B2"+
		"\x15B0\x3\x2\x2\x2\x15B2\x15B1\x3\x2\x2\x2\x15B3\x15B5\x3\x2\x2\x2\x15B4"+
		"\x15AF\x3\x2\x2\x2\x15B4\x15B5\x3\x2\x2\x2\x15B5\x19D\x3\x2\x2\x2\x15B6"+
		"\x15B7\aK\x2\x2\x15B7\x15B8\a\x31F\x2\x2\x15B8\x15B9\a\x94\x2\x2\x15B9"+
		"\x15D9\x5\x3E4\x1F3\x2\x15BA\x15BB\a\x17F\x2\x2\x15BB\x15D4\a\x347\x2"+
		"\x2\x15BC\x15BD\a\x226\x2\x2\x15BD\x15BE\a\x335\x2\x2\x15BE\x15D5\t\x36"+
		"\x2\x2\x15BF\x15C1\a\x349\x2\x2\x15C0\x15BF\x3\x2\x2\x2\x15C0\x15C1\x3"+
		"\x2\x2\x2\x15C1\x15C2\x3\x2\x2\x2\x15C2\x15C3\a\x2B8\x2\x2\x15C3\x15C4"+
		"\a\x335\x2\x2\x15C4\x15D5\a\x32D\x2\x2\x15C5\x15C7\a\x349\x2\x2\x15C6"+
		"\x15C5\x3\x2\x2\x2\x15C6\x15C7\x3\x2\x2\x2\x15C7\x15C8\x3\x2\x2\x2\x15C8"+
		"\x15C9\a\x2B7\x2\x2\x15C9\x15CA\a\x335\x2\x2\x15CA\x15D5\a\x32D\x2\x2"+
		"\x15CB\x15CC\a\x2B9\x2\x2\x15CC\x15CD\a\x335\x2\x2\x15CD\x15D5\a\x32D"+
		"\x2\x2\x15CE\x15CF\a\x24D\x2\x2\x15CF\x15D0\a\x335\x2\x2\x15D0\x15D5\a"+
		"\x32D\x2\x2\x15D1\x15D2\a\x218\x2\x2\x15D2\x15D3\a\x335\x2\x2\x15D3\x15D5"+
		"\a\x32D\x2\x2\x15D4\x15BC\x3\x2\x2\x2\x15D4\x15C0\x3\x2\x2\x2\x15D4\x15C6"+
		"\x3\x2\x2\x2\x15D4\x15CB\x3\x2\x2\x2\x15D4\x15CE\x3\x2\x2\x2\x15D4\x15D1"+
		"\x3\x2\x2\x2\x15D5\x15D6\x3\x2\x2\x2\x15D6\x15D4\x3\x2\x2\x2\x15D6\x15D7"+
		"\x3\x2\x2\x2\x15D7\x15D8\x3\x2\x2\x2\x15D8\x15DA\a\x348\x2\x2\x15D9\x15BA"+
		"\x3\x2\x2\x2\x15D9\x15DA\x3\x2\x2\x2\x15DA\x15E8\x3\x2\x2\x2\x15DB\x15DE"+
		"\a\x313\x2\x2\x15DC\x15DF\x5\x3E4\x1F3\x2\x15DD\x15DF\a\x1DB\x2\x2\x15DE"+
		"\x15DC\x3\x2\x2\x2\x15DE\x15DD\x3\x2\x2\x2\x15DE\x15DF\x3\x2\x2\x2\x15DF"+
		"\x15E6\x3\x2\x2\x2\x15E0\x15E2\a\x349\x2\x2\x15E1\x15E0\x3\x2\x2\x2\x15E1"+
		"\x15E2\x3\x2\x2\x2\x15E2\x15E3\x3\x2\x2\x2\x15E3\x15E4\a}\x2\x2\x15E4"+
		"\x15E7\x5\x3E4\x1F3\x2\x15E5\x15E7\a\x1DB\x2\x2\x15E6\x15E1\x3\x2\x2\x2"+
		"\x15E6\x15E5\x3\x2\x2\x2\x15E6\x15E7\x3\x2\x2\x2\x15E7\x15E9\x3\x2\x2"+
		"\x2\x15E8\x15DB\x3\x2\x2\x2\x15E8\x15E9\x3\x2\x2\x2\x15E9\x19F\x3\x2\x2"+
		"\x2\x15EA\x15EB\aK\x2\x2\x15EB\x15EC\a\x320\x2\x2\x15EC\x15ED\a\x134\x2"+
		"\x2\x15ED\x15F1\a\x1BC\x2\x2\x15EE\x15EF\x5\x3E4\x1F3\x2\x15EF\x15F0\a"+
		"\x342\x2\x2\x15F0\x15F2\x3\x2\x2\x2\x15F1\x15EE\x3\x2\x2\x2\x15F1\x15F2"+
		"\x3\x2\x2\x2\x15F2\x15F3\x3\x2\x2\x2\x15F3\x15F4\x5\x3E4\x1F3\x2\x15F4"+
		"\x15F8\a\x10\x2\x2\x15F5\x15F9\a\x331\x2\x2\x15F6\x15F9\x5\x3E4\x1F3\x2"+
		"\x15F7\x15F9\a\x32C\x2\x2\x15F8\x15F5\x3\x2\x2\x2\x15F8\x15F6\x3\x2\x2"+
		"\x2\x15F8\x15F7\x3\x2\x2\x2\x15F9\x1A1\x3\x2\x2\x2\x15FA\x15FB\aK\x2\x2"+
		"\x15FB\x15FE\a\x29E\x2\x2\x15FC\x15FF\x5\x3A6\x1D4\x2\x15FD\x15FF\x5\x3E4"+
		"\x1F3\x2\x15FE\x15FC\x3\x2\x2\x2\x15FE\x15FD\x3\x2\x2\x2\x15FF\x1601\x3"+
		"\x2\x2\x2\x1600\x1602\x5\x1A4\xD3\x2\x1601\x1600\x3\x2\x2\x2\x1601\x1602"+
		"\x3\x2\x2\x2\x1602\x1606\x3\x2\x2\x2\x1603\x1604\a\xE9\x2\x2\x1604\x1607"+
		"\x5\x3E4\x1F3\x2\x1605\x1607\a[\x2\x2\x1606\x1603\x3\x2\x2\x2\x1606\x1605"+
		"\x3\x2\x2\x2\x1606\x1607\x3\x2\x2\x2\x1607\x1A3\x3\x2\x2\x2\x1608\x160F"+
		"\a\x17F\x2\x2\x1609\x160A\a\x2EA\x2\x2\x160A\x160B\a\x335\x2\x2\x160B"+
		"\x160D\t\t\x2\x2\x160C\x160E\a\x349\x2\x2\x160D\x160C\x3\x2\x2\x2\x160D"+
		"\x160E\x3\x2\x2\x2\x160E\x1610\x3\x2\x2\x2\x160F\x1609\x3\x2\x2\x2\x160F"+
		"\x1610\x3\x2\x2\x2\x1610\x1617\x3\x2\x2\x2\x1611\x1612\a\x2BF\x2\x2\x1612"+
		"\x1613\a\x335\x2\x2\x1613\x1615\t\t\x2\x2\x1614\x1616\a\x349\x2\x2\x1615"+
		"\x1614\x3\x2\x2\x2\x1615\x1616\x3\x2\x2\x2\x1616\x1618\x3\x2\x2\x2\x1617"+
		"\x1611\x3\x2\x2\x2\x1617\x1618\x3\x2\x2\x2\x1618\x1646\x3\x2\x2\x2\x1619"+
		"\x161A\a\x187\x2\x2\x161A\x1640\a\x347\x2\x2\x161B\x161C\a\x2EA\x2\x2"+
		"\x161C\x161D\a\x335\x2\x2\x161D\x161F\t\t\x2\x2\x161E\x1620\a\x349\x2"+
		"\x2\x161F\x161E\x3\x2\x2\x2\x161F\x1620\x3\x2\x2\x2\x1620\x1622\x3\x2"+
		"\x2\x2\x1621\x161B\x3\x2\x2\x2\x1621\x1622\x3\x2\x2\x2\x1622\x1629\x3"+
		"\x2\x2\x2\x1623\x1624\a\x299\x2\x2\x1624\x1625\a\x335\x2\x2\x1625\x1627"+
		"\x5\x3B4\x1DB\x2\x1626\x1628\a\x349\x2\x2\x1627\x1626\x3\x2\x2\x2\x1627"+
		"\x1628\x3\x2\x2\x2\x1628\x162A\x3\x2\x2\x2\x1629\x1623\x3\x2\x2\x2\x1629"+
		"\x162A\x3\x2\x2\x2\x162A\x1631\x3\x2\x2\x2\x162B\x162C\a\x252\x2\x2\x162C"+
		"\x162D\a\x335\x2\x2\x162D\x162F\a\x32D\x2\x2\x162E\x1630\a\x349\x2\x2"+
		"\x162F\x162E\x3\x2\x2\x2\x162F\x1630\x3\x2\x2\x2\x1630\x1632\x3\x2\x2"+
		"\x2\x1631\x162B\x3\x2\x2\x2\x1631\x1632\x3\x2\x2\x2\x1632\x163D\x3\x2"+
		"\x2\x2\x1633\x1634\ax\x2\x2\x1634\x1638\a\x10\x2\x2\x1635\x1639\a\x2D5"+
		"\x2\x2\x1636\x1639\a\x331\x2\x2\x1637\x1639\a\x287\x2\x2\x1638\x1635\x3"+
		"\x2\x2\x2\x1638\x1636\x3\x2\x2\x2\x1638\x1637\x3\x2\x2\x2\x1639\x163B"+
		"\x3\x2\x2\x2\x163A\x163C\a\x349\x2\x2\x163B\x163A\x3\x2\x2\x2\x163B\x163C"+
		"\x3\x2\x2\x2\x163C\x163E\x3\x2\x2\x2\x163D\x1633\x3\x2\x2\x2\x163D\x163E"+
		"\x3\x2\x2\x2\x163E\x1641\x3\x2\x2\x2\x163F\x1641\ai\x2\x2\x1640\x1621"+
		"\x3\x2\x2\x2\x1640\x163F\x3\x2\x2\x2\x1641\x1642\x3\x2\x2\x2\x1642\x1644"+
		"\a\x348\x2\x2\x1643\x1645\a\x349\x2\x2\x1644\x1643\x3\x2\x2\x2\x1644\x1645"+
		"\x3\x2\x2\x2\x1645\x1647\x3\x2\x2\x2\x1646\x1619\x3\x2\x2\x2\x1646\x1647"+
		"\x3\x2\x2\x2\x1647\x164F\x3\x2\x2\x2\x1648\x1649\a\x28E\x2\x2\x1649\x164A"+
		"\a\x347\x2\x2\x164A\x164B\a\x2EA\x2\x2\x164B\x164C\a\x335\x2\x2\x164C"+
		"\x164D\t\t\x2\x2\x164D\x164E\x3\x2\x2\x2\x164E\x1650\a\x348\x2\x2\x164F"+
		"\x1648\x3\x2\x2\x2\x164F\x1650\x3\x2\x2\x2\x1650\x1A5\x3\x2\x2\x2\x1651"+
		"\x1652\a\n\x2\x2\x1652\x1655\a\x29E\x2\x2\x1653\x1656\x5\x3A6\x1D4\x2"+
		"\x1654\x1656\x5\x3E4\x1F3\x2\x1655\x1653\x3\x2\x2\x2\x1655\x1654\x3\x2"+
		"\x2\x2\x1656\x1659\x3\x2\x2\x2\x1657\x165A\x5\x1A4\xD3\x2\x1658\x165A"+
		"\x5\x1A8\xD5\x2\x1659\x1657\x3\x2\x2\x2\x1659\x1658\x3\x2\x2\x2\x165A"+
		"\x1A7\x3\x2\x2\x2\x165B\x1661\a\x2AB\x2\x2\x165C\x165D\a\x17F\x2\x2\x165D"+
		"\x165E\a\x347\x2\x2\x165E\x165F\x5\x1AA\xD6\x2\x165F\x1660\a\x348\x2\x2"+
		"\x1660\x1662\x3\x2\x2\x2\x1661\x165C\x3\x2\x2\x2\x1661\x1662\x3\x2\x2"+
		"\x2\x1662\x1671\x3\x2\x2\x2\x1663\x1668\a\x2B4\x2\x2\x1664\x1665\a\x17F"+
		"\x2\x2\x1665\x1666\a\x240\x2\x2\x1666\x1667\a\x335\x2\x2\x1667\x1669\t"+
		"\t\x2\x2\x1668\x1664\x3\x2\x2\x2\x1668\x1669\x3\x2\x2\x2\x1669\x1671\x3"+
		"\x2\x2\x2\x166A\x166B\a\x265\x2\x2\x166B\x166E\a\x160\x2\x2\x166C\x166F"+
		"\x5\x3E4\x1F3\x2\x166D\x166F\a[\x2\x2\x166E\x166C\x3\x2\x2\x2\x166E\x166D"+
		"\x3\x2\x2\x2\x166F\x1671\x3\x2\x2\x2\x1670\x165B\x3\x2\x2\x2\x1670\x1663"+
		"\x3\x2\x2\x2\x1670\x166A\x3\x2\x2\x2\x1671\x1A9\x3\x2\x2\x2\x1672\x1673"+
		"\a\x254\x2\x2\x1673\x1674\a\x335\x2\x2\x1674\x1675\a\x32D\x2\x2\x1675"+
		"\x1AB\x3\x2\x2\x2\x1676\x1677\aK\x2\x2\x1677\x1678\a\x46\x2\x2\x1678\x167B"+
		"\x5\x3D0\x1E9\x2\x1679\x167A\a\x15\x2\x2\x167A\x167C\x5\x3E4\x1F3\x2\x167B"+
		"\x1679\x3\x2\x2\x2\x167B\x167C\x3\x2\x2\x2\x167C\x167D\x3\x2\x2\x2\x167D"+
		"\x1688\a\x347\x2\x2\x167E\x1681\x5\x3E4\x1F3\x2\x167F\x1681\a[\x2\x2\x1680"+
		"\x167E\x3\x2\x2\x2\x1680\x167F\x3\x2\x2\x2\x1681\x1682\x3\x2\x2\x2\x1682"+
		"\x1683\a\x2D8\x2\x2\x1683\x1684\a\'\x2\x2\x1684\x1686\t\x37\x2\x2\x1685"+
		"\x1687\a\x349\x2\x2\x1686\x1685\x3\x2\x2\x2\x1686\x1687\x3\x2\x2\x2\x1687"+
		"\x1689\x3\x2\x2\x2\x1688\x1680\x3\x2\x2\x2\x1689\x168A\x3\x2\x2\x2\x168A"+
		"\x1688\x3\x2\x2\x2\x168A\x168B\x3\x2\x2\x2\x168B\x168C\x3\x2\x2\x2\x168C"+
		"\x168D\a\x348\x2\x2\x168D\x1AD\x3\x2\x2\x2\x168E\x1694\x5\x3CC\x1E7\x2"+
		"\x168F\x1694\x5\x3CE\x1E8\x2\x1690\x1694\x5\x3D4\x1EB\x2\x1691\x1694\x5"+
		"\x3D6\x1EC\x2\x1692\x1694\x5\x3DA\x1EE\x2\x1693\x168E\x3\x2\x2\x2\x1693"+
		"\x168F\x3\x2\x2\x2\x1693\x1690\x3\x2\x2\x2\x1693\x1691\x3\x2\x2\x2\x1693"+
		"\x1692\x3\x2\x2\x2\x1694\x1AF\x3\x2\x2\x2\x1695\x1696\aK\x2\x2\x1696\x1697"+
		"\a\x25A\x2\x2\x1697\x1698\a\x30B\x2\x2\x1698\x169B\x5\x3E4\x1F3\x2\x1699"+
		"\x169A\a\x15\x2\x2\x169A\x169C\x5\x3E4\x1F3\x2\x169B\x1699\x3\x2\x2\x2"+
		"\x169B\x169C\x3\x2\x2\x2\x169C\x169D\x3\x2\x2\x2\x169D\x169E\a\x315\x2"+
		"\x2\x169E\x16A7\a\x335\x2\x2\x169F\x16A8\a\xD9\x2\x2\x16A0\x16A8\a\x1F1"+
		"\x2\x2\x16A1\x16A8\a\x31C\x2\x2\x16A2\x16A3\a\x314\x2\x2\x16A3\x16A4\a"+
		"\x17F\x2\x2\x16A4\x16A5\a\x134\x2\x2\x16A5\x16A6\a\x1BC\x2\x2\x16A6\x16A8"+
		"\x5\x3E4\x1F3\x2\x16A7\x169F\x3\x2\x2\x2\x16A7\x16A0\x3\x2\x2\x2\x16A7"+
		"\x16A1\x3\x2\x2\x2\x16A7\x16A2\x3\x2\x2\x2\x16A8\x1B1\x3\x2\x2\x2\x16A9"+
		"\x16AB\x5\x2FE\x180\x2\x16AA\x16A9\x3\x2\x2\x2\x16AA\x16AB\x3\x2\x2\x2"+
		"\x16AB\x16AC\x3\x2\x2\x2\x16AC\x16B4\a\xCC\x2\x2\x16AD\x16AE\a\x161\x2"+
		"\x2\x16AE\x16AF\a\x347\x2\x2\x16AF\x16B0\x5\x2F0\x179\x2\x16B0\x16B2\a"+
		"\x348\x2\x2\x16B1\x16B3\a\xF9\x2\x2\x16B2\x16B1\x3\x2\x2\x2\x16B2\x16B3"+
		"\x3\x2\x2\x2\x16B3\x16B5\x3\x2\x2\x2\x16B4\x16AD\x3\x2\x2\x2\x16B4\x16B5"+
		"\x3\x2\x2\x2\x16B5\x16B7\x3\x2\x2\x2\x16B6\x16B8\a\xA7\x2\x2\x16B7\x16B6"+
		"\x3\x2\x2\x2\x16B7\x16B8\x3\x2\x2\x2\x16B8\x16B9\x3\x2\x2\x2\x16B9\x16BB"+
		"\x5\x3B8\x1DD\x2\x16BA\x16BC\x5\x374\x1BB\x2\x16BB\x16BA\x3\x2\x2\x2\x16BB"+
		"\x16BC\x3\x2\x2\x2\x16BC\x16BE\x3\x2\x2\x2\x16BD\x16BF\x5\x36E\x1B8\x2"+
		"\x16BE\x16BD\x3\x2\x2\x2\x16BE\x16BF\x3\x2\x2\x2\x16BF\x16C0\x3\x2\x2"+
		"\x2\x16C0\x16C1\a\x313\x2\x2\x16C1\x16C2\x5\x338\x19D\x2\x16C2\x16C3\a"+
		"\xE9\x2\x2\x16C3\x16CE\x5\x306\x184\x2\x16C4\x16C5\a\x17B\x2\x2\x16C5"+
		"\x16C8\a\xBE\x2\x2\x16C6\x16C7\a\v\x2\x2\x16C7\x16C9\x5\x306\x184\x2\x16C8"+
		"\x16C6\x3\x2\x2\x2\x16C8\x16C9\x3\x2\x2\x2\x16C9\x16CA\x3\x2\x2\x2\x16CA"+
		"\x16CB\a\x15F\x2\x2\x16CB\x16CD\x5\x1B4\xDB\x2\x16CC\x16C4\x3\x2\x2\x2"+
		"\x16CD\x16D0\x3\x2\x2\x2\x16CE\x16CC\x3\x2\x2\x2\x16CE\x16CF\x3\x2\x2"+
		"\x2\x16CF\x16DE\x3\x2\x2\x2\x16D0\x16CE\x3\x2\x2\x2\x16D1\x16D2\a\x17B"+
		"\x2\x2\x16D2\x16D3\a\xE0\x2\x2\x16D3\x16D6\a\xBE\x2\x2\x16D4\x16D5\a\'"+
		"\x2\x2\x16D5\x16D7\a\x15C\x2\x2\x16D6\x16D4\x3\x2\x2\x2\x16D6\x16D7\x3"+
		"\x2\x2\x2\x16D7\x16DA\x3\x2\x2\x2\x16D8\x16D9\a\v\x2\x2\x16D9\x16DB\x5"+
		"\x306\x184\x2\x16DA\x16D8\x3\x2\x2\x2\x16DA\x16DB\x3\x2\x2\x2\x16DB\x16DC"+
		"\x3\x2\x2\x2\x16DC\x16DD\a\x15F\x2\x2\x16DD\x16DF\x5\x1B6\xDC\x2\x16DE"+
		"\x16D1\x3\x2\x2\x2\x16DE\x16DF\x3\x2\x2\x2\x16DF\x16ED\x3\x2\x2\x2\x16E0"+
		"\x16E1\a\x17B\x2\x2\x16E1\x16E2\a\xE0\x2\x2\x16E2\x16E3\a\xBE\x2\x2\x16E3"+
		"\x16E4\a\'\x2\x2\x16E4\x16E7\a\x148\x2\x2\x16E5\x16E6\a\v\x2\x2\x16E6"+
		"\x16E8\x5\x306\x184\x2\x16E7\x16E5\x3\x2\x2\x2\x16E7\x16E8\x3\x2\x2\x2"+
		"\x16E8\x16E9\x3\x2\x2\x2\x16E9\x16EA\a\x15F\x2\x2\x16EA\x16EC\x5\x1B4"+
		"\xDB\x2\x16EB\x16E0\x3\x2\x2\x2\x16EC\x16EF\x3\x2\x2\x2\x16ED\x16EB\x3"+
		"\x2\x2\x2\x16ED\x16EE\x3\x2\x2\x2\x16EE\x16F1\x3\x2\x2\x2\x16EF\x16ED"+
		"\x3\x2\x2\x2\x16F0\x16F2\x5\x1C8\xE5\x2\x16F1\x16F0\x3\x2\x2\x2\x16F1"+
		"\x16F2\x3\x2\x2\x2\x16F2\x16F4\x3\x2\x2\x2\x16F3\x16F5\x5\x324\x193\x2"+
		"\x16F4\x16F3\x3\x2\x2\x2\x16F4\x16F5\x3\x2\x2\x2\x16F5\x16F6\x3\x2\x2"+
		"\x2\x16F6\x16F7\a\x34A\x2\x2\x16F7\x1B3\x3\x2\x2\x2\x16F8\x16F9\a\x16F"+
		"\x2\x2\x16F9\x16FA\a\x141\x2\x2\x16FA\x16FF\x5\x302\x182\x2\x16FB\x16FC"+
		"\a\x349\x2\x2\x16FC\x16FE\x5\x302\x182\x2\x16FD\x16FB\x3\x2\x2\x2\x16FE"+
		"\x1701\x3\x2\x2\x2\x16FF\x16FD\x3\x2\x2\x2\x16FF\x1700\x3\x2\x2\x2\x1700"+
		"\x1704\x3\x2\x2\x2\x1701\x16FF\x3\x2\x2\x2\x1702\x1704\a^\x2\x2\x1703"+
		"\x16F8\x3\x2\x2\x2\x1703\x1702\x3\x2\x2\x2\x1704\x1B5\x3\x2\x2\x2\x1705"+
		"\x170A\a\xA4\x2\x2\x1706\x1707\a\x347\x2\x2\x1707\x1708\x5\x3BE\x1E0\x2"+
		"\x1708\x1709\a\x348\x2\x2\x1709\x170B\x3\x2\x2\x2\x170A\x1706\x3\x2\x2"+
		"\x2\x170A\x170B\x3\x2\x2\x2\x170B\x170F\x3\x2\x2\x2\x170C\x1710\x5\x37E"+
		"\x1C0\x2\x170D\x170E\a[\x2\x2\x170E\x1710\a\x175\x2\x2\x170F\x170C\x3"+
		"\x2\x2\x2\x170F\x170D\x3\x2\x2\x2\x1710\x1B7\x3\x2\x2\x2\x1711\x1713\x5"+
		"\x2FE\x180\x2\x1712\x1711\x3\x2\x2\x2\x1712\x1713\x3\x2\x2\x2\x1713\x1714"+
		"\x3\x2\x2\x2\x1714\x171E\a^\x2\x2\x1715\x1716\a\x161\x2\x2\x1716\x1717"+
		"\a\x347\x2\x2\x1717\x1718\x5\x2F0\x179\x2\x1718\x171A\a\x348\x2\x2\x1719"+
		"\x171B\a\xF9\x2\x2\x171A\x1719\x3\x2\x2\x2\x171A\x171B\x3\x2\x2\x2\x171B"+
		"\x171F\x3\x2\x2\x2\x171C\x171D\a\x161\x2\x2\x171D\x171F\a\x32D\x2\x2\x171E"+
		"\x1715\x3\x2\x2\x2\x171E\x171C\x3\x2\x2\x2\x171E\x171F\x3\x2\x2\x2\x171F"+
		"\x1721\x3\x2\x2\x2\x1720\x1722\a\x8D\x2\x2\x1721\x1720\x3\x2\x2\x2\x1721"+
		"\x1722\x3\x2\x2\x2\x1722\x1723\x3\x2\x2\x2\x1723\x1725\x5\x1BA\xDE\x2"+
		"\x1724\x1726\x5\x374\x1BB\x2\x1725\x1724\x3\x2\x2\x2\x1725\x1726\x3\x2"+
		"\x2\x2\x1726\x1728\x3\x2\x2\x2\x1727\x1729\x5\x1C8\xE5\x2\x1728\x1727"+
		"\x3\x2\x2\x2\x1728\x1729\x3\x2\x2\x2\x1729\x172C\x3\x2\x2\x2\x172A\x172B"+
		"\a\x8D\x2\x2\x172B\x172D\x5\x338\x19D\x2\x172C\x172A\x3\x2\x2\x2\x172C"+
		"\x172D\x3\x2\x2\x2\x172D\x173B\x3\x2\x2\x2\x172E\x1739\a\x17C\x2\x2\x172F"+
		"\x173A\x5\x306\x184\x2\x1730\x1731\aM\x2\x2\x1731\x1737\a\xE5\x2\x2\x1732"+
		"\x1734\a\x216\x2\x2\x1733\x1732\x3\x2\x2\x2\x1733\x1734\x3\x2\x2\x2\x1734"+
		"\x1735\x3\x2\x2\x2\x1735\x1738\x5\x3C0\x1E1\x2\x1736\x1738\a\x32C\x2\x2"+
		"\x1737\x1733\x3\x2\x2\x2\x1737\x1736\x3\x2\x2\x2\x1738\x173A\x3\x2\x2"+
		"\x2\x1739\x172F\x3\x2\x2\x2\x1739\x1730\x3\x2\x2\x2\x173A\x173C\x3\x2"+
		"\x2\x2\x173B\x172E\x3\x2\x2\x2\x173B\x173C\x3\x2\x2\x2\x173C\x173E\x3"+
		"\x2\x2\x2\x173D\x173F\x5\x31C\x18F\x2\x173E\x173D\x3\x2\x2\x2\x173E\x173F"+
		"\x3\x2\x2\x2\x173F\x1741\x3\x2\x2\x2\x1740\x1742\x5\x324\x193\x2\x1741"+
		"\x1740\x3\x2\x2\x2\x1741\x1742\x3\x2\x2\x2\x1742\x1744\x3\x2\x2\x2\x1743"+
		"\x1745\a\x34A\x2\x2\x1744\x1743\x3\x2\x2\x2\x1744\x1745\x3\x2\x2\x2\x1745"+
		"\x1B9\x3\x2\x2\x2\x1746\x174B\x5\x3B8\x1DD\x2\x1747\x174B\x5\x370\x1B9"+
		"\x2\x1748\x174B\x5\x26A\x136\x2\x1749\x174B\a\x32C\x2\x2\x174A\x1746\x3"+
		"\x2\x2\x2\x174A\x1747\x3\x2\x2\x2\x174A\x1748\x3\x2\x2\x2\x174A\x1749"+
		"\x3\x2\x2\x2\x174B\x1BB\x3\x2\x2\x2\x174C\x174E\x5\x2FE\x180\x2\x174D"+
		"\x174C\x3\x2\x2\x2\x174D\x174E\x3\x2\x2\x2\x174E\x174F\x3\x2\x2\x2\x174F"+
		"\x1757\a\xA4\x2\x2\x1750\x1751\a\x161\x2\x2\x1751\x1752\a\x347\x2\x2\x1752"+
		"\x1753\x5\x2F0\x179\x2\x1753\x1755\a\x348\x2\x2\x1754\x1756\a\xF9\x2\x2"+
		"\x1755\x1754\x3\x2\x2\x2\x1755\x1756\x3\x2\x2\x2\x1756\x1758\x3\x2\x2"+
		"\x2\x1757\x1750\x3\x2\x2\x2\x1757\x1758\x3\x2\x2\x2\x1758\x175A\x3\x2"+
		"\x2\x2\x1759\x175B\a\xA7\x2\x2\x175A\x1759\x3\x2\x2\x2\x175A\x175B\x3"+
		"\x2\x2\x2\x175B\x175E\x3\x2\x2\x2\x175C\x175F\x5\x3B8\x1DD\x2\x175D\x175F"+
		"\x5\x26A\x136\x2\x175E\x175C\x3\x2\x2\x2\x175E\x175D\x3\x2\x2\x2\x175F"+
		"\x1761\x3\x2\x2\x2\x1760\x1762\x5\x374\x1BB\x2\x1761\x1760\x3\x2\x2\x2"+
		"\x1761\x1762\x3\x2\x2\x2\x1762\x1767\x3\x2\x2\x2\x1763\x1764\a\x347\x2"+
		"\x2\x1764\x1765\x5\x3BE\x1E0\x2\x1765\x1766\a\x348\x2\x2\x1766\x1768\x3"+
		"\x2\x2\x2\x1767\x1763\x3\x2\x2\x2\x1767\x1768\x3\x2\x2\x2\x1768\x176A"+
		"\x3\x2\x2\x2\x1769\x176B\x5\x1C8\xE5\x2\x176A\x1769\x3\x2\x2\x2\x176A"+
		"\x176B\x3\x2\x2\x2\x176B\x176C\x3\x2\x2\x2\x176C\x176E\x5\x1BE\xE0\x2"+
		"\x176D\x176F\x5\x31C\x18F\x2\x176E\x176D\x3\x2\x2\x2\x176E\x176F\x3\x2"+
		"\x2\x2\x176F\x1771\x3\x2\x2\x2\x1770\x1772\x5\x324\x193\x2\x1771\x1770"+
		"\x3\x2\x2\x2\x1771\x1772\x3\x2\x2\x2\x1772\x1774\x3\x2\x2\x2\x1773\x1775"+
		"\a\x34A\x2\x2\x1774\x1773\x3\x2\x2\x2\x1774\x1775\x3\x2\x2\x2\x1775\x1BD"+
		"\x3\x2\x2\x2\x1776\x177C\x5\x37E\x1C0\x2\x1777\x177C\x5\x358\x1AD\x2\x1778"+
		"\x177C\x5\x286\x144\x2\x1779\x177A\a[\x2\x2\x177A\x177C\a\x175\x2\x2\x177B"+
		"\x1776\x3\x2\x2\x2\x177B\x1777\x3\x2\x2\x2\x177B\x1778\x3\x2\x2\x2\x177B"+
		"\x1779\x3\x2\x2\x2\x177C\x1BF\x3\x2\x2\x2\x177D\x177F\a\x2AC\x2\x2\x177E"+
		"\x1780\t\x38\x2\x2\x177F\x177E\x3\x2\x2\x2\x177F\x1780\x3\x2\x2\x2\x1780"+
		"\x1782\x3\x2\x2\x2\x1781\x1783\x5\x314\x18B\x2\x1782\x1781\x3\x2\x2\x2"+
		"\x1782\x1783\x3\x2\x2\x2\x1783\x1784\x3\x2\x2\x2\x1784\x1785\x5\x32A\x196"+
		"\x2\x1785\x1786\a\x8D\x2\x2\x1786\x178C\x5\x3A6\x1D4\x2\x1787\x1788\a"+
		"\xA7\x2\x2\x1788\x1789\x5\x3E4\x1F3\x2\x1789\x178A\a\x17C\x2\x2\x178A"+
		"\x178B\x5\x306\x184\x2\x178B\x178D\x3\x2\x2\x2\x178C\x1787\x3\x2\x2\x2"+
		"\x178C\x178D\x3\x2\x2\x2\x178D\x1C1\x3\x2\x2\x2\x178E\x1790\x5\x2FE\x180"+
		"\x2\x178F\x178E\x3\x2\x2\x2\x178F\x1790\x3\x2\x2\x2\x1790\x1791\x3\x2"+
		"\x2\x2\x1791\x1793\x5\x30E\x188\x2\x1792\x1794\x5\x31A\x18E\x2\x1793\x1792"+
		"\x3\x2\x2\x2\x1793\x1794\x3\x2\x2\x2\x1794\x1796\x3\x2\x2\x2\x1795\x1797"+
		"\x5\x31C\x18F\x2\x1796\x1795\x3\x2\x2\x2\x1796\x1797\x3\x2\x2\x2\x1797"+
		"\x1799\x3\x2\x2\x2\x1798\x179A\x5\x324\x193\x2\x1799\x1798\x3\x2\x2\x2"+
		"\x1799\x179A\x3\x2\x2\x2\x179A\x179C\x3\x2\x2\x2\x179B\x179D\a\x34A\x2"+
		"\x2\x179C\x179B\x3\x2\x2\x2\x179C\x179D\x3\x2\x2\x2\x179D\x1C3\x3\x2\x2"+
		"\x2\x179E\x17A1\a\x32C\x2\x2\x179F\x17A1\x5\x3E0\x1F1\x2\x17A0\x179E\x3"+
		"\x2\x2\x2\x17A0\x179F\x3\x2\x2\x2\x17A1\x1C5\x3\x2\x2\x2\x17A2\x17A4\x5"+
		"\x2FE\x180\x2\x17A3\x17A2\x3\x2\x2\x2\x17A3\x17A4\x3\x2\x2\x2\x17A4\x17A5"+
		"\x3\x2\x2\x2\x17A5\x17AD\a\x16F\x2\x2\x17A6\x17A7\a\x161\x2\x2\x17A7\x17A8"+
		"\a\x347\x2\x2\x17A8\x17A9\x5\x2F0\x179\x2\x17A9\x17AB\a\x348\x2\x2\x17AA"+
		"\x17AC\a\xF9\x2\x2\x17AB\x17AA\x3\x2\x2\x2\x17AB\x17AC\x3\x2\x2\x2\x17AC"+
		"\x17AE\x3\x2\x2\x2\x17AD\x17A6\x3\x2\x2\x2\x17AD\x17AE\x3\x2\x2\x2\x17AE"+
		"\x17B1\x3\x2\x2\x2\x17AF\x17B2\x5\x3B8\x1DD\x2\x17B0\x17B2\x5\x26A\x136"+
		"\x2\x17B1\x17AF\x3\x2\x2\x2\x17B1\x17B0\x3\x2\x2\x2\x17B2\x17B4\x3\x2"+
		"\x2\x2\x17B3\x17B5\x5\x372\x1BA\x2\x17B4\x17B3\x3\x2\x2\x2\x17B4\x17B5"+
		"\x3\x2\x2\x2\x17B5\x17B6\x3\x2\x2\x2\x17B6\x17B7\a\x141\x2\x2\x17B7\x17BC"+
		"\x5\x302\x182\x2\x17B8\x17B9\a\x349\x2\x2\x17B9\x17BB\x5\x302\x182\x2"+
		"\x17BA\x17B8\x3\x2\x2\x2\x17BB\x17BE\x3\x2\x2\x2\x17BC\x17BA\x3\x2\x2"+
		"\x2\x17BC\x17BD\x3\x2\x2\x2\x17BD\x17C0\x3\x2\x2\x2\x17BE\x17BC\x3\x2"+
		"\x2\x2\x17BF\x17C1\x5\x1C8\xE5\x2\x17C0\x17BF\x3\x2\x2\x2\x17C0\x17C1"+
		"\x3\x2\x2\x2\x17C1\x17C4\x3\x2\x2\x2\x17C2\x17C3\a\x8D\x2\x2\x17C3\x17C5"+
		"\x5\x338\x19D\x2\x17C4\x17C2\x3\x2\x2\x2\x17C4\x17C5\x3\x2\x2\x2\x17C5"+
		"\x17D3\x3\x2\x2\x2\x17C6\x17D1\a\x17C\x2\x2\x17C7\x17D2\x5\x304\x183\x2"+
		"\x17C8\x17C9\aM\x2\x2\x17C9\x17CF\a\xE5\x2\x2\x17CA\x17CC\a\x216\x2\x2"+
		"\x17CB\x17CA\x3\x2\x2\x2\x17CB\x17CC\x3\x2\x2\x2\x17CC\x17CD\x3\x2\x2"+
		"\x2\x17CD\x17D0\x5\x3C0\x1E1\x2\x17CE\x17D0\a\x32C\x2\x2\x17CF\x17CB\x3"+
		"\x2\x2\x2\x17CF\x17CE\x3\x2\x2\x2\x17D0\x17D2\x3\x2\x2\x2\x17D1\x17C7"+
		"\x3\x2\x2\x2\x17D1\x17C8\x3\x2\x2\x2\x17D2\x17D4\x3\x2\x2\x2\x17D3\x17C6"+
		"\x3\x2\x2\x2\x17D3\x17D4\x3\x2\x2\x2\x17D4\x17D6\x3\x2\x2\x2\x17D5\x17D7"+
		"\x5\x31C\x18F\x2\x17D6\x17D5\x3\x2\x2\x2\x17D6\x17D7\x3\x2\x2\x2\x17D7"+
		"\x17D9\x3\x2\x2\x2\x17D8\x17DA\x5\x324\x193\x2\x17D9\x17D8\x3\x2\x2\x2"+
		"\x17D9\x17DA\x3\x2\x2\x2\x17DA\x17DC\x3\x2\x2\x2\x17DB\x17DD\a\x34A\x2"+
		"\x2\x17DC\x17DB\x3\x2\x2\x2\x17DC\x17DD\x3\x2\x2\x2\x17DD\x1C7\x3\x2\x2"+
		"\x2\x17DE\x17DF\x5\x1CA\xE6\x2\x17DF\x17E0\x5\x1CC\xE7\x2\x17E0\x17E4"+
		"\x3\x2\x2\x2\x17E1\x17E4\x5\x1CA\xE6\x2\x17E2\x17E4\x5\x1CC\xE7\x2\x17E3"+
		"\x17DE\x3\x2\x2\x2\x17E3\x17E1\x3\x2\x2\x2\x17E3\x17E2\x3\x2\x2\x2\x17E4"+
		"\x1C9\x3\x2\x2\x2\x17E5\x17E6\a\x285\x2\x2\x17E6\x17EB\x5\x1CE\xE8\x2"+
		"\x17E7\x17E8\a\x349\x2\x2\x17E8\x17EA\x5\x1CE\xE8\x2\x17E9\x17E7\x3\x2"+
		"\x2\x2\x17EA\x17ED\x3\x2\x2\x2\x17EB\x17E9\x3\x2\x2\x2\x17EB\x17EC\x3"+
		"\x2\x2\x2\x17EC\x17EE\x3\x2\x2\x2\x17ED\x17EB\x3\x2\x2\x2\x17EE\x17F1"+
		"\a\xA7\x2\x2\x17EF\x17F2\a\x32C\x2\x2\x17F0\x17F2\x5\x3A6\x1D4\x2\x17F1"+
		"\x17EF\x3\x2\x2\x2\x17F1\x17F0\x3\x2\x2\x2\x17F2\x17F7\x3\x2\x2\x2\x17F3"+
		"\x17F4\a\x347\x2\x2\x17F4\x17F5\x5\x3BE\x1E0\x2\x17F5\x17F6\a\x348\x2"+
		"\x2\x17F6\x17F8\x3\x2\x2\x2\x17F7\x17F3\x3\x2\x2\x2\x17F7\x17F8\x3\x2"+
		"\x2\x2\x17F8\x1CB\x3\x2\x2\x2\x17F9\x17FA\a\x285\x2\x2\x17FA\x17FF\x5"+
		"\x1CE\xE8\x2\x17FB\x17FC\a\x349\x2\x2\x17FC\x17FE\x5\x1CE\xE8\x2\x17FD"+
		"\x17FB\x3\x2\x2\x2\x17FE\x1801\x3\x2\x2\x2\x17FF\x17FD\x3\x2\x2\x2\x17FF"+
		"\x1800\x3\x2\x2\x2\x1800\x1CD\x3\x2\x2\x2\x1801\x17FF\x3\x2\x2\x2\x1802"+
		"\x1805\x5\x1D0\xE9\x2\x1803\x1805\x5\x2F0\x179\x2\x1804\x1802\x3\x2\x2"+
		"\x2\x1804\x1803\x3\x2\x2\x2\x1805\x1807\x3\x2\x2\x2\x1806\x1808\x5\x36C"+
		"\x1B7\x2\x1807\x1806\x3\x2\x2\x2\x1807\x1808\x3\x2\x2\x2\x1808\x1CF\x3"+
		"\x2\x2\x2\x1809\x180D\a\x1E0\x2\x2\x180A\x180D\a\x22C\x2\x2\x180B\x180D"+
		"\x5\x3A6\x1D4\x2\x180C\x1809\x3\x2\x2\x2\x180C\x180A\x3\x2\x2\x2\x180C"+
		"\x180B\x3\x2\x2\x2\x180D\x180E\x3\x2\x2\x2\x180E\x1811\a\x342\x2\x2\x180F"+
		"\x1812\a\x34C\x2\x2\x1810\x1812\x5\x3E4\x1F3\x2\x1811\x180F\x3\x2\x2\x2"+
		"\x1811\x1810\x3\x2\x2\x2\x1812\x1815\x3\x2\x2\x2\x1813\x1815\a\x325\x2"+
		"\x2\x1814\x180C\x3\x2\x2\x2\x1814\x1813\x3\x2\x2\x2\x1815\x1D1\x3\x2\x2"+
		"\x2\x1816\x1817\aK\x2\x2\x1817\x1818\aV\x2\x2\x1818\x181C\x5\x3AC\x1D7"+
		"\x2\x1819\x181A\a@\x2\x2\x181A\x181B\a\x335\x2\x2\x181B\x181D\t\x39\x2"+
		"\x2\x181C\x1819\x3\x2\x2\x2\x181C\x181D\x3\x2\x2\x2\x181D\x182A\x3\x2"+
		"\x2\x2\x181E\x1820\a\xE9\x2\x2\x181F\x1821\a\x104\x2\x2\x1820\x181F\x3"+
		"\x2\x2\x2\x1820\x1821\x3\x2\x2\x2\x1821\x1822\x3\x2\x2\x2\x1822\x1827"+
		"\x5\x39A\x1CE\x2\x1823\x1824\a\x349\x2\x2\x1824\x1826\x5\x39A\x1CE\x2"+
		"\x1825\x1823\x3\x2\x2\x2\x1826\x1829\x3\x2\x2\x2\x1827\x1825\x3\x2\x2"+
		"\x2\x1827\x1828\x3\x2\x2\x2\x1828\x182B\x3\x2\x2\x2\x1829\x1827\x3\x2"+
		"\x2\x2\x182A\x181E\x3\x2\x2\x2\x182A\x182B\x3\x2\x2\x2\x182B\x1836\x3"+
		"\x2\x2\x2\x182C\x182D\a\xBD\x2\x2\x182D\x182E\a\xE9\x2\x2\x182E\x1833"+
		"\x5\x39A\x1CE\x2\x182F\x1830\a\x349\x2\x2\x1830\x1832\x5\x39A\x1CE\x2"+
		"\x1831\x182F\x3\x2\x2\x2\x1832\x1835\x3\x2\x2\x2\x1833\x1831\x3\x2\x2"+
		"\x2\x1833\x1834\x3\x2\x2\x2\x1834\x1837\x3\x2\x2\x2\x1835\x1833\x3\x2"+
		"\x2\x2\x1836\x182C\x3\x2\x2\x2\x1836\x1837\x3\x2\x2\x2\x1837\x183A\x3"+
		"\x2\x2\x2\x1838\x1839\a\x38\x2\x2\x1839\x183B\x5\x3E4\x1F3\x2\x183A\x1838"+
		"\x3\x2\x2\x2\x183A\x183B\x3\x2\x2\x2\x183B\x1845\x3\x2\x2\x2\x183C\x183D"+
		"\a\x17F\x2\x2\x183D\x1842\x5\x396\x1CC\x2\x183E\x183F\a\x349\x2\x2\x183F"+
		"\x1841\x5\x396\x1CC\x2\x1840\x183E\x3\x2\x2\x2\x1841\x1844\x3\x2\x2\x2"+
		"\x1842\x1840\x3\x2\x2\x2\x1842\x1843\x3\x2\x2\x2\x1843\x1846\x3\x2\x2"+
		"\x2\x1844\x1842\x3\x2\x2\x2\x1845\x183C\x3\x2\x2\x2\x1845\x1846\x3\x2"+
		"\x2\x2\x1846\x1D3\x3\x2\x2\x2\x1847\x1849\aK\x2\x2\x1848\x184A\a\x16B"+
		"\x2\x2\x1849\x1848\x3\x2\x2\x2\x1849\x184A\x3\x2\x2\x2\x184A\x184C\x3"+
		"\x2\x2\x2\x184B\x184D\x5\x3C4\x1E3\x2\x184C\x184B\x3\x2\x2\x2\x184C\x184D"+
		"\x3\x2\x2\x2\x184D\x184E\x3\x2\x2\x2\x184E\x184F\a\xA0\x2\x2\x184F\x1850"+
		"\x5\x3E4\x1F3\x2\x1850\x1851\a\xE9\x2\x2\x1851\x1852\x5\x352\x1AA\x2\x1852"+
		"\x1853\a\x347\x2\x2\x1853\x1854\x5\x3BC\x1DF\x2\x1854\x185A\a\x348\x2"+
		"\x2\x1855\x1856\a\x9E\x2\x2\x1856\x1857\a\x347\x2\x2\x1857\x1858\x5\x3BE"+
		"\x1E0\x2\x1858\x1859\a\x348\x2\x2\x1859\x185B\x3\x2\x2\x2\x185A\x1855"+
		"\x3\x2\x2\x2\x185A\x185B\x3\x2\x2\x2\x185B\x185E\x3\x2\x2\x2\x185C\x185D"+
		"\a\x17C\x2\x2\x185D\x185F\x5\x306\x184\x2\x185E\x185C\x3\x2\x2\x2\x185E"+
		"\x185F\x3\x2\x2\x2\x185F\x1861\x3\x2\x2\x2\x1860\x1862\x5\x2E0\x171\x2"+
		"\x1861\x1860\x3\x2\x2\x2\x1861\x1862\x3\x2\x2\x2\x1862\x1865\x3\x2\x2"+
		"\x2\x1863\x1864\a\xE9\x2\x2\x1864\x1866\x5\x3E4\x1F3\x2\x1865\x1863\x3"+
		"\x2\x2\x2\x1865\x1866\x3\x2\x2\x2\x1866\x1868\x3\x2\x2\x2\x1867\x1869"+
		"\a\x34A\x2\x2\x1868\x1867\x3\x2\x2\x2\x1868\x1869\x3\x2\x2\x2\x1869\x1D5"+
		"\x3\x2\x2\x2\x186A\x186D\aK\x2\x2\x186B\x186C\a\xF1\x2\x2\x186C\x186E"+
		"\a\n\x2\x2\x186D\x186B\x3\x2\x2\x2\x186D\x186E\x3\x2\x2\x2\x186E\x1871"+
		"\x3\x2\x2\x2\x186F\x1871\a\n\x2\x2\x1870\x186A\x3\x2\x2\x2\x1870\x186F"+
		"\x3\x2\x2\x2\x1871\x1872\x3\x2\x2\x2\x1872\x1873\t:\x2\x2\x1873\x1876"+
		"\x5\x3B2\x1DA\x2\x1874\x1875\a\x34A\x2\x2\x1875\x1877\a\x32D\x2\x2\x1876"+
		"\x1874\x3\x2\x2\x2\x1876\x1877\x3\x2\x2\x2\x1877\x1886\x3\x2\x2\x2\x1878"+
		"\x187A\a\x347\x2\x2\x1879\x1878\x3\x2\x2\x2\x1879\x187A\x3\x2\x2\x2\x187A"+
		"\x187B\x3\x2\x2\x2\x187B\x1880\x5\x1F0\xF9\x2\x187C\x187D\a\x349\x2\x2"+
		"\x187D\x187F\x5\x1F0\xF9\x2\x187E\x187C\x3\x2\x2\x2\x187F\x1882\x3\x2"+
		"\x2\x2\x1880\x187E\x3\x2\x2\x2\x1880\x1881\x3\x2\x2\x2\x1881\x1884\x3"+
		"\x2\x2\x2\x1882\x1880\x3\x2\x2\x2\x1883\x1885\a\x348\x2\x2\x1884\x1883"+
		"\x3\x2\x2\x2\x1884\x1885\x3\x2\x2\x2\x1885\x1887\x3\x2\x2\x2\x1886\x1879"+
		"\x3\x2\x2\x2\x1886\x1887\x3\x2\x2\x2\x1887\x1891\x3\x2\x2\x2\x1888\x1889"+
		"\a\x17F\x2\x2\x1889\x188E\x5\x1F2\xFA\x2\x188A\x188B\a\x349\x2\x2\x188B"+
		"\x188D\x5\x1F2\xFA\x2\x188C\x188A\x3\x2\x2\x2\x188D\x1890\x3\x2\x2\x2"+
		"\x188E\x188C\x3\x2\x2\x2\x188E\x188F\x3\x2\x2\x2\x188F\x1892\x3\x2\x2"+
		"\x2\x1890\x188E\x3\x2\x2\x2\x1891\x1888\x3\x2\x2\x2\x1891\x1892\x3\x2"+
		"\x2\x2\x1892\x1895\x3\x2\x2\x2\x1893\x1894\a\x87\x2\x2\x1894\x1896\a\x117"+
		"\x2\x2\x1895\x1893\x3\x2\x2\x2\x1895\x1896\x3\x2\x2\x2\x1896\x1897\x3"+
		"\x2\x2\x2\x1897\x189A\a\x10\x2\x2\x1898\x189B\x5\x6\x4\x2\x1899\x189B"+
		"\x5\x1D8\xED\x2\x189A\x1898\x3\x2\x2\x2\x189A\x1899\x3\x2\x2\x2\x189B"+
		"\x1D7\x3\x2\x2\x2\x189C\x189D\a\x1D\x2\x2\x189D\x189E\a\x14\x2\x2\x189E"+
		"\x189F\a\x17F\x2\x2\x189F\x18A0\a\x347\x2\x2\x18A0\x18A5\x5\x1DA\xEE\x2"+
		"\x18A1\x18A2\a\x349\x2\x2\x18A2\x18A4\x5\x1DA\xEE\x2\x18A3\x18A1\x3\x2"+
		"\x2\x2\x18A4\x18A7\x3\x2\x2\x2\x18A5\x18A3\x3\x2\x2\x2\x18A5\x18A6\x3"+
		"\x2\x2\x2\x18A6\x18A8\x3\x2\x2\x2\x18A7\x18A5\x3\x2\x2\x2\x18A8\x18A9"+
		"\a\x348\x2\x2\x18A9\x18AA\x5\x6\x4\x2\x18AA\x18AC\an\x2\x2\x18AB\x18AD"+
		"\a\x34A\x2\x2\x18AC\x18AB\x3\x2\x2\x2\x18AC\x18AD\x3\x2\x2\x2\x18AD\x1D9"+
		"\x3\x2\x2\x2\x18AE\x18AF\a\x164\x2\x2\x18AF\x18B0\a\x22F\x2\x2\x18B0\x18B1"+
		"\a\x23C\x2\x2\x18B1\x18BB\a\x335\x2\x2\x18B2\x18B3\a\x10F\x2\x2\x18B3"+
		"\x18BC\a\x30E\x2\x2\x18B4\x18B5\a\x10F\x2\x2\x18B5\x18BC\a\x1BE\x2\x2"+
		"\x18B6\x18B7\a\x2B5\x2\x2\x18B7\x18BC\a\x10F\x2\x2\x18B8\x18BC\a\x2E4"+
		"\x2\x2\x18B9\x18BC\a\x2DA\x2\x2\x18BA\x18BC\a\x32D\x2\x2\x18BB\x18B2\x3"+
		"\x2\x2\x2\x18BB\x18B4\x3\x2\x2\x2\x18BB\x18B6\x3\x2\x2\x2\x18BB\x18B8"+
		"\x3\x2\x2\x2\x18BB\x18B9\x3\x2\x2\x2\x18BB\x18BA\x3\x2\x2\x2\x18BC\x18CA"+
		"\x3\x2\x2\x2\x18BD\x18BE\a\xB2\x2\x2\x18BE\x18BF\a\x335\x2\x2\x18BF\x18CA"+
		"\a\x331\x2\x2\x18C0\x18C1\a\x1DF\x2\x2\x18C1\x18C2\a\x335\x2\x2\x18C2"+
		"\x18CA\t\t\x2\x2\x18C3\x18C4\a\x1D4\x2\x2\x18C4\x18C5\a\x335\x2\x2\x18C5"+
		"\x18CA\t;\x2\x2\x18C6\x18C7\a\x1D3\x2\x2\x18C7\x18C8\a\x335\x2\x2\x18C8"+
		"\x18CA\a\x32D\x2\x2\x18C9\x18AE\x3\x2\x2\x2\x18C9\x18BD\x3\x2\x2\x2\x18C9"+
		"\x18C0\x3\x2\x2\x2\x18C9\x18C3\x3\x2\x2\x2\x18C9\x18C6\x3\x2\x2\x2\x18CA"+
		"\x1DB\x3\x2\x2\x2\x18CB\x18CE\x5\x1DE\xF0\x2\x18CC\x18CE\x5\x1E4\xF3\x2"+
		"\x18CD\x18CB\x3\x2\x2\x2\x18CD\x18CC\x3\x2\x2\x2\x18CE\x1DD\x3\x2\x2\x2"+
		"\x18CF\x18D2\aK\x2\x2\x18D0\x18D1\a\xF1\x2\x2\x18D1\x18D3\a\n\x2\x2\x18D2"+
		"\x18D0\x3\x2\x2\x2\x18D2\x18D3\x3\x2\x2\x2\x18D3\x18D6\x3\x2\x2\x2\x18D4"+
		"\x18D6\a\n\x2\x2\x18D5\x18CF\x3\x2\x2\x2\x18D5\x18D4\x3\x2\x2\x2\x18D6"+
		"\x18D7\x3\x2\x2\x2\x18D7\x18D8\a\x166\x2\x2\x18D8\x18D9\x5\x3B0\x1D9\x2"+
		"\x18D9\x18DA\a\xE9\x2\x2\x18DA\x18E4\x5\x3A6\x1D4\x2\x18DB\x18DC\a\x17F"+
		"\x2\x2\x18DC\x18E1\x5\x1E0\xF1\x2\x18DD\x18DE\a\x349\x2\x2\x18DE\x18E0"+
		"\x5\x1E0\xF1\x2\x18DF\x18DD\x3\x2\x2\x2\x18E0\x18E3\x3\x2\x2\x2\x18E1"+
		"\x18DF\x3\x2\x2\x2\x18E1\x18E2\x3\x2\x2\x2\x18E2\x18E5\x3\x2\x2\x2\x18E3"+
		"\x18E1\x3\x2\x2\x2\x18E4\x18DB\x3\x2\x2\x2\x18E4\x18E5\x3\x2\x2\x2\x18E5"+
		"\x18EA\x3\x2\x2\x2\x18E6\x18EB\a\x87\x2\x2\x18E7\x18EB\a\x18E\x2\x2\x18E8"+
		"\x18E9\a\xA5\x2\x2\x18E9\x18EB\a\xE5\x2\x2\x18EA\x18E6\x3\x2\x2\x2\x18EA"+
		"\x18E7\x3\x2\x2\x2\x18EA\x18E8\x3\x2\x2\x2\x18EB\x18EC\x3\x2\x2\x2\x18EC"+
		"\x18F1\x5\x1E2\xF2\x2\x18ED\x18EE\a\x349\x2\x2\x18EE\x18F0\x5\x1E2\xF2"+
		"\x2\x18EF\x18ED\x3\x2\x2\x2\x18F0\x18F3\x3\x2\x2\x2\x18F1\x18EF\x3\x2"+
		"\x2\x2\x18F1\x18F2\x3\x2\x2\x2\x18F2\x18F6\x3\x2\x2\x2\x18F3\x18F1\x3"+
		"\x2\x2\x2\x18F4\x18F5\a\x17F\x2\x2\x18F5\x18F7\a\xE\x2\x2\x18F6\x18F4"+
		"\x3\x2\x2\x2\x18F6\x18F7\x3\x2\x2\x2\x18F7\x18FB\x3\x2\x2\x2\x18F8\x18F9"+
		"\a\xE0\x2\x2\x18F9\x18FA\a\x87\x2\x2\x18FA\x18FC\a\x117\x2\x2\x18FB\x18F8"+
		"\x3\x2\x2\x2\x18FB\x18FC\x3\x2\x2\x2\x18FC\x18FD\x3\x2\x2\x2\x18FD\x18FE"+
		"\a\x10\x2\x2\x18FE\x18FF\x5\x6\x4\x2\x18FF\x1DF\x3\x2\x2\x2\x1900\x1903"+
		"\a\x1F5\x2\x2\x1901\x1903\x5\x2C2\x162\x2\x1902\x1900\x3\x2\x2\x2\x1902"+
		"\x1901\x3\x2\x2\x2\x1903\x1E1\x3\x2\x2\x2\x1904\x1905\t<\x2\x2\x1905\x1E3"+
		"\x3\x2\x2\x2\x1906\x1909\aK\x2\x2\x1907\x1908\a\xF1\x2\x2\x1908\x190A"+
		"\a\n\x2\x2\x1909\x1907\x3\x2\x2\x2\x1909\x190A\x3\x2\x2\x2\x190A\x190D"+
		"\x3\x2\x2\x2\x190B\x190D\a\n\x2\x2\x190C\x1906\x3\x2\x2\x2\x190C\x190B"+
		"\x3\x2\x2\x2\x190D\x190E\x3\x2\x2\x2\x190E\x190F\a\x166\x2\x2\x190F\x1910"+
		"\x5\x3E6\x1F4\x2\x1910\x1914\a\xE9\x2\x2\x1911\x1912\a\x6\x2\x2\x1912"+
		"\x1915\a\x13B\x2\x2\x1913\x1915\aV\x2\x2\x1914\x1911\x3\x2\x2\x2\x1914"+
		"\x1913\x3\x2\x2\x2\x1915\x191F\x3\x2\x2\x2\x1916\x1917\a\x17F\x2\x2\x1917"+
		"\x191C\x5\x1E0\xF1\x2\x1918\x1919\a\x349\x2\x2\x1919\x191B\x5\x1E0\xF1"+
		"\x2\x191A\x1918\x3\x2\x2\x2\x191B\x191E\x3\x2\x2\x2\x191C\x191A\x3\x2"+
		"\x2\x2\x191C\x191D\x3\x2\x2\x2\x191D\x1920\x3\x2\x2\x2\x191E\x191C\x3"+
		"\x2\x2\x2\x191F\x1916\x3\x2\x2\x2\x191F\x1920\x3\x2\x2\x2\x1920\x1921"+
		"\x3\x2\x2\x2\x1921\x1922\t=\x2\x2\x1922\x1927\x5\x1E6\xF4\x2\x1923\x1924"+
		"\a\x349\x2\x2\x1924\x1926\x5\x1E2\xF2\x2\x1925\x1923\x3\x2\x2\x2\x1926"+
		"\x1929\x3\x2\x2\x2\x1927\x1925\x3\x2\x2\x2\x1927\x1928\x3\x2\x2\x2\x1928"+
		"\x192A\x3\x2\x2\x2\x1929\x1927\x3\x2\x2\x2\x192A\x192B\a\x10\x2\x2\x192B"+
		"\x192C\x5\x6\x4\x2\x192C\x1E5\x3\x2\x2\x2\x192D\x192E\x5\x3E6\x1F4\x2"+
		"\x192E\x1E7\x3\x2\x2\x2\x192F\x1932\aK\x2\x2\x1930\x1931\a\xF1\x2\x2\x1931"+
		"\x1933\a\n\x2\x2\x1932\x1930\x3\x2\x2\x2\x1932\x1933\x3\x2\x2\x2\x1933"+
		"\x1936\x3\x2\x2\x2\x1934\x1936\a\n\x2\x2\x1935\x192F\x3\x2\x2\x2\x1935"+
		"\x1934\x3\x2\x2\x2\x1936\x1937\x3\x2\x2\x2\x1937\x1938\a\x8F\x2\x2\x1938"+
		"\x1946\x5\x3B2\x1DA\x2\x1939\x193A\a\x347\x2\x2\x193A\x193F\x5\x1F0\xF9"+
		"\x2\x193B\x193C\a\x349\x2\x2\x193C\x193E\x5\x1F0\xF9\x2\x193D\x193B\x3"+
		"\x2\x2\x2\x193E\x1941\x3\x2\x2\x2\x193F\x193D\x3\x2\x2\x2\x193F\x1940"+
		"\x3\x2\x2\x2\x1940\x1942\x3\x2\x2\x2\x1941\x193F\x3\x2\x2\x2\x1942\x1943"+
		"\a\x348\x2\x2\x1943\x1947\x3\x2\x2\x2\x1944\x1945\a\x347\x2\x2\x1945\x1947"+
		"\a\x348\x2\x2\x1946\x1939\x3\x2\x2\x2\x1946\x1944\x3\x2\x2\x2\x1947\x194B"+
		"\x3\x2\x2\x2\x1948\x194C\x5\x1EA\xF6\x2\x1949\x194C\x5\x1EC\xF7\x2\x194A"+
		"\x194C\x5\x1EE\xF8\x2\x194B\x1948\x3\x2\x2\x2\x194B\x1949\x3\x2\x2\x2"+
		"\x194B\x194A\x3\x2\x2\x2\x194C\x194E\x3\x2\x2\x2\x194D\x194F\a\x34A\x2"+
		"\x2\x194E\x194D\x3\x2\x2\x2\x194E\x194F\x3\x2\x2\x2\x194F\x1E9\x3\x2\x2"+
		"\x2\x1950\x1951\a\x121\x2\x2\x1951\x195B\a\x159\x2\x2\x1952\x1953\a\x17F"+
		"\x2\x2\x1953\x1958\x5\x1F4\xFB\x2\x1954\x1955\a\x349\x2\x2\x1955\x1957"+
		"\x5\x1F4\xFB\x2\x1956\x1954\x3\x2\x2\x2\x1957\x195A\x3\x2\x2\x2\x1958"+
		"\x1956\x3\x2\x2\x2\x1958\x1959\x3\x2\x2\x2\x1959\x195C\x3\x2\x2\x2\x195A"+
		"\x1958\x3\x2\x2\x2\x195B\x1952\x3\x2\x2\x2\x195B\x195C\x3\x2\x2\x2\x195C"+
		"\x195E\x3\x2\x2\x2\x195D\x195F\a\x10\x2\x2\x195E\x195D\x3\x2\x2\x2\x195E"+
		"\x195F\x3\x2\x2\x2\x195F\x1960\x3\x2\x2\x2\x1960\x1966\a\x120\x2\x2\x1961"+
		"\x1962\a\x347\x2\x2\x1962\x1963\x5\x1C2\xE2\x2\x1963\x1964\a\x348\x2\x2"+
		"\x1964\x1967\x3\x2\x2\x2\x1965\x1967\x5\x1C2\xE2\x2\x1966\x1961\x3\x2"+
		"\x2\x2\x1966\x1965\x3\x2\x2\x2\x1967\x1EB\x3\x2\x2\x2\x1968\x1969\a\x121"+
		"\x2\x2\x1969\x196A\a\x32C\x2\x2\x196A\x1974\x5\x2C6\x164\x2\x196B\x196C"+
		"\a\x17F\x2\x2\x196C\x1971\x5\x1F4\xFB\x2\x196D\x196E\a\x349\x2\x2\x196E"+
		"\x1970\x5\x1F4\xFB\x2\x196F\x196D\x3\x2\x2\x2\x1970\x1973\x3\x2\x2\x2"+
		"\x1971\x196F\x3\x2\x2\x2\x1971\x1972\x3\x2\x2\x2\x1972\x1975\x3\x2\x2"+
		"\x2\x1973\x1971\x3\x2\x2\x2\x1974\x196B\x3\x2\x2\x2\x1974\x1975\x3\x2"+
		"\x2\x2\x1975\x1977\x3\x2\x2\x2\x1976\x1978\a\x10\x2\x2\x1977\x1976\x3"+
		"\x2\x2\x2\x1977\x1978\x3\x2\x2\x2\x1978\x1979\x3\x2\x2\x2\x1979\x197D"+
		"\a\x1D\x2\x2\x197A\x197C\x5\b\x5\x2\x197B\x197A\x3\x2\x2\x2\x197C\x197F"+
		"\x3\x2\x2\x2\x197D\x197B\x3\x2\x2\x2\x197D\x197E\x3\x2\x2\x2\x197E\x1980"+
		"\x3\x2\x2\x2\x197F\x197D\x3\x2\x2\x2\x1980\x1982\a\x120\x2\x2\x1981\x1983"+
		"\a\x34A\x2\x2\x1982\x1981\x3\x2\x2\x2\x1982\x1983\x3\x2\x2\x2\x1983\x1984"+
		"\x3\x2\x2\x2\x1984\x1986\an\x2\x2\x1985\x1987\a\x34A\x2\x2\x1986\x1985"+
		"\x3\x2\x2\x2\x1986\x1987\x3\x2\x2\x2\x1987\x1ED\x3\x2\x2\x2\x1988\x1989"+
		"\a\x121\x2\x2\x1989\x1993\x5\x3DC\x1EF\x2\x198A\x198B\a\x17F\x2\x2\x198B"+
		"\x1990\x5\x1F4\xFB\x2\x198C\x198D\a\x349\x2\x2\x198D\x198F\x5\x1F4\xFB"+
		"\x2\x198E\x198C\x3\x2\x2\x2\x198F\x1992\x3\x2\x2\x2\x1990\x198E\x3\x2"+
		"\x2\x2\x1990\x1991\x3\x2\x2\x2\x1991\x1994\x3\x2\x2\x2\x1992\x1990\x3"+
		"\x2\x2\x2\x1993\x198A\x3\x2\x2\x2\x1993\x1994\x3\x2\x2\x2\x1994\x1996"+
		"\x3\x2\x2\x2\x1995\x1997\a\x10\x2\x2\x1996\x1995\x3\x2\x2\x2\x1996\x1997"+
		"\x3\x2\x2\x2\x1997\x1998\x3\x2\x2\x2\x1998\x199C\a\x1D\x2\x2\x1999\x199B"+
		"\x5\b\x5\x2\x199A\x1999\x3\x2\x2\x2\x199B\x199E\x3\x2\x2\x2\x199C\x199A"+
		"\x3\x2\x2\x2\x199C\x199D\x3\x2\x2\x2\x199D\x199F\x3\x2\x2\x2\x199E\x199C"+
		"\x3\x2\x2\x2\x199F\x19A0\a\x120\x2\x2\x19A0\x19A2\x5\x2F0\x179\x2\x19A1"+
		"\x19A3\a\x34A\x2\x2\x19A2\x19A1\x3\x2\x2\x2\x19A2\x19A3\x3\x2\x2\x2\x19A3"+
		"\x19A4\x3\x2\x2\x2\x19A4\x19A5\an\x2\x2\x19A5\x1EF\x3\x2\x2\x2\x19A6\x19AA"+
		"\a\x32C\x2\x2\x19A7\x19A8\x5\x3E4\x1F3\x2\x19A8\x19A9\a\x342\x2\x2\x19A9"+
		"\x19AB\x3\x2\x2\x2\x19AA\x19A7\x3\x2\x2\x2\x19AA\x19AB\x3\x2\x2\x2\x19AB"+
		"\x19AD\x3\x2\x2\x2\x19AC\x19AE\a\x10\x2\x2\x19AD\x19AC\x3\x2\x2\x2\x19AD"+
		"\x19AE\x3\x2\x2\x2\x19AE\x19AF\x3\x2\x2\x2\x19AF\x19B1\x5\x3DC\x1EF\x2"+
		"\x19B0\x19B2\a\x176\x2\x2\x19B1\x19B0\x3\x2\x2\x2\x19B1\x19B2\x3\x2\x2"+
		"\x2\x19B2\x19B4\x3\x2\x2\x2\x19B3\x19B5\x5\x3C6\x1E4\x2\x19B4\x19B3\x3"+
		"\x2\x2\x2\x19B4\x19B5\x3\x2\x2\x2\x19B5\x19B8\x3\x2\x2\x2\x19B6\x19B7"+
		"\a\x335\x2\x2\x19B7\x19B9\x5\x3DE\x1F0\x2\x19B8\x19B6\x3\x2\x2\x2\x19B8"+
		"\x19B9\x3\x2\x2\x2\x19B9\x19BB\x3\x2\x2\x2\x19BA\x19BC\t>\x2\x2\x19BB"+
		"\x19BA\x3\x2\x2\x2\x19BB\x19BC\x3\x2\x2\x2\x19BC\x1F1\x3\x2\x2\x2\x19BD"+
		"\x19C4\a\x1F5\x2\x2\x19BE\x19C4\a\x2AD\x2\x2\x19BF\x19C4\x5\x2C2\x162"+
		"\x2\x19C0\x19C1\a\xD3\x2\x2\x19C1\x19C2\a\x349\x2\x2\x19C2\x19C4\a\x2C8"+
		"\x2\x2\x19C3\x19BD\x3\x2\x2\x2\x19C3\x19BE\x3\x2\x2\x2\x19C3\x19BF\x3"+
		"\x2\x2\x2\x19C3\x19C0\x3\x2\x2\x2\x19C4\x1F3\x3\x2\x2\x2\x19C5\x19D2\a"+
		"\x1F5\x2\x2\x19C6\x19D2\a\x2C8\x2\x2\x19C7\x19C8\a\x121\x2\x2\x19C8\x19C9"+
		"\a\xE3\x2\x2\x19C9\x19CA\a\xE9\x2\x2\x19CA\x19CB\a\xE3\x2\x2\x19CB\x19D2"+
		"\a\x22A\x2\x2\x19CC\x19CD\a)\x2\x2\x19CD\x19CE\a\xE9\x2\x2\x19CE\x19CF"+
		"\a\xE3\x2\x2\x19CF\x19D2\a\x22A\x2\x2\x19D0\x19D2\x5\x2C2\x162\x2\x19D1"+
		"\x19C5\x3\x2\x2\x2\x19D1\x19C6\x3\x2\x2\x2\x19D1\x19C7\x3\x2\x2\x2\x19D1"+
		"\x19CC\x3\x2\x2\x2\x19D1\x19D0\x3\x2\x2\x2\x19D2\x1F5\x3\x2\x2\x2\x19D3"+
		"\x19D4\aK\x2\x2\x19D4\x19D5\a\x14E\x2\x2\x19D5\x19D6\x5\x3E4\x1F3\x2\x19D6"+
		"\x19D7\a\xE9\x2\x2\x19D7\x19D8\x5\x352\x1AA\x2\x19D8\x19D9\a\x347\x2\x2"+
		"\x19D9\x19DA\x5\x3BE\x1E0\x2\x19DA\x19ED\a\x348\x2\x2\x19DB\x19E1\a\x17F"+
		"\x2\x2\x19DC\x19E2\a\x211\x2\x2\x19DD\x19DE\a\x2C7\x2\x2\x19DE\x19DF\a"+
		"\x32D\x2\x2\x19DF\x19E2\t?\x2\x2\x19E0\x19E2\a\x2E9\x2\x2\x19E1\x19DC"+
		"\x3\x2\x2\x2\x19E1\x19DD\x3\x2\x2\x2\x19E1\x19E0\x3\x2\x2\x2\x19E2\x19E5"+
		"\x3\x2\x2\x2\x19E3\x19E4\a\x349\x2\x2\x19E4\x19E6\a\x274\x2\x2\x19E5\x19E3"+
		"\x3\x2\x2\x2\x19E5\x19E6\x3\x2\x2\x2\x19E6\x19EB\x3\x2\x2\x2\x19E7\x19E8"+
		"\a\x349\x2\x2\x19E8\x19E9\a\x228\x2\x2\x19E9\x19EA\a\x335\x2\x2\x19EA"+
		"\x19EC\x5\x3C2\x1E2\x2\x19EB\x19E7\x3\x2\x2\x2\x19EB\x19EC\x3\x2\x2\x2"+
		"\x19EC\x19EE\x3\x2\x2\x2\x19ED\x19DB\x3\x2\x2\x2\x19ED\x19EE\x3\x2\x2"+
		"\x2\x19EE\x19F0\x3\x2\x2\x2\x19EF\x19F1\a\x34A\x2\x2\x19F0\x19EF\x3\x2"+
		"\x2\x2\x19F0\x19F1\x3\x2\x2\x2\x19F1\x1F7\x3\x2\x2\x2\x19F2\x19F4\a\x16F"+
		"\x2\x2\x19F3\x19F5\t@\x2\x2\x19F4\x19F3\x3\x2\x2\x2\x19F4\x19F5\x3\x2"+
		"\x2\x2\x19F5\x19F6\x3\x2\x2\x2\x19F6\x19F7\a\x14E\x2\x2\x19F7\x19F9\x5"+
		"\x3A6\x1D4\x2\x19F8\x19FA\x5\x3E4\x1F3\x2\x19F9\x19F8\x3\x2\x2\x2\x19F9"+
		"\x19FA\x3\x2\x2\x2\x19FA\x19FE\x3\x2\x2\x2\x19FB\x19FC\a\x313\x2\x2\x19FC"+
		"\x19FD\a\x32D\x2\x2\x19FD\x19FF\a\x175\x2\x2\x19FE\x19FB\x3\x2\x2\x2\x19FE"+
		"\x19FF\x3\x2\x2\x2\x19FF\x1F9\x3\x2\x2\x2\x1A00\x1A01\aK\x2\x2\x1A01\x1A02"+
		"\a\x159\x2\x2\x1A02\x1A03\x5\x3A6\x1D4\x2\x1A03\x1A04\a\x347\x2\x2\x1A04"+
		"\x1A06\x5\x2D0\x169\x2\x1A05\x1A07\a\x349\x2\x2\x1A06\x1A05\x3\x2\x2\x2"+
		"\x1A06\x1A07\x3\x2\x2\x2\x1A07\x1A08\x3\x2\x2\x2\x1A08\x1A0B\a\x348\x2"+
		"\x2\x1A09\x1A0A\a\x243\x2\x2\x1A0A\x1A0C\x5\x3E6\x1F4\x2\x1A0B\x1A09\x3"+
		"\x2\x2\x2\x1A0B\x1A0C\x3\x2\x2\x2\x1A0C\x1A10\x3\x2\x2\x2\x1A0D\x1A0F"+
		"\x5\x1FC\xFF\x2\x1A0E\x1A0D\x3\x2\x2\x2\x1A0F\x1A12\x3\x2\x2\x2\x1A10"+
		"\x1A0E\x3\x2\x2\x2\x1A10\x1A11\x3\x2\x2\x2\x1A11\x1A16\x3\x2\x2\x2\x1A12"+
		"\x1A10\x3\x2\x2\x2\x1A13\x1A14\a\xE9\x2\x2\x1A14\x1A17\x5\x3E4\x1F3\x2"+
		"\x1A15\x1A17\a[\x2\x2\x1A16\x1A13\x3\x2\x2\x2\x1A16\x1A15\x3\x2\x2\x2"+
		"\x1A16\x1A17\x3\x2\x2\x2\x1A17\x1A1B\x3\x2\x2\x2\x1A18\x1A19\a\x2FC\x2"+
		"\x2\x1A19\x1A1C\x5\x3E4\x1F3\x2\x1A1A\x1A1C\a[\x2\x2\x1A1B\x1A18\x3\x2"+
		"\x2\x2\x1A1B\x1A1A\x3\x2\x2\x2\x1A1B\x1A1C\x3\x2\x2\x2\x1A1C\x1A1E\x3"+
		"\x2\x2\x2\x1A1D\x1A1F\a\x34A\x2\x2\x1A1E\x1A1D\x3\x2\x2\x2\x1A1E\x1A1F"+
		"\x3\x2\x2\x2\x1A1F\x1FB\x3\x2\x2\x2\x1A20\x1A34\a\x17F\x2\x2\x1A21\x1A22"+
		"\a\x347\x2\x2\x1A22\x1A27\x5\x2E2\x172\x2\x1A23\x1A24\a\x349\x2\x2\x1A24"+
		"\x1A26\x5\x2E2\x172\x2\x1A25\x1A23\x3\x2\x2\x2\x1A26\x1A29\x3\x2\x2\x2"+
		"\x1A27\x1A25\x3\x2\x2\x2\x1A27\x1A28\x3\x2\x2\x2\x1A28\x1A2A\x3\x2\x2"+
		"\x2\x1A29\x1A27\x3\x2\x2\x2\x1A2A\x1A2B\a\x348\x2\x2\x1A2B\x1A35\x3\x2"+
		"\x2\x2\x1A2C\x1A31\x5\x2E2\x172\x2\x1A2D\x1A2E\a\x349\x2\x2\x1A2E\x1A30"+
		"\x5\x2E2\x172\x2\x1A2F\x1A2D\x3\x2\x2\x2\x1A30\x1A33\x3\x2\x2\x2\x1A31"+
		"\x1A2F\x3\x2\x2\x2\x1A31\x1A32\x3\x2\x2\x2\x1A32\x1A35\x3\x2\x2\x2\x1A33"+
		"\x1A31\x3\x2\x2\x2\x1A34\x1A21\x3\x2\x2\x2\x1A34\x1A2C\x3\x2\x2\x2\x1A35"+
		"\x1FD\x3\x2\x2\x2\x1A36\x1A37\a\xA0\x2\x2\x1A37\x1A39\x5\x3E4\x1F3\x2"+
		"\x1A38\x1A3A\a\x16B\x2\x2\x1A39\x1A38\x3\x2\x2\x2\x1A39\x1A3A\x3\x2\x2"+
		"\x2\x1A3A\x1A3C\x3\x2\x2\x2\x1A3B\x1A3D\x5\x3C4\x1E3\x2\x1A3C\x1A3B\x3"+
		"\x2\x2\x2\x1A3C\x1A3D\x3\x2\x2\x2\x1A3D\x1A3E\x3\x2\x2\x2\x1A3E\x1A3F"+
		"\a\x347\x2\x2\x1A3F\x1A40\x5\x3BC\x1DF\x2\x1A40\x1A41\a\x348\x2\x2\x1A41"+
		"\x1FF\x3\x2\x2\x2\x1A42\x1A43\aK\x2\x2\x1A43\x1A44\a\x178\x2\x2\x1A44"+
		"\x1A49\x5\x3B0\x1D9\x2\x1A45\x1A46\a\x347\x2\x2\x1A46\x1A47\x5\x3BE\x1E0"+
		"\x2\x1A47\x1A48\a\x348\x2\x2\x1A48\x1A4A\x3\x2\x2\x2\x1A49\x1A45\x3\x2"+
		"\x2\x2\x1A49\x1A4A\x3\x2\x2\x2\x1A4A\x1A54\x3\x2\x2\x2\x1A4B\x1A4C\a\x17F"+
		"\x2\x2\x1A4C\x1A51\x5\x202\x102\x2\x1A4D\x1A4E\a\x349\x2\x2\x1A4E\x1A50"+
		"\x5\x202\x102\x2\x1A4F\x1A4D\x3\x2\x2\x2\x1A50\x1A53\x3\x2\x2\x2\x1A51"+
		"\x1A4F\x3\x2\x2\x2\x1A51\x1A52\x3\x2\x2\x2\x1A52\x1A55\x3\x2\x2\x2\x1A53"+
		"\x1A51\x3\x2\x2\x2\x1A54\x1A4B\x3\x2\x2\x2\x1A54\x1A55\x3\x2\x2\x2\x1A55"+
		"\x1A56\x3\x2\x2\x2\x1A56\x1A57\a\x10\x2\x2\x1A57\x1A5B\x5\x1C2\xE2\x2"+
		"\x1A58\x1A59\a\x17F\x2\x2\x1A59\x1A5A\a/\x2\x2\x1A5A\x1A5C\a\xF0\x2\x2"+
		"\x1A5B\x1A58\x3\x2\x2\x2\x1A5B\x1A5C\x3\x2\x2\x2\x1A5C\x1A5E\x3\x2\x2"+
		"\x2\x1A5D\x1A5F\a\x34A\x2\x2\x1A5E\x1A5D\x3\x2\x2\x2\x1A5E\x1A5F\x3\x2"+
		"\x2\x2\x1A5F\x201\x3\x2\x2\x2\x1A60\x1A61\t\x41\x2\x2\x1A61\x203\x3\x2"+
		"\x2\x2\x1A62\x1A63\a\n\x2\x2\x1A63\x1A64\a\x159\x2\x2\x1A64\x1A90\x5\x3A6"+
		"\x1D4\x2\x1A65\x1A66\a\x141\x2\x2\x1A66\x1A67\a\x347\x2\x2\x1A67\x1A68"+
		"\a\x244\x2\x2\x1A68\x1A69\a\x335\x2\x2\x1A69\x1A6A\t\x42\x2\x2\x1A6A\x1A91"+
		"\a\x348\x2\x2\x1A6B\x1A6C\a\x4\x2\x2\x1A6C\x1A91\x5\x2CE\x168\x2\x1A6D"+
		"\x1A6E\a\n\x2\x2\x1A6E\x1A6F\a\x39\x2\x2\x1A6F\x1A91\x5\x2D4\x16B\x2\x1A70"+
		"\x1A71\ai\x2\x2\x1A71\x1A72\a\x39\x2\x2\x1A72\x1A91\x5\x3E4\x1F3\x2\x1A73"+
		"\x1A74\ai\x2\x2\x1A74\x1A75\a?\x2\x2\x1A75\x1A91\x5\x3E4\x1F3\x2\x1A76"+
		"\x1A77\a\x17F\x2\x2\x1A77\x1A78\a/\x2\x2\x1A78\x1A79\a\x4\x2\x2\x1A79"+
		"\x1A7A\a?\x2\x2\x1A7A\x1A7B\x5\x3E4\x1F3\x2\x1A7B\x1A7C\a\x8A\x2\x2\x1A7C"+
		"\x1A7D\a\xAE\x2\x2\x1A7D\x1A7E\a\x347\x2\x2\x1A7E\x1A7F\x5\x3BE\x1E0\x2"+
		"\x1A7F\x1A80\a\x348\x2\x2\x1A80\x1A81\a\x113\x2\x2\x1A81\x1A82\x5\x3A6"+
		"\x1D4\x2\x1A82\x1A83\a\x347\x2\x2\x1A83\x1A84\x5\x3BE\x1E0\x2\x1A84\x1A85"+
		"\a\x348\x2\x2\x1A85\x1A91\x3\x2\x2\x2\x1A86\x1A87\a/\x2\x2\x1A87\x1A88"+
		"\a?\x2\x2\x1A88\x1A91\x5\x3E4\x1F3\x2\x1A89\x1A8A\t\x17\x2\x2\x1A8A\x1A8C"+
		"\a\x166\x2\x2\x1A8B\x1A8D\x5\x3E4\x1F3\x2\x1A8C\x1A8B\x3\x2\x2\x2\x1A8C"+
		"\x1A8D\x3\x2\x2\x2\x1A8D\x1A91\x3\x2\x2\x2\x1A8E\x1A8F\a\x2AB\x2\x2\x1A8F"+
		"\x1A91\x5\x1FC\xFF\x2\x1A90\x1A65\x3\x2\x2\x2\x1A90\x1A6B\x3\x2\x2\x2"+
		"\x1A90\x1A6D\x3\x2\x2\x2\x1A90\x1A70\x3\x2\x2\x2\x1A90\x1A73\x3\x2\x2"+
		"\x2\x1A90\x1A76\x3\x2\x2\x2\x1A90\x1A86\x3\x2\x2\x2\x1A90\x1A89\x3\x2"+
		"\x2\x2\x1A90\x1A8E\x3\x2\x2\x2\x1A91\x1A93\x3\x2\x2\x2\x1A92\x1A94\a\x34A"+
		"\x2\x2\x1A93\x1A92\x3\x2\x2\x2\x1A93\x1A94\x3\x2\x2\x2\x1A94\x205\x3\x2"+
		"\x2\x2\x1A95\x1A96\a\n\x2\x2\x1A96\x1A99\aV\x2\x2\x1A97\x1A9A\x5\x3AC"+
		"\x1D7\x2\x1A98\x1A9A\aM\x2\x2\x1A99\x1A97\x3\x2\x2\x2\x1A99\x1A98\x3\x2"+
		"\x2\x2\x1A9A\x1AA7\x3\x2\x2\x2\x1A9B\x1A9C\a\x264\x2\x2\x1A9C\x1A9D\a"+
		"\x267\x2\x2\x1A9D\x1A9E\a\x335\x2\x2\x1A9E\x1AA8\x5\x3E4\x1F3\x2\x1A9F"+
		"\x1AA0\a\x38\x2\x2\x1AA0\x1AA8\x5\x3E4\x1F3\x2\x1AA1\x1AA2\a\x141\x2\x2"+
		"\x1AA2\x1AA5\x5\x208\x105\x2\x1AA3\x1AA4\a\x17F\x2\x2\x1AA4\x1AA6\x5\x24E"+
		"\x128\x2\x1AA5\x1AA3\x3\x2\x2\x2\x1AA5\x1AA6\x3\x2\x2\x2\x1AA6\x1AA8\x3"+
		"\x2\x2\x2\x1AA7\x1A9B\x3\x2\x2\x2\x1AA7\x1A9F\x3\x2\x2\x2\x1AA7\x1AA1"+
		"\x3\x2\x2\x2\x1AA8\x1AAA\x3\x2\x2\x2\x1AA9\x1AAB\a\x34A\x2\x2\x1AAA\x1AA9"+
		"\x3\x2\x2\x2\x1AAA\x1AAB\x3\x2\x2\x2\x1AAB\x207\x3\x2\x2\x2\x1AAC\x1ACE"+
		"\x5\x20A\x106\x2\x1AAD\x1ACE\x5\x20C\x107\x2\x1AAE\x1ACE\x5\x210\x109"+
		"\x2\x1AAF\x1ACE\x5\x212\x10A\x2\x1AB0\x1ACE\x5\x216\x10C\x2\x1AB1\x1ACE"+
		"\x5\x230\x119\x2\x1AB2\x1ACE\x5\x232\x11A\x2\x1AB3\x1ACE\x5\x234\x11B"+
		"\x2\x1AB4\x1ACE\x5\x236\x11C\x2\x1AB5\x1ACE\x5\x238\x11D\x2\x1AB6\x1ACE"+
		"\x5\x23A\x11E\x2\x1AB7\x1ACE\x5\x23C\x11F\x2\x1AB8\x1AB9\a\x207\x2\x2"+
		"\x1AB9\x1ABA\a\x347\x2\x2\x1ABA\x1ABF\x5\x398\x1CD\x2\x1ABB\x1ABC\a\x349"+
		"\x2\x2\x1ABC\x1ABE\x5\x398\x1CD\x2\x1ABD\x1ABB\x3\x2\x2\x2\x1ABE\x1AC1"+
		"\x3\x2\x2\x2\x1ABF\x1ABD\x3\x2\x2\x2\x1ABF\x1AC0\x3\x2\x2\x2\x1AC0\x1AC2"+
		"\x3\x2\x2\x2\x1AC1\x1ABF\x3\x2\x2\x2\x1AC2\x1AC3\a\x348\x2\x2\x1AC3\x1ACE"+
		"\x3\x2\x2\x2\x1AC4\x1ACE\x5\x23E\x120\x2\x1AC5\x1ACE\x5\x240\x121\x2\x1AC6"+
		"\x1ACE\x5\x242\x122\x2\x1AC7\x1ACE\x5\x244\x123\x2\x1AC8\x1ACE\x5\x246"+
		"\x124\x2\x1AC9\x1ACE\x5\x248\x125\x2\x1ACA\x1ACE\x5\x24A\x126\x2\x1ACB"+
		"\x1ACE\x5\x24C\x127\x2\x1ACC\x1ACE\x5\x24E\x128\x2\x1ACD\x1AAC\x3\x2\x2"+
		"\x2\x1ACD\x1AAD\x3\x2\x2\x2\x1ACD\x1AAE\x3\x2\x2\x2\x1ACD\x1AAF\x3\x2"+
		"\x2\x2\x1ACD\x1AB0\x3\x2\x2\x2\x1ACD\x1AB1\x3\x2\x2\x2\x1ACD\x1AB2\x3"+
		"\x2\x2\x2\x1ACD\x1AB3\x3\x2\x2\x2\x1ACD\x1AB4\x3\x2\x2\x2\x1ACD\x1AB5"+
		"\x3\x2\x2\x2\x1ACD\x1AB6\x3\x2\x2\x2\x1ACD\x1AB7\x3\x2\x2\x2\x1ACD\x1AB8"+
		"\x3\x2\x2\x2\x1ACD\x1AC4\x3\x2\x2\x2\x1ACD\x1AC5\x3\x2\x2\x2\x1ACD\x1AC6"+
		"\x3\x2\x2\x2\x1ACD\x1AC7\x3\x2\x2\x2\x1ACD\x1AC8\x3\x2\x2\x2\x1ACD\x1AC9"+
		"\x3\x2\x2\x2\x1ACD\x1ACA\x3\x2\x2\x2\x1ACD\x1ACB\x3\x2\x2\x2\x1ACD\x1ACC"+
		"\x3\x2\x2\x2\x1ACE\x209\x3\x2\x2\x2\x1ACF\x1AD0\a\x1A0\x2\x2\x1AD0\x1AE1"+
		"\x5\x3C2\x1E2\x2\x1AD1\x1AD2\a\x1A1\x2\x2\x1AD2\x1AE1\a\xE6\x2\x2\x1AD3"+
		"\x1AD8\a\xE9\x2\x2\x1AD4\x1AD5\a\x228\x2\x2\x1AD5\x1AD6\a\x335\x2\x2\x1AD6"+
		"\x1AD9\a\xE9\x2\x2\x1AD7\x1AD9\a\xE6\x2\x2\x1AD8\x1AD4\x3\x2\x2\x2\x1AD8"+
		"\x1AD7\x3\x2\x2\x2\x1AD9\x1AE1\x3\x2\x2\x2\x1ADA\x1ADB\a\x1A2\x2\x2\x1ADB"+
		"\x1AE1\x5\x3C2\x1E2\x2\x1ADC\x1ADD\a\x1A3\x2\x2\x1ADD\x1AE1\x5\x3C2\x1E2"+
		"\x2\x1ADE\x1ADF\a\x1A4\x2\x2\x1ADF\x1AE1\t\t\x2\x2\x1AE0\x1ACF\x3\x2\x2"+
		"\x2\x1AE0\x1AD1\x3\x2\x2\x2\x1AE0\x1AD3\x3\x2\x2\x2\x1AE0\x1ADA\x3\x2"+
		"\x2\x2\x1AE0\x1ADC\x3\x2\x2\x2\x1AE0\x1ADE\x3\x2\x2\x2\x1AE1\x20B\x3\x2"+
		"\x2\x2\x1AE2\x1AE3\a\x1B8\x2\x2\x1AE3\x1AF3\a\x335\x2\x2\x1AE4\x1AF4\a"+
		"\xE6\x2\x2\x1AE5\x1AF0\a\xE9\x2\x2\x1AE6\x1AEB\x5\x20E\x108\x2\x1AE7\x1AE8"+
		"\a\x349\x2\x2\x1AE8\x1AEA\x5\x20E\x108\x2\x1AE9\x1AE7\x3\x2\x2\x2\x1AEA"+
		"\x1AED\x3\x2\x2\x2\x1AEB\x1AE9\x3\x2\x2\x2\x1AEB\x1AEC\x3\x2\x2\x2\x1AEC"+
		"\x1AEF\x3\x2\x2\x2\x1AED\x1AEB\x3\x2\x2\x2\x1AEE\x1AE6\x3\x2\x2\x2\x1AEF"+
		"\x1AF2\x3\x2\x2\x2\x1AF0\x1AEE\x3\x2\x2\x2\x1AF0\x1AF1\x3\x2\x2\x2\x1AF1"+
		"\x1AF4\x3\x2\x2\x2\x1AF2\x1AF0\x3\x2\x2\x2\x1AF3\x1AE4\x3\x2\x2\x2\x1AF3"+
		"\x1AE5\x3\x2\x2\x2\x1AF4\x20D\x3\x2\x2\x2\x1AF5\x1AF6\a\x19F\x2\x2\x1AF6"+
		"\x1AF7\a\x335\x2\x2\x1AF7\x1AFC\x5\x3C2\x1E2\x2\x1AF8\x1AF9\a\x1B7\x2"+
		"\x2\x1AF9\x1AFA\a\x335\x2\x2\x1AFA\x1AFC\t\x43\x2\x2\x1AFB\x1AF5\x3\x2"+
		"\x2\x2\x1AFB\x1AF8\x3\x2\x2\x2\x1AFC\x20F\x3\x2\x2\x2\x1AFD\x1AFE\a@\x2"+
		"\x2\x1AFE\x1AFF\a\x335\x2\x2\x1AFF\x1B00\t\x39\x2\x2\x1B00\x211\x3\x2"+
		"\x2\x2\x1B01\x1B02\a\x1CD\x2\x2\x1B02\x1B06\x5\x3C2\x1E2\x2\x1B03\x1B04"+
		"\a\x1CE\x2\x2\x1B04\x1B06\t\x44\x2\x2\x1B05\x1B01\x3\x2\x2\x2\x1B05\x1B03"+
		"\x3\x2\x2\x2\x1B06\x213\x3\x2\x2\x2\x1B07\x1B08\a\n\x2\x2\x1B08\x1B09"+
		"\ao\x2\x2\x1B09\x1B0C\x5\x3E4\x1F3\x2\x1B0A\x1B0B\a\x15\x2\x2\x1B0B\x1B0D"+
		"\x5\x3E4\x1F3\x2\x1B0C\x1B0A\x3\x2\x2\x2\x1B0C\x1B0D\x3\x2\x2\x2\x1B0D"+
		"\x1B15\x3\x2\x2\x2\x1B0E\x1B0F\a\x14F\x2\x2\x1B0F\x1B13\a\x335\x2\x2\x1B10"+
		"\x1B14\a\x152\x2\x2\x1B11\x1B14\a\x155\x2\x2\x1B12\x1B14\a\x1EB\x2\x2"+
		"\x1B13\x1B10\x3\x2\x2\x2\x1B13\x1B11\x3\x2\x2\x2\x1B13\x1B12\x3\x2\x2"+
		"\x2\x1B14\x1B16\x3\x2\x2\x2\x1B15\x1B0E\x3\x2\x2\x2\x1B15\x1B16\x3\x2"+
		"\x2\x2\x1B16\x1B17\x3\x2\x2\x2\x1B17\x1B18\a\x10\x2\x2\x1B18\x1B19\a\x15D"+
		"\x2\x2\x1B19\x1B1A\a\x347\x2\x2\x1B1A\x1B1B\a\xBA\x2\x2\x1B1B\x1B1C\a"+
		"\x335\x2\x2\x1B1C\x1B21\a\x32D\x2\x2\x1B1D\x1B1E\a\x349\x2\x2\x1B1E\x1B1F"+
		"\a\xB9\x2\x2\x1B1F\x1B20\a\x335\x2\x2\x1B20\x1B22\t\x45\x2\x2\x1B21\x1B1D"+
		"\x3\x2\x2\x2\x1B21\x1B22\x3\x2\x2\x2\x1B22\x1B23\x3\x2\x2\x2\x1B23\x1B91"+
		"\a\x348\x2\x2\x1B24\x1B92\a\x309\x2\x2\x1B25\x1B26\a\x87\x2\x2\x1B26\x1B27"+
		"\a\x13D\x2\x2\x1B27\x1B28\a\x347\x2\x2\x1B28\x1B29\a\x16\x2\x2\x1B29\x1B3A"+
		"\a\x335\x2\x2\x1B2A\x1B2C\a\x17E\x2\x2\x1B2B\x1B2D\t\x46\x2\x2\x1B2C\x1B2B"+
		"\x3\x2\x2\x2\x1B2C\x1B2D\x3\x2\x2\x2\x1B2D\x1B30\x3\x2\x2\x2\x1B2E\x1B2F"+
		"\a,\x2\x2\x1B2F\x1B31\x5\x3E4\x1F3\x2\x1B30\x1B2E\x3\x2\x2\x2\x1B30\x1B31"+
		"\x3\x2\x2\x2\x1B31\x1B3B\x3\x2\x2\x2\x1B32\x1B33\a,\x2\x2\x1B33\x1B35"+
		"\x5\x3E4\x1F3\x2\x1B34\x1B36\a\x17E\x2\x2\x1B35\x1B34\x3\x2\x2\x2\x1B35"+
		"\x1B36\x3\x2\x2\x2\x1B36\x1B38\x3\x2\x2\x2\x1B37\x1B39\t\x46\x2\x2\x1B38"+
		"\x1B37\x3\x2\x2\x2\x1B38\x1B39\x3\x2\x2\x2\x1B39\x1B3B\x3\x2\x2\x2\x1B3A"+
		"\x1B2A\x3\x2\x2\x2\x1B3A\x1B32\x3\x2\x2\x2\x1B3B\x1B4D\x3\x2\x2\x2\x1B3C"+
		"\x1B3E\a\x349\x2\x2\x1B3D\x1B3C\x3\x2\x2\x2\x1B3D\x1B3E\x3\x2\x2\x2\x1B3E"+
		"\x1B3F\x3\x2\x2\x2\x1B3F\x1B40\a\x1F5\x2\x2\x1B40\x1B41\a\x335\x2\x2\x1B41"+
		"\x1B4B\tG\x2\x2\x1B42\x1B49\a\x190\x2\x2\x1B43\x1B4A\a\x5\x2\x2\x1B44"+
		"\x1B4A\a\x2A4\x2\x2\x1B45\x1B46\a\x5\x2\x2\x1B46\x1B4A\a\x2A4\x2\x2\x1B47"+
		"\x1B48\a\x2A4\x2\x2\x1B48\x1B4A\a\x5\x2\x2\x1B49\x1B43\x3\x2\x2\x2\x1B49"+
		"\x1B44\x3\x2\x2\x2\x1B49\x1B45\x3\x2\x2\x2\x1B49\x1B47\x3\x2\x2\x2\x1B4A"+
		"\x1B4C\x3\x2\x2\x2\x1B4B\x1B42\x3\x2\x2\x2\x1B4B\x1B4C\x3\x2\x2\x2\x1B4C"+
		"\x1B4E\x3\x2\x2\x2\x1B4D\x1B3D\x3\x2\x2\x2\x1B4D\x1B4E\x3\x2\x2\x2\x1B4E"+
		"\x1B55\x3\x2\x2\x2\x1B4F\x1B51\a\x349\x2\x2\x1B50\x1B4F\x3\x2\x2\x2\x1B50"+
		"\x1B51\x3\x2\x2\x2\x1B51\x1B52\x3\x2\x2\x2\x1B52\x1B53\a\xCD\x2\x2\x1B53"+
		"\x1B54\a\x335\x2\x2\x1B54\x1B56\tH\x2\x2\x1B55\x1B50\x3\x2\x2\x2\x1B55"+
		"\x1B56\x3\x2\x2\x2\x1B56\x1B5D\x3\x2\x2\x2\x1B57\x1B59\a\x349\x2\x2\x1B58"+
		"\x1B57\x3\x2\x2\x2\x1B58\x1B59\x3\x2\x2\x2\x1B59\x1B5A\x3\x2\x2\x2\x1B5A"+
		"\x1B5B\a\xCE\x2\x2\x1B5B\x1B5C\a\x335\x2\x2\x1B5C\x1B5E\a\x32D\x2\x2\x1B5D"+
		"\x1B58\x3\x2\x2\x2\x1B5D\x1B5E\x3\x2\x2\x2\x1B5E\x1B5F\x3\x2\x2\x2\x1B5F"+
		"\x1B92\a\x348\x2\x2\x1B60\x1B61\a\x87\x2\x2\x1B61\x1B62\aW\x2\x2\x1B62"+
		"\x1B63\a\x347\x2\x2\x1B63\x1B64\a\x16\x2\x2\x1B64\x1B75\a\x335\x2\x2\x1B65"+
		"\x1B67\a\x17E\x2\x2\x1B66\x1B68\t\x46\x2\x2\x1B67\x1B66\x3\x2\x2\x2\x1B67"+
		"\x1B68\x3\x2\x2\x2\x1B68\x1B6B\x3\x2\x2\x2\x1B69\x1B6A\a,\x2\x2\x1B6A"+
		"\x1B6C\x5\x3E4\x1F3\x2\x1B6B\x1B69\x3\x2\x2\x2\x1B6B\x1B6C\x3\x2\x2\x2"+
		"\x1B6C\x1B76\x3\x2\x2\x2\x1B6D\x1B6E\a,\x2\x2\x1B6E\x1B70\x5\x3E4\x1F3"+
		"\x2\x1B6F\x1B71\a\x17E\x2\x2\x1B70\x1B6F\x3\x2\x2\x2\x1B70\x1B71\x3\x2"+
		"\x2\x2\x1B71\x1B73\x3\x2\x2\x2\x1B72\x1B74\t\x46\x2\x2\x1B73\x1B72\x3"+
		"\x2\x2\x2\x1B73\x1B74\x3\x2\x2\x2\x1B74\x1B76\x3\x2\x2\x2\x1B75\x1B65"+
		"\x3\x2\x2\x2\x1B75\x1B6D\x3\x2\x2\x2\x1B76\x1B88\x3\x2\x2\x2\x1B77\x1B79"+
		"\a\x349\x2\x2\x1B78\x1B77\x3\x2\x2\x2\x1B78\x1B79\x3\x2\x2\x2\x1B79\x1B7A"+
		"\x3\x2\x2\x2\x1B7A\x1B7B\a\x1F5\x2\x2\x1B7B\x1B7C\a\x335\x2\x2\x1B7C\x1B86"+
		"\tG\x2\x2\x1B7D\x1B84\a\x190\x2\x2\x1B7E\x1B85\a\x5\x2\x2\x1B7F\x1B85"+
		"\a\x2A4\x2\x2\x1B80\x1B81\a\x5\x2\x2\x1B81\x1B85\a\x2A4\x2\x2\x1B82\x1B83"+
		"\a\x2A4\x2\x2\x1B83\x1B85\a\x5\x2\x2\x1B84\x1B7E\x3\x2\x2\x2\x1B84\x1B7F"+
		"\x3\x2\x2\x2\x1B84\x1B80\x3\x2\x2\x2\x1B84\x1B82\x3\x2\x2\x2\x1B85\x1B87"+
		"\x3\x2\x2\x2\x1B86\x1B7D\x3\x2\x2\x2\x1B86\x1B87\x3\x2\x2\x2\x1B87\x1B89"+
		"\x3\x2\x2\x2\x1B88\x1B78\x3\x2\x2\x2\x1B88\x1B89\x3\x2\x2\x2\x1B89\x1B8B"+
		"\x3\x2\x2\x2\x1B8A\x1B8C\a\x349\x2\x2\x1B8B\x1B8A\x3\x2\x2\x2\x1B8B\x1B8C"+
		"\x3\x2\x2\x2\x1B8C\x1B8D\x3\x2\x2\x2\x1B8D\x1B8E\a\x127\x2\x2\x1B8E\x1B8F"+
		"\a\x335\x2\x2\x1B8F\x1B90\tI\x2\x2\x1B90\x1B92\a\x348\x2\x2\x1B91\x1B24"+
		"\x3\x2\x2\x2\x1B91\x1B25\x3\x2\x2\x2\x1B91\x1B60\x3\x2\x2\x2\x1B92\x215"+
		"\x3\x2\x2\x2\x1B93\x1B94\x5\x218\x10D\x2\x1B94\x217\x3\x2\x2\x2\x1B95"+
		"\x1B96\x5\x21A\x10E\x2\x1B96\x1B97\x5\x220\x111\x2\x1B97\x1B9C\x3\x2\x2"+
		"\x2\x1B98\x1B99\x5\x21C\x10F\x2\x1B99\x1B9A\x5\x222\x112\x2\x1B9A\x1B9C"+
		"\x3\x2\x2\x2\x1B9B\x1B95\x3\x2\x2\x2\x1B9B\x1B98\x3\x2\x2\x2\x1B9C\x219"+
		"\x3\x2\x2\x2\x1B9D\x1B9E\a\x28C\x2\x2\x1B9E\x21B\x3\x2\x2\x2\x1B9F\x1BA0"+
		"\a\x182\x2\x2\x1BA0\x21D\x3\x2\x2\x2\x1BA1\x1BA2\a\x335\x2\x2\x1BA2\x21F"+
		"\x3\x2\x2\x2\x1BA3\x1BA4\x5\x21E\x110\x2\x1BA4\x1BA5\x5\x226\x114\x2\x1BA5"+
		"\x1BB0\x3\x2\x2\x2\x1BA6\x1BB0\a\x7F\x2\x2\x1BA7\x1BB0\a\x89\x2\x2\x1BA8"+
		"\x1BB0\a\xE6\x2\x2\x1BA9\x1BB0\a\x11E\x2\x2\x1BAA\x1BAB\a\x12F\x2\x2\x1BAB"+
		"\x1BB0\tJ\x2\x2\x1BAC\x1BB0\a\x2F4\x2\x2\x1BAD\x1BAE\a\x300\x2\x2\x1BAE"+
		"\x1BB0\a\x32D\x2\x2\x1BAF\x1BA3\x3\x2\x2\x2\x1BAF\x1BA6\x3\x2\x2\x2\x1BAF"+
		"\x1BA7\x3\x2\x2\x2\x1BAF\x1BA8\x3\x2\x2\x2\x1BAF\x1BA9\x3\x2\x2\x2\x1BAF"+
		"\x1BAA\x3\x2\x2\x2\x1BAF\x1BAC\x3\x2\x2\x2\x1BAF\x1BAD\x3\x2\x2\x2\x1BB0"+
		"\x221\x3\x2\x2\x2\x1BB1\x1BB2\x5\x21E\x110\x2\x1BB2\x1BB3\x5\x224\x113"+
		"\x2\x1BB3\x1BB6\x3\x2\x2\x2\x1BB4\x1BB6\a\xE6\x2\x2\x1BB5\x1BB1\x3\x2"+
		"\x2\x2\x1BB5\x1BB4\x3\x2\x2\x2\x1BB6\x223\x3\x2\x2\x2\x1BB7\x1BB8\x5\x226"+
		"\x114\x2\x1BB8\x225\x3\x2\x2\x2\x1BB9\x1BBA\x5\x22A\x116\x2\x1BBA\x1BBB"+
		"\x5\x22E\x118\x2\x1BBB\x1BBC\x5\x228\x115\x2\x1BBC\x1BBD\x5\x22C\x117"+
		"\x2\x1BBD\x227\x3\x2\x2\x2\x1BBE\x1BBF\a\x34B\x2\x2\x1BBF\x229\x3\x2\x2"+
		"\x2\x1BC0\x1BC1\a\x15D\x2\x2\x1BC1\x1BC2\a\x34B\x2\x2\x1BC2\x1BC3\ah\x2"+
		"\x2\x1BC3\x22B\x3\x2\x2\x2\x1BC4\x1BC5\a\x32D\x2\x2\x1BC5\x22D\x3\x2\x2"+
		"\x2\x1BC6\x1BC7\x5\x3E4\x1F3\x2\x1BC7\x1BC8\a\x342\x2\x2\x1BC8\x1BC9\x5"+
		"\x22E\x118\x2\x1BC9\x1BD1\x3\x2\x2\x2\x1BCA\x1BCB\x5\x3E4\x1F3\x2\x1BCB"+
		"\x1BCC\a\x342\x2\x2\x1BCC\x1BCF\x3\x2\x2\x2\x1BCD\x1BCF\x5\x3E4\x1F3\x2"+
		"\x1BCE\x1BCA\x3\x2\x2\x2\x1BCE\x1BCD\x3\x2\x2\x2\x1BCF\x1BD1\x3\x2\x2"+
		"\x2\x1BD0\x1BC6\x3\x2\x2\x2\x1BD0\x1BCE\x3\x2\x2\x2\x1BD1\x22F\x3\x2\x2"+
		"\x2\x1BD2\x1BD3\a\x1D0\x2\x2\x1BD3\x1BD4\x5\x3C2\x1E2\x2\x1BD4\x231\x3"+
		"\x2\x2\x2\x1BD5\x1BD6\a\x1F5\x2\x2\x1BD6\x1BD7\x5\x3C2\x1E2\x2\x1BD7\x233"+
		"\x3\x2\x2\x2\x1BD8\x1BD9\tK\x2\x2\x1BD9\x235\x3\x2\x2\x2\x1BDA\x1BDB\t"+
		"L\x2\x2\x1BDB\x237\x3\x2\x2\x2\x1BDC\x1BDD\tM\x2\x2\x1BDD\x239\x3\x2\x2"+
		"\x2\x1BDE\x1BDF\a\x1DF\x2\x2\x1BDF\x1BE0\a\x335\x2\x2\x1BE0\x1BE1\tN\x2"+
		"\x2\x1BE1\x23B\x3\x2\x2\x2\x1BE2\x1BE3\a\x1D8\x2\x2\x1BE3\x1BFC\x5\x3C2"+
		"\x1E2\x2\x1BE4\x1BE5\a\x307\x2\x2\x1BE5\x1BFC\x5\x3C2\x1E2\x2\x1BE6\x1BE7"+
		"\a\x1DD\x2\x2\x1BE7\x1BEA\a\x335\x2\x2\x1BE8\x1BEB\x5\x3E4\x1F3\x2\x1BE9"+
		"\x1BEB\a\x331\x2\x2\x1BEA\x1BE8\x3\x2\x2\x2\x1BEA\x1BE9\x3\x2\x2\x2\x1BEB"+
		"\x1BFC\x3\x2\x2\x2\x1BEC\x1BED\a\x1DC\x2\x2\x1BED\x1BF0\a\x335\x2\x2\x1BEE"+
		"\x1BF1\x5\x3E4\x1F3\x2\x1BEF\x1BF1\a\x331\x2\x2\x1BF0\x1BEE\x3\x2\x2\x2"+
		"\x1BF0\x1BEF\x3\x2\x2\x2\x1BF1\x1BFC\x3\x2\x2\x2\x1BF2\x1BF3\a\x268\x2"+
		"\x2\x1BF3\x1BF4\a\x335\x2\x2\x1BF4\x1BFC\t\t\x2\x2\x1BF5\x1BF6\a\x304"+
		"\x2\x2\x1BF6\x1BF7\a\x335\x2\x2\x1BF7\x1BFC\t\t\x2\x2\x1BF8\x1BF9\a\x30A"+
		"\x2\x2\x1BF9\x1BFA\a\x335\x2\x2\x1BFA\x1BFC\a\x32D\x2\x2\x1BFB\x1BE2\x3"+
		"\x2\x2\x2\x1BFB\x1BE4\x3\x2\x2\x2\x1BFB\x1BE6\x3\x2\x2\x2\x1BFB\x1BEC"+
		"\x3\x2\x2\x2\x1BFB\x1BF2\x3\x2\x2\x2\x1BFB\x1BF5\x3\x2\x2\x2\x1BFB\x1BF8"+
		"\x3\x2\x2\x2\x1BFC\x23D\x3\x2\x2\x2\x1BFD\x1C06\a\x21C\x2\x2\x1BFE\x1BFF"+
		"\a\x1A5\x2\x2\x1BFF\x1C00\a\x94\x2\x2\x1C00\x1C01\a\x335\x2\x2\x1C01\x1C04"+
		"\x5\x3E4\x1F3\x2\x1C02\x1C04\a\xE6\x2\x2\x1C03\x1BFE\x3\x2\x2\x2\x1C03"+
		"\x1C02\x3\x2\x2\x2\x1C04\x1C07\x3\x2\x2\x2\x1C05\x1C07\tO\x2\x2\x1C06"+
		"\x1C03\x3\x2\x2\x2\x1C06\x1C05\x3\x2\x2\x2\x1C07\x23F\x3\x2\x2\x2\x1C08"+
		"\x1C09\a\x262\x2\x2\x1C09\x1C0A\t\t\x2\x2\x1C0A\x241\x3\x2\x2\x2\x1C0B"+
		"\x1C0C\a\x289\x2\x2\x1C0C\x1C0D\tP\x2\x2\x1C0D\x243\x3\x2\x2\x2\x1C0E"+
		"\x1C0F\a\x2AE\x2\x2\x1C0F\x1C15\tQ\x2\x2\x1C10\x1C11\a\x303\x2\x2\x1C11"+
		"\x1C15\x5\x3C2\x1E2\x2\x1C12\x1C13\a\x288\x2\x2\x1C13\x1C15\tR\x2\x2\x1C14"+
		"\x1C0E\x3\x2\x2\x2\x1C14\x1C10\x3\x2\x2\x2\x1C14\x1C12\x3\x2\x2\x2\x1C15"+
		"\x245\x3\x2\x2\x2\x1C16\x1C1D\a\x1F3\x2\x2\x1C17\x1C1D\a\x1EA\x2\x2\x1C18"+
		"\x1C1D\a\x26A\x2\x2\x1C19\x1C1D\a\x1F7\x2\x2\x1C1A\x1C1B\a\x220\x2\x2"+
		"\x1C1B\x1C1D\x5\x3C2\x1E2\x2\x1C1C\x1C16\x3\x2\x2\x2\x1C1C\x1C17\x3\x2"+
		"\x2\x2\x1C1C\x1C18\x3\x2\x2\x2\x1C1C\x1C19\x3\x2\x2\x2\x1C1C\x1C1A\x3"+
		"\x2\x2\x2\x1C1D\x247\x3\x2\x2\x2\x1C1E\x1C1F\a\x192\x2\x2\x1C1F\x1C26"+
		"\x5\x3C2\x1E2\x2\x1C20\x1C21\a\x2A6\x2\x2\x1C21\x1C26\t\t\x2\x2\x1C22"+
		"\x1C23\a\xCB\x2\x2\x1C23\x1C24\a\x335\x2\x2\x1C24\x1C26\t\t\x2\x2\x1C25"+
		"\x1C1E\x3\x2\x2\x2\x1C25\x1C20\x3\x2\x2\x2\x1C25\x1C22\x3\x2\x2\x2\x1C26"+
		"\x249\x3\x2\x2\x2\x1C27\x1C28\a\x194\x2\x2\x1C28\x1C3D\x5\x3C2\x1E2\x2"+
		"\x1C29\x1C2A\a\x195\x2\x2\x1C2A\x1C3D\x5\x3C2\x1E2\x2\x1C2B\x1C2C\a\x196"+
		"\x2\x2\x1C2C\x1C3D\x5\x3C2\x1E2\x2\x1C2D\x1C2E\a\x197\x2\x2\x1C2E\x1C3D"+
		"\x5\x3C2\x1E2\x2\x1C2F\x1C30\a\x19A\x2\x2\x1C30\x1C3D\x5\x3C2\x1E2\x2"+
		"\x1C31\x1C32\a\x1BF\x2\x2\x1C32\x1C33\a\x335\x2\x2\x1C33\x1C3D\a\x32D"+
		"\x2\x2\x1C34\x1C35\a\x1C1\x2\x2\x1C35\x1C3D\x5\x3C2\x1E2\x2\x1C36\x1C37"+
		"\a\x27A\x2\x2\x1C37\x1C3D\x5\x3C2\x1E2\x2\x1C38\x1C39\a\x2A0\x2\x2\x1C39"+
		"\x1C3D\x5\x3C2\x1E2\x2\x1C3A\x1C3B\a\x2AF\x2\x2\x1C3B\x1C3D\x5\x3C2\x1E2"+
		"\x2\x1C3C\x1C27\x3\x2\x2\x2\x1C3C\x1C29\x3\x2\x2\x2\x1C3C\x1C2B\x3\x2"+
		"\x2\x2\x1C3C\x1C2D\x3\x2\x2\x2\x1C3C\x1C2F\x3\x2\x2\x2\x1C3C\x1C31\x3"+
		"\x2\x2\x2\x1C3C\x1C34\x3\x2\x2\x2\x1C3C\x1C36\x3\x2\x2\x2\x1C3C\x1C38"+
		"\x3\x2\x2\x2\x1C3C\x1C3A\x3\x2\x2\x2\x1C3D\x24B\x3\x2\x2\x2\x1C3E\x1C3F"+
		"\a\x2FA\x2\x2\x1C3F\x1C40\a\x335\x2\x2\x1C40\x1C41\a\x32D\x2\x2\x1C41"+
		"\x1C42\tS\x2\x2\x1C42\x24D\x3\x2\x2\x2\x1C43\x1C44\a\x126\x2\x2\x1C44"+
		"\x1C45\a\x18E\x2\x2\x1C45\x1C4A\a\x32D\x2\x2\x1C46\x1C47\a\x126\x2\x2"+
		"\x1C47\x1C4A\a\x224\x2\x2\x1C48\x1C4A\a\x26F\x2\x2\x1C49\x1C43\x3\x2\x2"+
		"\x2\x1C49\x1C46\x3\x2\x2\x2\x1C49\x1C48\x3\x2\x2\x2\x1C4A\x24F\x3\x2\x2"+
		"\x2\x1C4B\x1C4C\ai\x2\x2\x1C4C\x1C4F\a\xA0\x2\x2\x1C4D\x1C4E\a\x9B\x2"+
		"\x2\x1C4E\x1C50\ay\x2\x2\x1C4F\x1C4D\x3\x2\x2\x2\x1C4F\x1C50\x3\x2\x2"+
		"\x2\x1C50\x1C61\x3\x2\x2\x2\x1C51\x1C56\x5\x252\x12A\x2\x1C52\x1C53\a"+
		"\x349\x2\x2\x1C53\x1C55\x5\x252\x12A\x2\x1C54\x1C52\x3\x2\x2\x2\x1C55"+
		"\x1C58\x3\x2\x2\x2\x1C56\x1C54\x3\x2\x2\x2\x1C56\x1C57\x3\x2\x2\x2\x1C57"+
		"\x1C62\x3\x2\x2\x2\x1C58\x1C56\x3\x2\x2\x2\x1C59\x1C5E\x5\x254\x12B\x2"+
		"\x1C5A\x1C5B\a\x349\x2\x2\x1C5B\x1C5D\x5\x254\x12B\x2\x1C5C\x1C5A\x3\x2"+
		"\x2\x2\x1C5D\x1C60\x3\x2\x2\x2\x1C5E\x1C5C\x3\x2\x2\x2\x1C5E\x1C5F\x3"+
		"\x2\x2\x2\x1C5F\x1C62\x3\x2\x2\x2\x1C60\x1C5E\x3\x2\x2\x2\x1C61\x1C51"+
		"\x3\x2\x2\x2\x1C61\x1C59\x3\x2\x2\x2\x1C62\x1C64\x3\x2\x2\x2\x1C63\x1C65"+
		"\a\x34A\x2\x2\x1C64\x1C63\x3\x2\x2\x2\x1C64\x1C65\x3\x2\x2\x2\x1C65\x251"+
		"\x3\x2\x2\x2\x1C66\x1C67\x5\x3E4\x1F3\x2\x1C67\x1C68\a\xE9\x2\x2\x1C68"+
		"\x1C69\x5\x3A6\x1D4\x2\x1C69\x253\x3\x2\x2\x2\x1C6A\x1C6B\x5\x3E4\x1F3"+
		"\x2\x1C6B\x1C6C\a\x342\x2\x2\x1C6C\x1C6E\x3\x2\x2\x2\x1C6D\x1C6A\x3\x2"+
		"\x2\x2\x1C6D\x1C6E\x3\x2\x2\x2\x1C6E\x1C6F\x3\x2\x2\x2\x1C6F\x1C70\x5"+
		"\x3E4\x1F3\x2\x1C70\x1C71\a\x342\x2\x2\x1C71\x1C72\x5\x3E4\x1F3\x2\x1C72"+
		"\x255\x3\x2\x2\x2\x1C73\x1C74\ai\x2\x2\x1C74\x1C77\t:\x2\x2\x1C75\x1C76"+
		"\a\x9B\x2\x2\x1C76\x1C78\ay\x2\x2\x1C77\x1C75\x3\x2\x2\x2\x1C77\x1C78"+
		"\x3\x2\x2\x2\x1C78\x1C79\x3\x2\x2\x2\x1C79\x1C7E\x5\x3B2\x1DA\x2\x1C7A"+
		"\x1C7B\a\x349\x2\x2\x1C7B\x1C7D\x5\x3B2\x1DA\x2\x1C7C\x1C7A\x3\x2\x2\x2"+
		"\x1C7D\x1C80\x3\x2\x2\x2\x1C7E\x1C7C\x3\x2\x2\x2\x1C7E\x1C7F\x3\x2\x2"+
		"\x2\x1C7F\x1C82\x3\x2\x2\x2\x1C80\x1C7E\x3\x2\x2\x2\x1C81\x1C83\a\x34A"+
		"\x2\x2\x1C82\x1C81\x3\x2\x2\x2\x1C82\x1C83\x3\x2\x2\x2\x1C83\x257\x3\x2"+
		"\x2\x2\x1C84\x1C87\x5\x25A\x12E\x2\x1C85\x1C87\x5\x25C\x12F\x2\x1C86\x1C84"+
		"\x3\x2\x2\x2\x1C86\x1C85\x3\x2\x2\x2\x1C87\x259\x3\x2\x2\x2\x1C88\x1C89"+
		"\ai\x2\x2\x1C89\x1C8C\a\x166\x2\x2\x1C8A\x1C8B\a\x9B\x2\x2\x1C8B\x1C8D"+
		"\ay\x2\x2\x1C8C\x1C8A\x3\x2\x2\x2\x1C8C\x1C8D\x3\x2\x2\x2\x1C8D\x1C8E"+
		"\x3\x2\x2\x2\x1C8E\x1C93\x5\x3B0\x1D9\x2\x1C8F\x1C90\a\x349\x2\x2\x1C90"+
		"\x1C92\x5\x3B0\x1D9\x2\x1C91\x1C8F\x3\x2\x2\x2\x1C92\x1C95\x3\x2\x2\x2"+
		"\x1C93\x1C91\x3\x2\x2\x2\x1C93\x1C94\x3\x2\x2\x2\x1C94\x1C97\x3\x2\x2"+
		"\x2\x1C95\x1C93\x3\x2\x2\x2\x1C96\x1C98\a\x34A\x2\x2\x1C97\x1C96\x3\x2"+
		"\x2\x2\x1C97\x1C98\x3\x2\x2\x2\x1C98\x25B\x3\x2\x2\x2\x1C99\x1C9A\ai\x2"+
		"\x2\x1C9A\x1C9D\a\x166\x2\x2\x1C9B\x1C9C\a\x9B\x2\x2\x1C9C\x1C9E\ay\x2"+
		"\x2\x1C9D\x1C9B\x3\x2\x2\x2\x1C9D\x1C9E\x3\x2\x2\x2\x1C9E\x1C9F\x3\x2"+
		"\x2\x2\x1C9F\x1CA4\x5\x3B0\x1D9\x2\x1CA0\x1CA1\a\x349\x2\x2\x1CA1\x1CA3"+
		"\x5\x3B0\x1D9\x2\x1CA2\x1CA0\x3\x2\x2\x2\x1CA3\x1CA6\x3\x2\x2\x2\x1CA4"+
		"\x1CA2\x3\x2\x2\x2\x1CA4\x1CA5\x3\x2\x2\x2\x1CA5\x1CA7\x3\x2\x2\x2\x1CA6"+
		"\x1CA4\x3\x2\x2\x2\x1CA7\x1CAB\a\xE9\x2\x2\x1CA8\x1CAC\aV\x2\x2\x1CA9"+
		"\x1CAA\a\x6\x2\x2\x1CAA\x1CAC\a\x13B\x2\x2\x1CAB\x1CA8\x3\x2\x2\x2\x1CAB"+
		"\x1CA9\x3\x2\x2\x2\x1CAC\x1CAE\x3\x2\x2\x2\x1CAD\x1CAF\a\x34A\x2\x2\x1CAE"+
		"\x1CAD\x3\x2\x2\x2\x1CAE\x1CAF\x3\x2\x2\x2\x1CAF\x25D\x3\x2\x2\x2\x1CB0"+
		"\x1CB1\ai\x2\x2\x1CB1\x1CB4\a\x8F\x2\x2\x1CB2\x1CB3\a\x9B\x2\x2\x1CB3"+
		"\x1CB5\ay\x2\x2\x1CB4\x1CB2\x3\x2\x2\x2\x1CB4\x1CB5\x3\x2\x2\x2\x1CB5"+
		"\x1CB6\x3\x2\x2\x2\x1CB6\x1CBB\x5\x3B2\x1DA\x2\x1CB7\x1CB8\a\x349\x2\x2"+
		"\x1CB8\x1CBA\x5\x3B2\x1DA\x2\x1CB9\x1CB7\x3\x2\x2\x2\x1CBA\x1CBD\x3\x2"+
		"\x2\x2\x1CBB\x1CB9\x3\x2\x2\x2\x1CBB\x1CBC\x3\x2\x2\x2\x1CBC\x1CBF\x3"+
		"\x2\x2\x2\x1CBD\x1CBB\x3\x2\x2\x2\x1CBE\x1CC0\a\x34A\x2\x2\x1CBF\x1CBE"+
		"\x3\x2\x2\x2\x1CBF\x1CC0\x3\x2\x2\x2\x1CC0\x25F\x3\x2\x2\x2\x1CC1\x1CC2"+
		"\ai\x2\x2\x1CC2\x1CCC\a\x14E\x2\x2\x1CC3\x1CC5\a\x349\x2\x2\x1CC4\x1CC3"+
		"\x3\x2\x2\x2\x1CC4\x1CC5\x3\x2\x2\x2\x1CC5\x1CC9\x3\x2\x2\x2\x1CC6\x1CC7"+
		"\x5\x3A6\x1D4\x2\x1CC7\x1CC8\a\x342\x2\x2\x1CC8\x1CCA\x3\x2\x2\x2\x1CC9"+
		"\x1CC6\x3\x2\x2\x2\x1CC9\x1CCA\x3\x2\x2\x2\x1CCA\x1CCB\x3\x2\x2\x2\x1CCB"+
		"\x1CCD\x5\x3E4\x1F3\x2\x1CCC\x1CC4\x3\x2\x2\x2\x1CCD\x1CCE\x3\x2\x2\x2"+
		"\x1CCE\x1CCC\x3\x2\x2\x2\x1CCE\x1CCF\x3\x2\x2\x2\x1CCF\x1CD0\x3\x2\x2"+
		"\x2\x1CD0\x1CD1\a\x34A\x2\x2\x1CD1\x261\x3\x2\x2\x2\x1CD2\x1CD3\ai\x2"+
		"\x2\x1CD3\x1CD6\a\x159\x2\x2\x1CD4\x1CD5\a\x9B\x2\x2\x1CD5\x1CD7\ay\x2"+
		"\x2\x1CD6\x1CD4\x3\x2\x2\x2\x1CD6\x1CD7\x3\x2\x2\x2\x1CD7\x1CD8\x3\x2"+
		"\x2\x2\x1CD8\x1CDA\x5\x3A6\x1D4\x2\x1CD9\x1CDB\a\x34A\x2\x2\x1CDA\x1CD9"+
		"\x3\x2\x2\x2\x1CDA\x1CDB\x3\x2\x2\x2\x1CDB\x263\x3\x2\x2\x2\x1CDC\x1CDD"+
		"\ai\x2\x2\x1CDD\x1CE0\a\x178\x2\x2\x1CDE\x1CDF\a\x9B\x2\x2\x1CDF\x1CE1"+
		"\ay\x2\x2\x1CE0\x1CDE\x3\x2\x2\x2\x1CE0\x1CE1\x3\x2\x2\x2\x1CE1\x1CE2"+
		"\x3\x2\x2\x2\x1CE2\x1CE7\x5\x3B0\x1D9\x2\x1CE3\x1CE4\a\x349\x2\x2\x1CE4"+
		"\x1CE6\x5\x3B0\x1D9\x2\x1CE5\x1CE3\x3\x2\x2\x2\x1CE6\x1CE9\x3\x2\x2\x2"+
		"\x1CE7\x1CE5\x3\x2\x2\x2\x1CE7\x1CE8\x3\x2\x2\x2\x1CE8\x1CEB\x3\x2\x2"+
		"\x2\x1CE9\x1CE7\x3\x2\x2\x2\x1CEA\x1CEC\a\x34A\x2\x2\x1CEB\x1CEA\x3\x2"+
		"\x2\x2\x1CEB\x1CEC\x3\x2\x2\x2\x1CEC\x265\x3\x2\x2\x2\x1CED\x1CEE\aK\x2"+
		"\x2\x1CEE\x1CEF\a\x30B\x2\x2\x1CEF\x1CF4\x5\x3B0\x1D9\x2\x1CF0\x1CF1\a"+
		"\x8D\x2\x2\x1CF1\x1CF2\x5\x3DC\x1EF\x2\x1CF2\x1CF3\x5\x3C6\x1E4\x2\x1CF3"+
		"\x1CF5\x3\x2\x2\x2\x1CF4\x1CF0\x3\x2\x2\x2\x1CF4\x1CF5\x3\x2\x2\x2\x1CF5"+
		"\x1CFC\x3\x2\x2\x2\x1CF6\x1CF7\a\x10\x2\x2\x1CF7\x1CF8\a\x159\x2\x2\x1CF8"+
		"\x1CF9\a\x347\x2\x2\x1CF9\x1CFA\x5\x2CC\x167\x2\x1CFA\x1CFB\a\x348\x2"+
		"\x2\x1CFB\x1CFD\x3\x2\x2\x2\x1CFC\x1CF6\x3\x2\x2\x2\x1CFC\x1CFD\x3\x2"+
		"\x2\x2\x1CFD\x267\x3\x2\x2\x2\x1CFE\x1CFF\ai\x2\x2\x1CFF\x1D02\a\x30B"+
		"\x2\x2\x1D00\x1D01\a\x9B\x2\x2\x1D01\x1D03\ay\x2\x2\x1D02\x1D00\x3\x2"+
		"\x2\x2\x1D02\x1D03\x3\x2\x2\x2\x1D03\x1D04\x3\x2\x2\x2\x1D04\x1D05\x5"+
		"\x3B0\x1D9\x2\x1D05\x269\x3\x2\x2\x2\x1D06\x1D09\x5\x26C\x137\x2\x1D07"+
		"\x1D09\x5\x26E\x138\x2\x1D08\x1D06\x3\x2\x2\x2\x1D08\x1D07\x3\x2\x2\x2"+
		"\x1D09\x26B\x3\x2\x2\x2\x1D0A\x1D0B\a\xED\x2\x2\x1D0B\x1D0C\a\x347\x2"+
		"\x2\x1D0C\x1D0D\x5\x3E4\x1F3\x2\x1D0D\x1D0E\a\x349\x2\x2\x1D0E\x1D0F\a"+
		"\x331\x2\x2\x1D0F\x1D10\a\x348\x2\x2\x1D10\x26D\x3\x2\x2\x2\x1D11\x1D12"+
		"\a\xEC\x2\x2\x1D12\x1D13\a\x347\x2\x2\x1D13\x1D14\a\x331\x2\x2\x1D14\x1D15"+
		"\a\x349\x2\x2\x1D15\x1D16\a\x331\x2\x2\x1D16\x1D17\a\x348\x2\x2\x1D17"+
		"\x1D19\a\x342\x2\x2\x1D18\x1D1A\x5\x3AC\x1D7\x2\x1D19\x1D18\x3\x2\x2\x2"+
		"\x1D19\x1D1A\x3\x2\x2\x2\x1D1A\x1D1B\x3\x2\x2\x2\x1D1B\x1D1D\a\x342\x2"+
		"\x2\x1D1C\x1D1E\x5\x3E4\x1F3\x2\x1D1D\x1D1C\x3\x2\x2\x2\x1D1D\x1D1E\x3"+
		"\x2\x2\x2\x1D1E\x1D1F\x3\x2\x2\x2\x1D1F\x1D20\a\x342\x2\x2\x1D20\x1D21"+
		"\x5\x3AA\x1D6\x2\x1D21\x26F\x3\x2\x2\x2\x1D22\x1D23\aZ\x2\x2\x1D23\x1D25"+
		"\a\x32C\x2\x2\x1D24\x1D26\a\x10\x2\x2\x1D25\x1D24\x3\x2\x2\x2\x1D25\x1D26"+
		"\x3\x2\x2\x2\x1D26\x1D27\x3\x2\x2\x2\x1D27\x1D29\x5\x2C6\x164\x2\x1D28"+
		"\x1D2A\a\x34A\x2\x2\x1D29\x1D28\x3\x2\x2\x2\x1D29\x1D2A\x3\x2\x2\x2\x1D2A"+
		"\x1D4E\x3\x2\x2\x2\x1D2B\x1D2C\aZ\x2\x2\x1D2C\x1D31\x5\x2C4\x163\x2\x1D2D"+
		"\x1D2E\a\x349\x2\x2\x1D2E\x1D30\x5\x2C4\x163\x2\x1D2F\x1D2D\x3\x2\x2\x2"+
		"\x1D30\x1D33\x3\x2\x2\x2\x1D31\x1D2F\x3\x2\x2\x2\x1D31\x1D32\x3\x2\x2"+
		"\x2\x1D32\x1D35\x3\x2\x2\x2\x1D33\x1D31\x3\x2\x2\x2\x1D34\x1D36\a\x34A"+
		"\x2\x2\x1D35\x1D34\x3\x2\x2\x2\x1D35\x1D36\x3\x2\x2\x2\x1D36\x1D4E\x3"+
		"\x2\x2\x2\x1D37\x1D38\aZ\x2\x2\x1D38\x1D3A\a\x32C\x2\x2\x1D39\x1D3B\a"+
		"\x10\x2\x2\x1D3A\x1D39\x3\x2\x2\x2\x1D3A\x1D3B\x3\x2\x2\x2\x1D3B\x1D3C"+
		"\x3\x2\x2\x2\x1D3C\x1D3E\x5\x2C8\x165\x2\x1D3D\x1D3F\a\x34A\x2\x2\x1D3E"+
		"\x1D3D\x3\x2\x2\x2\x1D3E\x1D3F\x3\x2\x2\x2\x1D3F\x1D4E\x3\x2\x2\x2\x1D40"+
		"\x1D41\a\x17F\x2\x2\x1D41\x1D42\a\x322\x2\x2\x1D42\x1D43\a\x347\x2\x2"+
		"\x1D43\x1D45\a\x331\x2\x2\x1D44\x1D46\a\x349\x2\x2\x1D45\x1D44\x3\x2\x2"+
		"\x2\x1D45\x1D46\x3\x2\x2\x2\x1D46\x1D47\x3\x2\x2\x2\x1D47\x1D48\a\x10"+
		"\x2\x2\x1D48\x1D49\x5\x3E4\x1F3\x2\x1D49\x1D4B\a\x348\x2\x2\x1D4A\x1D4C"+
		"\a\x34A\x2\x2\x1D4B\x1D4A\x3\x2\x2\x2\x1D4B\x1D4C\x3\x2\x2\x2\x1D4C\x1D4E"+
		"\x3\x2\x2\x2\x1D4D\x1D22\x3\x2\x2\x2\x1D4D\x1D2B\x3\x2\x2\x2\x1D4D\x1D37"+
		"\x3\x2\x2\x2\x1D4D\x1D40\x3\x2\x2\x2\x1D4E\x271\x3\x2\x2\x2\x1D4F\x1D51"+
		"\a\x34\x2\x2\x1D50\x1D52\a\x216\x2\x2\x1D51\x1D50\x3\x2\x2\x2\x1D51\x1D52"+
		"\x3\x2\x2\x2\x1D52\x1D53\x3\x2\x2\x2\x1D53\x1D55\x5\x3C0\x1E1\x2\x1D54"+
		"\x1D56\a\x34A\x2\x2\x1D55\x1D54\x3\x2\x2\x2\x1D55\x1D56\x3\x2\x2\x2\x1D56"+
		"\x1D6D\x3\x2\x2\x2\x1D57\x1D59\aY\x2\x2\x1D58\x1D5A\a\x216\x2\x2\x1D59"+
		"\x1D58\x3\x2\x2\x2\x1D59\x1D5A\x3\x2\x2\x2\x1D5A\x1D5C\x3\x2\x2\x2\x1D5B"+
		"\x1D5D\aR\x2\x2\x1D5C\x1D5B\x3\x2\x2\x2\x1D5C\x1D5D\x3\x2\x2\x2\x1D5D"+
		"\x1D5E\x3\x2\x2\x2\x1D5E\x1D60\x5\x3C0\x1E1\x2\x1D5F\x1D61\a\x34A\x2\x2"+
		"\x1D60\x1D5F\x3\x2\x2\x2\x1D60\x1D61\x3\x2\x2\x2\x1D61\x1D6D\x3\x2\x2"+
		"\x2\x1D62\x1D6D\x5\x2E4\x173\x2\x1D63\x1D6D\x5\x2EA\x176\x2\x1D64\x1D66"+
		"\a\xEB\x2\x2\x1D65\x1D67\a\x216\x2\x2\x1D66\x1D65\x3\x2\x2\x2\x1D66\x1D67"+
		"\x3\x2\x2\x2\x1D67\x1D68\x3\x2\x2\x2\x1D68\x1D6A\x5\x3C0\x1E1\x2\x1D69"+
		"\x1D6B\a\x34A\x2\x2\x1D6A\x1D69\x3\x2\x2\x2\x1D6A\x1D6B\x3\x2\x2\x2\x1D6B"+
		"\x1D6D\x3\x2\x2\x2\x1D6C\x1D4F\x3\x2\x2\x2\x1D6C\x1D57\x3\x2\x2\x2\x1D6C"+
		"\x1D62\x3\x2\x2\x2\x1D6C\x1D63\x3\x2\x2\x2\x1D6C\x1D64\x3\x2\x2\x2\x1D6D"+
		"\x273\x3\x2\x2\x2\x1D6E\x1D6F\a\x1B\x2\x2\x1D6F\x1D70\aV\x2\x2\x1D70\x1D7D"+
		"\x5\x3AC\x1D7\x2\x1D71\x1D7A\a\x111\x2\x2\x1D72\x1D74\a\x349\x2\x2\x1D73"+
		"\x1D72\x3\x2\x2\x2\x1D73\x1D74\x3\x2\x2\x2\x1D74\x1D75\x3\x2\x2\x2\x1D75"+
		"\x1D76\tT\x2\x2\x1D76\x1D77\a\x335\x2\x2\x1D77\x1D79\a\x331\x2\x2\x1D78"+
		"\x1D73\x3\x2\x2\x2\x1D79\x1D7C\x3\x2\x2\x2\x1D7A\x1D78\x3\x2\x2\x2\x1D7A"+
		"\x1D7B\x3\x2\x2\x2\x1D7B\x1D7E\x3\x2\x2\x2\x1D7C\x1D7A\x3\x2\x2\x2\x1D7D"+
		"\x1D71\x3\x2\x2\x2\x1D7D\x1D7E\x3\x2\x2\x2\x1D7E\x1D87\x3\x2\x2\x2\x1D7F"+
		"\x1D81\a\x349\x2\x2\x1D80\x1D7F\x3\x2\x2\x2\x1D80\x1D81\x3\x2\x2\x2\x1D81"+
		"\x1D82\x3\x2\x2\x2\x1D82\x1D83\tT\x2\x2\x1D83\x1D84\a\x335\x2\x2\x1D84"+
		"\x1D86\a\x331\x2\x2\x1D85\x1D80\x3\x2\x2\x2\x1D86\x1D89\x3\x2\x2\x2\x1D87"+
		"\x1D85\x3\x2\x2\x2\x1D87\x1D88\x3\x2\x2\x2\x1D88\x1DA1\x3\x2\x2\x2\x1D89"+
		"\x1D87\x3\x2\x2\x2\x1D8A\x1D8F\a\x160\x2\x2\x1D8B\x1D8D\a\x349\x2\x2\x1D8C"+
		"\x1D8B\x3\x2\x2\x2\x1D8C\x1D8D\x3\x2\x2\x2\x1D8D\x1D8E\x3\x2\x2\x2\x1D8E"+
		"\x1D90\x5\x3E4\x1F3\x2\x1D8F\x1D8C\x3\x2\x2\x2\x1D90\x1D91\x3\x2\x2\x2"+
		"\x1D91\x1D8F\x3\x2\x2\x2\x1D91\x1D92\x3\x2\x2\x2\x1D92\x1DA2\x3\x2\x2"+
		"\x2\x1D93\x1D9D\a\x160\x2\x2\x1D94\x1D96\a\x349\x2\x2\x1D95\x1D94\x3\x2"+
		"\x2\x2\x1D95\x1D96\x3\x2\x2\x2\x1D96\x1D97\x3\x2\x2\x2\x1D97\x1D98\tU"+
		"\x2\x2\x1D98\x1D9B\a\x335\x2\x2\x1D99\x1D9C\a\x331\x2\x2\x1D9A\x1D9C\x5"+
		"\x3E4\x1F3\x2\x1D9B\x1D99\x3\x2\x2\x2\x1D9B\x1D9A\x3\x2\x2\x2\x1D9C\x1D9E"+
		"\x3\x2\x2\x2\x1D9D\x1D95\x3\x2\x2\x2\x1D9E\x1D9F\x3\x2\x2\x2\x1D9F\x1D9D"+
		"\x3\x2\x2\x2\x1D9F\x1DA0\x3\x2\x2\x2\x1DA0\x1DA2\x3\x2\x2\x2\x1DA1\x1D8A"+
		"\x3\x2\x2\x2\x1DA1\x1D93\x3\x2\x2\x2\x1DA2\x1DC4\x3\x2\x2\x2\x1DA3\x1DA4"+
		"\a\xD0\x2\x2\x1DA4\x1DA9\a\x160\x2\x2\x1DA5\x1DA7\a\x349\x2\x2\x1DA6\x1DA5"+
		"\x3\x2\x2\x2\x1DA6\x1DA7\x3\x2\x2\x2\x1DA7\x1DA8\x3\x2\x2\x2\x1DA8\x1DAA"+
		"\x5\x3E4\x1F3\x2\x1DA9\x1DA6\x3\x2\x2\x2\x1DAA\x1DAB\x3\x2\x2\x2\x1DAB"+
		"\x1DA9\x3\x2\x2\x2\x1DAB\x1DAC\x3\x2\x2\x2\x1DAC\x1DAE\x3\x2\x2\x2\x1DAD"+
		"\x1DA3\x3\x2\x2\x2\x1DAE\x1DAF\x3\x2\x2\x2\x1DAF\x1DAD\x3\x2\x2\x2\x1DAF"+
		"\x1DB0\x3\x2\x2\x2\x1DB0\x1DC5\x3\x2\x2\x2\x1DB1\x1DB2\a\xD0\x2\x2\x1DB2"+
		"\x1DBC\a\x160\x2\x2\x1DB3\x1DB5\a\x349\x2\x2\x1DB4\x1DB3\x3\x2\x2\x2\x1DB4"+
		"\x1DB5\x3\x2\x2\x2\x1DB5\x1DB6\x3\x2\x2\x2\x1DB6\x1DB7\tU\x2\x2\x1DB7"+
		"\x1DBA\a\x335\x2\x2\x1DB8\x1DBB\a\x331\x2\x2\x1DB9\x1DBB\x5\x3E4\x1F3"+
		"\x2\x1DBA\x1DB8\x3\x2\x2\x2\x1DBA\x1DB9\x3\x2\x2\x2\x1DBB\x1DBD\x3\x2"+
		"\x2\x2\x1DBC\x1DB4\x3\x2\x2\x2\x1DBD\x1DBE\x3\x2\x2\x2\x1DBE\x1DBC\x3"+
		"\x2\x2\x2\x1DBE\x1DBF\x3\x2\x2\x2\x1DBF\x1DC1\x3\x2\x2\x2\x1DC0\x1DB1"+
		"\x3\x2\x2\x2\x1DC1\x1DC2\x3\x2\x2\x2\x1DC2\x1DC0\x3\x2\x2\x2\x1DC2\x1DC3"+
		"\x3\x2\x2\x2\x1DC3\x1DC5\x3\x2\x2\x2\x1DC4\x1DAD\x3\x2\x2\x2\x1DC4\x1DC0"+
		"\x3\x2\x2\x2\x1DC4\x1DC5\x3\x2\x2\x2\x1DC5\x1E68\x3\x2\x2\x2\x1DC6\x1E65"+
		"\a\x17F\x2\x2\x1DC7\x1DC9\a\x349\x2\x2\x1DC8\x1DC7\x3\x2\x2\x2\x1DC8\x1DC9"+
		"\x3\x2\x2\x2\x1DC9\x1DCA\x3\x2\x2\x2\x1DCA\x1E64\a\x62\x2\x2\x1DCB\x1DCD"+
		"\a\x349\x2\x2\x1DCC\x1DCB\x3\x2\x2\x2\x1DCC\x1DCD\x3\x2\x2\x2\x1DCD\x1DCE"+
		"\x3\x2\x2\x2\x1DCE\x1E64\aJ\x2\x2\x1DCF\x1DD1\a\x349\x2\x2\x1DD0\x1DCF"+
		"\x3\x2\x2\x2\x1DD0\x1DD1\x3\x2\x2\x2\x1DD1\x1DD2\x3\x2\x2\x2\x1DD2\x1E64"+
		"\tV\x2\x2\x1DD3\x1DD5\a\x349\x2\x2\x1DD4\x1DD3\x3\x2\x2\x2\x1DD4\x1DD5"+
		"\x3\x2\x2\x2\x1DD5\x1DD6\x3\x2\x2\x2\x1DD6\x1DD7\a\x1E4\x2\x2\x1DD7\x1DDA"+
		"\a\x335\x2\x2\x1DD8\x1DDB\a\x331\x2\x2\x1DD9\x1DDB\x5\x3E4\x1F3\x2\x1DDA"+
		"\x1DD8\x3\x2\x2\x2\x1DDA\x1DD9\x3\x2\x2\x2\x1DDB\x1E64\x3\x2\x2\x2\x1DDC"+
		"\x1DDE\a\x349\x2\x2\x1DDD\x1DDC\x3\x2\x2\x2\x1DDD\x1DDE\x3\x2\x2\x2\x1DDE"+
		"\x1DDF\x3\x2\x2\x2\x1DDF\x1DE0\a\x267\x2\x2\x1DE0\x1DE1\a\x335\x2\x2\x1DE1"+
		"\x1E64\t\x3\x2\x2\x1DE2\x1DE4\a\x349\x2\x2\x1DE3\x1DE2\x3\x2\x2\x2\x1DE3"+
		"\x1DE4\x3\x2\x2\x2\x1DE4\x1DE5\x3\x2\x2\x2\x1DE5\x1E64\a\x1CB\x2\x2\x1DE6"+
		"\x1DE8\a\x349\x2\x2\x1DE7\x1DE6\x3\x2\x2\x2\x1DE7\x1DE8\x3\x2\x2\x2\x1DE8"+
		"\x1DE9\x3\x2\x2\x2\x1DE9\x1E64\a\x86\x2\x2\x1DEA\x1DEC\a\x349\x2\x2\x1DEB"+
		"\x1DEA\x3\x2\x2\x2\x1DEB\x1DEC\x3\x2\x2\x2\x1DEC\x1DF9\x3\x2\x2\x2\x1DED"+
		"\x1DEE\az\x2\x2\x1DEE\x1DF1\a\x335\x2\x2\x1DEF\x1DF2\a\x331\x2\x2\x1DF0"+
		"\x1DF2\x5\x3E4\x1F3\x2\x1DF1\x1DEF\x3\x2\x2\x2\x1DF1\x1DF0\x3\x2\x2\x2"+
		"\x1DF2\x1DFA\x3\x2\x2\x2\x1DF3\x1DF4\a\x11F\x2\x2\x1DF4\x1DF7\a\x335\x2"+
		"\x2\x1DF5\x1DF8\a\x32D\x2\x2\x1DF6\x1DF8\x5\x3E4\x1F3\x2\x1DF7\x1DF5\x3"+
		"\x2\x2\x2\x1DF7\x1DF6\x3\x2\x2\x2\x1DF8\x1DFA\x3\x2\x2\x2\x1DF9\x1DED"+
		"\x3\x2\x2\x2\x1DF9\x1DF3\x3\x2\x2\x2\x1DFA\x1E64\x3\x2\x2\x2\x1DFB\x1DFD"+
		"\a\x349\x2\x2\x1DFC\x1DFB\x3\x2\x2\x2\x1DFC\x1DFD\x3\x2\x2\x2\x1DFD\x1DFE"+
		"\x3\x2\x2\x2\x1DFE\x1E64\tW\x2\x2\x1DFF\x1E01\a\x349\x2\x2\x1E00\x1DFF"+
		"\x3\x2\x2\x2\x1E00\x1E01\x3\x2\x2\x2\x1E01\x1E02\x3\x2\x2\x2\x1E02\x1E64"+
		"\tX\x2\x2\x1E03\x1E05\a\x349\x2\x2\x1E04\x1E03\x3\x2\x2\x2\x1E04\x1E05"+
		"\x3\x2\x2\x2\x1E05\x1E06\x3\x2\x2\x2\x1E06\x1E64\tY\x2\x2\x1E07\x1E09"+
		"\a\x349\x2\x2\x1E08\x1E07\x3\x2\x2\x2\x1E08\x1E09\x3\x2\x2\x2\x1E09\x1E0A"+
		"\x3\x2\x2\x2\x1E0A\x1E0B\a\xC7\x2\x2\x1E0B\x1E0E\a\x335\x2\x2\x1E0C\x1E0F"+
		"\a\x331\x2\x2\x1E0D\x1E0F\x5\x3E4\x1F3\x2\x1E0E\x1E0C\x3\x2\x2\x2\x1E0E"+
		"\x1E0D\x3\x2\x2\x2\x1E0F\x1E64\x3\x2\x2\x2\x1E10\x1E12\a\x349\x2\x2\x1E11"+
		"\x1E10\x3\x2\x2\x2\x1E11\x1E12\x3\x2\x2\x2\x1E12\x1E13\x3\x2\x2\x2\x1E13"+
		"\x1E14\a\xC8\x2\x2\x1E14\x1E15\a\x335\x2\x2\x1E15\x1E64\a\x331\x2\x2\x1E16"+
		"\x1E18\a\x349\x2\x2\x1E17\x1E16\x3\x2\x2\x2\x1E17\x1E18\x3\x2\x2\x2\x1E18"+
		"\x1E19\x3\x2\x2\x2\x1E19\x1E1A\a \x2\x2\x1E1A\x1E1D\a\x335\x2\x2\x1E1B"+
		"\x1E1E\a\x32D\x2\x2\x1E1C\x1E1E\x5\x3E4\x1F3\x2\x1E1D\x1E1B\x3\x2\x2\x2"+
		"\x1E1D\x1E1C\x3\x2\x2\x2\x1E1E\x1E64\x3\x2\x2\x2\x1E1F\x1E21\a\x349\x2"+
		"\x2\x1E20\x1E1F\x3\x2\x2\x2\x1E20\x1E21\x3\x2\x2\x2\x1E21\x1E22\x3\x2"+
		"\x2\x2\x1E22\x1E23\a%\x2\x2\x1E23\x1E26\a\x335\x2\x2\x1E24\x1E27\a\x32D"+
		"\x2\x2\x1E25\x1E27\x5\x3E4\x1F3\x2\x1E26\x1E24\x3\x2\x2\x2\x1E26\x1E25"+
		"\x3\x2\x2\x2\x1E27\x1E64\x3\x2\x2\x2\x1E28\x1E2A\a\x349\x2\x2\x1E29\x1E28"+
		"\x3\x2\x2\x2\x1E29\x1E2A\x3\x2\x2\x2\x1E2A\x1E2B\x3\x2\x2\x2\x1E2B\x1E2C"+
		"\a\xC1\x2\x2\x1E2C\x1E2F\a\x335\x2\x2\x1E2D\x1E30\a\x32D\x2\x2\x1E2E\x1E30"+
		"\x5\x3E4\x1F3\x2\x1E2F\x1E2D\x3\x2\x2\x2\x1E2F\x1E2E\x3\x2\x2\x2\x1E30"+
		"\x1E64\x3\x2\x2\x2\x1E31\x1E33\a\x349\x2\x2\x1E32\x1E31\x3\x2\x2\x2\x1E32"+
		"\x1E33\x3\x2\x2\x2\x1E33\x1E34\x3\x2\x2\x2\x1E34\x1E64\tZ\x2\x2\x1E35"+
		"\x1E37\a\x349\x2\x2\x1E36\x1E35\x3\x2\x2\x2\x1E36\x1E37\x3\x2\x2\x2\x1E37"+
		"\x1E38\x3\x2\x2\x2\x1E38\x1E64\t[\x2\x2\x1E39\x1E3B\a\x349\x2\x2\x1E3A"+
		"\x1E39\x3\x2\x2\x2\x1E3A\x1E3B\x3\x2\x2\x2\x1E3B\x1E3C\x3\x2\x2\x2\x1E3C"+
		"\x1E64\a\x11A\x2\x2\x1E3D\x1E3F\a\x349\x2\x2\x1E3E\x1E3D\x3\x2\x2\x2\x1E3E"+
		"\x1E3F\x3\x2\x2\x2\x1E3F\x1E40\x3\x2\x2\x2\x1E40\x1E43\a\x150\x2\x2\x1E41"+
		"\x1E42\a\x335\x2\x2\x1E42\x1E44\a\x32D\x2\x2\x1E43\x1E41\x3\x2\x2\x2\x1E43"+
		"\x1E44\x3\x2\x2\x2\x1E44\x1E64\x3\x2\x2\x2\x1E45\x1E47\a\x349\x2\x2\x1E46"+
		"\x1E45\x3\x2\x2\x2\x1E46\x1E47\x3\x2\x2\x2\x1E47\x1E48\x3\x2\x2\x2\x1E48"+
		"\x1E64\t\\\x2\x2\x1E49\x1E4B\a\x349\x2\x2\x1E4A\x1E49\x3\x2\x2\x2\x1E4A"+
		"\x1E4B\x3\x2\x2\x2\x1E4B\x1E4C\x3\x2\x2\x2\x1E4C\x1E64\t]\x2\x2\x1E4D"+
		"\x1E4F\a\x349\x2\x2\x1E4E\x1E4D\x3\x2\x2\x2\x1E4E\x1E4F\x3\x2\x2\x2\x1E4F"+
		"\x1E50\x3\x2\x2\x2\x1E50\x1E51\a\x1F5\x2\x2\x1E51\x1E52\a\x347\x2\x2\x1E52"+
		"\x1E53\a\x190\x2\x2\x1E53\x1E54\a\x335\x2\x2\x1E54\x1E55\t^\x2\x2\x1E55"+
		"\x1E56\a\x349\x2\x2\x1E56\x1E57\a\x13B\x2\x2\x1E57\x1E58\a,\x2\x2\x1E58"+
		"\x1E5F\a\x335\x2\x2\x1E59\x1E60\x5\x3E4\x1F3\x2\x1E5A\x1E5B\a\x13B\x2"+
		"\x2\x1E5B\x1E5C\a\x12\x2\x2\x1E5C\x1E5D\a\xAE\x2\x2\x1E5D\x1E5E\a\x335"+
		"\x2\x2\x1E5E\x1E60\x5\x3E4\x1F3\x2\x1E5F\x1E59\x3\x2\x2\x2\x1E5F\x1E5A"+
		"\x3\x2\x2\x2\x1E60\x1E61\x3\x2\x2\x2\x1E61\x1E62\a\x348\x2\x2\x1E62\x1E64"+
		"\x3\x2\x2\x2\x1E63\x1DC8\x3\x2\x2\x2\x1E63\x1DCC\x3\x2\x2\x2\x1E63\x1DD0"+
		"\x3\x2\x2\x2\x1E63\x1DD4\x3\x2\x2\x2\x1E63\x1DDD\x3\x2\x2\x2\x1E63\x1DE3"+
		"\x3\x2\x2\x2\x1E63\x1DE7\x3\x2\x2\x2\x1E63\x1DEB\x3\x2\x2\x2\x1E63\x1DFC"+
		"\x3\x2\x2\x2\x1E63\x1E00\x3\x2\x2\x2\x1E63\x1E04\x3\x2\x2\x2\x1E63\x1E08"+
		"\x3\x2\x2\x2\x1E63\x1E11\x3\x2\x2\x2\x1E63\x1E17\x3\x2\x2\x2\x1E63\x1E20"+
		"\x3\x2\x2\x2\x1E63\x1E29\x3\x2\x2\x2\x1E63\x1E32\x3\x2\x2\x2\x1E63\x1E36"+
		"\x3\x2\x2\x2\x1E63\x1E3A\x3\x2\x2\x2\x1E63\x1E3E\x3\x2\x2\x2\x1E63\x1E46"+
		"\x3\x2\x2\x2\x1E63\x1E4A\x3\x2\x2\x2\x1E63\x1E4E\x3\x2\x2\x2\x1E64\x1E67"+
		"\x3\x2\x2\x2\x1E65\x1E63\x3\x2\x2\x2\x1E65\x1E66\x3\x2\x2\x2\x1E66\x1E69"+
		"\x3\x2\x2\x2\x1E67\x1E65\x3\x2\x2\x2\x1E68\x1DC6\x3\x2\x2\x2\x1E68\x1E69"+
		"\x3\x2\x2\x2\x1E69\x275\x3\x2\x2\x2\x1E6A\x1E6B\a\x1B\x2\x2\x1E6B\x1E6C"+
		"\a\xBD\x2\x2\x1E6C\x1E84\x5\x3AC\x1D7\x2\x1E6D\x1E72\a\x160\x2\x2\x1E6E"+
		"\x1E70\a\x349\x2\x2\x1E6F\x1E6E\x3\x2\x2\x2\x1E6F\x1E70\x3\x2\x2\x2\x1E70"+
		"\x1E71\x3\x2\x2\x2\x1E71\x1E73\x5\x3E4\x1F3\x2\x1E72\x1E6F\x3\x2\x2\x2"+
		"\x1E73\x1E74\x3\x2\x2\x2\x1E74\x1E72\x3\x2\x2\x2\x1E74\x1E75\x3\x2\x2"+
		"\x2\x1E75\x1E85\x3\x2\x2\x2\x1E76\x1E80\a\x160\x2\x2\x1E77\x1E79\a\x349"+
		"\x2\x2\x1E78\x1E77\x3\x2\x2\x2\x1E78\x1E79\x3\x2\x2\x2\x1E79\x1E7A\x3"+
		"\x2\x2\x2\x1E7A\x1E7B\tU\x2\x2\x1E7B\x1E7E\a\x335\x2\x2\x1E7C\x1E7F\a"+
		"\x331\x2\x2\x1E7D\x1E7F\x5\x3E4\x1F3\x2\x1E7E\x1E7C\x3\x2\x2\x2\x1E7E"+
		"\x1E7D\x3\x2\x2\x2\x1E7F\x1E81\x3\x2\x2\x2\x1E80\x1E78\x3\x2\x2\x2\x1E81"+
		"\x1E82\x3\x2\x2\x2\x1E82\x1E80\x3\x2\x2\x2\x1E82\x1E83\x3\x2\x2\x2\x1E83"+
		"\x1E85\x3\x2\x2\x2\x1E84\x1E6D\x3\x2\x2\x2\x1E84\x1E76\x3\x2\x2\x2\x1E85"+
		"\x1EA7\x3\x2\x2\x2\x1E86\x1E87\a\xD0\x2\x2\x1E87\x1E8C\a\x160\x2\x2\x1E88"+
		"\x1E8A\a\x349\x2\x2\x1E89\x1E88\x3\x2\x2\x2\x1E89\x1E8A\x3\x2\x2\x2\x1E8A"+
		"\x1E8B\x3\x2\x2\x2\x1E8B\x1E8D\x5\x3E4\x1F3\x2\x1E8C\x1E89\x3\x2\x2\x2"+
		"\x1E8D\x1E8E\x3\x2\x2\x2\x1E8E\x1E8C\x3\x2\x2\x2\x1E8E\x1E8F\x3\x2\x2"+
		"\x2\x1E8F\x1E91\x3\x2\x2\x2\x1E90\x1E86\x3\x2\x2\x2\x1E91\x1E92\x3\x2"+
		"\x2\x2\x1E92\x1E90\x3\x2\x2\x2\x1E92\x1E93\x3\x2\x2\x2\x1E93\x1EA8\x3"+
		"\x2\x2\x2\x1E94\x1E95\a\xD0\x2\x2\x1E95\x1E9F\a\x160\x2\x2\x1E96\x1E98"+
		"\a\x349\x2\x2\x1E97\x1E96\x3\x2\x2\x2\x1E97\x1E98\x3\x2\x2\x2\x1E98\x1E99"+
		"\x3\x2\x2\x2\x1E99\x1E9A\tU\x2\x2\x1E9A\x1E9D\a\x335\x2\x2\x1E9B\x1E9E"+
		"\a\x331\x2\x2\x1E9C\x1E9E\x5\x3E4\x1F3\x2\x1E9D\x1E9B\x3\x2\x2\x2\x1E9D"+
		"\x1E9C\x3\x2\x2\x2\x1E9E\x1EA0\x3\x2\x2\x2\x1E9F\x1E97\x3\x2\x2\x2\x1EA0"+
		"\x1EA1\x3\x2\x2\x2\x1EA1\x1E9F\x3\x2\x2\x2\x1EA1\x1EA2\x3\x2\x2\x2\x1EA2"+
		"\x1EA4\x3\x2\x2\x2\x1EA3\x1E94\x3\x2\x2\x2\x1EA4\x1EA5\x3\x2\x2\x2\x1EA5"+
		"\x1EA3\x3\x2\x2\x2\x1EA5\x1EA6\x3\x2\x2\x2\x1EA6\x1EA8\x3\x2\x2\x2\x1EA7"+
		"\x1E90\x3\x2\x2\x2\x1EA7\x1EA3\x3\x2\x2\x2\x1EA7\x1EA8\x3\x2\x2\x2\x1EA8"+
		"\x1F56\x3\x2\x2\x2\x1EA9\x1F53\a\x17F\x2\x2\x1EAA\x1EAC\a\x349\x2\x2\x1EAB"+
		"\x1EAA\x3\x2\x2\x2\x1EAB\x1EAC\x3\x2\x2\x2\x1EAC\x1EAD\x3\x2\x2\x2\x1EAD"+
		"\x1F52\a\x62\x2\x2\x1EAE\x1EB0\a\x349\x2\x2\x1EAF\x1EAE\x3\x2\x2\x2\x1EAF"+
		"\x1EB0\x3\x2\x2\x2\x1EB0\x1EB1\x3\x2\x2\x2\x1EB1\x1F52\aJ\x2\x2\x1EB2"+
		"\x1EB4\a\x349\x2\x2\x1EB3\x1EB2\x3\x2\x2\x2\x1EB3\x1EB4\x3\x2\x2\x2\x1EB4"+
		"\x1EB5\x3\x2\x2\x2\x1EB5\x1F52\tV\x2\x2\x1EB6\x1EB8\a\x349\x2\x2\x1EB7"+
		"\x1EB6\x3\x2\x2\x2\x1EB7\x1EB8\x3\x2\x2\x2\x1EB8\x1EB9\x3\x2\x2\x2\x1EB9"+
		"\x1EBA\a\x1E4\x2\x2\x1EBA\x1EBD\a\x335\x2\x2\x1EBB\x1EBE\a\x331\x2\x2"+
		"\x1EBC\x1EBE\x5\x3E4\x1F3\x2\x1EBD\x1EBB\x3\x2\x2\x2\x1EBD\x1EBC\x3\x2"+
		"\x2\x2\x1EBE\x1F52\x3\x2\x2\x2\x1EBF\x1EC1\a\x349\x2\x2\x1EC0\x1EBF\x3"+
		"\x2\x2\x2\x1EC0\x1EC1\x3\x2\x2\x2\x1EC1\x1EC2\x3\x2\x2\x2\x1EC2\x1EC3"+
		"\a\x267\x2\x2\x1EC3\x1EC4\a\x335\x2\x2\x1EC4\x1F52\x5\x3E4\x1F3\x2\x1EC5"+
		"\x1EC7\a\x349\x2\x2\x1EC6\x1EC5\x3\x2\x2\x2\x1EC6\x1EC7\x3\x2\x2\x2\x1EC7"+
		"\x1EC8\x3\x2\x2\x2\x1EC8\x1F52\a\x1CB\x2\x2\x1EC9\x1ECB\a\x349\x2\x2\x1ECA"+
		"\x1EC9\x3\x2\x2\x2\x1ECA\x1ECB\x3\x2\x2\x2\x1ECB\x1ECC\x3\x2\x2\x2\x1ECC"+
		"\x1F52\a\x86\x2\x2\x1ECD\x1ECF\a\x349\x2\x2\x1ECE\x1ECD\x3\x2\x2\x2\x1ECE"+
		"\x1ECF\x3\x2\x2\x2\x1ECF\x1EDC\x3\x2\x2\x2\x1ED0\x1ED1\az\x2\x2\x1ED1"+
		"\x1ED4\a\x335\x2\x2\x1ED2\x1ED5\a\x331\x2\x2\x1ED3\x1ED5\x5\x3E4\x1F3"+
		"\x2\x1ED4\x1ED2\x3\x2\x2\x2\x1ED4\x1ED3\x3\x2\x2\x2\x1ED5\x1EDD\x3\x2"+
		"\x2\x2\x1ED6\x1ED7\a\x11F\x2\x2\x1ED7\x1EDA\a\x335\x2\x2\x1ED8\x1EDB\a"+
		"\x32D\x2\x2\x1ED9\x1EDB\x5\x3E4\x1F3\x2\x1EDA\x1ED8\x3\x2\x2\x2\x1EDA"+
		"\x1ED9\x3\x2\x2\x2\x1EDB\x1EDD\x3\x2\x2\x2\x1EDC\x1ED0\x3\x2\x2\x2\x1EDC"+
		"\x1ED6\x3\x2\x2\x2\x1EDD\x1F52\x3\x2\x2\x2\x1EDE\x1EE0\a\x349\x2\x2\x1EDF"+
		"\x1EDE\x3\x2\x2\x2\x1EDF\x1EE0\x3\x2\x2\x2\x1EE0\x1EE1\x3\x2\x2\x2\x1EE1"+
		"\x1F52\tW\x2\x2\x1EE2\x1EE4\a\x349\x2\x2\x1EE3\x1EE2\x3\x2\x2\x2\x1EE3"+
		"\x1EE4\x3\x2\x2\x2\x1EE4\x1EE5\x3\x2\x2\x2\x1EE5\x1F52\tX\x2\x2\x1EE6"+
		"\x1EE8\a\x349\x2\x2\x1EE7\x1EE6\x3\x2\x2\x2\x1EE7\x1EE8\x3\x2\x2\x2\x1EE8"+
		"\x1EE9\x3\x2\x2\x2\x1EE9\x1F52\tY\x2\x2\x1EEA\x1EEC\a\x349\x2\x2\x1EEB"+
		"\x1EEA\x3\x2\x2\x2\x1EEB\x1EEC\x3\x2\x2\x2\x1EEC\x1EED\x3\x2\x2\x2\x1EED"+
		"\x1EEE\a\xC7\x2\x2\x1EEE\x1EF1\a\x335\x2\x2\x1EEF\x1EF2\a\x331\x2\x2\x1EF0"+
		"\x1EF2\x5\x3E4\x1F3\x2\x1EF1\x1EEF\x3\x2\x2\x2\x1EF1\x1EF0\x3\x2\x2\x2"+
		"\x1EF2\x1F52\x3\x2\x2\x2\x1EF3\x1EF5\a\x349\x2\x2\x1EF4\x1EF3\x3\x2\x2"+
		"\x2\x1EF4\x1EF5\x3\x2\x2\x2\x1EF5\x1EF6\x3\x2\x2\x2\x1EF6\x1EF7\a\xC8"+
		"\x2\x2\x1EF7\x1EF8\a\x335\x2\x2\x1EF8\x1F52\a\x331\x2\x2\x1EF9\x1EFB\a"+
		"\x349\x2\x2\x1EFA\x1EF9\x3\x2\x2\x2\x1EFA\x1EFB\x3\x2\x2\x2\x1EFB\x1EFC"+
		"\x3\x2\x2\x2\x1EFC\x1EFD\a \x2\x2\x1EFD\x1F00\a\x335\x2\x2\x1EFE\x1F01"+
		"\a\x32D\x2\x2\x1EFF\x1F01\x5\x3E4\x1F3\x2\x1F00\x1EFE\x3\x2\x2\x2\x1F00"+
		"\x1EFF\x3\x2\x2\x2\x1F01\x1F52\x3\x2\x2\x2\x1F02\x1F04\a\x349\x2\x2\x1F03"+
		"\x1F02\x3\x2\x2\x2\x1F03\x1F04\x3\x2\x2\x2\x1F04\x1F05\x3\x2\x2\x2\x1F05"+
		"\x1F06\a%\x2\x2\x1F06\x1F09\a\x335\x2\x2\x1F07\x1F0A\a\x32D\x2\x2\x1F08"+
		"\x1F0A\x5\x3E4\x1F3\x2\x1F09\x1F07\x3\x2\x2\x2\x1F09\x1F08\x3\x2\x2\x2"+
		"\x1F0A\x1F52\x3\x2\x2\x2\x1F0B\x1F0D\a\x349\x2\x2\x1F0C\x1F0B\x3\x2\x2"+
		"\x2\x1F0C\x1F0D\x3\x2\x2\x2\x1F0D\x1F0E\x3\x2\x2\x2\x1F0E\x1F0F\a\xC1"+
		"\x2\x2\x1F0F\x1F12\a\x335\x2\x2\x1F10\x1F13\a\x32D\x2\x2\x1F11\x1F13\x5"+
		"\x3E4\x1F3\x2\x1F12\x1F10\x3\x2\x2\x2\x1F12\x1F11\x3\x2\x2\x2\x1F13\x1F52"+
		"\x3\x2\x2\x2\x1F14\x1F16\a\x349\x2\x2\x1F15\x1F14\x3\x2\x2\x2\x1F15\x1F16"+
		"\x3\x2\x2\x2\x1F16\x1F17\x3\x2\x2\x2\x1F17\x1F52\tZ\x2\x2\x1F18\x1F1A"+
		"\a\x349\x2\x2\x1F19\x1F18\x3\x2\x2\x2\x1F19\x1F1A\x3\x2\x2\x2\x1F1A\x1F1B"+
		"\x3\x2\x2\x2\x1F1B\x1F52\t[\x2\x2\x1F1C\x1F1E\a\x349\x2\x2\x1F1D\x1F1C"+
		"\x3\x2\x2\x2\x1F1D\x1F1E\x3\x2\x2\x2\x1F1E\x1F1F\x3\x2\x2\x2\x1F1F\x1F52"+
		"\a\x11A\x2\x2\x1F20\x1F22\a\x349\x2\x2\x1F21\x1F20\x3\x2\x2\x2\x1F21\x1F22"+
		"\x3\x2\x2\x2\x1F22\x1F23\x3\x2\x2\x2\x1F23\x1F26\a\x150\x2\x2\x1F24\x1F25"+
		"\a\x335\x2\x2\x1F25\x1F27\a\x32D\x2\x2\x1F26\x1F24\x3\x2\x2\x2\x1F26\x1F27"+
		"\x3\x2\x2\x2\x1F27\x1F52\x3\x2\x2\x2\x1F28\x1F2A\a\x349\x2\x2\x1F29\x1F28"+
		"\x3\x2\x2\x2\x1F29\x1F2A\x3\x2\x2\x2\x1F2A\x1F2B\x3\x2\x2\x2\x1F2B\x1F52"+
		"\t\\\x2\x2\x1F2C\x1F2E\a\x349\x2\x2\x1F2D\x1F2C\x3\x2\x2\x2\x1F2D\x1F2E"+
		"\x3\x2\x2\x2\x1F2E\x1F2F\x3\x2\x2\x2\x1F2F\x1F52\t]\x2\x2\x1F30\x1F32"+
		"\a\x349\x2\x2\x1F31\x1F30\x3\x2\x2\x2\x1F31\x1F32\x3\x2\x2\x2\x1F32\x1F37"+
		"\x3\x2\x2\x2\x1F33\x1F38\a\x275\x2\x2\x1F34\x1F35\a\x2E6\x2\x2\x1F35\x1F36"+
		"\a\x335\x2\x2\x1F36\x1F38\a\x331\x2\x2\x1F37\x1F33\x3\x2\x2\x2\x1F37\x1F34"+
		"\x3\x2\x2\x2\x1F38\x1F52\x3\x2\x2\x2\x1F39\x1F3B\a\x349\x2\x2\x1F3A\x1F39"+
		"\x3\x2\x2\x2\x1F3A\x1F3B\x3\x2\x2\x2\x1F3B\x1F3C\x3\x2\x2\x2\x1F3C\x1F52"+
		"\a\x26E\x2\x2\x1F3D\x1F3F\a\x349\x2\x2\x1F3E\x1F3D\x3\x2\x2\x2\x1F3E\x1F3F"+
		"\x3\x2\x2\x2\x1F3F\x1F40\x3\x2\x2\x2\x1F40\x1F41\a\x1F5\x2\x2\x1F41\x1F42"+
		"\a\x347\x2\x2\x1F42\x1F43\a\x190\x2\x2\x1F43\x1F44\a\x335\x2\x2\x1F44"+
		"\x1F45\t^\x2\x2\x1F45\x1F46\a\x349\x2\x2\x1F46\x1F47\a\x13B\x2\x2\x1F47"+
		"\x1F48\a,\x2\x2\x1F48\x1F4F\a\x335\x2\x2\x1F49\x1F50\x5\x3E4\x1F3\x2\x1F4A"+
		"\x1F4B\a\x13B\x2\x2\x1F4B\x1F4C\a\x12\x2\x2\x1F4C\x1F4D\a\xAE\x2\x2\x1F4D"+
		"\x1F4E\a\x335\x2\x2\x1F4E\x1F50\x5\x3E4\x1F3\x2\x1F4F\x1F49\x3\x2\x2\x2"+
		"\x1F4F\x1F4A\x3\x2\x2\x2\x1F50\x1F52\x3\x2\x2\x2\x1F51\x1EAB\x3\x2\x2"+
		"\x2\x1F51\x1EAF\x3\x2\x2\x2\x1F51\x1EB3\x3\x2\x2\x2\x1F51\x1EB7\x3\x2"+
		"\x2\x2\x1F51\x1EC0\x3\x2\x2\x2\x1F51\x1EC6\x3\x2\x2\x2\x1F51\x1ECA\x3"+
		"\x2\x2\x2\x1F51\x1ECE\x3\x2\x2\x2\x1F51\x1EDF\x3\x2\x2\x2\x1F51\x1EE3"+
		"\x3\x2\x2\x2\x1F51\x1EE7\x3\x2\x2\x2\x1F51\x1EEB\x3\x2\x2\x2\x1F51\x1EF4"+
		"\x3\x2\x2\x2\x1F51\x1EFA\x3\x2\x2\x2\x1F51\x1F03\x3\x2\x2\x2\x1F51\x1F0C"+
		"\x3\x2\x2\x2\x1F51\x1F15\x3\x2\x2\x2\x1F51\x1F19\x3\x2\x2\x2\x1F51\x1F1D"+
		"\x3\x2\x2\x2\x1F51\x1F21\x3\x2\x2\x2\x1F51\x1F29\x3\x2\x2\x2\x1F51\x1F2D"+
		"\x3\x2\x2\x2\x1F51\x1F31\x3\x2\x2\x2\x1F51\x1F3A\x3\x2\x2\x2\x1F51\x1F3E"+
		"\x3\x2\x2\x2\x1F52\x1F55\x3\x2\x2\x2\x1F53\x1F51\x3\x2\x2\x2\x1F53\x1F54"+
		"\x3\x2\x2\x2\x1F54\x1F57\x3\x2\x2\x2\x1F55\x1F53\x3\x2\x2\x2\x1F56\x1EA9"+
		"\x3\x2\x2\x2\x1F56\x1F57\x3\x2\x2\x2\x1F57\x277\x3\x2\x2\x2\x1F58\x1F59"+
		"\a\x1B\x2\x2\x1F59\x1F5A\a,\x2\x2\x1F5A\x1F5B\x5\x3E4\x1F3\x2\x1F5B\x1F5C"+
		"\a\x160\x2\x2\x1F5C\x1F5D\a\x83\x2\x2\x1F5D\x1F5E\a\x335\x2\x2\x1F5E\x1F7E"+
		"\a\x331\x2\x2\x1F5F\x1F60\a\x17F\x2\x2\x1F60\x1F61\a\x296\x2\x2\x1F61"+
		"\x1F62\a\xAE\x2\x2\x1F62\x1F79\a\x347\x2\x2\x1F63\x1F65\a\x349\x2\x2\x1F64"+
		"\x1F63\x3\x2\x2\x2\x1F64\x1F65\x3\x2\x2\x2\x1F65\x1F66\x3\x2\x2\x2\x1F66"+
		"\x1F67\a\x83\x2\x2\x1F67\x1F68\a\x335\x2\x2\x1F68\x1F7A\a\x331\x2\x2\x1F69"+
		"\x1F6B\a\x349\x2\x2\x1F6A\x1F69\x3\x2\x2\x2\x1F6A\x1F6B\x3\x2\x2\x2\x1F6B"+
		"\x1F6C\x3\x2\x2\x2\x1F6C\x1F6D\a\x1F5\x2\x2\x1F6D\x1F6E\a\'\x2\x2\x1F6E"+
		"\x1F6F\a\xF8\x2\x2\x1F6F\x1F70\a\x335\x2\x2\x1F70\x1F7A\a\x331\x2\x2\x1F71"+
		"\x1F73\a\x349\x2\x2\x1F72\x1F71\x3\x2\x2\x2\x1F72\x1F73\x3\x2\x2\x2\x1F73"+
		"\x1F74\x3\x2\x2\x2\x1F74\x1F75\a\x1DA\x2\x2\x1F75\x1F76\a\'\x2\x2\x1F76"+
		"\x1F77\a\xF8\x2\x2\x1F77\x1F78\a\x335\x2\x2\x1F78\x1F7A\a\x331\x2\x2\x1F79"+
		"\x1F64\x3\x2\x2\x2\x1F79\x1F6A\x3\x2\x2\x2\x1F79\x1F72\x3\x2\x2\x2\x1F7A"+
		"\x1F7B\x3\x2\x2\x2\x1F7B\x1F79\x3\x2\x2\x2\x1F7B\x1F7C\x3\x2\x2\x2\x1F7C"+
		"\x1F7D\x3\x2\x2\x2\x1F7D\x1F7F\a\x348\x2\x2\x1F7E\x1F5F\x3\x2\x2\x2\x1F7E"+
		"\x1F7F\x3\x2\x2\x2\x1F7F\x279\x3\x2\x2\x2\x1F80\x1F81\a\x1B\x2\x2\x1F81"+
		"\x1F82\a\xBF\x2\x2\x1F82\x1F83\a\xAE\x2\x2\x1F83\x1F84\a\x160\x2\x2\x1F84"+
		"\x1F85\a\x83\x2\x2\x1F85\x1F86\a\x335\x2\x2\x1F86\x1F87\a\x331\x2\x2\x1F87"+
		"\x1F88\a\x1F5\x2\x2\x1F88\x1F89\a\'\x2\x2\x1F89\x1F8A\a\xF8\x2\x2\x1F8A"+
		"\x1F8B\a\x335\x2\x2\x1F8B\x1F8C\a\x331\x2\x2\x1F8C\x27B\x3\x2\x2\x2\x1F8D"+
		"\x1F8E\a\x1B\x2\x2\x1F8E\x1F8F\a\x13C\x2\x2\x1F8F\x1F90\a\xBF\x2\x2\x1F90"+
		"\x1F91\a\xAE\x2\x2\x1F91\x1F92\a\x160\x2\x2\x1F92\x1F93\a\x83\x2\x2\x1F93"+
		"\x1F94\a\x335\x2\x2\x1F94\x1F95\a\x331\x2\x2\x1F95\x1F96\a\x1F5\x2\x2"+
		"\x1F96\x1F97\a\'\x2\x2\x1F97\x1F98\a\xF8\x2\x2\x1F98\x1F99\a\x335\x2\x2"+
		"\x1F99\x1F9A\a\x331\x2\x2\x1F9A\x27D\x3\x2\x2\x2\x1F9B\x1F9F\a\xB1\x2"+
		"\x2\x1F9C\x1FA0\x5\x280\x141\x2\x1F9D\x1FA0\x5\x282\x142\x2\x1F9E\x1FA0"+
		"\x5\x284\x143\x2\x1F9F\x1F9C\x3\x2\x2\x2\x1F9F\x1F9D\x3\x2\x2\x2\x1F9F"+
		"\x1F9E\x3\x2\x2\x2\x1FA0\x27F\x3\x2\x2\x2\x1FA1\x1FA4\t\x18\x2\x2\x1FA2"+
		"\x1FA4\a\x312\x2\x2\x1FA3\x1FA1\x3\x2\x2\x2\x1FA3\x1FA2\x3\x2\x2\x2\x1FA4"+
		"\x1FA7\x3\x2\x2\x2\x1FA5\x1FA6\a\x17F\x2\x2\x1FA6\x1FA8\a\x2EB\x2\x2\x1FA7"+
		"\x1FA5\x3\x2\x2\x2\x1FA7\x1FA8\x3\x2\x2\x2\x1FA8\x281\x3\x2\x2\x2\x1FA9"+
		"\x1FAA\a\x29D\x2\x2\x1FAA\x1FAB\a\xE1\x2\x2\x1FAB\x1FAE\a\x2F2\x2\x2\x1FAC"+
		"\x1FAF\a\x6\x2\x2\x1FAD\x1FAF\a\x32D\x2\x2\x1FAE\x1FAC\x3\x2\x2\x2\x1FAE"+
		"\x1FAD\x3\x2\x2\x2\x1FAF\x283\x3\x2\x2\x2\x1FB0\x1FB1\a\x150\x2\x2\x1FB1"+
		"\x1FB2\a\x230\x2\x2\x1FB2\x1FB3\a\x32D\x2\x2\x1FB3\x285\x3\x2\x2\x2\x1FB4"+
		"\x1FB5\ax\x2\x2\x1FB5\x1FB6\x5\x288\x145\x2\x1FB6\x287\x3\x2\x2\x2\x1FB7"+
		"\x1FB8\a\x32C\x2\x2\x1FB8\x1FBA\a\x335\x2\x2\x1FB9\x1FB7\x3\x2\x2\x2\x1FB9"+
		"\x1FBA\x3\x2\x2\x2\x1FBA\x1FBD\x3\x2\x2\x2\x1FBB\x1FBE\x5\x3B6\x1DC\x2"+
		"\x1FBC\x1FBE\x5\x2F0\x179\x2\x1FBD\x1FBB\x3\x2\x2\x2\x1FBD\x1FBC\x3\x2"+
		"\x2\x2\x1FBE\x1FC7\x3\x2\x2\x2\x1FBF\x1FC4\x5\x28A\x146\x2\x1FC0\x1FC1"+
		"\a\x349\x2\x2\x1FC1\x1FC3\x5\x28A\x146\x2\x1FC2\x1FC0\x3\x2\x2\x2\x1FC3"+
		"\x1FC6\x3\x2\x2\x2\x1FC4\x1FC2\x3\x2\x2\x2\x1FC4\x1FC5\x3\x2\x2\x2\x1FC5"+
		"\x1FC8\x3\x2\x2\x2\x1FC6\x1FC4\x3\x2\x2\x2\x1FC7\x1FBF\x3\x2\x2\x2\x1FC7"+
		"\x1FC8\x3\x2\x2\x2\x1FC8\x1FCB\x3\x2\x2\x2\x1FC9\x1FCA\a\x17F\x2\x2\x1FCA"+
		"\x1FCC\x5\x28E\x148\x2\x1FCB\x1FC9\x3\x2\x2\x2\x1FCB\x1FCC\x3\x2\x2\x2"+
		"\x1FCC\x1FCE\x3\x2\x2\x2\x1FCD\x1FCF\a\x34A\x2\x2\x1FCE\x1FCD\x3\x2\x2"+
		"\x2\x1FCE\x1FCF\x3\x2\x2\x2\x1FCF\x1FE6\x3\x2\x2\x2\x1FD0\x1FD1\a\x347"+
		"\x2\x2\x1FD1\x1FD6\x5\x28C\x147\x2\x1FD2\x1FD3\a\x34F\x2\x2\x1FD3\x1FD5"+
		"\x5\x28C\x147\x2\x1FD4\x1FD2\x3\x2\x2\x2\x1FD5\x1FD8\x3\x2\x2\x2\x1FD6"+
		"\x1FD4\x3\x2\x2\x2\x1FD6\x1FD7\x3\x2\x2\x2\x1FD7\x1FD9\x3\x2\x2\x2\x1FD8"+
		"\x1FD6\x3\x2\x2\x2\x1FD9\x1FE0\a\x348\x2\x2\x1FDA\x1FDC\a\x10\x2\x2\x1FDB"+
		"\x1FDA\x3\x2\x2\x2\x1FDB\x1FDC\x3\x2\x2\x2\x1FDC\x1FDD\x3\x2\x2\x2\x1FDD"+
		"\x1FDE\t_\x2\x2\x1FDE\x1FDF\a\x335\x2\x2\x1FDF\x1FE1\a\x331\x2\x2\x1FE0"+
		"\x1FDB\x3\x2\x2\x2\x1FE0\x1FE1\x3\x2\x2\x2\x1FE1\x1FE3\x3\x2\x2\x2\x1FE2"+
		"\x1FE4\a\x34A\x2\x2\x1FE3\x1FE2\x3\x2\x2\x2\x1FE3\x1FE4\x3\x2\x2\x2\x1FE4"+
		"\x1FE6\x3\x2\x2\x2\x1FE5\x1FB9\x3\x2\x2\x2\x1FE5\x1FD0\x3\x2\x2\x2\x1FE6"+
		"\x289\x3\x2\x2\x2\x1FE7\x1FE8\a\x32C\x2\x2\x1FE8\x1FEA\a\x335\x2\x2\x1FE9"+
		"\x1FE7\x3\x2\x2\x2\x1FE9\x1FEA\x3\x2\x2\x2\x1FEA\x1FF4\x3\x2\x2\x2\x1FEB"+
		"\x1FEE\x5\x2EE\x178\x2\x1FEC\x1FEE\x5\x3E4\x1F3\x2\x1FED\x1FEB\x3\x2\x2"+
		"\x2\x1FED\x1FEC\x3\x2\x2\x2\x1FEE\x1FF0\x3\x2\x2\x2\x1FEF\x1FF1\t`\x2"+
		"\x2\x1FF0\x1FEF\x3\x2\x2\x2\x1FF0\x1FF1\x3\x2\x2\x2\x1FF1\x1FF5\x3\x2"+
		"\x2\x2\x1FF2\x1FF5\a[\x2\x2\x1FF3\x1FF5\a\xE3\x2\x2\x1FF4\x1FED\x3\x2"+
		"\x2\x2\x1FF4\x1FF2\x3\x2\x2\x2\x1FF4\x1FF3\x3\x2\x2\x2\x1FF5\x28B\x3\x2"+
		"\x2\x2\x1FF6\x1FF7\t\x3\x2\x2\x1FF7\x28D\x3\x2\x2\x2\x1FF8\x200F\a\x2AD"+
		"\x2\x2\x1FF9\x1FFA\a\x11D\x2\x2\x1FFA\x200F\a\x30F\x2\x2\x1FFB\x1FFC\a"+
		"\x11D\x2\x2\x1FFC\x200F\a\xD9\x2\x2\x1FFD\x1FFE\a\x11D\x2\x2\x1FFE\x1FFF"+
		"\a\x347\x2\x2\x1FFF\x2000\a\x347\x2\x2\x2000\x2001\x5\x290\x149\x2\x2001"+
		"\x2009\a\x348\x2\x2\x2002\x2003\a\x349\x2\x2\x2003\x2004\a\x347\x2\x2"+
		"\x2004\x2005\x5\x290\x149\x2\x2005\x2006\a\x348\x2\x2\x2006\x2008\x3\x2"+
		"\x2\x2\x2007\x2002\x3\x2\x2\x2\x2008\x200B\x3\x2\x2\x2\x2009\x2007\x3"+
		"\x2\x2\x2\x2009\x200A\x3\x2\x2\x2\x200A\x200C\x3\x2\x2\x2\x200B\x2009"+
		"\x3\x2\x2\x2\x200C\x200D\a\x348\x2\x2\x200D\x200F\x3\x2\x2\x2\x200E\x1FF8"+
		"\x3\x2\x2\x2\x200E\x1FF9\x3\x2\x2\x2\x200E\x1FFB\x3\x2\x2\x2\x200E\x1FFD"+
		"\x3\x2\x2\x2\x200F\x28F\x3\x2\x2\x2\x2010\x2015\x5\x292\x14A\x2\x2011"+
		"\x2012\a\x349\x2\x2\x2012\x2014\x5\x292\x14A\x2\x2013\x2011\x3\x2\x2\x2"+
		"\x2014\x2017\x3\x2\x2\x2\x2015\x2013\x3\x2\x2\x2\x2015\x2016\x3\x2\x2"+
		"\x2\x2016\x291\x3\x2\x2\x2\x2017\x2015\x3\x2\x2\x2\x2018\x201C\x5\x3E4"+
		"\x1F3\x2\x2019\x201D\x5\x3DC\x1EF\x2\x201A\x201B\a\x10\x2\x2\x201B\x201D"+
		"\x5\x2F0\x179\x2\x201C\x2019\x3\x2\x2\x2\x201C\x201A\x3\x2\x2\x2\x201D"+
		"\x2020\x3\x2\x2\x2\x201E\x201F\a\x38\x2\x2\x201F\x2021\x5\x3E4\x1F3\x2"+
		"\x2020\x201E\x3\x2\x2\x2\x2020\x2021\x3\x2\x2\x2\x2021\x2023\x3\x2\x2"+
		"\x2\x2022\x2024\x5\x3C6\x1E4\x2\x2023\x2022\x3\x2\x2\x2\x2023\x2024\x3"+
		"\x2\x2\x2\x2024\x293\x3\x2\x2\x2\x2025\x2027\x5\x2C2\x162\x2\x2026\x2028"+
		"\a\x34A\x2\x2\x2027\x2026\x3\x2\x2\x2\x2027\x2028\x3\x2\x2\x2\x2028\x2061"+
		"\x3\x2\x2\x2\x2029\x2035\a\x93\x2\x2\x202A\x202C\a\x6\x2\x2\x202B\x202D"+
		"\a\x298\x2\x2\x202C\x202B\x3\x2\x2\x2\x202C\x202D\x3\x2\x2\x2\x202D\x2036"+
		"\x3\x2\x2\x2\x202E\x2033\x5\x2AE\x158\x2\x202F\x2030\a\x347\x2\x2\x2030"+
		"\x2031\x5\x3BE\x1E0\x2\x2031\x2032\a\x348\x2\x2\x2032\x2034\x3\x2\x2\x2"+
		"\x2033\x202F\x3\x2\x2\x2\x2033\x2034\x3\x2\x2\x2\x2034\x2036\x3\x2\x2"+
		"\x2\x2035\x202A\x3\x2\x2\x2\x2035\x202E\x3\x2\x2\x2\x2036\x2039\x3\x2"+
		"\x2\x2\x2037\x2038\a\xE9\x2\x2\x2038\x203A\x5\x3A6\x1D4\x2\x2039\x2037"+
		"\x3\x2\x2\x2\x2039\x203A\x3\x2\x2\x2\x203A\x203B\x3\x2\x2\x2\x203B\x203C"+
		"\a\x160\x2\x2\x203C\x2041\x5\x3E4\x1F3\x2\x203D\x203E\a\x349\x2\x2\x203E"+
		"\x2040\x5\x3E4\x1F3\x2\x203F\x203D\x3\x2\x2\x2\x2040\x2043\x3\x2\x2\x2"+
		"\x2041\x203F\x3\x2\x2\x2\x2041\x2042\x3\x2\x2\x2\x2042\x2047\x3\x2\x2"+
		"\x2\x2043\x2041\x3\x2\x2\x2\x2044\x2045\a\x17F\x2\x2\x2045\x2046\a\x93"+
		"\x2\x2\x2046\x2048\a\xF0\x2\x2\x2047\x2044\x3\x2\x2\x2\x2047\x2048\x3"+
		"\x2\x2\x2\x2048\x204B\x3\x2\x2\x2\x2049\x204A\a\x10\x2\x2\x204A\x204C"+
		"\x5\x3E4\x1F3\x2\x204B\x2049\x3\x2\x2\x2\x204B\x204C\x3\x2\x2\x2\x204C"+
		"\x204E\x3\x2\x2\x2\x204D\x204F\a\x34A\x2\x2\x204E\x204D\x3\x2\x2\x2\x204E"+
		"\x204F\x3\x2\x2\x2\x204F\x2061\x3\x2\x2\x2\x2050\x2057\a\x122\x2\x2\x2051"+
		"\x2052\a\x347\x2\x2\x2052\x2053\a\x17F\x2\x2\x2053\x2054\a\x1C4\x2\x2"+
		"\x2054\x2055\a\x335\x2\x2\x2055\x2056\a\x32C\x2\x2\x2056\x2058\a\x348"+
		"\x2\x2\x2057\x2051\x3\x2\x2\x2\x2057\x2058\x3\x2\x2\x2\x2058\x205A\x3"+
		"\x2\x2\x2\x2059\x205B\a\x34A\x2\x2\x205A\x2059\x3\x2\x2\x2\x205A\x205B"+
		"\x3\x2\x2\x2\x205B\x2061\x3\x2\x2\x2\x205C\x2061\x5\x2A0\x151\x2\x205D"+
		"\x2061\x5\x2A2\x152\x2\x205E\x2061\x5\x2A4\x153\x2\x205F\x2061\x5\x296"+
		"\x14C\x2\x2060\x2025\x3\x2\x2\x2\x2060\x2029\x3\x2\x2\x2\x2060\x2050\x3"+
		"\x2\x2\x2\x2060\x205C\x3\x2\x2\x2\x2060\x205D\x3\x2\x2\x2\x2060\x205E"+
		"\x3\x2\x2\x2\x2060\x205F\x3\x2\x2\x2\x2061\x295\x3\x2\x2\x2\x2062\x2063"+
		"\aK\x2\x2\x2063\x2064\a,\x2\x2\x2064\x2067\x5\x3E4\x1F3\x2\x2065\x2066"+
		"\a\x15\x2\x2\x2066\x2068\x5\x3E4\x1F3\x2\x2067\x2065\x3\x2\x2\x2\x2067"+
		"\x2068\x3\x2\x2\x2\x2068\x206C\x3\x2\x2\x2\x2069\x206A\a\x8D\x2\x2\x206A"+
		"\x206D\x5\x298\x14D\x2\x206B\x206D\x5\x29C\x14F\x2\x206C\x2069\x3\x2\x2"+
		"\x2\x206C\x206B\x3\x2\x2\x2\x206D\x2074\x3\x2\x2\x2\x206E\x206F\a\x188"+
		"\x2\x2\x206F\x2070\a\x87\x2\x2\x2070\x2071\a\x1D\x2\x2\x2071\x2072\a\x1E7"+
		"\x2\x2\x2072\x2073\a\x335\x2\x2\x2073\x2075\t\t\x2\x2\x2074\x206E\x3\x2"+
		"\x2\x2\x2074\x2075\x3\x2\x2\x2\x2075\x297\x3\x2\x2\x2\x2076\x2077\a\x19B"+
		"\x2\x2\x2077\x2088\x5\x3E4\x1F3\x2\x2078\x207A\a\x1F9\x2\x2\x2079\x2078"+
		"\x3\x2\x2\x2\x2079\x207A\x3\x2\x2\x2\x207A\x207B\x3\x2\x2\x2\x207B\x207C"+
		"\a\x83\x2\x2\x207C\x207D\a\x335\x2\x2\x207D\x2085\a\x331\x2\x2\x207E\x207F"+
		"\a\x17F\x2\x2\x207F\x2080\a\x296\x2\x2\x2080\x2081\a\xAE\x2\x2\x2081\x2082"+
		"\a\x347\x2\x2\x2082\x2083\x5\x29A\x14E\x2\x2083\x2084\a\x348\x2\x2\x2084"+
		"\x2086\x3\x2\x2\x2\x2085\x207E\x3\x2\x2\x2\x2085\x2086\x3\x2\x2\x2\x2086"+
		"\x2088\x3\x2\x2\x2\x2087\x2076\x3\x2\x2\x2\x2087\x2079\x3\x2\x2\x2\x2088"+
		"\x299\x3\x2\x2\x2\x2089\x208A\t\x61\x2\x2\x208A\x208B\a\x335\x2\x2\x208B"+
		"\x2092\a\x331\x2\x2\x208C\x208D\a\x349\x2\x2\x208D\x208E\t\x62\x2\x2\x208E"+
		"\x208F\a\'\x2\x2\x208F\x2090\a\xF8\x2\x2\x2090\x2091\a\x335\x2\x2\x2091"+
		"\x2093\a\x331\x2\x2\x2092\x208C\x3\x2\x2\x2\x2092\x2093\x3\x2\x2\x2\x2093"+
		"\x29B\x3\x2\x2\x2\x2094\x2095\a\x1F5\x2\x2\x2095\x2096\a\'\x2\x2\x2096"+
		"\x2097\a\xF8\x2\x2\x2097\x2098\a\x335\x2\x2\x2098\x209A\a\x331\x2\x2\x2099"+
		"\x2094\x3\x2\x2\x2\x2099\x209A\x3\x2\x2\x2\x209A\x209B\x3\x2\x2\x2\x209B"+
		"\x209C\a\x17F\x2\x2\x209C\x209D\a\x2F1\x2\x2\x209D\x209E\a\x335\x2\x2"+
		"\x209E\x20A3\a\x331\x2\x2\x209F\x20A0\a\x349\x2\x2\x20A0\x20A2\x5\x29E"+
		"\x150\x2\x20A1\x209F\x3\x2\x2\x2\x20A2\x20A5\x3\x2\x2\x2\x20A3\x20A1\x3"+
		"\x2\x2\x2\x20A3\x20A4\x3\x2\x2\x2\x20A4\x29D\x3\x2\x2\x2\x20A5\x20A3\x3"+
		"\x2\x2\x2\x20A6\x20A7\t\x63\x2\x2\x20A7\x20A8\a\x335\x2\x2\x20A8\x20A9"+
		"\a\x331\x2\x2\x20A9\x29F\x3\x2\x2\x2\x20AA\x20AB\a\xEB\x2\x2\x20AB\x20AC"+
		"\a\x2F5\x2\x2\x20AC\x20AD\a\xAE\x2\x2\x20AD\x20AE\x5\x3E4\x1F3\x2\x20AE"+
		"\x20AF\a\x1DA\x2\x2\x20AF\x20B0\a\'\x2\x2\x20B0\x20B1\x5\x2AC\x157\x2"+
		"\x20B1\x20BB\x3\x2\x2\x2\x20B2\x20B3\a\xEB\x2\x2\x20B3\x20B4\a\xBF\x2"+
		"\x2\x20B4\x20B5\a\xAE\x2\x2\x20B5\x20B6\a\x1DA\x2\x2\x20B6\x20B7\a\'\x2"+
		"\x2\x20B7\x20B8\a\xF8\x2\x2\x20B8\x20B9\a\x335\x2\x2\x20B9\x20BB\a\x331"+
		"\x2\x2\x20BA\x20AA\x3\x2\x2\x2\x20BA\x20B2\x3\x2\x2\x2\x20BB\x2A1\x3\x2"+
		"\x2\x2\x20BC\x20BD\a\x34\x2\x2\x20BD\x20BE\a\x2F5\x2\x2\x20BE\x20BF\a"+
		"\xAE\x2\x2\x20BF\x20C8\x5\x3E4\x1F3\x2\x20C0\x20C1\a\x34\x2\x2\x20C1\x20C2"+
		"\a\x6\x2\x2\x20C2\x20C3\a\x2F5\x2\x2\x20C3\x20C8\a\x236\x2\x2\x20C4\x20C5"+
		"\a\x34\x2\x2\x20C5\x20C6\a\xBF\x2\x2\x20C6\x20C8\a\xAE\x2\x2\x20C7\x20BC"+
		"\x3\x2\x2\x2\x20C7\x20C0\x3\x2\x2\x2\x20C7\x20C4\x3\x2\x2\x2\x20C8\x2A3"+
		"\x3\x2\x2\x2\x20C9\x20CA\aK\x2\x2\x20CA\x20CB\a\xBF\x2\x2\x20CB\x20CC"+
		"\a\xAE\x2\x2\x20CC\x20CD\a\x1F5\x2\x2\x20CD\x20CE\a\'\x2\x2\x20CE\x20CF"+
		"\a\xF8\x2\x2\x20CF\x20D0\a\x335\x2\x2\x20D0\x20ED\a\x331\x2\x2\x20D1\x20D2"+
		"\aK\x2\x2\x20D2\x20D3\a\x2F5\x2\x2\x20D3\x20D4\a\xAE\x2\x2\x20D4\x20D7"+
		"\x5\x3E4\x1F3\x2\x20D5\x20D6\a\x15\x2\x2\x20D6\x20D8\x5\x3E4\x1F3\x2\x20D7"+
		"\x20D5\x3\x2\x2\x2\x20D7\x20D8\x3\x2\x2\x2\x20D8\x20DC\x3\x2\x2\x2\x20D9"+
		"\x20DA\a\x8D\x2\x2\x20DA\x20DB\a\x29B\x2\x2\x20DB\x20DD\x5\x3E4\x1F3\x2"+
		"\x20DC\x20D9\x3\x2\x2\x2\x20DC\x20DD\x3\x2\x2\x2\x20DD\x20DE\x3\x2\x2"+
		"\x2\x20DE\x20E8\a\x17F\x2\x2\x20DF\x20E4\x5\x2A6\x154\x2\x20E0\x20E1\a"+
		"\x1F5\x2\x2\x20E1\x20E2\a\'\x2\x2\x20E2\x20E4\x5\x2AA\x156\x2\x20E3\x20DF"+
		"\x3\x2\x2\x2\x20E3\x20E0\x3\x2\x2\x2\x20E4\x20E6\x3\x2\x2\x2\x20E5\x20E7"+
		"\a\x349\x2\x2\x20E6\x20E5\x3\x2\x2\x2\x20E6\x20E7\x3\x2\x2\x2\x20E7\x20E9"+
		"\x3\x2\x2\x2\x20E8\x20E3\x3\x2\x2\x2\x20E9\x20EA\x3\x2\x2\x2\x20EA\x20E8"+
		"\x3\x2\x2\x2\x20EA\x20EB\x3\x2\x2\x2\x20EB\x20ED\x3\x2\x2\x2\x20EC\x20C9"+
		"\x3\x2\x2\x2\x20EC\x20D1\x3\x2\x2\x2\x20ED\x2A5\x3\x2\x2\x2\x20EE\x20EF"+
		"\a\x235\x2\x2\x20EF\x20F0\a\x335\x2\x2\x20F0\x20FE\a\x331\x2\x2\x20F1"+
		"\x20F2\a\x190\x2\x2\x20F2\x20F3\a\x335\x2\x2\x20F3\x20FE\x5\x2A8\x155"+
		"\x2\x20F4\x20F5\a\x222\x2\x2\x20F5\x20F6\a\x335\x2\x2\x20F6\x20FE\a\x331"+
		"\x2\x2\x20F7\x20F8\a\x29C\x2\x2\x20F8\x20F9\a\x335\x2\x2\x20F9\x20FE\a"+
		"\x331\x2\x2\x20FA\x20FB\a\x1CA\x2\x2\x20FB\x20FC\a\x335\x2\x2\x20FC\x20FE"+
		"\t\f\x2\x2\x20FD\x20EE\x3\x2\x2\x2\x20FD\x20F1\x3\x2\x2\x2\x20FD\x20F4"+
		"\x3\x2\x2\x2\x20FD\x20F7\x3\x2\x2\x2\x20FD\x20FA\x3\x2\x2\x2\x20FE\x2A7"+
		"\x3\x2\x2\x2\x20FF\x2100\t\x34\x2\x2\x2100\x2A9\x3\x2\x2\x2\x2101\x2102"+
		"\a,\x2\x2\x2102\x210D\x5\x3E4\x1F3\x2\x2103\x2104\a\x12\x2\x2\x2104\x2105"+
		"\a\xAE\x2\x2\x2105\x210D\x5\x3E4\x1F3\x2\x2106\x2107\a\x2F5\x2\x2\x2107"+
		"\x2108\a\xAE\x2\x2\x2108\x210D\x5\x3E4\x1F3\x2\x2109\x210A\a\xF8\x2\x2"+
		"\x210A\x210B\a\x335\x2\x2\x210B\x210D\a\x331\x2\x2\x210C\x2101\x3\x2\x2"+
		"\x2\x210C\x2103\x3\x2\x2\x2\x210C\x2106\x3\x2\x2\x2\x210C\x2109\x3\x2"+
		"\x2\x2\x210D\x2AB\x3\x2\x2\x2\x210E\x210F\a,\x2\x2\x210F\x2114\x5\x3E4"+
		"\x1F3\x2\x2110\x2111\a\x17F\x2\x2\x2111\x2112\a\xF8\x2\x2\x2112\x2113"+
		"\a\x335\x2\x2\x2113\x2115\a\x331\x2\x2\x2114\x2110\x3\x2\x2\x2\x2114\x2115"+
		"\x3\x2\x2\x2\x2115\x2126\x3\x2\x2\x2\x2116\x2117\a\x12\x2\x2\x2117\x2118"+
		"\a\xAE\x2\x2\x2118\x211D\x5\x3E4\x1F3\x2\x2119\x211A\a\x17F\x2\x2\x211A"+
		"\x211B\a\xF8\x2\x2\x211B\x211C\a\x335\x2\x2\x211C\x211E\a\x331\x2\x2\x211D"+
		"\x2119\x3\x2\x2\x2\x211D\x211E\x3\x2\x2\x2\x211E\x2126\x3\x2\x2\x2\x211F"+
		"\x2120\a\x2F5\x2\x2\x2120\x2121\a\xAE\x2\x2\x2121\x2126\x5\x3E4\x1F3\x2"+
		"\x2122\x2123\a\xF8\x2\x2\x2123\x2124\a\x335\x2\x2\x2124\x2126\a\x331\x2"+
		"\x2\x2125\x210E\x3\x2\x2\x2\x2125\x2116\x3\x2\x2\x2\x2125\x211F\x3\x2"+
		"\x2\x2\x2125\x2122\x3\x2\x2\x2\x2126\x2AD\x3\x2\x2\x2\x2127\x2142\ax\x2"+
		"\x2\x2128\x2129\a\x178\x2\x2\x2129\x2142\x5\x3E4\x1F3\x2\x212A\x212B\a"+
		"\x2F9\x2\x2\x212B\x2142\x5\x3E4\x1F3\x2\x212C\x212E\a\x1C3\x2\x2\x212D"+
		"\x212F\x5\x3E4\x1F3\x2\x212E\x212D\x3\x2\x2\x2\x212E\x212F\x3\x2\x2\x2"+
		"\x212F\x2142\x3\x2\x2\x2\x2130\x2131\aK\x2\x2\x2131\x2142\t\x64\x2\x2"+
		"\x2132\x2142\a\x2DE\x2\x2\x2133\x2142\a\x225\x2\x2\x2134\x2142\a\x137"+
		"\x2\x2\x2135\x2142\a\x113\x2\x2\x2136\x2142\a\xA4\x2\x2\x2137\x213F\a"+
		"\n\x2\x2\x2138\x213A\a\r\x2\x2\x2139\x2138\x3\x2\x2\x2\x2139\x213A\x3"+
		"\x2\x2\x2\x213A\x213D\x3\x2\x2\x2\x213B\x213E\x5\x3E4\x1F3\x2\x213C\x213E"+
		"\aV\x2\x2\x213D\x213B\x3\x2\x2\x2\x213D\x213C\x3\x2\x2\x2\x213E\x2140"+
		"\x3\x2\x2\x2\x213F\x2139\x3\x2\x2\x2\x213F\x2140\x3\x2\x2\x2\x2140\x2142"+
		"\x3\x2\x2\x2\x2141\x2127\x3\x2\x2\x2\x2141\x2128\x3\x2\x2\x2\x2141\x212A"+
		"\x3\x2\x2\x2\x2141\x212C\x3\x2\x2\x2\x2141\x2130\x3\x2\x2\x2\x2141\x2132"+
		"\x3\x2\x2\x2\x2141\x2133\x3\x2\x2\x2\x2141\x2134\x3\x2\x2\x2\x2141\x2135"+
		"\x3\x2\x2\x2\x2141\x2136\x3\x2\x2\x2\x2141\x2137\x3\x2\x2\x2\x2142\x2AF"+
		"\x3\x2\x2\x2\x2143\x2144\a\x141\x2\x2\x2144\x2147\a\x32C\x2\x2\x2145\x2146"+
		"\a\x342\x2\x2\x2146\x2148\x5\x3E4\x1F3\x2\x2147\x2145\x3\x2\x2\x2\x2147"+
		"\x2148\x3\x2\x2\x2\x2148\x2149\x3\x2\x2\x2\x2149\x214A\a\x335\x2\x2\x214A"+
		"\x214C\x5\x2F0\x179\x2\x214B\x214D\a\x34A\x2\x2\x214C\x214B\x3\x2\x2\x2"+
		"\x214C\x214D\x3\x2\x2\x2\x214D\x216B\x3\x2\x2\x2\x214E\x214F\a\x141\x2"+
		"\x2\x214F\x2150\a\x32C\x2\x2\x2150\x2151\x5\x3EA\x1F6\x2\x2151\x2153\x5"+
		"\x2F0\x179\x2\x2152\x2154\a\x34A\x2\x2\x2153\x2152\x3\x2\x2\x2\x2153\x2154"+
		"\x3\x2\x2\x2\x2154\x216B\x3\x2\x2\x2\x2155\x2156\a\x141\x2\x2\x2156\x2157"+
		"\a\x32C\x2\x2\x2157\x2158\a\x335\x2\x2\x2158\x2159\aR\x2\x2\x2159\x2164"+
		"\x5\x2E6\x174\x2\x215A\x2162\a\x87\x2\x2\x215B\x215C\a\x10F\x2\x2\x215C"+
		"\x2163\a\x280\x2\x2\x215D\x2160\a\x16F\x2\x2\x215E\x215F\a\xE5\x2\x2\x215F"+
		"\x2161\x5\x3BE\x1E0\x2\x2160\x215E\x3\x2\x2\x2\x2160\x2161\x3\x2\x2\x2"+
		"\x2161\x2163\x3\x2\x2\x2\x2162\x215B\x3\x2\x2\x2\x2162\x215D\x3\x2\x2"+
		"\x2\x2163\x2165\x3\x2\x2\x2\x2164\x215A\x3\x2\x2\x2\x2164\x2165\x3\x2"+
		"\x2\x2\x2165\x2167\x3\x2\x2\x2\x2166\x2168\a\x34A\x2\x2\x2167\x2166\x3"+
		"\x2\x2\x2\x2167\x2168\x3\x2\x2\x2\x2168\x216B\x3\x2\x2\x2\x2169\x216B"+
		"\x5\x2EC\x177\x2\x216A\x2143\x3\x2\x2\x2\x216A\x214E\x3\x2\x2\x2\x216A"+
		"\x2155\x3\x2\x2\x2\x216A\x2169\x3\x2\x2\x2\x216B\x2B1\x3\x2\x2\x2\x216C"+
		"\x216D\a\x1D\x2\x2\x216D\x216E\a\x65\x2\x2\x216E\x2171\t\x65\x2\x2\x216F"+
		"\x2172\x5\x3E4\x1F3\x2\x2170\x2172\a\x32C\x2\x2\x2171\x216F\x3\x2\x2\x2"+
		"\x2171\x2170\x3\x2\x2\x2\x2171\x2172\x3\x2\x2\x2\x2172\x2174\x3\x2\x2"+
		"\x2\x2173\x2175\a\x34A\x2\x2\x2174\x2173\x3\x2\x2\x2\x2174\x2175\x3\x2"+
		"\x2\x2\x2175\x21BE\x3\x2\x2\x2\x2176\x2177\a\x1D\x2\x2\x2177\x2181\t\x65"+
		"\x2\x2\x2178\x217B\x5\x3E4\x1F3\x2\x2179\x217B\a\x32C\x2\x2\x217A\x2178"+
		"\x3\x2\x2\x2\x217A\x2179\x3\x2\x2\x2\x217B\x217F\x3\x2\x2\x2\x217C\x217D"+
		"\a\x17F\x2\x2\x217D\x217E\a\x249\x2\x2\x217E\x2180\a\x331\x2\x2\x217F"+
		"\x217C\x3\x2\x2\x2\x217F\x2180\x3\x2\x2\x2\x2180\x2182\x3\x2\x2\x2\x2181"+
		"\x217A\x3\x2\x2\x2\x2181\x2182\x3\x2\x2\x2\x2182\x2184\x3\x2\x2\x2\x2183"+
		"\x2185\a\x34A\x2\x2\x2184\x2183\x3\x2\x2\x2\x2184\x2185\x3\x2\x2\x2\x2185"+
		"\x21BE\x3\x2\x2\x2\x2186\x2187\a;\x2\x2\x2187\x2194\t\x65\x2\x2\x2188"+
		"\x218B\x5\x3E4\x1F3\x2\x2189\x218B\a\x32C\x2\x2\x218A\x2188\x3\x2\x2\x2"+
		"\x218A\x2189\x3\x2\x2\x2\x218B\x2192\x3\x2\x2\x2\x218C\x218D\a\x17F\x2"+
		"\x2\x218D\x218E\a\x347\x2\x2\x218E\x218F\a\x1DF\x2\x2\x218F\x2190\a\x335"+
		"\x2\x2\x2190\x2191\t\t\x2\x2\x2191\x2193\a\x348\x2\x2\x2192\x218C\x3\x2"+
		"\x2\x2\x2192\x2193\x3\x2\x2\x2\x2193\x2195\x3\x2\x2\x2\x2194\x218A\x3"+
		"\x2\x2\x2\x2194\x2195\x3\x2\x2\x2\x2195\x2197\x3\x2\x2\x2\x2196\x2198"+
		"\a\x34A\x2\x2\x2197\x2196\x3\x2\x2\x2\x2197\x2198\x3\x2\x2\x2\x2198\x21BE"+
		"\x3\x2\x2\x2\x2199\x219B\a;\x2\x2\x219A\x219C\a\x31E\x2\x2\x219B\x219A"+
		"\x3\x2\x2\x2\x219B\x219C\x3\x2\x2\x2\x219C\x219E\x3\x2\x2\x2\x219D\x219F"+
		"\a\x34A\x2\x2\x219E\x219D\x3\x2\x2\x2\x219E\x219F\x3\x2\x2\x2\x219F\x21BE"+
		"\x3\x2\x2\x2\x21A0\x21A1\a;\x2\x2\x21A1\x21BE\x5\x3E4\x1F3\x2\x21A2\x21A3"+
		"\a\x126\x2\x2\x21A3\x21BE\x5\x3E4\x1F3\x2\x21A4\x21A5\a\x126\x2\x2\x21A5"+
		"\x21A8\t\x65\x2\x2\x21A6\x21A9\x5\x3E4\x1F3\x2\x21A7\x21A9\a\x32C\x2\x2"+
		"\x21A8\x21A6\x3\x2\x2\x2\x21A8\x21A7\x3\x2\x2\x2\x21A8\x21A9\x3\x2\x2"+
		"\x2\x21A9\x21AB\x3\x2\x2\x2\x21AA\x21AC\a\x34A\x2\x2\x21AB\x21AA\x3\x2"+
		"\x2\x2\x21AB\x21AC\x3\x2\x2\x2\x21AC\x21BE\x3\x2\x2\x2\x21AD\x21AF\a\x126"+
		"\x2\x2\x21AE\x21B0\a\x31E\x2\x2\x21AF\x21AE\x3\x2\x2\x2\x21AF\x21B0\x3"+
		"\x2\x2\x2\x21B0\x21B2\x3\x2\x2\x2\x21B1\x21B3\a\x34A\x2\x2\x21B2\x21B1"+
		"\x3\x2\x2\x2\x21B2\x21B3\x3\x2\x2\x2\x21B3\x21BE\x3\x2\x2\x2\x21B4\x21B5"+
		"\a\x132\x2\x2\x21B5\x21B8\t\x65\x2\x2\x21B6\x21B9\x5\x3E4\x1F3\x2\x21B7"+
		"\x21B9\a\x32C\x2\x2\x21B8\x21B6\x3\x2\x2\x2\x21B8\x21B7\x3\x2\x2\x2\x21B8"+
		"\x21B9\x3\x2\x2\x2\x21B9\x21BB\x3\x2\x2\x2\x21BA\x21BC\a\x34A\x2\x2\x21BB"+
		"\x21BA\x3\x2\x2\x2\x21BB\x21BC\x3\x2\x2\x2\x21BC\x21BE\x3\x2\x2\x2\x21BD"+
		"\x216C\x3\x2\x2\x2\x21BD\x2176\x3\x2\x2\x2\x21BD\x2186\x3\x2\x2\x2\x21BD"+
		"\x2199\x3\x2\x2\x2\x21BD\x21A0\x3\x2\x2\x2\x21BD\x21A2\x3\x2\x2\x2\x21BD"+
		"\x21A4\x3\x2\x2\x2\x21BD\x21AD\x3\x2\x2\x2\x21BD\x21B4\x3\x2\x2\x2\x21BE"+
		"\x2B3\x3\x2\x2\x2\x21BF\x21C1\a\x217\x2\x2\x21C0\x21C2\a\x32D\x2\x2\x21C1"+
		"\x21C0\x3\x2\x2\x2\x21C1\x21C2\x3\x2\x2\x2\x21C2\x2B5\x3\x2\x2\x2\x21C3"+
		"\x21C4\a\x172\x2\x2\x21C4\x21C6\x5\x3AC\x1D7\x2\x21C5\x21C7\a\x34A\x2"+
		"\x2\x21C6\x21C5\x3\x2\x2\x2\x21C6\x21C7\x3\x2\x2\x2\x21C7\x2B7\x3\x2\x2"+
		"\x2\x21C8\x21CA\a\x142\x2\x2\x21C9\x21CB\a\x331\x2\x2\x21CA\x21C9\x3\x2"+
		"\x2\x2\x21CA\x21CB\x3\x2\x2\x2\x21CB\x2B9\x3\x2\x2\x2\x21CC\x21CF\a\x112"+
		"\x2\x2\x21CD\x21CE\a\x17F\x2\x2\x21CE\x21D0\a\x286\x2\x2\x21CF\x21CD\x3"+
		"\x2\x2\x2\x21CF\x21D0\x3\x2\x2\x2\x21D0\x2BB\x3\x2\x2\x2\x21D1\x21D4\a"+
		"\x143\x2\x2\x21D2\x21D3\a\x17F\x2\x2\x21D3\x21D5\a\x276\x2\x2\x21D4\x21D2"+
		"\x3\x2\x2\x2\x21D4\x21D5\x3\x2\x2\x2\x21D5\x2BD\x3\x2\x2\x2\x21D6\x21D7"+
		"\aX\x2\x2\x21D7\x21DC\x5\x3E6\x1F4\x2\x21D8\x21D9\a\x347\x2\x2\x21D9\x21DA"+
		"\x5\x380\x1C1\x2\x21DA\x21DB\a\x348\x2\x2\x21DB\x21DD\x3\x2\x2\x2\x21DC"+
		"\x21D8\x3\x2\x2\x2\x21DC\x21DD\x3\x2\x2\x2\x21DD\x21E0\x3\x2\x2\x2\x21DE"+
		"\x21DF\a\x17F\x2\x2\x21DF\x21E1\x5\x2C0\x161\x2\x21E0\x21DE\x3\x2\x2\x2"+
		"\x21E0\x21E1\x3\x2\x2\x2\x21E1\x21E3\x3\x2\x2\x2\x21E2\x21E4\a\x34A\x2"+
		"\x2\x21E3\x21E2\x3\x2\x2\x2\x21E3\x21E4\x3\x2\x2\x2\x21E4\x2BF\x3\x2\x2"+
		"\x2\x21E5\x21E8\x5\x3E6\x1F4\x2\x21E6\x21E7\a\x349\x2\x2\x21E7\x21E9\x5"+
		"\x3E6\x1F4\x2\x21E8\x21E6\x3\x2\x2\x2\x21E8\x21E9\x3\x2\x2\x2\x21E9\x2C1"+
		"\x3\x2\x2\x2\x21EA\x21EB\ax\x2\x2\x21EB\x21EC\a\x10\x2\x2\x21EC\x21ED"+
		"\t\x66\x2\x2\x21ED\x2C3\x3\x2\x2\x2\x21EE\x21F0\a\x32C\x2\x2\x21EF\x21F1"+
		"\a\x10\x2\x2\x21F0\x21EF\x3\x2\x2\x2\x21F0\x21F1\x3\x2\x2\x2\x21F1\x21F2"+
		"\x3\x2\x2\x2\x21F2\x21F5\x5\x3DC\x1EF\x2\x21F3\x21F4\a\x335\x2\x2\x21F4"+
		"\x21F6\x5\x2F0\x179\x2\x21F5\x21F3\x3\x2\x2\x2\x21F5\x21F6\x3\x2\x2\x2"+
		"\x21F6\x2C5\x3\x2\x2\x2\x21F7\x21F8\a\x159\x2\x2\x21F8\x21F9\a\x347\x2"+
		"\x2\x21F9\x21FA\x5\x2CC\x167\x2\x21FA\x21FB\a\x348\x2\x2\x21FB\x2C7\x3"+
		"\x2\x2\x2\x21FC\x21FD\a\x320\x2\x2\x21FD\x21FF\a\x347\x2\x2\x21FE\x2200"+
		"\tg\x2\x2\x21FF\x21FE\x3\x2\x2\x2\x21FF\x2200\x3\x2\x2\x2\x2200\x2201"+
		"\x3\x2\x2\x2\x2201\x2202\x5\x2CA\x166\x2\x2202\x2203\a\x348\x2\x2\x2203"+
		"\x2C9\x3\x2\x2\x2\x2204\x2205\a\x32E\x2\x2\x2205\x2206\a\x342\x2\x2\x2206"+
		"\x2207\a\x32E\x2\x2\x2207\x2CB\x3\x2\x2\x2\x2208\x220F\x5\x2CE\x168\x2"+
		"\x2209\x220B\a\x349\x2\x2\x220A\x2209\x3\x2\x2\x2\x220A\x220B\x3\x2\x2"+
		"\x2\x220B\x220C\x3\x2\x2\x2\x220C\x220E\x5\x2CE\x168\x2\x220D\x220A\x3"+
		"\x2\x2\x2\x220E\x2211\x3\x2\x2\x2\x220F\x220D\x3\x2\x2\x2\x220F\x2210"+
		"\x3\x2\x2\x2\x2210\x2CD\x3\x2\x2\x2\x2211\x220F\x3\x2\x2\x2\x2212\x2216"+
		"\x5\x2D4\x16B\x2\x2213\x2216\x5\x2D6\x16C\x2\x2214\x2216\x5\x2DA\x16E"+
		"\x2\x2215\x2212\x3\x2\x2\x2\x2215\x2213\x3\x2\x2\x2\x2215\x2214\x3\x2"+
		"\x2\x2\x2216\x2CF\x3\x2\x2\x2\x2217\x221E\x5\x2D2\x16A\x2\x2218\x221A"+
		"\a\x349\x2\x2\x2219\x2218\x3\x2\x2\x2\x2219\x221A\x3\x2\x2\x2\x221A\x221B"+
		"\x3\x2\x2\x2\x221B\x221D\x5\x2D2\x16A\x2\x221C\x2219\x3\x2\x2\x2\x221D"+
		"\x2220\x3\x2\x2\x2\x221E\x221C\x3\x2\x2\x2\x221E\x221F\x3\x2\x2\x2\x221F"+
		"\x2D1\x3\x2\x2\x2\x2220\x221E\x3\x2\x2\x2\x2221\x2226\x5\x2D4\x16B\x2"+
		"\x2222\x2226\x5\x2D6\x16C\x2\x2223\x2226\x5\x2DA\x16E\x2\x2224\x2226\x5"+
		"\x1FE\x100\x2\x2225\x2221\x3\x2\x2\x2\x2225\x2222\x3\x2\x2\x2\x2225\x2223"+
		"\x3\x2\x2\x2\x2225\x2224\x3\x2\x2\x2\x2226\x2D3\x3\x2\x2\x2\x2227\x222B"+
		"\x5\x3E4\x1F3\x2\x2228\x222C\x5\x3DC\x1EF\x2\x2229\x222A\a\x10\x2\x2\x222A"+
		"\x222C\x5\x2F0\x179\x2\x222B\x2228\x3\x2\x2\x2\x222B\x2229\x3\x2\x2\x2"+
		"\x222C\x222F\x3\x2\x2\x2\x222D\x222E\a\x38\x2\x2\x222E\x2230\x5\x3E4\x1F3"+
		"\x2\x222F\x222D\x3\x2\x2\x2\x222F\x2230\x3\x2\x2\x2\x2230\x2232\x3\x2"+
		"\x2\x2\x2231\x2233\x5\x3C6\x1E4\x2\x2232\x2231\x3\x2\x2\x2\x2232\x2233"+
		"\x3\x2\x2\x2\x2233\x2249\x3\x2\x2\x2\x2234\x2235\a?\x2\x2\x2235\x2237"+
		"\x5\x3E4\x1F3\x2\x2236\x2234\x3\x2\x2\x2\x2236\x2237\x3\x2\x2\x2\x2237"+
		"\x2238\x3\x2\x2\x2\x2238\x223A\x5\x3C8\x1E5\x2\x2239\x223B\x5\x3C8\x1E5"+
		"\x2\x223A\x2239\x3\x2\x2\x2\x223A\x223B\x3\x2\x2\x2\x223B\x224A\x3\x2"+
		"\x2\x2\x223C\x2242\a\x98\x2\x2\x223D\x223E\a\x347\x2\x2\x223E\x223F\a"+
		"\x32D\x2\x2\x223F\x2240\a\x349\x2\x2\x2240\x2241\a\x32D\x2\x2\x2241\x2243"+
		"\a\x348\x2\x2\x2242\x223D\x3\x2\x2\x2\x2242\x2243\x3\x2\x2\x2\x2243\x2247"+
		"\x3\x2\x2\x2\x2244\x2245\a\xE0\x2\x2\x2245\x2246\a\x87\x2\x2\x2246\x2248"+
		"\a\x117\x2\x2\x2247\x2244\x3\x2\x2\x2\x2247\x2248\x3\x2\x2\x2\x2248\x224A"+
		"\x3\x2\x2\x2\x2249\x2236\x3\x2\x2\x2\x2249\x223C\x3\x2\x2\x2\x2249\x224A"+
		"\x3\x2\x2\x2\x224A\x224C\x3\x2\x2\x2\x224B\x224D\a\x129\x2\x2\x224C\x224B"+
		"\x3\x2\x2\x2\x224C\x224D\x3\x2\x2\x2\x224D\x2251\x3\x2\x2\x2\x224E\x2250"+
		"\x5\x2D8\x16D\x2\x224F\x224E\x3\x2\x2\x2\x2250\x2253\x3\x2\x2\x2\x2251"+
		"\x224F\x3\x2\x2\x2\x2251\x2252\x3\x2\x2\x2\x2252\x2D5\x3\x2\x2\x2\x2253"+
		"\x2251\x3\x2\x2\x2\x2254\x2255\x5\x3E4\x1F3\x2\x2255\x2256\th\x2\x2\x2256"+
		"\x225A\x5\x2F0\x179\x2\x2257\x225B\a\x24A\x2\x2\x2258\x2259\a\xE0\x2\x2"+
		"\x2259\x225B\a\x24A\x2\x2\x225A\x2257\x3\x2\x2\x2\x225A\x2258\x3\x2\x2"+
		"\x2\x225A\x225B\x3\x2\x2\x2\x225B\x2D7\x3\x2\x2\x2\x225C\x225D\a?\x2\x2"+
		"\x225D\x225F\x5\x3E4\x1F3\x2\x225E\x225C\x3\x2\x2\x2\x225E\x225F\x3\x2"+
		"\x2\x2\x225F\x2285\x3\x2\x2\x2\x2260\x2261\a\x104\x2\x2\x2261\x2264\a"+
		"\xAE\x2\x2\x2262\x2264\a\x16B\x2\x2\x2263\x2260\x3\x2\x2\x2\x2263\x2262"+
		"\x3\x2\x2\x2\x2264\x2266\x3\x2\x2\x2\x2265\x2267\x5\x3C4\x1E3\x2\x2266"+
		"\x2265\x3\x2\x2\x2\x2266\x2267\x3\x2\x2\x2\x2267\x2269\x3\x2\x2\x2\x2268"+
		"\x226A\x5\x2E0\x171\x2\x2269\x2268\x3\x2\x2\x2\x2269\x226A\x3\x2\x2\x2"+
		"\x226A\x2286\x3\x2\x2\x2\x226B\x226F\a/\x2\x2\x226C\x226D\a\xE0\x2\x2"+
		"\x226D\x226E\a\x87\x2\x2\x226E\x2270\a\x117\x2\x2\x226F\x226C\x3\x2\x2"+
		"\x2\x226F\x2270\x3\x2\x2\x2\x2270\x2271\x3\x2\x2\x2\x2271\x2272\a\x347"+
		"\x2\x2\x2272\x2273\x5\x306\x184\x2\x2273\x2274\a\x348\x2\x2\x2274\x2286"+
		"\x3\x2\x2\x2\x2275\x2276\a\x8A\x2\x2\x2276\x2278\a\xAE\x2\x2\x2277\x2275"+
		"\x3\x2\x2\x2\x2277\x2278\x3\x2\x2\x2\x2278\x2279\x3\x2\x2\x2\x2279\x227A"+
		"\a\x113\x2\x2\x227A\x227B\x5\x3A6\x1D4\x2\x227B\x227C\a\x347\x2\x2\x227C"+
		"\x227D\x5\x3BE\x1E0\x2\x227D\x227F\a\x348\x2\x2\x227E\x2280\x5\x2DC\x16F"+
		"\x2\x227F\x227E\x3\x2\x2\x2\x227F\x2280\x3\x2\x2\x2\x2280\x2282\x3\x2"+
		"\x2\x2\x2281\x2283\x5\x2DE\x170\x2\x2282\x2281\x3\x2\x2\x2\x2282\x2283"+
		"\x3\x2\x2\x2\x2283\x2286\x3\x2\x2\x2\x2284\x2286\x5\x3C6\x1E4\x2\x2285"+
		"\x2263\x3\x2\x2\x2\x2285\x226B\x3\x2\x2\x2\x2285\x2277\x3\x2\x2\x2\x2285"+
		"\x2284\x3\x2\x2\x2\x2286\x2D9\x3\x2\x2\x2\x2287\x2288\a?\x2\x2\x2288\x228A"+
		"\x5\x3E4\x1F3\x2\x2289\x2287\x3\x2\x2\x2\x2289\x228A\x3\x2\x2\x2\x228A"+
		"\x22D9\x3\x2\x2\x2\x228B\x228C\a\x104\x2\x2\x228C\x228F\a\xAE\x2\x2\x228D"+
		"\x228F\a\x16B\x2\x2\x228E\x228B\x3\x2\x2\x2\x228E\x228D\x3\x2\x2\x2\x228F"+
		"\x22A9\x3\x2\x2\x2\x2290\x2292\x5\x3C4\x1E3\x2\x2291\x2290\x3\x2\x2\x2"+
		"\x2291\x2292\x3\x2\x2\x2\x2292\x2293\x3\x2\x2\x2\x2293\x2294\a\x347\x2"+
		"\x2\x2294\x2295\x5\x3BC\x1DF\x2\x2295\x2297\a\x348\x2\x2\x2296\x2298\x5"+
		"\x2E0\x171\x2\x2297\x2296\x3\x2\x2\x2\x2297\x2298\x3\x2\x2\x2\x2298\x229B"+
		"\x3\x2\x2\x2\x2299\x229A\a\xE9\x2\x2\x229A\x229C\x5\x3E4\x1F3\x2\x229B"+
		"\x2299\x3\x2\x2\x2\x229B\x229C\x3\x2\x2\x2\x229C\x22AA\x3\x2\x2\x2\x229D"+
		"\x229E\a\xD8\x2\x2\x229E\x229F\a\x21D\x2\x2\x229F\x22A0\a\x347\x2\x2\x22A0"+
		"\x22A1\x5\x3BC\x1DF\x2\x22A1\x22A2\a\x348\x2\x2\x22A2\x22A3\a\x17F\x2"+
		"\x2\x22A3\x22A4\a\x347\x2\x2\x22A4\x22A5\a\x1B0\x2\x2\x22A5\x22A6\a\x335"+
		"\x2\x2\x22A6\x22A7\a\x32D\x2\x2\x22A7\x22A8\a\x348\x2\x2\x22A8\x22AA\x3"+
		"\x2\x2\x2\x22A9\x2291\x3\x2\x2\x2\x22A9\x229D\x3\x2\x2\x2\x22AA\x22DA"+
		"\x3\x2\x2\x2\x22AB\x22AF\a/\x2\x2\x22AC\x22AD\a\xE0\x2\x2\x22AD\x22AE"+
		"\a\x87\x2\x2\x22AE\x22B0\a\x117\x2\x2\x22AF\x22AC\x3\x2\x2\x2\x22AF\x22B0"+
		"\x3\x2\x2\x2\x22B0\x22B1\x3\x2\x2\x2\x22B1\x22B2\a\x347\x2\x2\x22B2\x22B3"+
		"\x5\x306\x184\x2\x22B3\x22B4\a\x348\x2\x2\x22B4\x22DA\x3\x2\x2\x2\x22B5"+
		"\x22B7\a[\x2\x2\x22B6\x22B8\a\x347\x2\x2\x22B7\x22B6\x3\x2\x2\x2\x22B7"+
		"\x22B8\x3\x2\x2\x2\x22B8\x22BD\x3\x2\x2\x2\x22B9\x22BE\a\x331\x2\x2\x22BA"+
		"\x22BE\a\x34F\x2\x2\x22BB\x22BE\x5\x35A\x1AE\x2\x22BC\x22BE\a\x32D\x2"+
		"\x2\x22BD\x22B9\x3\x2\x2\x2\x22BD\x22BA\x3\x2\x2\x2\x22BD\x22BB\x3\x2"+
		"\x2\x2\x22BD\x22BC\x3\x2\x2\x2\x22BE\x22BF\x3\x2\x2\x2\x22BF\x22BD\x3"+
		"\x2\x2\x2\x22BF\x22C0\x3\x2\x2\x2\x22C0\x22C2\x3\x2\x2\x2\x22C1\x22C3"+
		"\a\x348\x2\x2\x22C2\x22C1\x3\x2\x2\x2\x22C2\x22C3\x3\x2\x2\x2\x22C3\x22C4"+
		"\x3\x2\x2\x2\x22C4\x22C5\a\x87\x2\x2\x22C5\x22DA\x5\x3E4\x1F3\x2\x22C6"+
		"\x22C7\a\x8A\x2\x2\x22C7\x22C8\a\xAE\x2\x2\x22C8\x22C9\a\x347\x2\x2\x22C9"+
		"\x22CA\x5\x3BE\x1E0\x2\x22CA\x22CB\a\x348\x2\x2\x22CB\x22CC\a\x113\x2"+
		"\x2\x22CC\x22D1\x5\x3A6\x1D4\x2\x22CD\x22CE\a\x347\x2\x2\x22CE\x22CF\x5"+
		"\x3BE\x1E0\x2\x22CF\x22D0\a\x348\x2\x2\x22D0\x22D2\x3\x2\x2\x2\x22D1\x22CD"+
		"\x3\x2\x2\x2\x22D1\x22D2\x3\x2\x2\x2\x22D2\x22D4\x3\x2\x2\x2\x22D3\x22D5"+
		"\x5\x2DC\x16F\x2\x22D4\x22D3\x3\x2\x2\x2\x22D4\x22D5\x3\x2\x2\x2\x22D5"+
		"\x22D7\x3\x2\x2\x2\x22D6\x22D8\x5\x2DE\x170\x2\x22D7\x22D6\x3\x2\x2\x2"+
		"\x22D7\x22D8\x3\x2\x2\x2\x22D8\x22DA\x3\x2\x2\x2\x22D9\x228E\x3\x2\x2"+
		"\x2\x22D9\x22AB\x3\x2\x2\x2\x22D9\x22B5\x3\x2\x2\x2\x22D9\x22C6\x3\x2"+
		"\x2\x2\x22DA\x2DB\x3\x2\x2\x2\x22DB\x22DC\a\xE9\x2\x2\x22DC\x22E4\a^\x2"+
		"\x2\x22DD\x22DE\a\x26D\x2\x2\x22DE\x22E5\a\x186\x2\x2\x22DF\x22E5\a*\x2"+
		"\x2\x22E0\x22E1\a\x141\x2\x2\x22E1\x22E5\a\xE3\x2\x2\x22E2\x22E3\a\x141"+
		"\x2\x2\x22E3\x22E5\a[\x2\x2\x22E4\x22DD\x3\x2\x2\x2\x22E4\x22DF\x3\x2"+
		"\x2\x2\x22E4\x22E0\x3\x2\x2\x2\x22E4\x22E2\x3\x2\x2\x2\x22E5\x2DD\x3\x2"+
		"\x2\x2\x22E6\x22E7\a\xE9\x2\x2\x22E7\x22EF\a\x16F\x2\x2\x22E8\x22E9\a"+
		"\x26D\x2\x2\x22E9\x22F0\a\x186\x2\x2\x22EA\x22F0\a*\x2\x2\x22EB\x22EC"+
		"\a\x141\x2\x2\x22EC\x22F0\a\xE3\x2\x2\x22ED\x22EE\a\x141\x2\x2\x22EE\x22F0"+
		"\a[\x2\x2\x22EF\x22E8\x3\x2\x2\x2\x22EF\x22EA\x3\x2\x2\x2\x22EF\x22EB"+
		"\x3\x2\x2\x2\x22EF\x22ED\x3\x2\x2\x2\x22F0\x2DF\x3\x2\x2\x2\x22F1\x22F2"+
		"\a\x17F\x2\x2\x22F2\x22F3\a\x347\x2\x2\x22F3\x22F8\x5\x2E2\x172\x2\x22F4"+
		"\x22F5\a\x349\x2\x2\x22F5\x22F7\x5\x2E2\x172\x2\x22F6\x22F4\x3\x2\x2\x2"+
		"\x22F7\x22FA\x3\x2\x2\x2\x22F8\x22F6\x3\x2\x2\x2\x22F8\x22F9\x3\x2\x2"+
		"\x2\x22F9\x22FB\x3\x2\x2\x2\x22FA\x22F8\x3\x2\x2\x2\x22FB\x22FC\a\x348"+
		"\x2\x2\x22FC\x2E1\x3\x2\x2\x2\x22FD\x22FE\x5\x3E6\x1F4\x2\x22FE\x2302"+
		"\a\x335\x2\x2\x22FF\x2303\x5\x3E6\x1F4\x2\x2300\x2303\x5\x3C2\x1E2\x2"+
		"\x2301\x2303\a\x32D\x2\x2\x2302\x22FF\x3\x2\x2\x2\x2302\x2300\x3\x2\x2"+
		"\x2\x2302\x2301\x3\x2\x2\x2\x2303\x2E3\x3\x2\x2\x2\x2304\x2305\aZ\x2\x2"+
		"\x2305\x2325\x5\x3C0\x1E1\x2\x2306\x2310\aR\x2\x2\x2307\x230E\x5\x2E6"+
		"\x174\x2\x2308\x2309\a\x87\x2\x2\x2309\x230C\a\x16F\x2\x2\x230A\x230B"+
		"\a\xE5\x2\x2\x230B\x230D\x5\x3BE\x1E0\x2\x230C\x230A\x3\x2\x2\x2\x230C"+
		"\x230D\x3\x2\x2\x2\x230D\x230F\x3\x2\x2\x2\x230E\x2308\x3\x2\x2\x2\x230E"+
		"\x230F\x3\x2\x2\x2\x230F\x2311\x3\x2\x2\x2\x2310\x2307\x3\x2\x2\x2\x2310"+
		"\x2311\x3\x2\x2\x2\x2311\x2326\x3\x2\x2\x2\x2312\x2314\ti\x2\x2\x2313"+
		"\x2312\x3\x2\x2\x2\x2313\x2314\x3\x2\x2\x2\x2314\x2316\x3\x2\x2\x2\x2315"+
		"\x2317\a\x2CA\x2\x2\x2316\x2315\x3\x2\x2\x2\x2316\x2317\x3\x2\x2\x2\x2317"+
		"\x2318\x3\x2\x2\x2\x2318\x2319\aR\x2\x2\x2319\x231A\a\x87\x2\x2\x231A"+
		"\x2323\x5\x1C2\xE2\x2\x231B\x2321\a\x87\x2\x2\x231C\x231D\a\x10F\x2\x2"+
		"\x231D\x2322\a\x280\x2\x2\x231E\x2322\a\x16F\x2\x2\x231F\x2320\a\xE5\x2"+
		"\x2\x2320\x2322\x5\x3BE\x1E0\x2\x2321\x231C\x3\x2\x2\x2\x2321\x231E\x3"+
		"\x2\x2\x2\x2321\x231F\x3\x2\x2\x2\x2322\x2324\x3\x2\x2\x2\x2323\x231B"+
		"\x3\x2\x2\x2\x2323\x2324\x3\x2\x2\x2\x2324\x2326\x3\x2\x2\x2\x2325\x2306"+
		"\x3\x2\x2\x2\x2325\x2313\x3\x2\x2\x2\x2326\x2328\x3\x2\x2\x2\x2327\x2329"+
		"\a\x34A\x2\x2\x2328\x2327\x3\x2\x2\x2\x2328\x2329\x3\x2\x2\x2\x2329\x2E5"+
		"\x3\x2\x2\x2\x232A\x232C\x5\x2E8\x175\x2\x232B\x232A\x3\x2\x2\x2\x232C"+
		"\x232F\x3\x2\x2\x2\x232D\x232B\x3\x2\x2\x2\x232D\x232E\x3\x2\x2\x2\x232E"+
		"\x2330\x3\x2\x2\x2\x232F\x232D\x3\x2\x2\x2\x2330\x2331\a\x87\x2\x2\x2331"+
		"\x2332\x5\x1C2\xE2\x2\x2332\x2E7\x3\x2\x2\x2\x2333\x2339\t\x44\x2\x2\x2334"+
		"\x2339\tj\x2\x2\x2335\x2339\tk\x2\x2\x2336\x2339\tl\x2\x2\x2337\x2339"+
		"\a\x30C\x2\x2\x2338\x2333\x3\x2\x2\x2\x2338\x2334\x3\x2\x2\x2\x2338\x2335"+
		"\x3\x2\x2\x2\x2338\x2336\x3\x2\x2\x2\x2338\x2337\x3\x2\x2\x2\x2339\x2E9"+
		"\x3\x2\x2\x2\x233A\x2344\a\x82\x2\x2\x233B\x2342\a\x26C\x2\x2\x233C\x2342"+
		"\a\x293\x2\x2\x233D\x2342\a\x209\x2\x2\x233E\x2342\a\x239\x2\x2\x233F"+
		"\x2340\tm\x2\x2\x2340\x2342\x5\x2F0\x179\x2\x2341\x233B\x3\x2\x2\x2\x2341"+
		"\x233C\x3\x2\x2\x2\x2341\x233D\x3\x2\x2\x2\x2341\x233E\x3\x2\x2\x2\x2341"+
		"\x233F\x3\x2\x2\x2\x2341\x2342\x3\x2\x2\x2\x2342\x2343\x3\x2\x2\x2\x2343"+
		"\x2345\a\x8D\x2\x2\x2344\x2341\x3\x2\x2\x2\x2344\x2345\x3\x2\x2\x2\x2345"+
		"\x2347\x3\x2\x2\x2\x2346\x2348\a\x216\x2\x2\x2347\x2346\x3\x2\x2\x2\x2347"+
		"\x2348\x3\x2\x2\x2\x2348\x2349\x3\x2\x2\x2\x2349\x2353\x5\x3C0\x1E1\x2"+
		"\x234A\x234B\a\xA7\x2\x2\x234B\x2350\a\x32C\x2\x2\x234C\x234D\a\x349\x2"+
		"\x2\x234D\x234F\a\x32C\x2\x2\x234E\x234C\x3\x2\x2\x2\x234F\x2352\x3\x2"+
		"\x2\x2\x2350\x234E\x3\x2\x2\x2\x2350\x2351\x3\x2\x2\x2\x2351\x2354\x3"+
		"\x2\x2\x2\x2352\x2350\x3\x2\x2\x2\x2353\x234A\x3\x2\x2\x2\x2353\x2354"+
		"\x3\x2\x2\x2\x2354\x2356\x3\x2\x2\x2\x2355\x2357\a\x34A\x2\x2\x2356\x2355"+
		"\x3\x2\x2\x2\x2356\x2357\x3\x2\x2\x2\x2357\x2EB\x3\x2\x2\x2\x2358\x2359"+
		"\a\x141\x2\x2\x2359\x235D\x5\x3E4\x1F3\x2\x235A\x235E\x5\x3E4\x1F3\x2"+
		"\x235B\x235E\x5\x2EE\x178\x2\x235C\x235E\x5\x3C2\x1E2\x2\x235D\x235A\x3"+
		"\x2\x2\x2\x235D\x235B\x3\x2\x2\x2\x235D\x235C\x3\x2\x2\x2\x235E\x2360"+
		"\x3\x2\x2\x2\x235F\x2361\a\x34A\x2\x2\x2360\x235F\x3\x2\x2\x2\x2360\x2361"+
		"\x3\x2\x2\x2\x2361\x238A\x3\x2\x2\x2\x2362\x2363\a\x141\x2\x2\x2363\x2364"+
		"\a\x164\x2\x2\x2364\x2365\a\x22F\x2\x2\x2365\x236F\a\x23C\x2\x2\x2366"+
		"\x2367\a\x10F\x2\x2\x2367\x2370\a\x30E\x2\x2\x2368\x2369\a\x10F\x2\x2"+
		"\x2369\x2370\a\x1BE\x2\x2\x236A\x236B\a\x2B5\x2\x2\x236B\x2370\a\x10F"+
		"\x2\x2\x236C\x2370\a\x2E4\x2\x2\x236D\x2370\a\x2DA\x2\x2\x236E\x2370\a"+
		"\x32D\x2\x2\x236F\x2366\x3\x2\x2\x2\x236F\x2368\x3\x2\x2\x2\x236F\x236A"+
		"\x3\x2\x2\x2\x236F\x236C\x3\x2\x2\x2\x236F\x236D\x3\x2\x2\x2\x236F\x236E"+
		"\x3\x2\x2\x2\x2370\x2372\x3\x2\x2\x2\x2371\x2373\a\x34A\x2\x2\x2372\x2371"+
		"\x3\x2\x2\x2\x2372\x2373\x3\x2\x2\x2\x2373\x238A\x3\x2\x2\x2\x2374\x2375"+
		"\a\x141\x2\x2\x2375\x2376\a\x9A\x2\x2\x2376\x2377\x5\x3A6\x1D4\x2\x2377"+
		"\x2379\x5\x3C2\x1E2\x2\x2378\x237A\a\x34A\x2\x2\x2379\x2378\x3\x2\x2\x2"+
		"\x2379\x237A\x3\x2\x2\x2\x237A\x238A\x3\x2\x2\x2\x237B\x237C\a\x141\x2"+
		"\x2\x237C\x237D\a\x195\x2\x2\x237D\x238A\x5\x3C2\x1E2\x2\x237E\x237F\a"+
		"\x141\x2\x2\x237F\x2380\a\x2A0\x2\x2\x2380\x238A\x5\x3C2\x1E2\x2\x2381"+
		"\x2382\a\x141\x2\x2\x2382\x2383\a\x196\x2\x2\x2383\x238A\x5\x3C2\x1E2"+
		"\x2\x2384\x2385\a\x141\x2\x2\x2385\x2386\a\x197\x2\x2\x2386\x238A\x5\x3C2"+
		"\x1E2\x2\x2387\x2388\a\x141\x2\x2\x2388\x238A\x5\x364\x1B3\x2\x2389\x2358"+
		"\x3\x2\x2\x2\x2389\x2362\x3\x2\x2\x2\x2389\x2374\x3\x2\x2\x2\x2389\x237B"+
		"\x3\x2\x2\x2\x2389\x237E\x3\x2\x2\x2\x2389\x2381\x3\x2\x2\x2\x2389\x2384"+
		"\x3\x2\x2\x2\x2389\x2387\x3\x2\x2\x2\x238A\x2ED\x3\x2\x2\x2\x238B\x238E"+
		"\x5\x3E0\x1F1\x2\x238C\x238E\a\x32C\x2\x2\x238D\x238B\x3\x2\x2\x2\x238D"+
		"\x238C\x3\x2\x2\x2\x238E\x2EF\x3\x2\x2\x2\x238F\x2390\b\x179\x1\x2\x2390"+
		"\x2398\x5\x2F2\x17A\x2\x2391\x2398\x5\x35A\x1AE\x2\x2392\x2398\x5\x2F4"+
		"\x17B\x2\x2393\x2398\x5\x3BA\x1DE\x2\x2394\x2398\x5\x2F8\x17D\x2\x2395"+
		"\x2398\x5\x2F6\x17C\x2\x2396\x2398\x5\x38A\x1C6\x2\x2397\x238F\x3\x2\x2"+
		"\x2\x2397\x2391\x3\x2\x2\x2\x2397\x2392\x3\x2\x2\x2\x2397\x2393\x3\x2"+
		"\x2\x2\x2397\x2394\x3\x2\x2\x2\x2397\x2395\x3\x2\x2\x2\x2397\x2396\x3"+
		"\x2\x2\x2\x2398\x23AC\x3\x2\x2\x2\x2399\x239A\f\a\x2\x2\x239A\x239B\t"+
		"n\x2\x2\x239B\x23AB\x5\x2F0\x179\b\x239C\x239D\f\x6\x2\x2\x239D\x239E"+
		"\to\x2\x2\x239E\x23AB\x5\x2F0\x179\a\x239F\x23A0\f\x5\x2\x2\x23A0\x23A1"+
		"\x5\x3E8\x1F5\x2\x23A1\x23A2\x5\x2F0\x179\x6\x23A2\x23AB\x3\x2\x2\x2\x23A3"+
		"\x23A4\f\x4\x2\x2\x23A4\x23A5\x5\x3EA\x1F6\x2\x23A5\x23A6\x5\x2F0\x179"+
		"\x5\x23A6\x23AB\x3\x2\x2\x2\x23A7\x23A8\f\f\x2\x2\x23A8\x23A9\a\x38\x2"+
		"\x2\x23A9\x23AB\x5\x3E4\x1F3\x2\x23AA\x2399\x3\x2\x2\x2\x23AA\x239C\x3"+
		"\x2\x2\x2\x23AA\x239F\x3\x2\x2\x2\x23AA\x23A3\x3\x2\x2\x2\x23AA\x23A7"+
		"\x3\x2\x2\x2\x23AB\x23AE\x3\x2\x2\x2\x23AC\x23AA\x3\x2\x2\x2\x23AC\x23AD"+
		"\x3\x2\x2\x2\x23AD\x2F1\x3\x2\x2\x2\x23AE\x23AC\x3\x2\x2\x2\x23AF\x23B4"+
		"\a[\x2\x2\x23B0\x23B4\a\xE3\x2\x2\x23B1\x23B4\a\x32C\x2\x2\x23B2\x23B4"+
		"\x5\x3E0\x1F1\x2\x23B3\x23AF\x3\x2\x2\x2\x23B3\x23B0\x3\x2\x2\x2\x23B3"+
		"\x23B1\x3\x2\x2\x2\x23B3\x23B2\x3\x2\x2\x2\x23B4\x2F3\x3\x2\x2\x2\x23B5"+
		"\x23B6\a+\x2\x2\x23B6\x23B8\x5\x2F0\x179\x2\x23B7\x23B9\x5\x368\x1B5\x2"+
		"\x23B8\x23B7\x3\x2\x2\x2\x23B9\x23BA\x3\x2\x2\x2\x23BA\x23B8\x3\x2\x2"+
		"\x2\x23BA\x23BB\x3\x2\x2\x2\x23BB\x23BE\x3\x2\x2\x2\x23BC\x23BD\al\x2"+
		"\x2\x23BD\x23BF\x5\x2F0\x179\x2\x23BE\x23BC\x3\x2\x2\x2\x23BE\x23BF\x3"+
		"\x2\x2\x2\x23BF\x23C0\x3\x2\x2\x2\x23C0\x23C1\an\x2\x2\x23C1\x23CF\x3"+
		"\x2\x2\x2\x23C2\x23C4\a+\x2\x2\x23C3\x23C5\x5\x36A\x1B6\x2\x23C4\x23C3"+
		"\x3\x2\x2\x2\x23C5\x23C6\x3\x2\x2\x2\x23C6\x23C4\x3\x2\x2\x2\x23C6\x23C7"+
		"\x3\x2\x2\x2\x23C7\x23CA\x3\x2\x2\x2\x23C8\x23C9\al\x2\x2\x23C9\x23CB"+
		"\x5\x2F0\x179\x2\x23CA\x23C8\x3\x2\x2\x2\x23CA\x23CB\x3\x2\x2\x2\x23CB"+
		"\x23CC\x3\x2\x2\x2\x23CC\x23CD\an\x2\x2\x23CD\x23CF\x3\x2\x2\x2\x23CE"+
		"\x23B5\x3\x2\x2\x2\x23CE\x23C2\x3\x2\x2\x2\x23CF\x2F5\x3\x2\x2\x2\x23D0"+
		"\x23D1\a\x351\x2\x2\x23D1\x23D5\x5\x2F0\x179\x2\x23D2\x23D3\tp\x2\x2\x23D3"+
		"\x23D5\x5\x2F0\x179\x2\x23D4\x23D0\x3\x2\x2\x2\x23D4\x23D2\x3\x2\x2\x2"+
		"\x23D5\x2F7\x3\x2\x2\x2\x23D6\x23D7\a\x347\x2\x2\x23D7\x23D8\x5\x2F0\x179"+
		"\x2\x23D8\x23D9\a\x348\x2\x2\x23D9\x23DF\x3\x2\x2\x2\x23DA\x23DB\a\x347"+
		"\x2\x2\x23DB\x23DC\x5\x2FC\x17F\x2\x23DC\x23DD\a\x348\x2\x2\x23DD\x23DF"+
		"\x3\x2\x2\x2\x23DE\x23D6\x3\x2\x2\x2\x23DE\x23DA\x3\x2\x2\x2\x23DF\x2F9"+
		"\x3\x2\x2\x2\x23E0\x23E9\a\xE3\x2\x2\x23E1\x23E9\x5\x3E0\x1F1\x2\x23E2"+
		"\x23E9\x5\x35A\x1AE\x2\x23E3\x23E9\a\x32C\x2\x2\x23E4\x23E5\a\x347\x2"+
		"\x2\x23E5\x23E6\x5\x2FA\x17E\x2\x23E6\x23E7\a\x348\x2\x2\x23E7\x23E9\x3"+
		"\x2\x2\x2\x23E8\x23E0\x3\x2\x2\x2\x23E8\x23E1\x3\x2\x2\x2\x23E8\x23E2"+
		"\x3\x2\x2\x2\x23E8\x23E3\x3\x2\x2\x2\x23E8\x23E4\x3\x2\x2\x2\x23E9\x2FB"+
		"\x3\x2\x2\x2\x23EA\x23EB\x5\x1C2\xE2\x2\x23EB\x2FD\x3\x2\x2\x2\x23EC\x23EF"+
		"\a\x17F\x2\x2\x23ED\x23EE\a\x322\x2\x2\x23EE\x23F0\a\x349\x2\x2\x23EF"+
		"\x23ED\x3\x2\x2\x2\x23EF\x23F0\x3\x2\x2\x2\x23F0\x23F1\x3\x2\x2\x2\x23F1"+
		"\x23F6\x5\x300\x181\x2\x23F2\x23F3\a\x349\x2\x2\x23F3\x23F5\x5\x300\x181"+
		"\x2\x23F4\x23F2\x3\x2\x2\x2\x23F5\x23F8\x3\x2\x2\x2\x23F6\x23F4\x3\x2"+
		"\x2\x2\x23F6\x23F7\x3\x2\x2\x2\x23F7\x2407\x3\x2\x2\x2\x23F8\x23F6\x3"+
		"\x2\x2\x2\x23F9\x23FA\a\x17F\x2\x2\x23FA\x23FF\a!\x2\x2\x23FB\x23FC\a"+
		"\x347\x2\x2\x23FC\x23FD\x5\x350\x1A9\x2\x23FD\x23FE\a\x348\x2\x2\x23FE"+
		"\x2400\x3\x2\x2\x2\x23FF\x23FB\x3\x2\x2\x2\x23FF\x2400\x3\x2\x2\x2\x2400"+
		"\x2401\x3\x2\x2\x2\x2401\x2402\a\x10\x2\x2\x2402\x2403\a\x347\x2\x2\x2403"+
		"\x2404\x5\x1C2\xE2\x2\x2404\x2405\a\x348\x2\x2\x2405\x2407\x3\x2\x2\x2"+
		"\x2406\x23EC\x3\x2\x2\x2\x2406\x23F9\x3\x2\x2\x2\x2407\x2FF\x3\x2\x2\x2"+
		"\x2408\x240D\x5\x3E4\x1F3\x2\x2409\x240A\a\x347\x2\x2\x240A\x240B\x5\x3BE"+
		"\x1E0\x2\x240B\x240C\a\x348\x2\x2\x240C\x240E\x3\x2\x2\x2\x240D\x2409"+
		"\x3\x2\x2\x2\x240D\x240E\x3\x2\x2\x2\x240E\x240F\x3\x2\x2\x2\x240F\x2410"+
		"\a\x10\x2\x2\x2410\x2411\a\x347\x2\x2\x2411\x2412\x5\x1C2\xE2\x2\x2412"+
		"\x2413\a\x348\x2\x2\x2413\x301\x3\x2\x2\x2\x2414\x2417\x5\x3BA\x1DE\x2"+
		"\x2415\x2417\a\x32C\x2\x2\x2416\x2414\x3\x2\x2\x2\x2416\x2415\x3\x2\x2"+
		"\x2\x2417\x241A\x3\x2\x2\x2\x2418\x241B\a\x335\x2\x2\x2419\x241B\x5\x3EA"+
		"\x1F6\x2\x241A\x2418\x3\x2\x2\x2\x241A\x2419\x3\x2\x2\x2\x241B\x241C\x3"+
		"\x2\x2\x2\x241C\x2425\x5\x2F0\x179\x2\x241D\x241E\x5\x3E4\x1F3\x2\x241E"+
		"\x241F\a\x342\x2\x2\x241F\x2420\x5\x3E4\x1F3\x2\x2420\x2421\a\x347\x2"+
		"\x2\x2421\x2422\x5\x380\x1C1\x2\x2422\x2423\a\x348\x2\x2\x2423\x2425\x3"+
		"\x2\x2\x2\x2424\x2416\x3\x2\x2\x2\x2424\x241D\x3\x2\x2\x2\x2425\x303\x3"+
		"\x2\x2\x2\x2426\x242B\x5\x306\x184\x2\x2427\x2428\a\x349\x2\x2\x2428\x242A"+
		"\x5\x306\x184\x2\x2429\x2427\x3\x2\x2\x2\x242A\x242D\x3\x2\x2\x2\x242B"+
		"\x2429\x3\x2\x2\x2\x242B\x242C\x3\x2\x2\x2\x242C\x305\x3\x2\x2\x2\x242D"+
		"\x242B\x3\x2\x2\x2\x242E\x2433\x5\x308\x185\x2\x242F\x2430\a\xF1\x2\x2"+
		"\x2430\x2432\x5\x308\x185\x2\x2431\x242F\x3\x2\x2\x2\x2432\x2435\x3\x2"+
		"\x2\x2\x2433\x2431\x3\x2\x2\x2\x2433\x2434\x3\x2\x2\x2\x2434\x307\x3\x2"+
		"\x2\x2\x2435\x2433\x3\x2\x2\x2\x2436\x243B\x5\x30A\x186\x2\x2437\x2438"+
		"\a\v\x2\x2\x2438\x243A\x5\x30A\x186\x2\x2439\x2437\x3\x2\x2\x2\x243A\x243D"+
		"\x3\x2\x2\x2\x243B\x2439\x3\x2\x2\x2\x243B\x243C\x3\x2\x2\x2\x243C\x309"+
		"\x3\x2\x2\x2\x243D\x243B\x3\x2\x2\x2\x243E\x2440\a\xE0\x2\x2\x243F\x243E"+
		"\x3\x2\x2\x2\x243F\x2440\x3\x2\x2\x2\x2440\x2441\x3\x2\x2\x2\x2441\x2442"+
		"\x5\x30C\x187\x2\x2442\x30B\x3\x2\x2\x2\x2443\x2444\ay\x2\x2\x2444\x2445"+
		"\a\x347\x2\x2\x2445\x2446\x5\x2FC\x17F\x2\x2446\x2447\a\x348\x2\x2\x2447"+
		"\x247B\x3\x2\x2\x2\x2448\x2449\x5\x2F0\x179\x2\x2449\x244A\x5\x3E8\x1F5"+
		"\x2\x244A\x244B\x5\x2F0\x179\x2\x244B\x247B\x3\x2\x2\x2\x244C\x244D\x5"+
		"\x2F0\x179\x2\x244D\x244E\x5\x3E8\x1F5\x2\x244E\x244F\tq\x2\x2\x244F\x2450"+
		"\a\x347\x2\x2\x2450\x2451\x5\x2FC\x17F\x2\x2451\x2452\a\x348\x2\x2\x2452"+
		"\x247B\x3\x2\x2\x2\x2453\x2455\x5\x2F0\x179\x2\x2454\x2456\a\xE0\x2\x2"+
		"\x2455\x2454\x3\x2\x2\x2\x2455\x2456\x3\x2\x2\x2\x2456\x2457\x3\x2\x2"+
		"\x2\x2457\x2458\a\x1E\x2\x2\x2458\x2459\x5\x2F0\x179\x2\x2459\x245A\a"+
		"\v\x2\x2\x245A\x245B\x5\x2F0\x179\x2\x245B\x247B\x3\x2\x2\x2\x245C\x245E"+
		"\x5\x2F0\x179\x2\x245D\x245F\a\xE0\x2\x2\x245E\x245D\x3\x2\x2\x2\x245E"+
		"\x245F\x3\x2\x2\x2\x245F\x2460\x3\x2\x2\x2\x2460\x2461\a\x9D\x2\x2\x2461"+
		"\x2464\a\x347\x2\x2\x2462\x2465\x5\x2FC\x17F\x2\x2463\x2465\x5\x380\x1C1"+
		"\x2\x2464\x2462\x3\x2\x2\x2\x2464\x2463\x3\x2\x2\x2\x2465\x2466\x3\x2"+
		"\x2\x2\x2466\x2467\a\x348\x2\x2\x2467\x247B\x3\x2\x2\x2\x2468\x246A\x5"+
		"\x2F0\x179\x2\x2469\x246B\a\xE0\x2\x2\x246A\x2469\x3\x2\x2\x2\x246A\x246B"+
		"\x3\x2\x2\x2\x246B\x246C\x3\x2\x2\x2\x246C\x246D\a\xB6\x2\x2\x246D\x2470"+
		"\x5\x2F0\x179\x2\x246E\x246F\aq\x2\x2\x246F\x2471\x5\x2F0\x179\x2\x2470"+
		"\x246E\x3\x2\x2\x2\x2470\x2471\x3\x2\x2\x2\x2471\x247B\x3\x2\x2\x2\x2472"+
		"\x2473\x5\x2F0\x179\x2\x2473\x2474\a\xAA\x2\x2\x2474\x2475\x5\x3C6\x1E4"+
		"\x2\x2475\x247B\x3\x2\x2\x2\x2476\x2477\a\x347\x2\x2\x2477\x2478\x5\x306"+
		"\x184\x2\x2478\x2479\a\x348\x2\x2\x2479\x247B\x3\x2\x2\x2\x247A\x2443"+
		"\x3\x2\x2\x2\x247A\x2448\x3\x2\x2\x2\x247A\x244C\x3\x2\x2\x2\x247A\x2453"+
		"\x3\x2\x2\x2\x247A\x245C\x3\x2\x2\x2\x247A\x2468\x3\x2\x2\x2\x247A\x2472"+
		"\x3\x2\x2\x2\x247A\x2476\x3\x2\x2\x2\x247B\x30D\x3\x2\x2\x2\x247C\x2482"+
		"\x5\x312\x18A\x2\x247D\x247E\a\x347\x2\x2\x247E\x247F\x5\x30E\x188\x2"+
		"\x247F\x2480\a\x348\x2\x2\x2480\x2482\x3\x2\x2\x2\x2481\x247C\x3\x2\x2"+
		"\x2\x2481\x247D\x3\x2\x2\x2\x2482\x2486\x3\x2\x2\x2\x2483\x2485\x5\x310"+
		"\x189\x2\x2484\x2483\x3\x2\x2\x2\x2485\x2488\x3\x2\x2\x2\x2486\x2484\x3"+
		"\x2\x2\x2\x2486\x2487\x3\x2\x2\x2\x2487\x30F\x3\x2\x2\x2\x2488\x2486\x3"+
		"\x2\x2\x2\x2489\x248B\a\x16A\x2\x2\x248A\x248C\a\x6\x2\x2\x248B\x248A"+
		"\x3\x2\x2\x2\x248B\x248C\x3\x2\x2\x2\x248C\x2490\x3\x2\x2\x2\x248D\x2490"+
		"\av\x2\x2\x248E\x2490\a\xA6\x2\x2\x248F\x2489\x3\x2\x2\x2\x248F\x248D"+
		"\x3\x2\x2\x2\x248F\x248E\x3\x2\x2\x2\x2490\x2496\x3\x2\x2\x2\x2491\x2497"+
		"\x5\x312\x18A\x2\x2492\x2493\a\x347\x2\x2\x2493\x2494\x5\x30E\x188\x2"+
		"\x2494\x2495\a\x348\x2\x2\x2495\x2497\x3\x2\x2\x2\x2496\x2491\x3\x2\x2"+
		"\x2\x2496\x2492\x3\x2\x2\x2\x2497\x311\x3\x2\x2\x2\x2498\x249A\a\x137"+
		"\x2\x2\x2499\x249B\t\x38\x2\x2\x249A\x2499\x3\x2\x2\x2\x249A\x249B\x3"+
		"\x2\x2\x2\x249B\x249D\x3\x2\x2\x2\x249C\x249E\x5\x314\x18B\x2\x249D\x249C"+
		"\x3\x2\x2\x2\x249D\x249E\x3\x2\x2\x2\x249E\x249F\x3\x2\x2\x2\x249F\x24A2"+
		"\x5\x32A\x196\x2\x24A0\x24A1\a\xA7\x2\x2\x24A1\x24A3\x5\x3A6\x1D4\x2\x24A2"+
		"\x24A0\x3\x2\x2\x2\x24A2\x24A3\x3\x2\x2\x2\x24A3\x24A6\x3\x2\x2\x2\x24A4"+
		"\x24A5\a\x8D\x2\x2\x24A5\x24A7\x5\x338\x19D\x2\x24A6\x24A4\x3\x2\x2\x2"+
		"\x24A6\x24A7\x3\x2\x2\x2\x24A7\x24AA\x3\x2\x2\x2\x24A8\x24A9\a\x17C\x2"+
		"\x2\x24A9\x24AB\x5\x306\x184\x2\x24AA\x24A8\x3\x2\x2\x2\x24AA\x24AB\x3"+
		"\x2\x2\x2\x24AB\x24B9\x3\x2\x2\x2\x24AC\x24AD\a\x94\x2\x2\x24AD\x24AF"+
		"\a\'\x2\x2\x24AE\x24B0\a\x6\x2\x2\x24AF\x24AE\x3\x2\x2\x2\x24AF\x24B0"+
		"\x3\x2\x2\x2\x24B0\x24B1\x3\x2\x2\x2\x24B1\x24B6\x5\x322\x192\x2\x24B2"+
		"\x24B3\a\x349\x2\x2\x24B3\x24B5\x5\x322\x192\x2\x24B4\x24B2\x3\x2\x2\x2"+
		"\x24B5\x24B8\x3\x2\x2\x2\x24B6\x24B4\x3\x2\x2\x2\x24B6\x24B7\x3\x2\x2"+
		"\x2\x24B7\x24BA\x3\x2\x2\x2\x24B8\x24B6\x3\x2\x2\x2\x24B9\x24AC\x3\x2"+
		"\x2\x2\x24B9\x24BA\x3\x2\x2\x2\x24BA\x24BD\x3\x2\x2\x2\x24BB\x24BC\a\x95"+
		"\x2\x2\x24BC\x24BE\x5\x306\x184\x2\x24BD\x24BB\x3\x2\x2\x2\x24BD\x24BE"+
		"\x3\x2\x2\x2\x24BE\x313\x3\x2\x2\x2\x24BF\x24C2\a\x161\x2\x2\x24C0\x24C3"+
		"\x5\x316\x18C\x2\x24C1\x24C3\x5\x318\x18D\x2\x24C2\x24C0\x3\x2\x2\x2\x24C2"+
		"\x24C1\x3\x2\x2\x2\x24C3\x24C6\x3\x2\x2\x2\x24C4\x24C5\a\x17F\x2\x2\x24C5"+
		"\x24C7\a\x2FE\x2\x2\x24C6\x24C4\x3\x2\x2\x2\x24C6\x24C7\x3\x2\x2\x2\x24C7"+
		"\x315\x3\x2\x2\x2\x24C8\x24C9\tr\x2\x2\x24C9\x24D0\a\xF9\x2\x2\x24CA\x24CB"+
		"\a\x347\x2\x2\x24CB\x24CC\x5\x2F0\x179\x2\x24CC\x24CD\a\x348\x2\x2\x24CD"+
		"\x24CE\a\xF9\x2\x2\x24CE\x24D0\x3\x2\x2\x2\x24CF\x24C8\x3\x2\x2\x2\x24CF"+
		"\x24CA\x3\x2\x2\x2\x24D0\x317\x3\x2\x2\x2\x24D1\x24D7\a\x32D\x2\x2\x24D2"+
		"\x24D3\a\x347\x2\x2\x24D3\x24D4\x5\x2F0\x179\x2\x24D4\x24D5\a\x348\x2"+
		"\x2\x24D5\x24D7\x3\x2\x2\x2\x24D6\x24D1\x3\x2\x2\x2\x24D6\x24D2\x3\x2"+
		"\x2\x2\x24D7\x319\x3\x2\x2\x2\x24D8\x24D9\a\xF2\x2\x2\x24D9\x24DA\a\'"+
		"\x2\x2\x24DA\x24DF\x5\x320\x191\x2\x24DB\x24DC\a\x349\x2\x2\x24DC\x24DE"+
		"\x5\x320\x191\x2\x24DD\x24DB\x3\x2\x2\x2\x24DE\x24E1\x3\x2\x2\x2\x24DF"+
		"\x24DD\x3\x2\x2\x2\x24DF\x24E0\x3\x2\x2\x2\x24E0\x24ED\x3\x2\x2\x2\x24E1"+
		"\x24DF\x3\x2\x2\x2\x24E2\x24E3\a\x27D\x2\x2\x24E3\x24E4\x5\x2F0\x179\x2"+
		"\x24E4\x24EB\ts\x2\x2\x24E5\x24E6\a\x82\x2\x2\x24E6\x24E7\tt\x2\x2\x24E7"+
		"\x24E8\x5\x2F0\x179\x2\x24E8\x24E9\ts\x2\x2\x24E9\x24EA\a\x280\x2\x2\x24EA"+
		"\x24EC\x3\x2\x2\x2\x24EB\x24E5\x3\x2\x2\x2\x24EB\x24EC\x3\x2\x2\x2\x24EC"+
		"\x24EE\x3\x2\x2\x2\x24ED\x24E2\x3\x2\x2\x2\x24ED\x24EE\x3\x2\x2\x2\x24EE"+
		"\x31B\x3\x2\x2\x2\x24EF\x24F0\a\x87\x2\x2\x24F0\x2548\a#\x2\x2\x24F1\x24F2"+
		"\a\x87\x2\x2\x24F2\x24FA\a\x320\x2\x2\x24F3\x24F7\a\x10E\x2\x2\x24F4\x24F5"+
		"\a\x347\x2\x2\x24F5\x24F6\a\x331\x2\x2\x24F6\x24F8\a\x348\x2\x2\x24F7"+
		"\x24F4\x3\x2\x2\x2\x24F7\x24F8\x3\x2\x2\x2\x24F8\x24FB\x3\x2\x2\x2\x24F9"+
		"\x24FB\a\x19E\x2\x2\x24FA\x24F3\x3\x2\x2\x2\x24FA\x24F9\x3\x2\x2\x2\x24FB"+
		"\x24FF\x3\x2\x2\x2\x24FC\x24FE\x5\x31E\x190\x2\x24FD\x24FC\x3\x2\x2\x2"+
		"\x24FE\x2501\x3\x2\x2\x2\x24FF\x24FD\x3\x2\x2\x2\x24FF\x2500\x3\x2\x2"+
		"\x2\x2500\x250C\x3\x2\x2\x2\x2501\x24FF\x3\x2\x2\x2\x2502\x250A\a\x349"+
		"\x2\x2\x2503\x250B\a\x321\x2\x2\x2504\x2508\a\x323\x2\x2\x2505\x2506\a"+
		"\x347\x2\x2\x2506\x2507\a\x331\x2\x2\x2507\x2509\a\x348\x2\x2\x2508\x2505"+
		"\x3\x2\x2\x2\x2508\x2509\x3\x2\x2\x2\x2509\x250B\x3\x2\x2\x2\x250A\x2503"+
		"\x3\x2\x2\x2\x250A\x2504\x3\x2\x2\x2\x250B\x250D\x3\x2\x2\x2\x250C\x2502"+
		"\x3\x2\x2\x2\x250C\x250D\x3\x2\x2\x2\x250D\x2511\x3\x2\x2\x2\x250E\x250F"+
		"\a\x349\x2\x2\x250F\x2510\a\x1EF\x2\x2\x2510\x2512\tu\x2\x2\x2511\x250E"+
		"\x3\x2\x2\x2\x2511\x2512\x3\x2\x2\x2\x2512\x2548\x3\x2\x2\x2\x2513\x2514"+
		"\a\x87\x2\x2\x2514\x2515\a\x320\x2\x2\x2515\x2519\a\x1FD\x2\x2\x2516\x2518"+
		"\x5\x31E\x190\x2\x2517\x2516\x3\x2\x2\x2\x2518\x251B\x3\x2\x2\x2\x2519"+
		"\x2517\x3\x2\x2\x2\x2519\x251A\x3\x2\x2\x2\x251A\x251E\x3\x2\x2\x2\x251B"+
		"\x2519\x3\x2\x2\x2\x251C\x251D\a\x349\x2\x2\x251D\x251F\a\x321\x2\x2\x251E"+
		"\x251C\x3\x2\x2\x2\x251E\x251F\x3\x2\x2\x2\x251F\x2548\x3\x2\x2\x2\x2520"+
		"\x2521\a\x87\x2\x2\x2521\x2522\a\x320\x2\x2\x2522\x2526\a\x28D\x2\x2\x2523"+
		"\x2524\a\x347\x2\x2\x2524\x2525\a\x331\x2\x2\x2525\x2527\a\x348\x2\x2"+
		"\x2526\x2523\x3\x2\x2\x2\x2526\x2527\x3\x2\x2\x2\x2527\x252B\x3\x2\x2"+
		"\x2\x2528\x252A\x5\x31E\x190\x2\x2529\x2528\x3\x2\x2\x2\x252A\x252D\x3"+
		"\x2\x2\x2\x252B\x2529\x3\x2\x2\x2\x252B\x252C\x3\x2\x2\x2\x252C\x2531"+
		"\x3\x2\x2\x2\x252D\x252B\x3\x2\x2\x2\x252E\x252F\a\x349\x2\x2\x252F\x2530"+
		"\a\x1EF\x2\x2\x2530\x2532\tu\x2\x2\x2531\x252E\x3\x2\x2\x2\x2531\x2532"+
		"\x3\x2\x2\x2\x2532\x2548\x3\x2\x2\x2\x2533\x2534\a\x87\x2\x2\x2534\x2535"+
		"\a\x231\x2\x2\x2535\x253D\tv\x2\x2\x2536\x2537\a\x349\x2\x2\x2537\x253B"+
		"\a\x2C1\x2\x2\x2538\x2539\a\x347\x2\x2\x2539\x253A\a\x331\x2\x2\x253A"+
		"\x253C\a\x348\x2\x2\x253B\x2538\x3\x2\x2\x2\x253B\x253C\x3\x2\x2\x2\x253C"+
		"\x253E\x3\x2\x2\x2\x253D\x2536\x3\x2\x2\x2\x253D\x253E\x3\x2\x2\x2\x253E"+
		"\x2541\x3\x2\x2\x2\x253F\x2540\a\x349\x2\x2\x2540\x2542\a\x227\x2\x2\x2541"+
		"\x253F\x3\x2\x2\x2\x2541\x2542\x3\x2\x2\x2\x2542\x2545\x3\x2\x2\x2\x2543"+
		"\x2544\a\x349\x2\x2\x2544\x2546\a\x31D\x2\x2\x2545\x2543\x3\x2\x2\x2\x2545"+
		"\x2546\x3\x2\x2\x2\x2546\x2548\x3\x2\x2\x2\x2547\x24EF\x3\x2\x2\x2\x2547"+
		"\x24F1\x3\x2\x2\x2\x2547\x2513\x3\x2\x2\x2\x2547\x2520\x3\x2\x2\x2\x2547"+
		"\x2533\x3\x2\x2\x2\x2548\x31D\x3\x2\x2\x2\x2549\x2552\a\x349\x2\x2\x254A"+
		"\x2553\a\x1AA\x2\x2\x254B\x2553\a\x30B\x2\x2\x254C\x2550\a\x2C1\x2\x2"+
		"\x254D\x254E\a\x347\x2\x2\x254E\x254F\a\x331\x2\x2\x254F\x2551\a\x348"+
		"\x2\x2\x2550\x254D\x3\x2\x2\x2\x2550\x2551\x3\x2\x2\x2\x2551\x2553\x3"+
		"\x2\x2\x2\x2552\x254A\x3\x2\x2\x2\x2552\x254B\x3\x2\x2\x2\x2552\x254C"+
		"\x3\x2\x2\x2\x2553\x31F\x3\x2\x2\x2\x2554\x2556\x5\x2F0\x179\x2\x2555"+
		"\x2557\tw\x2\x2\x2556\x2555\x3\x2\x2\x2\x2556\x2557\x3\x2\x2\x2\x2557"+
		"\x321\x3\x2\x2\x2\x2558\x2559\x5\x2F0\x179\x2\x2559\x323\x3\x2\x2\x2\x255A"+
		"\x255B\a\xF0\x2\x2\x255B\x255C\a\x347\x2\x2\x255C\x2561\x5\x326\x194\x2"+
		"\x255D\x255E\a\x349\x2\x2\x255E\x2560\x5\x326\x194\x2\x255F\x255D\x3\x2"+
		"\x2\x2\x2560\x2563\x3\x2\x2\x2\x2561\x255F\x3\x2\x2\x2\x2561\x2562\x3"+
		"\x2\x2\x2\x2562\x2564\x3\x2\x2\x2\x2563\x2561\x3\x2\x2\x2\x2564\x2565"+
		"\a\x348\x2\x2\x2565\x325\x3\x2\x2\x2\x2566\x2567\a\x202\x2\x2\x2567\x2594"+
		"\a\x32D\x2\x2\x2568\x2569\tx\x2\x2\x2569\x2594\a\x94\x2\x2\x256A\x256B"+
		"\ty\x2\x2\x256B\x2594\a\x16A\x2\x2\x256C\x256D\tz\x2\x2\x256D\x2594\a"+
		"\xAC\x2\x2\x256E\x256F\a\x1FB\x2\x2\x256F\x2594\a\x31A\x2\x2\x2570\x2571"+
		"\a\x20C\x2\x2\x2571\x2594\a\xF2\x2\x2\x2572\x2594\a\x223\x2\x2\x2573\x2574"+
		"\a\x233\x2\x2\x2574\x2594\a\xFF\x2\x2\x2575\x2576\a\x234\x2\x2\x2576\x2594"+
		"\a\xFF\x2\x2\x2577\x2578\a\x254\x2\x2\x2578\x2594\a\x32D\x2\x2\x2579\x257A"+
		"\a\x255\x2\x2\x257A\x2594\a\x32D\x2\x2\x257B\x257C\a\x283\x2\x2\x257C"+
		"\x257D\a\x87\x2\x2\x257D\x257E\a\x347\x2\x2\x257E\x2583\x5\x328\x195\x2"+
		"\x257F\x2580\a\x349\x2\x2\x2580\x2582\x5\x328\x195\x2\x2581\x257F\x3\x2"+
		"\x2\x2\x2582\x2585\x3\x2\x2\x2\x2583\x2581\x3\x2\x2\x2\x2583\x2584\x3"+
		"\x2\x2\x2\x2584\x2586\x3\x2\x2\x2\x2585\x2583\x3\x2\x2\x2\x2586\x2587"+
		"\a\x348\x2\x2\x2587\x2594\x3\x2\x2\x2\x2588\x2589\a\x283\x2\x2\x2589\x258A"+
		"\a\x87\x2\x2\x258A\x2594\a\x310\x2\x2\x258B\x258C\a\x289\x2\x2\x258C\x2594"+
		"\tP\x2\x2\x258D\x2594\a\x2AD\x2\x2\x258E\x258F\a\x2C0\x2\x2\x258F\x2594"+
		"\a\xFF\x2\x2\x2590\x2591\a\x172\x2\x2\x2591\x2592\a\xFF\x2\x2\x2592\x2594"+
		"\a\x331\x2\x2\x2593\x2566\x3\x2\x2\x2\x2593\x2568\x3\x2\x2\x2\x2593\x256A"+
		"\x3\x2\x2\x2\x2593\x256C\x3\x2\x2\x2\x2593\x256E\x3\x2\x2\x2\x2593\x2570"+
		"\x3\x2\x2\x2\x2593\x2572\x3\x2\x2\x2\x2593\x2573\x3\x2\x2\x2\x2593\x2575"+
		"\x3\x2\x2\x2\x2593\x2577\x3\x2\x2\x2\x2593\x2579\x3\x2\x2\x2\x2593\x257B"+
		"\x3\x2\x2\x2\x2593\x2588\x3\x2\x2\x2\x2593\x258B\x3\x2\x2\x2\x2593\x258D"+
		"\x3\x2\x2\x2\x2593\x258E\x3\x2\x2\x2\x2593\x2590\x3\x2\x2\x2\x2594\x327"+
		"\x3\x2\x2\x2\x2595\x259C\a\x32C\x2\x2\x2596\x259D\a\x310\x2\x2\x2597\x259A"+
		"\a\x335\x2\x2\x2598\x259B\x5\x3E0\x1F1\x2\x2599\x259B\a\xE3\x2\x2\x259A"+
		"\x2598\x3\x2\x2\x2\x259A\x2599\x3\x2\x2\x2\x259B\x259D\x3\x2\x2\x2\x259C"+
		"\x2596\x3\x2\x2\x2\x259C\x2597\x3\x2\x2\x2\x259D\x329\x3\x2\x2\x2\x259E"+
		"\x25A3\x5\x336\x19C\x2\x259F\x25A0\a\x349\x2\x2\x25A0\x25A2\x5\x336\x19C"+
		"\x2\x25A1\x259F\x3\x2\x2\x2\x25A2\x25A5\x3\x2\x2\x2\x25A3\x25A1\x3\x2"+
		"\x2\x2\x25A3\x25A4\x3\x2\x2\x2\x25A4\x32B\x3\x2\x2\x2\x25A5\x25A3\x3\x2"+
		"\x2\x2\x25A6\x25A7\a\x347\x2\x2\x25A7\x25AC\x5\x28C\x147\x2\x25A8\x25A9"+
		"\a\x349\x2\x2\x25A9\x25AB\x5\x28C\x147\x2\x25AA\x25A8\x3\x2\x2\x2\x25AB"+
		"\x25AE\x3\x2\x2\x2\x25AC\x25AA\x3\x2\x2\x2\x25AC\x25AD\x3\x2\x2\x2\x25AD"+
		"\x25AF\x3\x2\x2\x2\x25AE\x25AC\x3\x2\x2\x2\x25AF\x25B0\a\x348\x2\x2\x25B0"+
		"\x32D\x3\x2\x2\x2\x25B1\x25B2\x5\x3A6\x1D4\x2\x25B2\x25B3\a\x342\x2\x2"+
		"\x25B3\x25B5\x3\x2\x2\x2\x25B4\x25B1\x3\x2\x2\x2\x25B4\x25B5\x3\x2\x2"+
		"\x2\x25B5\x25B6\x3\x2\x2\x2\x25B6\x25B7\a\x34C\x2\x2\x25B7\x32F\x3\x2"+
		"\x2\x2\x25B8\x25B9\x5\x3A6\x1D4\x2\x25B9\x25BA\a\x342\x2\x2\x25BA\x25BC"+
		"\x3\x2\x2\x2\x25BB\x25B8\x3\x2\x2\x2\x25BB\x25BC\x3\x2\x2\x2\x25BC\x25C2"+
		"\x3\x2\x2\x2\x25BD\x25C3\x5\x3E4\x1F3\x2\x25BE\x25BF\a\x346\x2\x2\x25BF"+
		"\x25C3\a\x98\x2\x2\x25C0\x25C1\a\x346\x2\x2\x25C1\x25C3\a\x2C5\x2\x2\x25C2"+
		"\x25BD\x3\x2\x2\x2\x25C2\x25BE\x3\x2\x2\x2\x25C2\x25C0\x3\x2\x2\x2\x25C3"+
		"\x25C6\x3\x2\x2\x2\x25C4\x25C6\a\xE3\x2\x2\x25C5\x25BB\x3\x2\x2\x2\x25C5"+
		"\x25C4\x3\x2\x2\x2\x25C6\x25C8\x3\x2\x2\x2\x25C7\x25C9\x5\x36C\x1B7\x2"+
		"\x25C8\x25C7\x3\x2\x2\x2\x25C8\x25C9\x3\x2\x2\x2\x25C9\x331\x3\x2\x2\x2"+
		"\x25CA\x25CB\x5\x3E4\x1F3\x2\x25CB\x25CC\a\x342\x2\x2\x25CC\x25CD\x5\x3E4"+
		"\x1F3\x2\x25CD\x25CF\x5\x32C\x197\x2\x25CE\x25D0\x5\x36C\x1B7\x2\x25CF"+
		"\x25CE\x3\x2\x2\x2\x25CF\x25D0\x3\x2\x2\x2\x25D0\x25DC\x3\x2\x2\x2\x25D1"+
		"\x25D2\x5\x3E4\x1F3\x2\x25D2\x25D3\a\x34B\x2\x2\x25D3\x25D4\a\x34B\x2"+
		"\x2\x25D4\x25D6\x5\x3E4\x1F3\x2\x25D5\x25D7\x5\x32C\x197\x2\x25D6\x25D5"+
		"\x3\x2\x2\x2\x25D6\x25D7\x3\x2\x2\x2\x25D7\x25D9\x3\x2\x2\x2\x25D8\x25DA"+
		"\x5\x36C\x1B7\x2\x25D9\x25D8\x3\x2\x2\x2\x25D9\x25DA\x3\x2\x2\x2\x25DA"+
		"\x25DC\x3\x2\x2\x2\x25DB\x25CA\x3\x2\x2\x2\x25DB\x25D1\x3\x2\x2\x2\x25DC"+
		"\x333\x3\x2\x2\x2\x25DD\x25DE\x5\x37C\x1BF\x2\x25DE\x25DF\a\x335\x2\x2"+
		"\x25DF\x25E0\x5\x2F0\x179\x2\x25E0\x25E6\x3\x2\x2\x2\x25E1\x25E3\x5\x2F0"+
		"\x179\x2\x25E2\x25E4\x5\x36C\x1B7\x2\x25E3\x25E2\x3\x2\x2\x2\x25E3\x25E4"+
		"\x3\x2\x2\x2\x25E4\x25E6\x3\x2\x2\x2\x25E5\x25DD\x3\x2\x2\x2\x25E5\x25E1"+
		"\x3\x2\x2\x2\x25E6\x335\x3\x2\x2\x2\x25E7\x25EC\x5\x32E\x198\x2\x25E8"+
		"\x25EC\x5\x330\x199\x2\x25E9\x25EC\x5\x332\x19A\x2\x25EA\x25EC\x5\x334"+
		"\x19B\x2\x25EB\x25E7\x3\x2\x2\x2\x25EB\x25E8\x3\x2\x2\x2\x25EB\x25E9\x3"+
		"\x2\x2\x2\x25EB\x25EA\x3\x2\x2\x2\x25EC\x337\x3\x2\x2\x2\x25ED\x25F2\x5"+
		"\x33A\x19E\x2\x25EE\x25EF\a\x349\x2\x2\x25EF\x25F1\x5\x33A\x19E\x2\x25F0"+
		"\x25EE\x3\x2\x2\x2\x25F1\x25F4\x3\x2\x2\x2\x25F2\x25F0\x3\x2\x2\x2\x25F2"+
		"\x25F3\x3\x2\x2\x2\x25F3\x339\x3\x2\x2\x2\x25F4\x25F2\x3\x2\x2\x2\x25F5"+
		"\x25FB\x5\x33C\x19F\x2\x25F6\x25F7\a\x347\x2\x2\x25F7\x25F8\x5\x33C\x19F"+
		"\x2\x25F8\x25F9\a\x348\x2\x2\x25F9\x25FB\x3\x2\x2\x2\x25FA\x25F5\x3\x2"+
		"\x2\x2\x25FA\x25F6\x3\x2\x2\x2\x25FB\x33B\x3\x2\x2\x2\x25FC\x2600\x5\x33E"+
		"\x1A0\x2\x25FD\x25FF\x5\x34A\x1A6\x2\x25FE\x25FD\x3\x2\x2\x2\x25FF\x2602"+
		"\x3\x2\x2\x2\x2600\x25FE\x3\x2\x2\x2\x2600\x2601\x3\x2\x2\x2\x2601\x33D"+
		"\x3\x2\x2\x2\x2602\x2600\x3\x2\x2\x2\x2603\x2605\x5\x3A6\x1D4\x2\x2604"+
		"\x2606\x5\x36E\x1B8\x2\x2605\x2604\x3\x2\x2\x2\x2605\x2606\x3\x2\x2\x2"+
		"\x2606\x2608\x3\x2\x2\x2\x2607\x2609\x5\x340\x1A1\x2\x2608\x2607\x3\x2"+
		"\x2\x2\x2608\x2609\x3\x2\x2\x2\x2609\x260B\x3\x2\x2\x2\x260A\x260C\x5"+
		"\x372\x1BA\x2\x260B\x260A\x3\x2\x2\x2\x260B\x260C\x3\x2\x2\x2\x260C\x2637"+
		"\x3\x2\x2\x2\x260D\x260F\x5\x354\x1AB\x2\x260E\x2610\x5\x36E\x1B8\x2\x260F"+
		"\x260E\x3\x2\x2\x2\x260F\x2610\x3\x2\x2\x2\x2610\x2637\x3\x2\x2\x2\x2611"+
		"\x2616\x5\x358\x1AD\x2\x2612\x2614\x5\x36E\x1B8\x2\x2613\x2615\x5\x37A"+
		"\x1BE\x2\x2614\x2613\x3\x2\x2\x2\x2614\x2615\x3\x2\x2\x2\x2615\x2617\x3"+
		"\x2\x2\x2\x2616\x2612\x3\x2\x2\x2\x2616\x2617\x3\x2\x2\x2\x2617\x2637"+
		"\x3\x2\x2\x2\x2618\x2619\x5\x348\x1A5\x2\x2619\x261A\x5\x36E\x1B8\x2\x261A"+
		"\x2637\x3\x2\x2\x2\x261B\x2620\x5\x35A\x1AE\x2\x261C\x261E\x5\x36E\x1B8"+
		"\x2\x261D\x261F\x5\x37A\x1BE\x2\x261E\x261D\x3\x2\x2\x2\x261E\x261F\x3"+
		"\x2\x2\x2\x261F\x2621\x3\x2\x2\x2\x2620\x261C\x3\x2\x2\x2\x2620\x2621"+
		"\x3\x2\x2\x2\x2621\x2637\x3\x2\x2\x2\x2622\x2624\a\x32C\x2\x2\x2623\x2625"+
		"\x5\x36E\x1B8\x2\x2624\x2623\x3\x2\x2\x2\x2624\x2625\x3\x2\x2\x2\x2625"+
		"\x2637\x3\x2\x2\x2\x2626\x2627\a\x32C\x2\x2\x2627\x2628\a\x342\x2\x2\x2628"+
		"\x262D\x5\x35A\x1AE\x2\x2629\x262B\x5\x36E\x1B8\x2\x262A\x262C\x5\x37A"+
		"\x1BE\x2\x262B\x262A\x3\x2\x2\x2\x262B\x262C\x3\x2\x2\x2\x262C\x262E\x3"+
		"\x2\x2\x2\x262D\x2629\x3\x2\x2\x2\x262D\x262E\x3\x2\x2\x2\x262E\x2637"+
		"\x3\x2\x2\x2\x262F\x2637\x5\x342\x1A2\x2\x2630\x2631\a\x34B\x2\x2\x2631"+
		"\x2632\a\x34B\x2\x2\x2632\x2634\x5\x35A\x1AE\x2\x2633\x2635\x5\x36E\x1B8"+
		"\x2\x2634\x2633\x3\x2\x2\x2\x2634\x2635\x3\x2\x2\x2\x2635\x2637\x3\x2"+
		"\x2\x2\x2636\x2603\x3\x2\x2\x2\x2636\x260D\x3\x2\x2\x2\x2636\x2611\x3"+
		"\x2\x2\x2\x2636\x2618\x3\x2\x2\x2\x2636\x261B\x3\x2\x2\x2\x2636\x2622"+
		"\x3\x2\x2\x2\x2636\x2626\x3\x2\x2\x2\x2636\x262F\x3\x2\x2\x2\x2636\x2630"+
		"\x3\x2\x2\x2\x2637\x33F\x3\x2\x2\x2\x2638\x263A\a\x15A\x2\x2\x2639\x263B"+
		"\a\x2F8\x2\x2\x263A\x2639\x3\x2\x2\x2\x263A\x263B\x3\x2\x2\x2\x263B\x263C"+
		"\x3\x2\x2\x2\x263C\x263D\a\x347\x2\x2\x263D\x263E\a\x32D\x2\x2\x263E\x263F"+
		"\t?\x2\x2\x263F\x2644\a\x348\x2\x2\x2640\x2641\a\x2B5\x2\x2\x2641\x2642"+
		"\a\x347\x2\x2\x2642\x2643\a\x32D\x2\x2\x2643\x2645\a\x348\x2\x2\x2644"+
		"\x2640\x3\x2\x2\x2\x2644\x2645\x3\x2\x2\x2\x2645\x341\x3\x2\x2\x2\x2646"+
		"\x2647\a\xEF\x2\x2\x2647\x2648\a\x347\x2\x2\x2648\x2649\x5\x2F0\x179\x2"+
		"\x2649\x264A\a\x349\x2\x2\x264A\x264D\x5\x2F0\x179\x2\x264B\x264C\a\x349"+
		"\x2\x2\x264C\x264E\x5\x2F0\x179\x2\x264D\x264B\x3\x2\x2\x2\x264D\x264E"+
		"\x3\x2\x2\x2\x264E\x264F\x3\x2\x2\x2\x264F\x2655\a\x348\x2\x2\x2650\x2651"+
		"\a\x17F\x2\x2\x2651\x2652\a\x347\x2\x2\x2652\x2653\x5\x344\x1A3\x2\x2653"+
		"\x2654\a\x348\x2\x2\x2654\x2656\x3\x2\x2\x2\x2655\x2650\x3\x2\x2\x2\x2655"+
		"\x2656\x3\x2\x2\x2\x2656\x343\x3\x2\x2\x2\x2657\x265C\x5\x346\x1A4\x2"+
		"\x2658\x2659\a\x349\x2\x2\x2659\x265B\x5\x346\x1A4\x2\x265A\x2658\x3\x2"+
		"\x2\x2\x265B\x265E\x3\x2\x2\x2\x265C\x265A\x3\x2\x2\x2\x265C\x265D\x3"+
		"\x2\x2\x2\x265D\x345\x3\x2\x2\x2\x265E\x265C\x3\x2\x2\x2\x265F\x2660\a"+
		"\x32E\x2\x2\x2660\x2662\x5\x3DC\x1EF\x2\x2661\x2663\a\x331\x2\x2\x2662"+
		"\x2661\x3\x2\x2\x2\x2662\x2663\x3\x2\x2\x2\x2663\x347\x3\x2\x2\x2\x2664"+
		"\x2665\a-\x2\x2\x2665\x2666\a\x347\x2\x2\x2666\x2667\a.\x2\x2\x2667\x2668"+
		"\x5\x3A6\x1D4\x2\x2668\x2669\a\x349\x2\x2\x2669\x266A\t{\x2\x2\x266A\x266B"+
		"\a\x348\x2\x2\x266B\x349\x3\x2\x2\x2\x266C\x266E\a\xA3\x2\x2\x266D\x266C"+
		"\x3\x2\x2\x2\x266D\x266E\x3\x2\x2\x2\x266E\x2674\x3\x2\x2\x2\x266F\x2671"+
		"\t|\x2\x2\x2670\x2672\a\xF3\x2\x2\x2671\x2670\x3\x2\x2\x2\x2671\x2672"+
		"\x3\x2\x2\x2\x2672\x2674\x3\x2\x2\x2\x2673\x266D\x3\x2\x2\x2\x2673\x266F"+
		"\x3\x2\x2\x2\x2674\x2676\x3\x2\x2\x2\x2675\x2677\t}\x2\x2\x2676\x2675"+
		"\x3\x2\x2\x2\x2676\x2677\x3\x2\x2\x2\x2677\x2678\x3\x2\x2\x2\x2678\x2679"+
		"\a\xAC\x2\x2\x2679\x267A\x5\x33A\x19E\x2\x267A\x267B\a\xE9\x2\x2\x267B"+
		"\x267C\x5\x306\x184\x2\x267C\x268F\x3\x2\x2\x2\x267D\x267E\aL\x2\x2\x267E"+
		"\x267F\a\xAC\x2\x2\x267F\x268F\x5\x33A\x19E\x2\x2680\x2681\aL\x2\x2\x2681"+
		"\x2682\a\x199\x2\x2\x2682\x268F\x5\x33A\x19E\x2\x2683\x2684\a\xF3\x2\x2"+
		"\x2684\x2685\a\x199\x2\x2\x2685\x268F\x5\x33A\x19E\x2\x2686\x2687\a\xFE"+
		"\x2\x2\x2687\x2688\x5\x34C\x1A7\x2\x2688\x2689\x5\x36E\x1B8\x2\x2689\x268F"+
		"\x3\x2\x2\x2\x268A\x268B\a\x16D\x2\x2\x268B\x268C\x5\x34E\x1A8\x2\x268C"+
		"\x268D\x5\x36E\x1B8\x2\x268D\x268F\x3\x2\x2\x2\x268E\x2673\x3\x2\x2\x2"+
		"\x268E\x267D\x3\x2\x2\x2\x268E\x2680\x3\x2\x2\x2\x268E\x2683\x3\x2\x2"+
		"\x2\x268E\x2686\x3\x2\x2\x2\x268E\x268A\x3\x2\x2\x2\x268F\x34B\x3\x2\x2"+
		"\x2\x2690\x2691\a\x347\x2\x2\x2691\x2692\x5\x384\x1C3\x2\x2692\x2693\a"+
		"\x87\x2\x2\x2693\x2694\x5\x3BA\x1DE\x2\x2694\x2695\a\x9D\x2\x2\x2695\x2696"+
		"\x5\x37A\x1BE\x2\x2696\x2697\a\x348\x2\x2\x2697\x34D\x3\x2\x2\x2\x2698"+
		"\x2699\a\x347\x2\x2\x2699\x269A\x5\x2F0\x179\x2\x269A\x269B\a\x87\x2\x2"+
		"\x269B\x269C\x5\x3BA\x1DE\x2\x269C\x269D\a\x9D\x2\x2\x269D\x269E\a\x347"+
		"\x2\x2\x269E\x269F\x5\x350\x1A9\x2\x269F\x26A0\a\x348\x2\x2\x26A0\x26A1"+
		"\a\x348\x2\x2\x26A1\x34F\x3\x2\x2\x2\x26A2\x26A7\x5\x3BA\x1DE\x2\x26A3"+
		"\x26A4\a\x349\x2\x2\x26A4\x26A6\x5\x3BA\x1DE\x2\x26A5\x26A3\x3\x2\x2\x2"+
		"\x26A6\x26A9\x3\x2\x2\x2\x26A7\x26A5\x3\x2\x2\x2\x26A7\x26A8\x3\x2\x2"+
		"\x2\x26A8\x351\x3\x2\x2\x2\x26A9\x26A7\x3\x2\x2\x2\x26AA\x26AC\x5\x3A6"+
		"\x1D4\x2\x26AB\x26AD\x5\x372\x1BA\x2\x26AC\x26AB\x3\x2\x2\x2\x26AC\x26AD"+
		"\x3\x2\x2\x2\x26AD\x353\x3\x2\x2\x2\x26AE\x26AF\a\xEE\x2\x2\x26AF\x26B0"+
		"\a\x347\x2\x2\x26B0\x26B1\a\x331\x2\x2\x26B1\x26B2\a\x349\x2\x2\x26B2"+
		"\x26B3\a\x331\x2\x2\x26B3\x26B4\a\x349\x2\x2\x26B4\x26B5\a\x331\x2\x2"+
		"\x26B5\x26C9\a\x348\x2\x2\x26B6\x26B7\a\xEE\x2\x2\x26B7\x26B8\a\x347\x2"+
		"\x2\x26B8\x26B9\a&\x2\x2\x26B9\x26BA\a\x331\x2\x2\x26BA\x26C4\a\x349\x2"+
		"\x2\x26BB\x26C0\x5\x356\x1AC\x2\x26BC\x26BD\a\x349\x2\x2\x26BD\x26BF\x5"+
		"\x356\x1AC\x2\x26BE\x26BC\x3\x2\x2\x2\x26BF\x26C2\x3\x2\x2\x2\x26C0\x26BE"+
		"\x3\x2\x2\x2\x26C0\x26C1\x3\x2\x2\x2\x26C1\x26C5\x3\x2\x2\x2\x26C2\x26C0"+
		"\x3\x2\x2\x2\x26C3\x26C5\x5\x3E4\x1F3\x2\x26C4\x26BB\x3\x2\x2\x2\x26C4"+
		"\x26C3\x3\x2\x2\x2\x26C5\x26C6\x3\x2\x2\x2\x26C6\x26C7\a\x348\x2\x2\x26C7"+
		"\x26C9\x3\x2\x2\x2\x26C8\x26AE\x3\x2\x2\x2\x26C8\x26B6\x3\x2\x2\x2\x26C9"+
		"\x355\x3\x2\x2\x2\x26CA\x26CB\x5\x3E4\x1F3\x2\x26CB\x26CC\a\x335\x2\x2"+
		"\x26CC\x26CD\t\x18\x2\x2\x26CD\x357\x3\x2\x2\x2\x26CE\x26D9\x5\x2FC\x17F"+
		"\x2\x26CF\x26D0\a\x347\x2\x2\x26D0\x26D1\x5\x2FC\x17F\x2\x26D1\x26D2\a"+
		"\x348\x2\x2\x26D2\x26D9\x3\x2\x2\x2\x26D3\x26D9\x5\x37E\x1C0\x2\x26D4"+
		"\x26D5\a\x347\x2\x2\x26D5\x26D6\x5\x37E\x1C0\x2\x26D6\x26D7\a\x348\x2"+
		"\x2\x26D7\x26D9\x3\x2\x2\x2\x26D8\x26CE\x3\x2\x2\x2\x26D8\x26CF\x3\x2"+
		"\x2\x2\x26D8\x26D3\x3\x2\x2\x2\x26D8\x26D4\x3\x2\x2\x2\x26D9\x359\x3\x2"+
		"\x2\x2\x26DA\x26DB\a\x1AB\x2\x2\x26DB\x26DC\a\x347\x2\x2\x26DC\x26DD\a"+
		"\x34C\x2\x2\x26DD\x277B\a\x348\x2\x2\x26DE\x26DF\a\x1B4\x2\x2\x26DF\x26E0"+
		"\a\x347\x2\x2\x26E0\x26E1\x5\x2F0\x179\x2\x26E1\x26E2\a\x10\x2\x2\x26E2"+
		"\x26E3\x5\x3DC\x1EF\x2\x26E3\x26E4\a\x348\x2\x2\x26E4\x277B\x3\x2\x2\x2"+
		"\x26E5\x26E6\aI\x2\x2\x26E6\x26E7\a\x347\x2\x2\x26E7\x26E8\x5\x3DC\x1EF"+
		"\x2\x26E8\x26E9\a\x349\x2\x2\x26E9\x26EC\x5\x2F0\x179\x2\x26EA\x26EB\a"+
		"\x349\x2\x2\x26EB\x26ED\x5\x2F0\x179\x2\x26EC\x26EA\x3\x2\x2\x2\x26EC"+
		"\x26ED\x3\x2\x2\x2\x26ED\x26EE\x3\x2\x2\x2\x26EE\x26EF\a\x348\x2\x2\x26EF"+
		"\x277B\x3\x2\x2\x2\x26F0\x26F1\a\x1B9\x2\x2\x26F1\x26F2\a\x347\x2\x2\x26F2"+
		"\x26F3\a\x34C\x2\x2\x26F3\x277B\a\x348\x2\x2\x26F4\x26F5\a\x37\x2\x2\x26F5"+
		"\x26F6\a\x347\x2\x2\x26F6\x26F7\x5\x380\x1C1\x2\x26F7\x26F8\a\x348\x2"+
		"\x2\x26F8\x277B\x3\x2\x2\x2\x26F9\x277B\aP\x2\x2\x26FA\x277B\aQ\x2\x2"+
		"\x26FB\x26FC\a\x1D1\x2\x2\x26FC\x26FD\a\x347\x2\x2\x26FD\x26FE\a\x32E"+
		"\x2\x2\x26FE\x26FF\a\x349\x2\x2\x26FF\x2700\x5\x2F0\x179\x2\x2700\x2701"+
		"\a\x349\x2\x2\x2701\x2702\x5\x2F0\x179\x2\x2702\x2703\a\x348\x2\x2\x2703"+
		"\x277B\x3\x2\x2\x2\x2704\x2705\a\x1D2\x2\x2\x2705\x2706\a\x347\x2\x2\x2706"+
		"\x2707\a\x32E\x2\x2\x2707\x2708\a\x349\x2\x2\x2708\x2709\x5\x2F0\x179"+
		"\x2\x2709\x270A\a\x349\x2\x2\x270A\x270B\x5\x2F0\x179\x2\x270B\x270C\a"+
		"\x348\x2\x2\x270C\x277B\x3\x2\x2\x2\x270D\x270E\a\x1D5\x2\x2\x270E\x270F"+
		"\a\x347\x2\x2\x270F\x2710\a\x32E\x2\x2\x2710\x2711\a\x349\x2\x2\x2711"+
		"\x2712\x5\x2F0\x179\x2\x2712\x2713\a\x348\x2\x2\x2713\x277B\x3\x2\x2\x2"+
		"\x2714\x2715\a\x1D6\x2\x2\x2715\x2716\a\x347\x2\x2\x2716\x2717\a\x32E"+
		"\x2\x2\x2717\x2718\a\x349\x2\x2\x2718\x2719\x5\x2F0\x179\x2\x2719\x271A"+
		"\a\x348\x2\x2\x271A\x277B\x3\x2\x2\x2\x271B\x271C\a\x214\x2\x2\x271C\x271D"+
		"\a\x347\x2\x2\x271D\x277B\a\x348\x2\x2\x271E\x271F\a\x215\x2\x2\x271F"+
		"\x2720\a\x347\x2\x2\x2720\x277B\a\x348\x2\x2\x2721\x2722\a\x98\x2\x2\x2722"+
		"\x2723\a\x347\x2\x2\x2723\x2726\x5\x3DC\x1EF\x2\x2724\x2725\a\x349\x2"+
		"\x2\x2725\x2727\a\x32D\x2\x2\x2726\x2724\x3\x2\x2\x2\x2726\x2727\x3\x2"+
		"\x2\x2\x2727\x272A\x3\x2\x2\x2\x2728\x2729\a\x349\x2\x2\x2729\x272B\a"+
		"\x32D\x2\x2\x272A\x2728\x3\x2\x2\x2\x272A\x272B\x3\x2\x2\x2\x272B\x272C"+
		"\x3\x2\x2\x2\x272C\x272D\a\x348\x2\x2\x272D\x277B\x3\x2\x2\x2\x272E\x277B"+
		"\a\x25C\x2\x2\x272F\x2730\a\xE4\x2\x2\x2730\x2731\a\x347\x2\x2\x2731\x2732"+
		"\x5\x2F0\x179\x2\x2732\x2733\a\x349\x2\x2\x2733\x2734\x5\x2F0\x179\x2"+
		"\x2734\x2735\a\x348\x2\x2\x2735\x277B\x3\x2\x2\x2\x2736\x2737\a\x2F0\x2"+
		"\x2\x2737\x2738\a\x347\x2\x2\x2738\x2739\x5\x2F0\x179\x2\x2739\x273A\a"+
		"\x349\x2\x2\x273A\x273B\a\x32D\x2\x2\x273B\x273C\a\x349\x2\x2\x273C\x273D"+
		"\a\x32D\x2\x2\x273D\x273E\a\x349\x2\x2\x273E\x273F\x5\x2F0\x179\x2\x273F"+
		"\x2740\a\x348\x2\x2\x2740\x277B\x3\x2\x2\x2\x2741\x277B\a\x140\x2\x2\x2742"+
		"\x277B\a\x158\x2\x2\x2743\x2744\a\xAB\x2\x2\x2744\x2745\a\x347\x2\x2\x2745"+
		"\x2746\x5\x2F0\x179\x2\x2746\x2747\a\x349\x2\x2\x2747\x2748\x5\x2F0\x179"+
		"\x2\x2748\x2749\a\x348\x2\x2\x2749\x277B\x3\x2\x2\x2\x274A\x277B\x5\x35C"+
		"\x1AF\x2\x274B\x274C\a\x9C\x2\x2\x274C\x274D\a\x347\x2\x2\x274D\x274E"+
		"\x5\x306\x184\x2\x274E\x274F\a\x349\x2\x2\x274F\x2750\x5\x2F0\x179\x2"+
		"\x2750\x2751\a\x349\x2\x2\x2751\x2752\x5\x2F0\x179\x2\x2752\x2753\a\x348"+
		"\x2\x2\x2753\x277B\x3\x2\x2\x2\x2754\x277B\x5\x382\x1C2\x2\x2755\x277B"+
		"\x5\x384\x1C3\x2\x2756\x277B\x5\x386\x1C4\x2\x2757\x2758\x5\x3CA\x1E6"+
		"\x2\x2758\x275A\a\x347\x2\x2\x2759\x275B\x5\x380\x1C1\x2\x275A\x2759\x3"+
		"\x2\x2\x2\x275A\x275B\x3\x2\x2\x2\x275B\x275C\x3\x2\x2\x2\x275C\x275D"+
		"\a\x348\x2\x2\x275D\x277B\x3\x2\x2\x2\x275E\x275F\a\x2EF\x2\x2\x275F\x2760"+
		"\a\x347\x2\x2\x2760\x2761\x5\x2F0\x179\x2\x2761\x2762\a\x349\x2\x2\x2762"+
		"\x2763\x5\x2F0\x179\x2\x2763\x276A\a\x348\x2\x2\x2764\x2765\a\x180\x2"+
		"\x2\x2765\x2766\a\x94\x2\x2\x2766\x2767\a\x347\x2\x2\x2767\x2768\x5\x31A"+
		"\x18E\x2\x2768\x2769\a\x348\x2\x2\x2769\x276B\x3\x2\x2\x2\x276A\x2764"+
		"\x3\x2\x2\x2\x276A\x276B\x3\x2\x2\x2\x276B\x277B\x3\x2\x2\x2\x276C\x276D"+
		"\a\x26C\x2\x2\x276D\x276E\a\x316\x2\x2\x276E\x2772\a\x87\x2\x2\x276F\x2770"+
		"\x5\x3AC\x1D7\x2\x2770\x2771\a\x342\x2\x2\x2771\x2773\x3\x2\x2\x2\x2772"+
		"\x276F\x3\x2\x2\x2\x2772\x2773\x3\x2\x2\x2\x2773\x2777\x3\x2\x2\x2\x2774"+
		"\x2775\x5\x3AE\x1D8\x2\x2775\x2776\a\x342\x2\x2\x2776\x2778\x3\x2\x2\x2"+
		"\x2777\x2774\x3\x2\x2\x2\x2777\x2778\x3\x2\x2\x2\x2778\x2779\x3\x2\x2"+
		"\x2\x2779\x277B\x5\x3E4\x1F3\x2\x277A\x26DA\x3\x2\x2\x2\x277A\x26DE\x3"+
		"\x2\x2\x2\x277A\x26E5\x3\x2\x2\x2\x277A\x26F0\x3\x2\x2\x2\x277A\x26F4"+
		"\x3\x2\x2\x2\x277A\x26F9\x3\x2\x2\x2\x277A\x26FA\x3\x2\x2\x2\x277A\x26FB"+
		"\x3\x2\x2\x2\x277A\x2704\x3\x2\x2\x2\x277A\x270D\x3\x2\x2\x2\x277A\x2714"+
		"\x3\x2\x2\x2\x277A\x271B\x3\x2\x2\x2\x277A\x271E\x3\x2\x2\x2\x277A\x2721"+
		"\x3\x2\x2\x2\x277A\x272E\x3\x2\x2\x2\x277A\x272F\x3\x2\x2\x2\x277A\x2736"+
		"\x3\x2\x2\x2\x277A\x2741\x3\x2\x2\x2\x277A\x2742\x3\x2\x2\x2\x277A\x2743"+
		"\x3\x2\x2\x2\x277A\x274A\x3\x2\x2\x2\x277A\x274B\x3\x2\x2\x2\x277A\x2754"+
		"\x3\x2\x2\x2\x277A\x2755\x3\x2\x2\x2\x277A\x2756\x3\x2\x2\x2\x277A\x2757"+
		"\x3\x2\x2\x2\x277A\x275E\x3\x2\x2\x2\x277A\x276C\x3\x2\x2\x2\x277B\x35B"+
		"\x3\x2\x2\x2\x277C\x2782\x5\x35E\x1B0\x2\x277D\x2782\x5\x360\x1B1\x2\x277E"+
		"\x2782\x5\x362\x1B2\x2\x277F\x2782\x5\x364\x1B3\x2\x2780\x2782\x5\x366"+
		"\x1B4\x2\x2781\x277C\x3\x2\x2\x2\x2781\x277D\x3\x2\x2\x2\x2781\x277E\x3"+
		"\x2\x2\x2\x2781\x277F\x3\x2\x2\x2\x2781\x2780\x3\x2\x2\x2\x2782\x35D\x3"+
		"\x2\x2\x2\x2783\x2788\a\x32C\x2\x2\x2784\x2788\a\x32E\x2\x2\x2785\x2788"+
		"\at\x2\x2\x2786\x2788\x5\x360\x1B1\x2\x2787\x2783\x3\x2\x2\x2\x2787\x2784"+
		"\x3\x2\x2\x2\x2787\x2785\x3\x2\x2\x2\x2787\x2786\x3\x2\x2\x2\x2788\x2789"+
		"\x3\x2\x2\x2\x2789\x278A\a\x342\x2\x2\x278A\x278B\a\x316\x2\x2\x278B\x278C"+
		"\a\x347\x2\x2\x278C\x278D\a\x331\x2\x2\x278D\x278E\a\x349\x2\x2\x278E"+
		"\x278F\a\x331\x2\x2\x278F\x27AF\a\x348\x2\x2\x2790\x2795\a\x32C\x2\x2"+
		"\x2791\x2795\a\x32E\x2\x2\x2792\x2795\at\x2\x2\x2793\x2795\x5\x360\x1B1"+
		"\x2\x2794\x2790\x3\x2\x2\x2\x2794\x2791\x3\x2\x2\x2\x2794\x2792\x3\x2"+
		"\x2\x2\x2794\x2793\x3\x2\x2\x2\x2795\x2796\x3\x2\x2\x2\x2796\x2797\a\x342"+
		"\x2\x2\x2797\x2798\a\x2C3\x2\x2\x2798\x2799\a\x342\x2\x2\x2799\x279A\a"+
		"\x316\x2\x2\x279A\x279B\a\x347\x2\x2\x279B\x279C\a\x331\x2\x2\x279C\x279D"+
		"\a\x349\x2\x2\x279D\x279E\a\x331\x2\x2\x279E\x27AF\a\x348\x2\x2\x279F"+
		"\x27A4\a\x32C\x2\x2\x27A0\x27A4\a\x32E\x2\x2\x27A1\x27A4\at\x2\x2\x27A2"+
		"\x27A4\x5\x360\x1B1\x2\x27A3\x279F\x3\x2\x2\x2\x27A3\x27A0\x3\x2\x2\x2"+
		"\x27A3\x27A1\x3\x2\x2\x2\x27A3\x27A2\x3\x2\x2\x2\x27A4\x27A5\x3\x2\x2"+
		"\x2\x27A5\x27A6\a\x342\x2\x2\x27A6\x27A7\a\xF6\x2\x2\x27A7\x27A8\a\x342"+
		"\x2\x2\x27A8\x27A9\a\x316\x2\x2\x27A9\x27AA\a\x347\x2\x2\x27AA\x27AB\a"+
		"\x331\x2\x2\x27AB\x27AC\a\x349\x2\x2\x27AC\x27AD\a\x331\x2\x2\x27AD\x27AF"+
		"\a\x348\x2\x2\x27AE\x2787\x3\x2\x2\x2\x27AE\x2794\x3\x2\x2\x2\x27AE\x27A3"+
		"\x3\x2\x2\x2\x27AF\x35F\x3\x2\x2\x2\x27B0\x27B4\a\x32C\x2\x2\x27B1\x27B4"+
		"\a\x32E\x2\x2\x27B2\x27B4\x5\x3A6\x1D4\x2\x27B3\x27B0\x3\x2\x2\x2\x27B3"+
		"\x27B1\x3\x2\x2\x2\x27B3\x27B2\x3\x2\x2\x2\x27B4\x27B5\x3\x2\x2\x2\x27B5"+
		"\x27B6\a\x342\x2\x2\x27B6\x27B7\a\x29D\x2\x2\x27B7\x27B8\a\x347\x2\x2"+
		"\x27B8\x27B9\a\x331\x2\x2\x27B9\x27C7\a\x348\x2\x2\x27BA\x27BE\a\x32C"+
		"\x2\x2\x27BB\x27BE\a\x32E\x2\x2\x27BC\x27BE\x5\x3A6\x1D4\x2\x27BD\x27BA"+
		"\x3\x2\x2\x2\x27BD\x27BB\x3\x2\x2\x2\x27BD\x27BC\x3\x2\x2\x2\x27BE\x27BF"+
		"\x3\x2\x2\x2\x27BF\x27C0\a\x342\x2\x2\x27C0\x27C1\a\x2C3\x2\x2\x27C1\x27C2"+
		"\a\x342\x2\x2\x27C2\x27C3\a\x29D\x2\x2\x27C3\x27C4\a\x347\x2\x2\x27C4"+
		"\x27C5\a\x331\x2\x2\x27C5\x27C7\a\x348\x2\x2\x27C6\x27B3\x3\x2\x2\x2\x27C6"+
		"\x27BD\x3\x2\x2\x2\x27C7\x361\x3\x2\x2\x2\x27C8\x27C9\t~\x2\x2\x27C9\x27CA"+
		"\a\x342\x2\x2\x27CA\x27CB\a\x1FA\x2\x2\x27CB\x27CC\a\x347\x2\x2\x27CC"+
		"\x27CD\a\x331\x2\x2\x27CD\x27CE\a\x348\x2\x2\x27CE\x363\x3\x2\x2\x2\x27CF"+
		"\x27D0\t~\x2\x2\x27D0\x27D1\a\x342\x2\x2\x27D1\x27D2\a\x264\x2\x2\x27D2"+
		"\x27D3\a\x347\x2\x2\x27D3\x27D4\a\x331\x2\x2\x27D4\x27D5\a\x348\x2\x2"+
		"\x27D5\x365\x3\x2\x2\x2\x27D6\x27D7\t~\x2\x2\x27D7\x27D8\a\x342\x2\x2"+
		"\x27D8\x27D9\a\x271\x2\x2\x27D9\x27DA\a\x347\x2\x2\x27DA\x27DB\a\x331"+
		"\x2\x2\x27DB\x27DC\a\x348\x2\x2\x27DC\x367\x3\x2\x2\x2\x27DD\x27DE\a\x17B"+
		"\x2\x2\x27DE\x27DF\x5\x2F0\x179\x2\x27DF\x27E0\a\x15F\x2\x2\x27E0\x27E1"+
		"\x5\x2F0\x179\x2\x27E1\x369\x3\x2\x2\x2\x27E2\x27E3\a\x17B\x2\x2\x27E3"+
		"\x27E4\x5\x306\x184\x2\x27E4\x27E5\a\x15F\x2\x2\x27E5\x27E6\x5\x2F0\x179"+
		"\x2\x27E6\x36B\x3\x2\x2\x2\x27E7\x27E9\a\x10\x2\x2\x27E8\x27E7\x3\x2\x2"+
		"\x2\x27E8\x27E9\x3\x2\x2\x2\x27E9\x27EA\x3\x2\x2\x2\x27EA\x27EB\x5\x37C"+
		"\x1BF\x2\x27EB\x36D\x3\x2\x2\x2\x27EC\x27EE\a\x10\x2\x2\x27ED\x27EC\x3"+
		"\x2\x2\x2\x27ED\x27EE\x3\x2\x2\x2\x27EE\x27EF\x3\x2\x2\x2\x27EF\x27F0"+
		"\x5\x370\x1B9\x2\x27F0\x36F\x3\x2\x2\x2\x27F1\x27F3\x5\x3E4\x1F3\x2\x27F2"+
		"\x27F4\x5\x372\x1BA\x2\x27F3\x27F2\x3\x2\x2\x2\x27F3\x27F4\x3\x2\x2\x2"+
		"\x27F4\x371\x3\x2\x2\x2\x27F5\x27F7\a\x17F\x2\x2\x27F6\x27F5\x3\x2\x2"+
		"\x2\x27F6\x27F7\x3\x2\x2\x2\x27F7\x27F8\x3\x2\x2\x2\x27F8\x27F9\a\x347"+
		"\x2\x2\x27F9\x2800\x5\x376\x1BC\x2\x27FA\x27FC\a\x349\x2\x2\x27FB\x27FA"+
		"\x3\x2\x2\x2\x27FB\x27FC\x3\x2\x2\x2\x27FC\x27FD\x3\x2\x2\x2\x27FD\x27FF"+
		"\x5\x376\x1BC\x2\x27FE\x27FB\x3\x2\x2\x2\x27FF\x2802\x3\x2\x2\x2\x2800"+
		"\x27FE\x3\x2\x2\x2\x2800\x2801\x3\x2\x2\x2\x2801\x2803\x3\x2\x2\x2\x2802"+
		"\x2800\x3\x2\x2\x2\x2803\x2804\a\x348\x2\x2\x2804\x373\x3\x2\x2\x2\x2805"+
		"\x2806\a\x17F\x2\x2\x2806\x2807\a\x347\x2\x2\x2807\x280E\x5\x376\x1BC"+
		"\x2\x2808\x280A\a\x349\x2\x2\x2809\x2808\x3\x2\x2\x2\x2809\x280A\x3\x2"+
		"\x2\x2\x280A\x280B\x3\x2\x2\x2\x280B\x280D\x5\x376\x1BC\x2\x280C\x2809"+
		"\x3\x2\x2\x2\x280D\x2810\x3\x2\x2\x2\x280E\x280C\x3\x2\x2\x2\x280E\x280F"+
		"\x3\x2\x2\x2\x280F\x2811\x3\x2\x2\x2\x2810\x280E\x3\x2\x2\x2\x2811\x2812"+
		"\a\x348\x2\x2\x2812\x375\x3\x2\x2\x2\x2813\x2815\a\x272\x2\x2\x2814\x2813"+
		"\x3\x2\x2\x2\x2814\x2815\x3\x2\x2\x2\x2815\x2846\x3\x2\x2\x2\x2816\x282A"+
		"\a\xA0\x2\x2\x2817\x2818\a\x347\x2\x2\x2818\x281D\x5\x378\x1BD\x2\x2819"+
		"\x281A\a\x349\x2\x2\x281A\x281C\x5\x378\x1BD\x2\x281B\x2819\x3\x2\x2\x2"+
		"\x281C\x281F\x3\x2\x2\x2\x281D\x281B\x3\x2\x2\x2\x281D\x281E\x3\x2\x2"+
		"\x2\x281E\x2820\x3\x2\x2\x2\x281F\x281D\x3\x2\x2\x2\x2820\x2821\a\x348"+
		"\x2\x2\x2821\x282B\x3\x2\x2\x2\x2822\x2827\x5\x378\x1BD\x2\x2823\x2824"+
		"\a\x349\x2\x2\x2824\x2826\x5\x378\x1BD\x2\x2825\x2823\x3\x2\x2\x2\x2826"+
		"\x2829\x3\x2\x2\x2\x2827\x2825\x3\x2\x2\x2\x2827\x2828\x3\x2\x2\x2\x2828"+
		"\x282B\x3\x2\x2\x2\x2829\x2827\x3\x2\x2\x2\x282A\x2817\x3\x2\x2\x2\x282A"+
		"\x2822\x3\x2\x2\x2\x282B\x2847\x3\x2\x2\x2\x282C\x282D\a\xA0\x2\x2\x282D"+
		"\x282E\a\x335\x2\x2\x282E\x2847\x5\x378\x1BD\x2\x282F\x283E\a\x88\x2\x2"+
		"\x2830\x2831\a\x347\x2\x2\x2831\x2832\x5\x378\x1BD\x2\x2832\x2833\a\x347"+
		"\x2\x2\x2833\x2838\a\x32E\x2\x2\x2834\x2835\a\x349\x2\x2\x2835\x2837\a"+
		"\x32E\x2\x2\x2836\x2834\x3\x2\x2\x2\x2837\x283A\x3\x2\x2\x2\x2838\x2836"+
		"\x3\x2\x2\x2\x2838\x2839\x3\x2\x2\x2\x2839\x283B\x3\x2\x2\x2\x283A\x2838"+
		"\x3\x2\x2\x2\x283B\x283C\a\x348\x2\x2\x283C\x283D\a\x348\x2\x2\x283D\x283F"+
		"\x3\x2\x2\x2\x283E\x2830\x3\x2\x2\x2\x283E\x283F\x3\x2\x2\x2\x283F\x2847"+
		"\x3\x2\x2\x2\x2840\x2847\a\x2DA\x2\x2\x2841\x2847\a\x2E4\x2\x2\x2842\x2843"+
		"\a\x2E5\x2\x2\x2843\x2844\a\x335\x2\x2\x2844\x2847\a\x32D\x2\x2\x2845"+
		"\x2847\a\x32E\x2\x2\x2846\x2816\x3\x2\x2\x2\x2846\x282C\x3\x2\x2\x2\x2846"+
		"\x282F\x3\x2\x2\x2\x2846\x2840\x3\x2\x2\x2\x2846\x2841\x3\x2\x2\x2\x2846"+
		"\x2842\x3\x2\x2\x2\x2846\x2845\x3\x2\x2\x2\x2847\x377\x3\x2\x2\x2\x2848"+
		"\x284B\x5\x3E4\x1F3\x2\x2849\x284B\a\x32D\x2\x2\x284A\x2848\x3\x2\x2\x2"+
		"\x284A\x2849\x3\x2\x2\x2\x284B\x379\x3\x2\x2\x2\x284C\x284D\a\x347\x2"+
		"\x2\x284D\x2852\x5\x37C\x1BF\x2\x284E\x284F\a\x349\x2\x2\x284F\x2851\x5"+
		"\x37C\x1BF\x2\x2850\x284E\x3\x2\x2\x2\x2851\x2854\x3\x2\x2\x2\x2852\x2850"+
		"\x3\x2\x2\x2\x2852\x2853\x3\x2\x2\x2\x2853\x2855\x3\x2\x2\x2\x2854\x2852"+
		"\x3\x2\x2\x2\x2855\x2856\a\x348\x2\x2\x2856\x37B\x3\x2\x2\x2\x2857\x285A"+
		"\x5\x3E4\x1F3\x2\x2858\x285A\a\x331\x2\x2\x2859\x2857\x3\x2\x2\x2\x2859"+
		"\x2858\x3\x2\x2\x2\x285A\x37D\x3\x2\x2\x2\x285B\x285C\a\x175\x2\x2\x285C"+
		"\x285D\a\x347\x2\x2\x285D\x285E\x5\x380\x1C1\x2\x285E\x2866\a\x348\x2"+
		"\x2\x285F\x2860\a\x349\x2\x2\x2860\x2861\a\x347\x2\x2\x2861\x2862\x5\x380"+
		"\x1C1\x2\x2862\x2863\a\x348\x2\x2\x2863\x2865\x3\x2\x2\x2\x2864\x285F"+
		"\x3\x2\x2\x2\x2865\x2868\x3\x2\x2\x2\x2866\x2864\x3\x2\x2\x2\x2866\x2867"+
		"\x3\x2\x2\x2\x2867\x37F\x3\x2\x2\x2\x2868\x2866\x3\x2\x2\x2\x2869\x286E"+
		"\x5\x2F0\x179\x2\x286A\x286B\a\x349\x2\x2\x286B\x286D\x5\x2F0\x179\x2"+
		"\x286C\x286A\x3\x2\x2\x2\x286D\x2870\x3\x2\x2\x2\x286E\x286C\x3\x2\x2"+
		"\x2\x286E\x286F\x3\x2\x2\x2\x286F\x381\x3\x2\x2\x2\x2870\x286E\x3\x2\x2"+
		"\x2\x2871\x2872\t\x7F\x2\x2\x2872\x2873\a\x347\x2\x2\x2873\x2874\a\x348"+
		"\x2\x2\x2874\x287C\x5\x38A\x1C6\x2\x2875\x2876\a\x277\x2\x2\x2876\x2877"+
		"\a\x347\x2\x2\x2877\x2878\x5\x2F0\x179\x2\x2878\x2879\a\x348\x2\x2\x2879"+
		"\x287A\x5\x38A\x1C6\x2\x287A\x287C\x3\x2\x2\x2\x287B\x2871\x3\x2\x2\x2"+
		"\x287B\x2875\x3\x2\x2\x2\x287C\x383\x3\x2\x2\x2\x287D\x287E\t\x80\x2\x2"+
		"\x287E\x287F\a\x347\x2\x2\x287F\x2880\x5\x388\x1C5\x2\x2880\x2882\a\x348"+
		"\x2\x2\x2881\x2883\x5\x38A\x1C6\x2\x2882\x2881\x3\x2\x2\x2\x2882\x2883"+
		"\x3\x2\x2\x2\x2883\x289E\x3\x2\x2\x2\x2884\x2885\t\x81\x2\x2\x2885\x2888"+
		"\a\x347\x2\x2\x2886\x2889\a\x34C\x2\x2\x2887\x2889\x5\x388\x1C5\x2\x2888"+
		"\x2886\x3\x2\x2\x2\x2888\x2887\x3\x2\x2\x2\x2889\x288A\x3\x2\x2\x2\x288A"+
		"\x288C\a\x348\x2\x2\x288B\x288D\x5\x38A\x1C6\x2\x288C\x288B\x3\x2\x2\x2"+
		"\x288C\x288D\x3\x2\x2\x2\x288D\x289E\x3\x2\x2\x2\x288E\x288F\a\x1BA\x2"+
		"\x2\x288F\x2890\a\x347\x2\x2\x2890\x2891\x5\x388\x1C5\x2\x2891\x2892\a"+
		"\x348\x2\x2\x2892\x289E\x3\x2\x2\x2\x2893\x2894\a\x219\x2\x2\x2894\x2895"+
		"\a\x347\x2\x2\x2895\x2896\x5\x2F0\x179\x2\x2896\x2897\a\x348\x2\x2\x2897"+
		"\x289E\x3\x2\x2\x2\x2898\x2899\a\x21A\x2\x2\x2899\x289A\a\x347\x2\x2\x289A"+
		"\x289B\x5\x380\x1C1\x2\x289B\x289C\a\x348\x2\x2\x289C\x289E\x3\x2\x2\x2"+
		"\x289D\x287D\x3\x2\x2\x2\x289D\x2884\x3\x2\x2\x2\x289D\x288E\x3\x2\x2"+
		"\x2\x289D\x2893\x3\x2\x2\x2\x289D\x2898\x3\x2\x2\x2\x289E\x385\x3\x2\x2"+
		"\x2\x289F\x28A0\t\x82\x2\x2\x28A0\x28A1\a\x347\x2\x2\x28A1\x28A2\x5\x2F0"+
		"\x179\x2\x28A2\x28A3\a\x348\x2\x2\x28A3\x28A4\x5\x38A\x1C6\x2\x28A4\x28B4"+
		"\x3\x2\x2\x2\x28A5\x28A6\t\x83\x2\x2\x28A6\x28A7\a\x347\x2\x2\x28A7\x28AE"+
		"\x5\x2F0\x179\x2\x28A8\x28A9\a\x349\x2\x2\x28A9\x28AC\x5\x2F0\x179\x2"+
		"\x28AA\x28AB\a\x349\x2\x2\x28AB\x28AD\x5\x2F0\x179\x2\x28AC\x28AA\x3\x2"+
		"\x2\x2\x28AC\x28AD\x3\x2\x2\x2\x28AD\x28AF\x3\x2\x2\x2\x28AE\x28A8\x3"+
		"\x2\x2\x2\x28AE\x28AF\x3\x2\x2\x2\x28AF\x28B0\x3\x2\x2\x2\x28B0\x28B1"+
		"\a\x348\x2\x2\x28B1\x28B2\x5\x38A\x1C6\x2\x28B2\x28B4\x3\x2\x2\x2\x28B3"+
		"\x289F\x3\x2\x2\x2\x28B3\x28A5\x3\x2\x2\x2\x28B4\x387\x3\x2\x2\x2\x28B5"+
		"\x28B7\t\x38\x2\x2\x28B6\x28B5\x3\x2\x2\x2\x28B6\x28B7\x3\x2\x2\x2\x28B7"+
		"\x28B8\x3\x2\x2\x2\x28B8\x28B9\x5\x2F0\x179\x2\x28B9\x389\x3\x2\x2\x2"+
		"\x28BA\x28BB\a\xF4\x2\x2\x28BB\x28BF\a\x347\x2\x2\x28BC\x28BD\a\x28A\x2"+
		"\x2\x28BD\x28BE\a\'\x2\x2\x28BE\x28C0\x5\x380\x1C1\x2\x28BF\x28BC\x3\x2"+
		"\x2\x2\x28BF\x28C0\x3\x2\x2\x2\x28C0\x28C2\x3\x2\x2\x2\x28C1\x28C3\x5"+
		"\x31A\x18E\x2\x28C2\x28C1\x3\x2\x2\x2\x28C2\x28C3\x3\x2\x2\x2\x28C3\x28C5"+
		"\x3\x2\x2\x2\x28C4\x28C6\x5\x38C\x1C7\x2\x28C5\x28C4\x3\x2\x2\x2\x28C5"+
		"\x28C6\x3\x2\x2\x2\x28C6\x28C7\x3\x2\x2\x2\x28C7\x28C8\a\x348\x2\x2\x28C8"+
		"\x38B\x3\x2\x2\x2\x28C9\x28CA\t\x84\x2\x2\x28CA\x28CB\x5\x38E\x1C8\x2"+
		"\x28CB\x38D\x3\x2\x2\x2\x28CC\x28D3\x5\x392\x1CA\x2\x28CD\x28CE\a\x1E"+
		"\x2\x2\x28CE\x28CF\x5\x390\x1C9\x2\x28CF\x28D0\a\v\x2\x2\x28D0\x28D1\x5"+
		"\x390\x1C9\x2\x28D1\x28D3\x3\x2\x2\x2\x28D2\x28CC\x3\x2\x2\x2\x28D2\x28CD"+
		"\x3\x2\x2\x2\x28D3\x38F\x3\x2\x2\x2\x28D4\x28D7\x5\x392\x1CA\x2\x28D5"+
		"\x28D7\x5\x394\x1CB\x2\x28D6\x28D4\x3\x2\x2\x2\x28D6\x28D5\x3\x2\x2\x2"+
		"\x28D7\x391\x3\x2\x2\x2\x28D8\x28D9\a\x30D\x2\x2\x28D9\x28DF\a\x291\x2"+
		"\x2\x28DA\x28DB\a\x32D\x2\x2\x28DB\x28DF\a\x291\x2\x2\x28DC\x28DD\aM\x2"+
		"\x2\x28DD\x28DF\a\x2C3\x2\x2\x28DE\x28D8\x3\x2\x2\x2\x28DE\x28DA\x3\x2"+
		"\x2\x2\x28DE\x28DC\x3\x2\x2\x2\x28DF\x393\x3\x2\x2\x2\x28E0\x28E1\a\x30D"+
		"\x2\x2\x28E1\x28E5\a\x20B\x2\x2\x28E2\x28E3\a\x32D\x2\x2\x28E3\x28E5\a"+
		"\x20B\x2\x2\x28E4\x28E0\x3\x2\x2\x2\x28E4\x28E2\x3\x2\x2\x2\x28E5\x395"+
		"\x3\x2\x2\x2\x28E6\x28E7\a\x207\x2\x2\x28E7\x28E8\a\x347\x2\x2\x28E8\x28ED"+
		"\x5\x398\x1CD\x2\x28E9\x28EA\a\x349\x2\x2\x28EA\x28EC\x5\x398\x1CD\x2"+
		"\x28EB\x28E9\x3\x2\x2\x2\x28EC\x28EF\x3\x2\x2\x2\x28ED\x28EB\x3\x2\x2"+
		"\x2\x28ED\x28EE\x3\x2\x2\x2\x28EE\x28F0\x3\x2\x2\x2\x28EF\x28ED\x3\x2"+
		"\x2\x2\x28F0\x28F1\a\x348\x2\x2\x28F1\x290C\x3\x2\x2\x2\x28F2\x28F3\a"+
		"\x1DD\x2\x2\x28F3\x28F6\a\x335\x2\x2\x28F4\x28F7\x5\x3E4\x1F3\x2\x28F5"+
		"\x28F7\a\x331\x2\x2\x28F6\x28F4\x3\x2\x2\x2\x28F6\x28F5\x3\x2\x2\x2\x28F7"+
		"\x290C\x3\x2\x2\x2\x28F8\x28F9\a\x1DC\x2\x2\x28F9\x28FC\a\x335\x2\x2\x28FA"+
		"\x28FD\x5\x3E4\x1F3\x2\x28FB\x28FD\a\x331\x2\x2\x28FC\x28FA\x3\x2\x2\x2"+
		"\x28FC\x28FB\x3\x2\x2\x2\x28FD\x290C\x3\x2\x2\x2\x28FE\x28FF\a\x268\x2"+
		"\x2\x28FF\x2900\a\x335\x2\x2\x2900\x290C\t\t\x2\x2\x2901\x2902\a\x304"+
		"\x2\x2\x2902\x2903\a\x335\x2\x2\x2903\x290C\t\t\x2\x2\x2904\x2905\a\x30A"+
		"\x2\x2\x2905\x2906\a\x335\x2\x2\x2906\x290C\a\x32D\x2\x2\x2907\x2908\a"+
		"\x1D8\x2\x2\x2908\x290C\t\t\x2\x2\x2909\x290A\a\x307\x2\x2\x290A\x290C"+
		"\t\t\x2\x2\x290B\x28E6\x3\x2\x2\x2\x290B\x28F2\x3\x2\x2\x2\x290B\x28F8"+
		"\x3\x2\x2\x2\x290B\x28FE\x3\x2\x2\x2\x290B\x2901\x3\x2\x2\x2\x290B\x2904"+
		"\x3\x2\x2\x2\x290B\x2907\x3\x2\x2\x2\x290B\x2909\x3\x2\x2\x2\x290C\x397"+
		"\x3\x2\x2\x2\x290D\x290E\a\x273\x2\x2\x290E\x290F\a\x335\x2\x2\x290F\x2914"+
		"\t\x85\x2\x2\x2910\x2911\a\x1E8\x2\x2\x2911\x2912\a\x335\x2\x2\x2912\x2914"+
		"\a\x331\x2\x2\x2913\x290D\x3\x2\x2\x2\x2913\x2910\x3\x2\x2\x2\x2914\x399"+
		"\x3\x2\x2\x2\x2915\x2918\x5\x39C\x1CF\x2\x2916\x2918\x5\x39E\x1D0\x2\x2917"+
		"\x2915\x3\x2\x2\x2\x2917\x2916\x3\x2\x2\x2\x2918\x39B\x3\x2\x2\x2\x2919"+
		"\x291A\a\x204\x2\x2\x291A\x291D\x5\x3E4\x1F3\x2\x291B\x291C\a\x41\x2\x2"+
		"\x291C\x291E\a\x207\x2\x2\x291D\x291B\x3\x2\x2\x2\x291D\x291E\x3\x2\x2"+
		"\x2\x291E\x2920\x3\x2\x2\x2\x291F\x2921\a[\x2\x2\x2920\x291F\x3\x2\x2"+
		"\x2\x2920\x2921\x3\x2\x2\x2\x2921\x2924\x3\x2\x2\x2\x2922\x2923\a\x41"+
		"\x2\x2\x2923\x2925\a\x259\x2\x2\x2924\x2922\x3\x2\x2\x2\x2924\x2925\x3"+
		"\x2\x2\x2\x2925\x2926\x3\x2\x2\x2\x2926\x292B\x5\x39E\x1D0\x2\x2927\x2928"+
		"\a\x349\x2\x2\x2928\x292A\x5\x39E\x1D0\x2\x2929\x2927\x3\x2\x2\x2\x292A"+
		"\x292D\x3\x2\x2\x2\x292B\x2929\x3\x2\x2\x2\x292B\x292C\x3\x2\x2\x2\x292C"+
		"\x39D\x3\x2\x2\x2\x292D\x292B\x3\x2\x2\x2\x292E\x292F\a\x347\x2\x2\x292F"+
		"\x2930\a\x267\x2\x2\x2930\x2933\a\x335\x2\x2\x2931\x2934\x5\x3E4\x1F3"+
		"\x2\x2932\x2934\a\x331\x2\x2\x2933\x2931\x3\x2\x2\x2\x2933\x2932\x3\x2"+
		"\x2\x2\x2934\x2936\x3\x2\x2\x2\x2935\x2937\a\x349\x2\x2\x2936\x2935\x3"+
		"\x2\x2\x2\x2936\x2937\x3\x2\x2\x2\x2937\x2938\x3\x2\x2\x2\x2938\x2939"+
		"\a\x84\x2\x2\x2939\x293A\a\x335\x2\x2\x293A\x293C\a\x331\x2\x2\x293B\x293D"+
		"\a\x349\x2\x2\x293C\x293B\x3\x2\x2\x2\x293C\x293D\x3\x2\x2\x2\x293D\x2944"+
		"\x3\x2\x2\x2\x293E\x293F\a\x2E2\x2\x2\x293F\x2940\a\x335\x2\x2\x2940\x2942"+
		"\x5\x3EC\x1F7\x2\x2941\x2943\a\x349\x2\x2\x2942\x2941\x3\x2\x2\x2\x2942"+
		"\x2943\x3\x2\x2\x2\x2943\x2945\x3\x2\x2\x2\x2944\x293E\x3\x2\x2\x2\x2944"+
		"\x2945\x3\x2\x2\x2\x2945\x294F\x3\x2\x2\x2\x2946\x2947\a\x256\x2\x2\x2947"+
		"\x294A\a\x335\x2\x2\x2948\x294B\x5\x3EC\x1F7\x2\x2949\x294B\a\x311\x2"+
		"\x2\x294A\x2948\x3\x2\x2\x2\x294A\x2949\x3\x2\x2\x2\x294B\x294D\x3\x2"+
		"\x2\x2\x294C\x294E\a\x349\x2\x2\x294D\x294C\x3\x2\x2\x2\x294D\x294E\x3"+
		"\x2\x2\x2\x294E\x2950\x3\x2\x2\x2\x294F\x2946\x3\x2\x2\x2\x294F\x2950"+
		"\x3\x2\x2\x2\x2950\x2957\x3\x2\x2\x2\x2951\x2952\a\x205\x2\x2\x2952\x2953"+
		"\a\x335\x2\x2\x2953\x2955\x5\x3EC\x1F7\x2\x2954\x2956\a\x349\x2\x2\x2955"+
		"\x2954\x3\x2\x2\x2\x2955\x2956\x3\x2\x2\x2\x2956\x2958\x3\x2\x2\x2\x2957"+
		"\x2951\x3\x2\x2\x2\x2957\x2958\x3\x2\x2\x2\x2958\x2959\x3\x2\x2\x2\x2959"+
		"\x295A\a\x348\x2\x2\x295A\x39F\x3\x2\x2\x2\x295B\x295C\x5\x3A6\x1D4\x2"+
		"\x295C\x3A1\x3\x2\x2\x2\x295D\x2963\x5\x3AE\x1D8\x2\x295E\x295F\x5\x3AE"+
		"\x1D8\x2\x295F\x2960\a\x342\x2\x2\x2960\x2961\x5\x3E4\x1F3\x2\x2961\x2963"+
		"\x3\x2\x2\x2\x2962\x295D\x3\x2\x2\x2\x2962\x295E\x3\x2\x2\x2\x2963\x3A3"+
		"\x3\x2\x2\x2\x2964\x296A\x5\x3E4\x1F3\x2\x2965\x2966\x5\x3AE\x1D8\x2\x2966"+
		"\x2967\a\x342\x2\x2\x2967\x2968\x5\x3E4\x1F3\x2\x2968\x296A\x3\x2\x2\x2"+
		"\x2969\x2964\x3\x2\x2\x2\x2969\x2965\x3\x2\x2\x2\x296A\x3A5\x3\x2\x2\x2"+
		"\x296B\x296C\x5\x3A8\x1D5\x2\x296C\x296D\a\x342\x2\x2\x296D\x296E\x5\x3AC"+
		"\x1D7\x2\x296E\x296F\a\x342\x2\x2\x296F\x2970\x5\x3AE\x1D8\x2\x2970\x2971"+
		"\a\x342\x2\x2\x2971\x2972\x5\x3AA\x1D6\x2\x2972\x297F\x3\x2\x2\x2\x2973"+
		"\x2974\x5\x3AC\x1D7\x2\x2974\x2975\a\x342\x2\x2\x2975\x2976\x5\x3AE\x1D8"+
		"\x2\x2976\x2977\a\x342\x2\x2\x2977\x2978\x5\x3AA\x1D6\x2\x2978\x297F\x3"+
		"\x2\x2\x2\x2979\x297A\x5\x3AE\x1D8\x2\x297A\x297B\a\x342\x2\x2\x297B\x297C"+
		"\x5\x3AA\x1D6\x2\x297C\x297F\x3\x2\x2\x2\x297D\x297F\x5\x3AA\x1D6\x2\x297E"+
		"\x296B\x3\x2\x2\x2\x297E\x2973\x3\x2\x2\x2\x297E\x2979\x3\x2\x2\x2\x297E"+
		"\x297D\x3\x2\x2\x2\x297F\x3A7\x3\x2\x2\x2\x2980\x2981\x5\x3E4\x1F3\x2"+
		"\x2981\x3A9\x3\x2\x2\x2\x2982\x2983\x5\x3E4\x1F3\x2\x2983\x3AB\x3\x2\x2"+
		"\x2\x2984\x2985\x5\x3E4\x1F3\x2\x2985\x3AD\x3\x2\x2\x2\x2986\x2987\x5"+
		"\x3E4\x1F3\x2\x2987\x3AF\x3\x2\x2\x2\x2988\x2989\x5\x3AE\x1D8\x2\x2989"+
		"\x298A\a\x342\x2\x2\x298A\x298C\x3\x2\x2\x2\x298B\x2988\x3\x2\x2\x2\x298B"+
		"\x298C\x3\x2\x2\x2\x298C\x298D\x3\x2\x2\x2\x298D\x298E\x5\x3E4\x1F3\x2"+
		"\x298E\x3B1\x3\x2\x2\x2\x298F\x2990\x5\x3AE\x1D8\x2\x2990\x2991\a\x342"+
		"\x2\x2\x2991\x2993\x3\x2\x2\x2\x2992\x298F\x3\x2\x2\x2\x2992\x2993\x3"+
		"\x2\x2\x2\x2993\x2994\x3\x2\x2\x2\x2994\x2995\x5\x3E4\x1F3\x2\x2995\x3B3"+
		"\x3\x2\x2\x2\x2996\x29A2\x5\x3B2\x1DA\x2\x2997\x2998\x5\x3AC\x1D7\x2\x2998"+
		"\x299A\a\x342\x2\x2\x2999\x299B\x5\x3AE\x1D8\x2\x299A\x2999\x3\x2\x2\x2"+
		"\x299A\x299B\x3\x2\x2\x2\x299B\x299C\x3\x2\x2\x2\x299C\x299D\a\x342\x2"+
		"\x2\x299D\x299F\x3\x2\x2\x2\x299E\x2997\x3\x2\x2\x2\x299E\x299F\x3\x2"+
		"\x2\x2\x299F\x29A0\x3\x2\x2\x2\x29A0\x29A2\x5\x3E4\x1F3\x2\x29A1\x2996"+
		"\x3\x2\x2\x2\x29A1\x299E\x3\x2\x2\x2\x29A2\x3B5\x3\x2\x2\x2\x29A3\x29B1"+
		"\x5\x3B4\x1DB\x2\x29A4\x29A5\x5\x3A8\x1D5\x2\x29A5\x29A6\a\x342\x2\x2"+
		"\x29A6\x29A7\x5\x3AC\x1D7\x2\x29A7\x29A9\a\x342\x2\x2\x29A8\x29AA\x5\x3AE"+
		"\x1D8\x2\x29A9\x29A8\x3\x2\x2\x2\x29A9\x29AA\x3\x2\x2\x2\x29AA\x29AB\x3"+
		"\x2\x2\x2\x29AB\x29AC\a\x342\x2\x2\x29AC\x29AE\x3\x2\x2\x2\x29AD\x29A4"+
		"\x3\x2\x2\x2\x29AD\x29AE\x3\x2\x2\x2\x29AE\x29AF\x3\x2\x2\x2\x29AF\x29B1"+
		"\x5\x3E4\x1F3\x2\x29B0\x29A3\x3\x2\x2\x2\x29B0\x29AD\x3\x2\x2\x2\x29B1"+
		"\x3B7\x3\x2\x2\x2\x29B2\x29B5\x5\x3A6\x1D4\x2\x29B3\x29B5\a\x32C\x2\x2"+
		"\x29B4\x29B2\x3\x2\x2\x2\x29B4\x29B3\x3\x2\x2\x2\x29B5\x3B9\x3\x2\x2\x2"+
		"\x29B6\x29B7\x5\x3A6\x1D4\x2\x29B7\x29B8\a\x342\x2\x2\x29B8\x29BA\x3\x2"+
		"\x2\x2\x29B9\x29B6\x3\x2\x2\x2\x29B9\x29BA\x3\x2\x2\x2\x29BA\x29BB\x3"+
		"\x2\x2\x2\x29BB\x29E7\x5\x3E4\x1F3\x2\x29BC\x29BD\x5\x3A6\x1D4\x2\x29BD"+
		"\x29BE\a\x342\x2\x2\x29BE\x29C0\x3\x2\x2\x2\x29BF\x29BC\x3\x2\x2\x2\x29BF"+
		"\x29C0\x3\x2\x2\x2\x29C0\x29C1\x3\x2\x2\x2\x29C1\x29E7\a\x1BF\x2\x2\x29C2"+
		"\x29C3\x5\x3A6\x1D4\x2\x29C3\x29C4\a\x342\x2\x2\x29C4\x29C6\x3\x2\x2\x2"+
		"\x29C5\x29C2\x3\x2\x2\x2\x29C5\x29C6\x3\x2\x2\x2\x29C6\x29C7\x3\x2\x2"+
		"\x2\x29C7\x29E7\a\x2EA\x2\x2\x29C8\x29C9\x5\x3A6\x1D4\x2\x29C9\x29CA\a"+
		"\x342\x2\x2\x29CA\x29CC\x3\x2\x2\x2\x29CB\x29C8\x3\x2\x2\x2\x29CB\x29CC"+
		"\x3\x2\x2\x2\x29CC\x29CD\x3\x2\x2\x2\x29CD\x29E7\a\x2A0\x2\x2\x29CE\x29CF"+
		"\x5\x3A6\x1D4\x2\x29CF\x29D0\a\x342\x2\x2\x29D0\x29D2\x3\x2\x2\x2\x29D1"+
		"\x29CE\x3\x2\x2\x2\x29D1\x29D2\x3\x2\x2\x2\x29D2\x29D3\x3\x2\x2\x2\x29D3"+
		"\x29E7\a\x19A\x2\x2\x29D4\x29D5\x5\x3A6\x1D4\x2\x29D5\x29D6\a\x342\x2"+
		"\x2\x29D6\x29D8\x3\x2\x2\x2\x29D7\x29D4\x3\x2\x2\x2\x29D7\x29D8\x3\x2"+
		"\x2\x2\x29D8\x29D9\x3\x2\x2\x2\x29D9\x29E7\a\x197\x2\x2\x29DA\x29DB\x5"+
		"\x3A6\x1D4\x2\x29DB\x29DC\a\x342\x2\x2\x29DC\x29DE\x3\x2\x2\x2\x29DD\x29DA"+
		"\x3\x2\x2\x2\x29DD\x29DE\x3\x2\x2\x2\x29DE\x29DF\x3\x2\x2\x2\x29DF\x29E7"+
		"\a\x196\x2\x2\x29E0\x29E1\x5\x3A6\x1D4\x2\x29E1\x29E2\a\x342\x2\x2\x29E2"+
		"\x29E4\x3\x2\x2\x2\x29E3\x29E0\x3\x2\x2\x2\x29E3\x29E4\x3\x2\x2\x2\x29E4"+
		"\x29E5\x3\x2\x2\x2\x29E5\x29E7\a\x195\x2\x2\x29E6\x29B9\x3\x2\x2\x2\x29E6"+
		"\x29BF\x3\x2\x2\x2\x29E6\x29C5\x3\x2\x2\x2\x29E6\x29CB\x3\x2\x2\x2\x29E6"+
		"\x29D1\x3\x2\x2\x2\x29E6\x29D7\x3\x2\x2\x2\x29E6\x29DD\x3\x2\x2\x2\x29E6"+
		"\x29E3\x3\x2\x2\x2\x29E7\x3BB\x3\x2\x2\x2\x29E8\x29EA\x5\x3E4\x1F3\x2"+
		"\x29E9\x29EB\tw\x2\x2\x29EA\x29E9\x3\x2\x2\x2\x29EA\x29EB\x3\x2\x2\x2"+
		"\x29EB\x29F3\x3\x2\x2\x2\x29EC\x29ED\a\x349\x2\x2\x29ED\x29EF\x5\x3E4"+
		"\x1F3\x2\x29EE\x29F0\tw\x2\x2\x29EF\x29EE\x3\x2\x2\x2\x29EF\x29F0\x3\x2"+
		"\x2\x2\x29F0\x29F2\x3\x2\x2\x2\x29F1\x29EC\x3\x2\x2\x2\x29F2\x29F5\x3"+
		"\x2\x2\x2\x29F3\x29F1\x3\x2\x2\x2\x29F3\x29F4\x3\x2\x2\x2\x29F4\x3BD\x3"+
		"\x2\x2\x2\x29F5\x29F3\x3\x2\x2\x2\x29F6\x29FB\x5\x3E4\x1F3\x2\x29F7\x29F8"+
		"\a\x349\x2\x2\x29F8\x29FA\x5\x3E4\x1F3\x2\x29F9\x29F7\x3\x2\x2\x2\x29FA"+
		"\x29FD\x3\x2\x2\x2\x29FB\x29F9\x3\x2\x2\x2\x29FB\x29FC\x3\x2\x2\x2\x29FC"+
		"\x3BF\x3\x2\x2\x2\x29FD\x29FB\x3\x2\x2\x2\x29FE\x2A01\x5\x3E4\x1F3\x2"+
		"\x29FF\x2A01\a\x32C\x2\x2\x2A00\x29FE\x3\x2\x2\x2\x2A00\x29FF\x3\x2\x2"+
		"\x2\x2A01\x3C1\x3\x2\x2\x2\x2A02\x2A03\t\t\x2\x2\x2A03\x3C3\x3\x2\x2\x2"+
		"\x2A04\x2A05\t\x86\x2\x2\x2A05\x3C5\x3\x2\x2\x2\x2A06\x2A08\a\xE0\x2\x2"+
		"\x2A07\x2A06\x3\x2\x2\x2\x2A07\x2A08\x3\x2\x2\x2\x2A08\x2A09\x3\x2\x2"+
		"\x2\x2A09\x2A0A\a\xE3\x2\x2\x2A0A\x3C7\x3\x2\x2\x2\x2A0B\x2A13\x5\x3C6"+
		"\x1E4\x2\x2A0C\x2A0D\a[\x2\x2\x2A0D\x2A10\x5\x2FA\x17E\x2\x2A0E\x2A0F"+
		"\a\x17F\x2\x2\x2A0F\x2A11\a\x175\x2\x2\x2A10\x2A0E\x3\x2\x2\x2\x2A10\x2A11"+
		"\x3\x2\x2\x2\x2A11\x2A13\x3\x2\x2\x2\x2A12\x2A0B\x3\x2\x2\x2\x2A12\x2A0C"+
		"\x3\x2\x2\x2\x2A13\x3C9\x3\x2\x2\x2\x2A14\x2A1A\x5\x3B6\x1DC\x2\x2A15"+
		"\x2A1A\a\x125\x2\x2\x2A16\x2A1A\a\xB3\x2\x2\x2A17\x2A1A\a\x1AB\x2\x2\x2A18"+
		"\x2A1A\a\x1B9\x2\x2\x2A19\x2A14\x3\x2\x2\x2\x2A19\x2A15\x3\x2\x2\x2\x2A19"+
		"\x2A16\x3\x2\x2\x2\x2A19\x2A17\x3\x2\x2\x2\x2A19\x2A18\x3\x2\x2\x2\x2A1A"+
		"\x3CB\x3\x2\x2\x2\x2A1B\x2A1C\a\x1D\x2\x2\x2A1C\x2A1D\aH\x2\x2\x2A1D\x2A1E"+
		"\a\x301\x2\x2\x2A1E\x2A1F\a\x347\x2\x2\x2A1F\x2A20\a\x32C\x2\x2\x2A20"+
		"\x2A21\a\x348\x2\x2\x2A21\x2A22\a\x300\x2\x2\x2A22\x2A23\a\x335\x2\x2"+
		"\x2A23\x2A25\x5\x1C4\xE3\x2\x2A24\x2A26\a\x34A\x2\x2\x2A25\x2A24\x3\x2"+
		"\x2\x2\x2A25\x2A26\x3\x2\x2\x2\x2A26\x3CD\x3\x2\x2\x2\x2A27\x2A28\a\x1D"+
		"\x2\x2\x2A28\x2A2A\a\x1E7\x2\x2\x2A29\x2A2B\aH\x2\x2\x2A2A\x2A29\x3\x2"+
		"\x2\x2\x2A2A\x2A2B\x3\x2\x2\x2\x2A2B\x2A2C\x3\x2\x2\x2\x2A2C\x2A2D\a\x32C"+
		"\x2\x2\x2A2D\x2A2E\a\x8D\x2\x2\x2A2E\x2A2F\a\x13C\x2\x2\x2A2F\x2A30\x5"+
		"\x3D2\x1EA\x2\x2A30\x2A31\a\x160\x2\x2\x2A31\x2A32\a\x13C\x2\x2\x2A32"+
		"\x2A35\x5\x3D2\x1EA\x2\x2A33\x2A34\a\x349\x2\x2\x2A34\x2A36\a\x331\x2"+
		"\x2\x2A35\x2A33\x3\x2\x2\x2\x2A35\x2A36\x3\x2\x2\x2\x2A36\x2A3A\x3\x2"+
		"\x2\x2\x2A37\x2A38\a\xE9\x2\x2\x2A38\x2A39\a\x46\x2\x2\x2A39\x2A3B\x5"+
		"\x3D0\x1E9\x2\x2A3A\x2A37\x3\x2\x2\x2\x2A3A\x2A3B\x3\x2\x2\x2\x2A3B\x2A52"+
		"\x3\x2\x2\x2\x2A3C\x2A43\a\x17F\x2\x2\x2A3D\x2A3E\t\x87\x2\x2\x2A3E\x2A3F"+
		"\a\x335\x2\x2\x2A3F\x2A41\a\x32C\x2\x2\x2A40\x2A42\a\x349\x2\x2\x2A41"+
		"\x2A40\x3\x2\x2\x2\x2A41\x2A42\x3\x2\x2\x2\x2A42\x2A44\x3\x2\x2\x2\x2A43"+
		"\x2A3D\x3\x2\x2\x2\x2A43\x2A44\x3\x2\x2\x2\x2A44\x2A4B\x3\x2\x2\x2\x2A45"+
		"\x2A46\a\xB5\x2\x2\x2A46\x2A47\a\x335\x2\x2\x2A47\x2A49\t\x2\x2\x2\x2A48"+
		"\x2A4A\a\x349\x2\x2\x2A49\x2A48\x3\x2\x2\x2\x2A49\x2A4A\x3\x2\x2\x2\x2A4A"+
		"\x2A4C\x3\x2\x2\x2\x2A4B\x2A45\x3\x2\x2\x2\x2A4B\x2A4C\x3\x2\x2\x2\x2A4C"+
		"\x2A50\x3\x2\x2\x2\x2A4D\x2A4E\a\x1F5\x2\x2\x2A4E\x2A4F\a\x335\x2\x2\x2A4F"+
		"\x2A51\t\t\x2\x2\x2A50\x2A4D\x3\x2\x2\x2\x2A50\x2A51\x3\x2\x2\x2\x2A51"+
		"\x2A53\x3\x2\x2\x2\x2A52\x2A3C\x3\x2\x2\x2\x2A52\x2A53\x3\x2\x2\x2\x2A53"+
		"\x2A55\x3\x2\x2\x2\x2A54\x2A56\a\x34A\x2\x2\x2A55\x2A54\x3\x2\x2\x2\x2A55"+
		"\x2A56\x3\x2\x2\x2\x2A56\x3CF\x3\x2\x2\x2\x2A57\x2A5A\x5\x3E4\x1F3\x2"+
		"\x2A58\x2A5A\x5\x2F0\x179\x2\x2A59\x2A57\x3\x2\x2\x2\x2A59\x2A58\x3\x2"+
		"\x2\x2\x2A5A\x3D1\x3\x2\x2\x2\x2A5B\x2A5E\x5\x3E4\x1F3\x2\x2A5C\x2A5E"+
		"\x5\x2F0\x179\x2\x2A5D\x2A5B\x3\x2\x2\x2\x2A5D\x2A5C\x3\x2\x2\x2\x2A5E"+
		"\x3D3\x3\x2\x2\x2\x2A5F\x2A60\an\x2\x2\x2A60\x2A61\aH\x2\x2\x2A61\x2A63"+
		"\a\x32C\x2\x2\x2A62\x2A64\a\x34A\x2\x2\x2A63\x2A62\x3\x2\x2\x2\x2A63\x2A64"+
		"\x3\x2\x2\x2\x2A64\x2A71\x3\x2\x2\x2\x2A65\x2A6C\a\x17F\x2\x2\x2A66\x2A67"+
		"\ar\x2\x2\x2A67\x2A68\a\x335\x2\x2\x2A68\x2A69\t\x3\x2\x2\x2A69\x2A6A"+
		"\a\x1E4\x2\x2\x2A6A\x2A6B\a\x335\x2\x2\x2A6B\x2A6D\t\x3\x2\x2\x2A6C\x2A66"+
		"\x3\x2\x2\x2\x2A6C\x2A6D\x3\x2\x2\x2\x2A6D\x2A6F\x3\x2\x2\x2\x2A6E\x2A70"+
		"\a\x1BB\x2\x2\x2A6F\x2A6E\x3\x2\x2\x2\x2A6F\x2A70\x3\x2\x2\x2\x2A70\x2A72"+
		"\x3\x2\x2\x2\x2A71\x2A65\x3\x2\x2\x2\x2A71\x2A72\x3\x2\x2\x2\x2A72\x3D5"+
		"\x3\x2\x2\x2\x2A73\x2A74\a\x90\x2\x2\x2A74\x2A75\aH\x2\x2\x2A75\x2A76"+
		"\a\x94\x2\x2\x2A76\x2A77\t\x3\x2\x2\x2A77\x2A78\a\x8D\x2\x2\x2A78\x2A7A"+
		"\x5\x3D8\x1ED\x2\x2A79\x2A7B\a\x34A\x2\x2\x2A7A\x2A79\x3\x2\x2\x2\x2A7A"+
		"\x2A7B\x3\x2\x2\x2\x2A7B\x3D7\x3\x2\x2\x2\x2A7C\x2A7D\x5\x3AC\x1D7\x2"+
		"\x2A7D\x2A7E\a\x342\x2\x2\x2A7E\x2A7F\x5\x3AE\x1D8\x2\x2A7F\x2A80\a\x342"+
		"\x2\x2\x2A80\x2A81\x5\x3E4\x1F3\x2\x2A81\x2A84\x3\x2\x2\x2\x2A82\x2A84"+
		"\x5\x3E4\x1F3\x2\x2A83\x2A7C\x3\x2\x2\x2\x2A83\x2A82\x3\x2\x2\x2\x2A84"+
		"\x3D9\x3\x2\x2\x2\x2A85\x2A86\a\x2D7\x2\x2\x2A86\x2A87\a\xE9\x2\x2\x2A87"+
		"\x2A88\aH\x2\x2\x2A88\x2A8C\t\x3\x2\x2\x2A89\x2A8A\a\x25A\x2\x2\x2A8A"+
		"\x2A8B\a\x30B\x2\x2\x2A8B\x2A8D\x5\x2F0\x179\x2\x2A8C\x2A89\x3\x2\x2\x2"+
		"\x2A8C\x2A8D\x3\x2\x2\x2\x2A8D\x2A91\x3\x2\x2\x2\x2A8E\x2A8F\a\x347\x2"+
		"\x2\x2A8F\x2A90\t\x3\x2\x2\x2A90\x2A92\a\x348\x2\x2\x2A91\x2A8E\x3\x2"+
		"\x2\x2\x2A91\x2A92\x3\x2\x2\x2\x2A92\x2A94\x3\x2\x2\x2\x2A93\x2A95\a\x34A"+
		"\x2\x2\x2A94\x2A93\x3\x2\x2\x2\x2A94\x2A95\x3\x2\x2\x2\x2A95\x3DB\x3\x2"+
		"\x2\x2\x2A96\x2A98\x5\x3E4\x1F3\x2\x2A97\x2A99\a\x98\x2\x2\x2A98\x2A97"+
		"\x3\x2\x2\x2\x2A98\x2A99\x3\x2\x2\x2\x2A99\x2AA1\x3\x2\x2\x2\x2A9A\x2A9B"+
		"\a\x347\x2\x2\x2A9B\x2A9E\t\x88\x2\x2\x2A9C\x2A9D\a\x349\x2\x2\x2A9D\x2A9F"+
		"\a\x32D\x2\x2\x2A9E\x2A9C\x3\x2\x2\x2\x2A9E\x2A9F\x3\x2\x2\x2\x2A9F\x2AA0"+
		"\x3\x2\x2\x2\x2AA0\x2AA2\a\x348\x2\x2\x2AA1\x2A9A\x3\x2\x2\x2\x2AA1\x2AA2"+
		"\x3\x2\x2\x2\x2AA2\x2AAC\x3\x2\x2\x2\x2AA3\x2AA5\a\x66\x2\x2\x2AA4\x2AA6"+
		"\a\x102\x2\x2\x2AA5\x2AA4\x3\x2\x2\x2\x2AA5\x2AA6\x3\x2\x2\x2\x2AA6\x2AAC"+
		"\x3\x2\x2\x2\x2AA7\x2AAC\a\x22D\x2\x2\x2AA8\x2AAC\a\x302\x2\x2\x2AA9\x2AAC"+
		"\a\x2E3\x2\x2\x2AAA\x2AAC\a\x1A9\x2\x2\x2AAB\x2A96\x3\x2\x2\x2\x2AAB\x2AA3"+
		"\x3\x2\x2\x2\x2AAB\x2AA7\x3\x2\x2\x2\x2AAB\x2AA8\x3\x2\x2\x2\x2AAB\x2AA9"+
		"\x3\x2\x2\x2\x2AAB\x2AAA\x3\x2\x2\x2\x2AAC\x3DD\x3\x2\x2\x2\x2AAD\x2AB1"+
		"\a\xE3\x2\x2\x2AAE\x2AB1\a[\x2\x2\x2AAF\x2AB1\x5\x3E0\x1F1\x2\x2AB0\x2AAD"+
		"\x3\x2\x2\x2\x2AB0\x2AAE\x3\x2\x2\x2\x2AB0\x2AAF\x3\x2\x2\x2\x2AB1\x3DF"+
		"\x3\x2\x2\x2\x2AB2\x2AC2\a\x331\x2\x2\x2AB3\x2AC2\a\x332\x2\x2\x2AB4\x2AB6"+
		"\x5\x3E2\x1F2\x2\x2AB5\x2AB4\x3\x2\x2\x2\x2AB5\x2AB6\x3\x2\x2\x2\x2AB6"+
		"\x2AB7\x3\x2\x2\x2\x2AB7\x2AC2\a\x32D\x2\x2\x2AB8\x2ABA\x5\x3E2\x1F2\x2"+
		"\x2AB9\x2AB8\x3\x2\x2\x2\x2AB9\x2ABA\x3\x2\x2\x2\x2ABA\x2ABB\x3\x2\x2"+
		"\x2\x2ABB\x2AC2\tr\x2\x2\x2ABC\x2ABE\x5\x3E2\x1F2\x2\x2ABD\x2ABC\x3\x2"+
		"\x2\x2\x2ABD\x2ABE\x3\x2\x2\x2\x2ABE\x2ABF\x3\x2\x2\x2\x2ABF\x2AC0\a\x346"+
		"\x2\x2\x2AC0\x2AC2\t\x89\x2\x2\x2AC1\x2AB2\x3\x2\x2\x2\x2AC1\x2AB3\x3"+
		"\x2\x2\x2\x2AC1\x2AB5\x3\x2\x2\x2\x2AC1\x2AB9\x3\x2\x2\x2\x2AC1\x2ABD"+
		"\x3\x2\x2\x2\x2AC2\x3E1\x3\x2\x2\x2\x2AC3\x2AC4\tp\x2\x2\x2AC4\x3E3\x3"+
		"\x2\x2\x2\x2AC5\x2AC9\x5\x3E6\x1F4\x2\x2AC6\x2AC9\a\x329\x2\x2\x2AC7\x2AC9"+
		"\a\x32B\x2\x2\x2AC8\x2AC5\x3\x2\x2\x2\x2AC8\x2AC6\x3\x2\x2\x2\x2AC8\x2AC7"+
		"\x3\x2\x2\x2\x2AC9\x3E5\x3\x2\x2\x2\x2ACA\x2ACB\t\x8A\x2\x2\x2ACB\x3E7"+
		"\x3\x2\x2\x2\x2ACC\x2ADC\a\x335\x2\x2\x2ACD\x2ADC\a\x336\x2\x2\x2ACE\x2ADC"+
		"\a\x337\x2\x2\x2ACF\x2AD0\a\x337\x2\x2\x2AD0\x2ADC\a\x335\x2\x2\x2AD1"+
		"\x2AD2\a\x336\x2\x2\x2AD2\x2ADC\a\x335\x2\x2\x2AD3\x2AD4\a\x337\x2\x2"+
		"\x2AD4\x2ADC\a\x336\x2\x2\x2AD5\x2AD6\a\x338\x2\x2\x2AD6\x2ADC\a\x335"+
		"\x2\x2\x2AD7\x2AD8\a\x338\x2\x2\x2AD8\x2ADC\a\x336\x2\x2\x2AD9\x2ADA\a"+
		"\x338\x2\x2\x2ADA\x2ADC\a\x337\x2\x2\x2ADB\x2ACC\x3\x2\x2\x2\x2ADB\x2ACD"+
		"\x3\x2\x2\x2\x2ADB\x2ACE\x3\x2\x2\x2\x2ADB\x2ACF\x3\x2\x2\x2\x2ADB\x2AD1"+
		"\x3\x2\x2\x2\x2ADB\x2AD3\x3\x2\x2\x2\x2ADB\x2AD5\x3\x2\x2\x2\x2ADB\x2AD7"+
		"\x3\x2\x2\x2\x2ADB\x2AD9\x3\x2\x2\x2\x2ADC\x3E9\x3\x2\x2\x2\x2ADD\x2ADE"+
		"\t\x8B\x2\x2\x2ADE\x3EB\x3\x2\x2\x2\x2ADF\x2AE1\a\x32D\x2\x2\x2AE0\x2AE2"+
		"\t\x8C\x2\x2\x2AE1\x2AE0\x3\x2\x2\x2\x2AE1\x2AE2\x3\x2\x2\x2\x2AE2\x3ED"+
		"\x3\x2\x2\x2\x605\x3F1\x3FA\x3FE\x404\x407\x40B\x40F\x418\x41F\x4C2\x4C9"+
		"\x4D7\x4DB\x4DE\x4E2\x4E6\x4EA\x4EF\x4F4\x4F6\x4FA\x4FD\x504\x507\x510"+
		"\x513\x51E\x521\x526\x52B\x52E\x533\x53B\x541\x543\x54A\x54E\x550\x555"+
		"\x55B\x55F\x56C\x572\x575\x57E\x581\x596\x59E\x5A3\x5A6\x5AB\x5AE\x5B3"+
		"\x5BB\x5C0\x5C3\x5C8\x5CE\x5D3\x5E4\x5E7\x5EA\x5ED\x5F2\x5FB\x60A\x61B"+
		"\x626\x62C\x63B\x64A\x653\x657\x65C\x662\x668\x66B\x670\x675\x67D\x687"+
		"\x69A\x6A2\x6AF\x6B1\x6BD\x6BF\x6C6\x6CF\x6D5\x6DE\x6ED\x6F7\x701\x729"+
		"\x740\x764\x776\x779\x77E\x781\x786\x789\x78E\x791\x796\x799\x7A1\x7A4"+
		"\x7AC\x7B9\x7C4\x7C9\x7CD\x7D3\x7EA\x7F6\x801\x806\x80A\x810\x812\x81F"+
		"\x836\x83D\x846\x84B\x84E\x853\x856\x85B\x860\x87C\x883\x888\x88F\x891"+
		"\x89C\x8A2\x8B1\x8BF\x8C2\x8C4\x8C9\x8CD\x8D0\x8D2\x8D8\x8DB\x8DD\x8E3"+
		"\x8E5\x8FB\x903\x90B\x90D\x90F\x918\x92D\x93A\x949\x94D\x970\x973\x978"+
		"\x98A\x98D\x992\x9AC\x9BA\x9BF\x9C7\x9CC\x9D3\x9E8\xA0D\xA12\xA25\xA31"+
		"\xA34\xA39\xA3C\xA42\xA51\xA56\xA5E\xA61\xA66\xA6B\xA6E\xA86\xA8D\xA92"+
		"\xA97\xA9C\xA9E\xAA5\xAB2\xAB8\xABD\xAC5\xAD5\xADC\xAE1\xAE6\xAE9\xAEF"+
		"\xAF5\xAFA\xAFF\xB04\xB07\xB0D\xB13\xB1E\xB21\xB2B\xB31\xB35\xB39\xB56"+
		"\xB63\xB69\xB78\xB82\xB85\xB99\xB9D\xBA1\xBA6\xBB5\xBBC\xBC5\xBCD\xBD0"+
		"\xBD5\xBDA\xBE2\xBE8\xBEC\xBF2\xBF7\xBFB\xC02\xC0A\xC12\xC1B\xC20\xC24"+
		"\xC27\xC2B\xC31\xC36\xC3E\xC46\xC4C\xC52\xC55\xC5A\xC5D\xC64\xC66\xC69"+
		"\xC6F\xC72\xC77\xC7A\xC7F\xC82\xC87\xC8A\xC8F\xC92\xC95\xC98\xC9F\xCA3"+
		"\xCAA\xCB1\xCB7\xCC4\xCC8\xCCD\xCD7\xCE0\xCE4\xCF1\xCF7\xD05\xD07\xD15"+
		"\xD1B\xD20\xD22\xD36\xD3A\xD42\xD4B\xD51\xD57\xD5F\xD61\xD6B\xD6F\xD72"+
		"\xD76\xD7B\xD81\xD84\xD88\xD90\xD92\xD95\xD9D\xDA5\xDAC\xDB3\xDB5\xDB7"+
		"\xDBC\xDC2\xDC5\xDC7\xDC9\xDCC\xDD1\xDD4\xDD9\xDE8\xDEF\xDF6\xDF8\xDFA"+
		"\xDFF\xE05\xE08\xE0A\xE0C\xE0F\xE14\xE17\xE1C\xE29\xE2E\xE37\xE3C\xE42"+
		"\xE46\xE4A\xE5B\xE5D\xE67\xE6C\xE6E\xE72\xE78\xE80\xE85\xE88\xE90\xE93"+
		"\xE98\xE9D\xEA2\xEA7\xEAC\xEB1\xEB5\xEBA\xEC5\xECA\xECD\xED0\xED5\xED8"+
		"\xEDD\xEE0\xEE5\xEE8\xEED\xEF0\xEF5\xEF8\xEFD\xF03\xF08\xF0B\xF10\xF17"+
		"\xF19\xF1F\xF28\xF2D\xF2F\xF3B\xF41\xF4D\xF50\xF55\xF57\xF61\xF66\xF68"+
		"\xF6C\xF72\xF84\xF86\xF95\xFA7\xFAF\xFB9\xFC9\xFDE\xFE9\xFEF\xFF8\x1001"+
		"\x1007\x1010\x1015\x1018\x101D\x1020\x1025\x1028\x1030\x1036\x103A\x1041"+
		"\x1047\x104B\x104E\x1050\x1053\x1058\x105B\x1060\x1063\x1068\x106B\x1070"+
		"\x1073\x1082\x108D\x1099\x10A0\x10A7\x10AB\x10B0\x10B3\x10B8\x10BB\x10C0"+
		"\x10C3\x10CC\x10D3\x10E2\x10E6\x10EB\x10F6\x1100\x110C\x1112\x1114\x111C"+
		"\x1125\x112A\x1135\x1138\x113C\x1144\x1148\x114C\x1154\x1159\x1161\x1166"+
		"\x116A\x116C\x1171\x117A\x117D\x1182\x1189\x118F\x1191\x1196\x119C\x11A2"+
		"\x11A7\x11AD\x11B4\x11B9\x11BE\x11C3\x11C6\x11CA\x11CE\x11D2\x11D6\x11DB"+
		"\x11DF\x11E3\x11ED\x11F3\x11FA\x11FD\x1203\x1209\x120E\x1210\x1216\x1218"+
		"\x121D\x1223\x1229\x122E\x1230\x1234\x1238\x123B\x1249\x124E\x1252\x125F"+
		"\x1262\x1264\x126C\x1276\x127C\x1283\x1286\x128C\x1292\x1297\x1299\x129F"+
		"\x12A1\x12A6\x12AC\x12B2\x12B8\x12BD\x12BF\x12C3\x12C7\x12CA\x12D8\x12DD"+
		"\x12E1\x12EE\x12F1\x12F3\x12FB\x1306\x130F\x1318\x1323\x132C\x1335\x1341"+
		"\x1345\x134A\x134C\x134E\x1353\x1357\x135C\x135E\x1360\x136E\x1373\x1389"+
		"\x139F\x13A4\x13B1\x13B9\x13CD\x13D0\x13D6\x13DE\x13E5\x13EA\x13EE\x13F2"+
		"\x13F5\x13FC\x140E\x1410\x1424\x142C\x1431\x1443\x1452\x1454\x145B\x1462"+
		"\x1467\x146C\x1472\x1477\x1479\x1480\x1486\x148C\x148F\x1495\x149F\x14A2"+
		"\x14A9\x14AC\x14B1\x14B3\x14BB\x14BF\x14C5\x14CA\x14CC\x14CF\x14D6\x14DC"+
		"\x14E3\x14E6\x14EC\x14F1\x14F3\x14F6\x14FE\x1504\x150B\x150E\x1514\x1519"+
		"\x151B\x1523\x152B\x1531\x1536\x1538\x1542\x1547\x1551\x1557\x1563\x1565"+
		"\x156C\x1572\x1578\x157E\x1583\x1585\x158C\x1594\x159A\x15A8\x15AA\x15AD"+
		"\x15B2\x15B4\x15C0\x15C6\x15D4\x15D6\x15D9\x15DE\x15E1\x15E6\x15E8\x15F1"+
		"\x15F8\x15FE\x1601\x1606\x160D\x160F\x1615\x1617\x161F\x1621\x1627\x1629"+
		"\x162F\x1631\x1638\x163B\x163D\x1640\x1644\x1646\x164F\x1655\x1659\x1661"+
		"\x1668\x166E\x1670\x167B\x1680\x1686\x168A\x1693\x169B\x16A7\x16AA\x16B2"+
		"\x16B4\x16B7\x16BB\x16BE\x16C8\x16CE\x16D6\x16DA\x16DE\x16E7\x16ED\x16F1"+
		"\x16F4\x16FF\x1703\x170A\x170F\x1712\x171A\x171E\x1721\x1725\x1728\x172C"+
		"\x1733\x1737\x1739\x173B\x173E\x1741\x1744\x174A\x174D\x1755\x1757\x175A"+
		"\x175E\x1761\x1767\x176A\x176E\x1771\x1774\x177B\x177F\x1782\x178C\x178F"+
		"\x1793\x1796\x1799\x179C\x17A0\x17A3\x17AB\x17AD\x17B1\x17B4\x17BC\x17C0"+
		"\x17C4\x17CB\x17CF\x17D1\x17D3\x17D6\x17D9\x17DC\x17E3\x17EB\x17F1\x17F7"+
		"\x17FF\x1804\x1807\x180C\x1811\x1814\x181C\x1820\x1827\x182A\x1833\x1836"+
		"\x183A\x1842\x1845\x1849\x184C\x185A\x185E\x1861\x1865\x1868\x186D\x1870"+
		"\x1876\x1879\x1880\x1884\x1886\x188E\x1891\x1895\x189A\x18A5\x18AC\x18BB"+
		"\x18C9\x18CD\x18D2\x18D5\x18E1\x18E4\x18EA\x18F1\x18F6\x18FB\x1902\x1909"+
		"\x190C\x1914\x191C\x191F\x1927\x1932\x1935\x193F\x1946\x194B\x194E\x1958"+
		"\x195B\x195E\x1966\x1971\x1974\x1977\x197D\x1982\x1986\x1990\x1993\x1996"+
		"\x199C\x19A2\x19AA\x19AD\x19B1\x19B4\x19B8\x19BB\x19C3\x19D1\x19E1\x19E5"+
		"\x19EB\x19ED\x19F0\x19F4\x19F9\x19FE\x1A06\x1A0B\x1A10\x1A16\x1A1B\x1A1E"+
		"\x1A27\x1A31\x1A34\x1A39\x1A3C\x1A49\x1A51\x1A54\x1A5B\x1A5E\x1A8C\x1A90"+
		"\x1A93\x1A99\x1AA5\x1AA7\x1AAA\x1ABF\x1ACD\x1AD8\x1AE0\x1AEB\x1AF0\x1AF3"+
		"\x1AFB\x1B05\x1B0C\x1B13\x1B15\x1B21\x1B2C\x1B30\x1B35\x1B38\x1B3A\x1B3D"+
		"\x1B49\x1B4B\x1B4D\x1B50\x1B55\x1B58\x1B5D\x1B67\x1B6B\x1B70\x1B73\x1B75"+
		"\x1B78\x1B84\x1B86\x1B88\x1B8B\x1B91\x1B9B\x1BAF\x1BB5\x1BCE\x1BD0\x1BEA"+
		"\x1BF0\x1BFB\x1C03\x1C06\x1C14\x1C1C\x1C25\x1C3C\x1C49\x1C4F\x1C56\x1C5E"+
		"\x1C61\x1C64\x1C6D\x1C77\x1C7E\x1C82\x1C86\x1C8C\x1C93\x1C97\x1C9D\x1CA4"+
		"\x1CAB\x1CAE\x1CB4\x1CBB\x1CBF\x1CC4\x1CC9\x1CCE\x1CD6\x1CDA\x1CE0\x1CE7"+
		"\x1CEB\x1CF4\x1CFC\x1D02\x1D08\x1D19\x1D1D\x1D25\x1D29\x1D31\x1D35\x1D3A"+
		"\x1D3E\x1D45\x1D4B\x1D4D\x1D51\x1D55\x1D59\x1D5C\x1D60\x1D66\x1D6A\x1D6C"+
		"\x1D73\x1D7A\x1D7D\x1D80\x1D87\x1D8C\x1D91\x1D95\x1D9B\x1D9F\x1DA1\x1DA6"+
		"\x1DAB\x1DAF\x1DB4\x1DBA\x1DBE\x1DC2\x1DC4\x1DC8\x1DCC\x1DD0\x1DD4\x1DDA"+
		"\x1DDD\x1DE3\x1DE7\x1DEB\x1DF1\x1DF7\x1DF9\x1DFC\x1E00\x1E04\x1E08\x1E0E"+
		"\x1E11\x1E17\x1E1D\x1E20\x1E26\x1E29\x1E2F\x1E32\x1E36\x1E3A\x1E3E\x1E43"+
		"\x1E46\x1E4A\x1E4E\x1E5F\x1E63\x1E65\x1E68\x1E6F\x1E74\x1E78\x1E7E\x1E82"+
		"\x1E84\x1E89\x1E8E\x1E92\x1E97\x1E9D\x1EA1\x1EA5\x1EA7\x1EAB\x1EAF\x1EB3"+
		"\x1EB7\x1EBD\x1EC0\x1EC6\x1ECA\x1ECE\x1ED4\x1EDA\x1EDC\x1EDF\x1EE3\x1EE7"+
		"\x1EEB\x1EF1\x1EF4\x1EFA\x1F00\x1F03\x1F09\x1F0C\x1F12\x1F15\x1F19\x1F1D"+
		"\x1F21\x1F26\x1F29\x1F2D\x1F31\x1F37\x1F3A\x1F3E\x1F4F\x1F51\x1F53\x1F56"+
		"\x1F64\x1F6A\x1F72\x1F79\x1F7B\x1F7E\x1F9F\x1FA3\x1FA7\x1FAE\x1FB9\x1FBD"+
		"\x1FC4\x1FC7\x1FCB\x1FCE\x1FD6\x1FDB\x1FE0\x1FE3\x1FE5\x1FE9\x1FED\x1FF0"+
		"\x1FF4\x2009\x200E\x2015\x201C\x2020\x2023\x2027\x202C\x2033\x2035\x2039"+
		"\x2041\x2047\x204B\x204E\x2057\x205A\x2060\x2067\x206C\x2074\x2079\x2085"+
		"\x2087\x2092\x2099\x20A3\x20BA\x20C7\x20D7\x20DC\x20E3\x20E6\x20EA\x20EC"+
		"\x20FD\x210C\x2114\x211D\x2125\x212E\x2139\x213D\x213F\x2141\x2147\x214C"+
		"\x2153\x2160\x2162\x2164\x2167\x216A\x2171\x2174\x217A\x217F\x2181\x2184"+
		"\x218A\x2192\x2194\x2197\x219B\x219E\x21A8\x21AB\x21AF\x21B2\x21B8\x21BB"+
		"\x21BD\x21C1\x21C6\x21CA\x21CF\x21D4\x21DC\x21E0\x21E3\x21E8\x21F0\x21F5"+
		"\x21FF\x220A\x220F\x2215\x2219\x221E\x2225\x222B\x222F\x2232\x2236\x223A"+
		"\x2242\x2247\x2249\x224C\x2251\x225A\x225E\x2263\x2266\x2269\x226F\x2277"+
		"\x227F\x2282\x2285\x2289\x228E\x2291\x2297\x229B\x22A9\x22AF\x22B7\x22BD"+
		"\x22BF\x22C2\x22D1\x22D4\x22D7\x22D9\x22E4\x22EF\x22F8\x2302\x230C\x230E"+
		"\x2310\x2313\x2316\x2321\x2323\x2325\x2328\x232D\x2338\x2341\x2344\x2347"+
		"\x2350\x2353\x2356\x235D\x2360\x236F\x2372\x2379\x2389\x238D\x2397\x23AA"+
		"\x23AC\x23B3\x23BA\x23BE\x23C6\x23CA\x23CE\x23D4\x23DE\x23E8\x23EF\x23F6"+
		"\x23FF\x2406\x240D\x2416\x241A\x2424\x242B\x2433\x243B\x243F\x2455\x245E"+
		"\x2464\x246A\x2470\x247A\x2481\x2486\x248B\x248F\x2496\x249A\x249D\x24A2"+
		"\x24A6\x24AA\x24AF\x24B6\x24B9\x24BD\x24C2\x24C6\x24CF\x24D6\x24DF\x24EB"+
		"\x24ED\x24F7\x24FA\x24FF\x2508\x250A\x250C\x2511\x2519\x251E\x2526\x252B"+
		"\x2531\x253B\x253D\x2541\x2545\x2547\x2550\x2552\x2556\x2561\x2583\x2593"+
		"\x259A\x259C\x25A3\x25AC\x25B4\x25BB\x25C2\x25C5\x25C8\x25CF\x25D6\x25D9"+
		"\x25DB\x25E3\x25E5\x25EB\x25F2\x25FA\x2600\x2605\x2608\x260B\x260F\x2614"+
		"\x2616\x261E\x2620\x2624\x262B\x262D\x2634\x2636\x263A\x2644\x264D\x2655"+
		"\x265C\x2662\x266D\x2671\x2673\x2676\x268E\x26A7\x26AC\x26C0\x26C4\x26C8"+
		"\x26D8\x26EC\x2726\x272A\x275A\x276A\x2772\x2777\x277A\x2781\x2787\x2794"+
		"\x27A3\x27AE\x27B3\x27BD\x27C6\x27E8\x27ED\x27F3\x27F6\x27FB\x2800\x2809"+
		"\x280E\x2814\x281D\x2827\x282A\x2838\x283E\x2846\x284A\x2852\x2859\x2866"+
		"\x286E\x287B\x2882\x2888\x288C\x289D\x28AC\x28AE\x28B3\x28B6\x28BF\x28C2"+
		"\x28C5\x28D2\x28D6\x28DE\x28E4\x28ED\x28F6\x28FC\x290B\x2913\x2917\x291D"+
		"\x2920\x2924\x292B\x2933\x2936\x293C\x2942\x2944\x294A\x294D\x294F\x2955"+
		"\x2957\x2962\x2969\x297E\x298B\x2992\x299A\x299E\x29A1\x29A9\x29AD\x29B0"+
		"\x29B4\x29B9\x29BF\x29C5\x29CB\x29D1\x29D7\x29DD\x29E3\x29E6\x29EA\x29EF"+
		"\x29F3\x29FB\x2A00\x2A07\x2A10\x2A12\x2A19\x2A25\x2A2A\x2A35\x2A3A\x2A41"+
		"\x2A43\x2A49\x2A4B\x2A50\x2A52\x2A55\x2A59\x2A5D\x2A63\x2A6C\x2A6F\x2A71"+
		"\x2A7A\x2A83\x2A8C\x2A91\x2A94\x2A98\x2A9E\x2AA1\x2AA5\x2AAB\x2AB0\x2AB5"+
		"\x2AB9\x2ABD\x2AC1\x2AC8\x2ADB\x2AE1";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace LibTSQL
